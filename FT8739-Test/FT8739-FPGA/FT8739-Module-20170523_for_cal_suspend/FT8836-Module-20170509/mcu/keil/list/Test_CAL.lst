C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 1   


C251 COMPILER V5.4.0.1, COMPILATION OF MODULE Test_CAL
OBJECT MODULE PLACED IN .\obj\Test_CAL.obj
COMPILER INVOKED BY: D:\software\Keil\C251\BIN\C251.EXE ..\..\src\source\task\Test_CAL.c XSMALL ROM(HUGE) OPTIMIZE(9,SPE
                    -ED) BROWSE INCDIR(..\..\src\include;..\..\src\include\Debug;..\..\src\include\Drv;..\..\src\include\task;..\..\src\inclu
                    -de\config) STRING(FAR) DEFINE(_FT8836_) DEBUG CODE LISTINCLUDE SYMBOLS PRINT(.\list\Test_CAL.lst) PREPRINT(.\list\Test_C
                    -AL.i) OBJECT(.\obj\Test_CAL.obj) 

stmt  level    source

    1          /*******************************************************************************
    2           * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3           *
    4           * File Name: Test_CAL.c
    5           *
    6           *    Author: xinkunpeng
    7           *
    8           *   Created: 2014-05-07
    9           *
   10           *  Abstract:
   11           *
   12           * Reference:
   13           *
   14           *   Version:
   15           *
   16           *******************************************************************************/
   17          
   18          /*******************************************************************************
   19           * 1.Included header files
   20           *******************************************************************************/
   21          #include <stdlib.h>
    1       =1 /*--------------------------------------------------------------------------
    2       =1 STDLIB.H
    3       =1 
    4       =1 Standard functions for C251 Version 3.
    5       =1 Copyright (c) 1995-2001 Keil Elektronik GmbH and Keil Software, Inc.
    6       =1 All rights reserved.
    7       =1 --------------------------------------------------------------------------*/
    8       =1 
    9       =1 #pragma SAVE
   10       =1 #pragma PARM251
   11       =1 
   12       =1 #ifndef _SIZE_T
   13       =1  #define _SIZE_T
   14       =1  typedef unsigned int size_t;
   15       =1 #endif
   16       =1 
   17       =1 #ifndef NULL
   18       =1  #define NULL ((void *) 0L)
   19       =1 #endif
   20       =1 
   21       =1 #ifndef _WCHAR_T_DEFINED_
   22       =1 #define _WCHAR_T_DEFINED_
   23       =1 typedef char wchar_t;
   24       =1 #endif
   25       =1 
   26       =1 #ifndef RAND_MAX
   27       =1  #define RAND_MAX  32767u
   28       =1 #endif
   29       =1 
   30       =1 #if __C251__ >= 200
   31       =1 extern int     abs  (int   val) reentrant;
   32       =1 extern long   labs  (long  val) reentrant;
   33       =1 
   34       =1 extern double atof (char *s1) reentrant;
   35       =1 extern long   atol (char *s1) reentrant;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 2   

   36       =1 extern int    atoi (char *s1) reentrant;
   37       =1 extern int    rand ()         reentrant;
   38       =1 extern void   srand (int)     reentrant;
   39       =1 
   40       =1 #pragma SAVE
   41       =1 #pragma functions (static)
   42       =1 #if (__MODEL__ == 3 || __MODEL__ == 4)   /* TINY & XTINY */
            =1 extern void near  *malloc        (unsigned int size);
            =1 extern void        free          (void near *p);
            =1 extern void        init_mempool  (void near *p, unsigned int size);
            =1 extern void near  *realloc       (void near *p, unsigned int size);
            =1 extern void near  *calloc        (unsigned int size, unsigned int len);
            =1 #else
   49       =1 extern void far   *malloc        (unsigned int size);
   50       =1 extern void        free          (void far *p);
   51       =1 extern void        init_mempool  (void far *p, unsigned int size);
   52       =1 extern void far   *realloc       (void far *p, unsigned int size);
   53       =1 extern void far   *calloc        (unsigned int size, unsigned int len);
   54       =1 #endif
   55       =1 
   56       =1 extern void far   *fmalloc       (unsigned int size);
   57       =1 extern void        ffree         (void far *p);
   58       =1 extern void        finit_mempool (void far *p, unsigned int size);
   59       =1 extern void far   *frealloc      (void far *p, unsigned int size);
   60       =1 extern void far   *fcalloc       (unsigned int size, unsigned int len);
   61       =1 
   62       =1 extern void xdata *xmalloc       (unsigned int size);
   63       =1 extern void        xfree         (void xdata *p);
   64       =1 extern void        xinit_mempool (void xdata *p, unsigned int size);
   65       =1 extern void xdata *xrealloc      (void xdata *p, unsigned int size);
   66       =1 extern void xdata *xcalloc       (unsigned int size, unsigned int len);
   67       =1 #pragma RESTORE
   68       =1 #else
            =1 extern int     abs  (int   val);
            =1 extern long   labs  (long  val);
            =1 
            =1 extern float  atof (char *s1);
            =1 extern long   atol (char *s1);
            =1 extern int    atoi (char *s1);
            =1 extern int    rand ();
            =1 extern void   srand (int);
            =1 
            =1 extern void *malloc      (unsigned int size);
            =1 extern void free         (void xdata *p);
            =1 extern void init_mempool (void xdata *p, unsigned int size);
            =1 extern void *realloc     (void xdata *p, unsigned int size);
            =1 extern void *calloc      (unsigned int size, unsigned int len);
            =1 #endif
   84       =1 
   85       =1 #pragma RESTORE
   22          #include <math.h>
    1       =1 /*--------------------------------------------------------------------------
    2       =1 MATH.H
    3       =1 
    4       =1 Prototypes for mathematic functions for C251 Version 4.
    5       =1 Copyright (c) 1995-2004 Keil Elektronik GmbH and Keil Software, Inc.
    6       =1 All rights reserved.
    7       =1 --------------------------------------------------------------------------*/
    8       =1 
    9       =1 #pragma SAVE
   10       =1 #pragma PARM251
   11       =1 
   12       =1 #if __C251__ >= 200
   13       =1 extern char   cabs  (char   val) reentrant;
   14       =1 extern int     abs  (int    val) reentrant;
   15       =1 extern long   labs  (long   val) reentrant;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 3   

   16       =1 extern double fabs  (double val) reentrant;
   17       =1 extern double sqrt  (double val) reentrant;
   18       =1 extern double exp   (double val) reentrant;
   19       =1 extern double log   (double val) reentrant;
   20       =1 extern double log10 (double val) reentrant;
   21       =1 extern double sin   (double val) reentrant;
   22       =1 extern double cos   (double val) reentrant;
   23       =1 extern double tan   (double val) reentrant;
   24       =1 extern double asin  (double val) reentrant;
   25       =1 extern double acos  (double val) reentrant;
   26       =1 extern double atan  (double val) reentrant;
   27       =1 extern double sinh  (double val) reentrant;
   28       =1 extern double cosh  (double val) reentrant;
   29       =1 extern double tanh  (double val) reentrant;
   30       =1 extern double atan2 (double y, double x) reentrant;
   31       =1 extern double ceil  (double val) reentrant;
   32       =1 extern double floor (double val) reentrant;
   33       =1 extern double modf  (double val, double *n) reentrant;
   34       =1 extern double pow   (double x, double y) reentrant;
   35       =1 extern double fmod  (double x, double y) reentrant;
   36       =1 
   37       =1 extern unsigned char _chkfloat_  (float x)  reentrant;
   38       =1 extern unsigned char _chkdouble_ (double x) reentrant;
   39       =1 #else
            =1 
            =1 extern char  cabs  (char  val);
            =1 extern int    abs  (int   val);
            =1 extern long  labs  (long  val);
            =1 extern float fabs  (float val);
            =1 extern float sqrt  (float val);
            =1 extern float exp   (float val);
            =1 extern float log   (float val);
            =1 extern float log10 (float val);
            =1 extern float sin   (float val);
            =1 extern float cos   (float val);
            =1 extern float tan   (float val);
            =1 extern float asin  (float val);
            =1 extern float acos  (float val);
            =1 extern float atan  (float val);
            =1 extern float sinh  (float val);
            =1 extern float cosh  (float val);
            =1 extern float tanh  (float val);
            =1 extern float atan2 (float y, float x);
            =1 extern float ceil  (float val);
            =1 extern float floor (float val);
            =1 extern float modf  (float val, float *n);
            =1 extern float pow   (float x, float y);
            =1 #endif
   64       =1 
   65       =1 #pragma RESTORE
   23          #include "Test_CAL.h"
    1       =1 /*******************************************************************************
    2       =1 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =1 *
    4       =1 * File Name: Test_CAL.h
    5       =1 *
    6       =1 *    Author: xinkunpeng
    7       =1 *
    8       =1 *   Created: 2014-05-07
    9       =1 *
   10       =1 *  Abstract:
   11       =1 *
   12       =1 * Reference:
   13       =1 *
   14       =1 * Version:
   15       =1 * 0.1:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 4   

   16       =1 *
   17       =1 *******************************************************************************/
   18       =1 #ifndef _TEST_CAL_H_
   19       =1 #define _TEST_CAL_H_
   20       =1 
   21       =1 
   22       =1 /*******************************************************************************
   23       =1 * 1.Included files
   24       =1 *******************************************************************************/
   25       =1 #include "CfgGlobal.h"
    1       =2 /*******************************************************************************
    2       =2 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =2 *
    4       =2 * File Name: CfgGlobal.h
    5       =2 *
    6       =2 *    Author: xinkunpeng
    7       =2 *
    8       =2 *   Created: 2014-04-18
    9       =2 *
   10       =2 *  Abstract:
   11       =2 *
   12       =2 * Reference: Transplant from FT5422 by xinkunpeng
   13       =2 *
   14       =2 *   Version: 0.2
   15       =2 *
   16       =2 *******************************************************************************/
   17       =2 #ifndef GLOBAL_CONFIG_H
   18       =2 #define GLOBAL_CONFIG_H
   19       =2 
   20       =2 /*******************************************************************************
   21       =2 * 2.Global constant and macro definitions using #define
   22       =2 *******************************************************************************/
   23       =2 
   24       =2 #define _SPI_FLASH_EN                   1      // spi flash--±ØÐë¿ª
   25       =2 #define _LCD_RELOAD_EN                  1      // APP´ÓFlashµ¼ÈëLCD_config
   26       =2 
   27       =2 #define TEST_MODE                       1
   28       =2 
   29       =2 #if TEST_MODE
   30       =2 #define _TEST_SFR_EN                    0       /* test the SFR read and write */
   31       =2 #define _TEST_DRAM_EN                   0       /* test dram read and write */
   32       =2 #define _TEST_PROM_EN                   0       /* test prom read only */   
   33       =2 #define _TEST_ARAM_EN                   0       /* test asmram read and write */
   34       =2 #define _TEST_XSI_REG_EN                0       /* XSI¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   35       =2 #define _TEST_SPI0_REG_EN               0       /* SPI0¼Ä´æÆ÷¶ÁÐ´²âÊÔ */ 
   36       =2 #define _TEST_XBUS_REG_EN               0       /* XBUS¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   37       =2 #define _TEST_ASM_REG_EN                0       /* ASM¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   38       =2 #define _TEST_CAL_REG_EN                0       /* CAL¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   39       =2 #define _TEST_AFE_REG_EN                0       /* AFE¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   40       =2 #define _TEST_LCD_REG_EN                0       /* LCD¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
   41       =2 #define _TEST_SPI_EN                    0       /* test SPI read  */
   42       =2 #define _TEST_LED_EN                    0       /* test the led */ 
   43       =2 #define _TEST_I2C_EN                    0       /* test I2C read and clk */
   44       =2 #define _TEST_AFE_RAM_EN                0       /* test the AFE ram buffer,²âÊÔÌ«ºÄÊ±¼ä×îºÃµ¥¶À½øÐÐ²âÊÔ *
             -/
   45       =2 #else
            =2 #define _TEST_SFR_EN                    1
            =2 #define _TEST_DRAM_EN                   1
            =2 #define _TEST_PROM_EN                   1
            =2 #define _TEST_ARAM_EN                   1
            =2 #define _TEST_SPI0_REG_EN               1
            =2 #define _TEST_XSI_REG_EN                1
            =2 #define _TEST_ASM_REG_EN                1      
            =2 #define _TEST_XBUS_REG_EN               1
            =2 #define _TEST_CAL_REG_EN                1
            =2 #define _TEST_AFE_REG_EN                1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 5   

            =2 #define _TEST_LCD_REG_EN                0
            =2 #define _TEST_SPI_EN                    1
            =2 #define _TEST_LED_EN                    1
            =2 #define _TEST_I2C_EN                    1
            =2 #define _TEST_AFE_RAM_EN                1
            =2 #endif
   62       =2 #define _TEST_UART_EN                   0
   63       =2 #define _TEST_SOFT_RST_EN               0     /* Èí¼þ¸´Î»²âÊÔ*/
   64       =2 #define _TEST_WDT_EN                    0     /* WDTµ¥¶À½øÐÐ²âÊÔ */
   65       =2 #define _TEST_RTC_EN                    0     /* ºÍCNTÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
   66       =2 #define _TEST_CNT_EN                    0     /* ºÍRTCÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
   67       =2 #define _TEST_GPIO_EN                   0     /* gpioÐèÒªÅÐ¶ÏÆäinput outputÒÔ¼°¸ßµÍµçÆ½ÇÐ»»µÄ×´Ì¬£¬Ðè·Ö±ð
             -µ¥¶À½øÐÐ²âÊÔ */
   68       =2 #define _TEST_TIMER_EN                  0     /* Timerµ¥¶À½øÐÐ²âÊÔ */ 
   69       =2 #define _TEST_GPIO_WK_EN                0     /* int0ÖÐ¶Ï»½ÐÑÔ´¹ý¶à,µ¥¶À½øÐÐ²âÊÔ */
   70       =2 #define _TEST_I2C_WK_EN                 0     /* ºÍI2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */ 
   71       =2 #define _TEST_INT_NEST_EN               0     /* ÖÐ¶ÏÇ¶Ì×²âÊÔ,µ¥¶À½øÐÐ²âÊÔ  */
   72       =2 #define _TEST_XSI_EN                    0     /* XSI¶ÁÐ´¿½»ú²âÊÔ£¬µ¥¶À²âÊÔ */
   73       =2 #define _TEST_CAL_EN                    1     /* CALÄ£¿é,²âÊÔÄ£¿é½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
   74       =2 #define _TEST_AFE_EN                    0     /* AFEÄ£¿é,²âÊÔÄÚÈÝ½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
   75       =2 #define _TEST_ROMBOOT_EN                0     /* romboot testÊ¹ÓÃËùÐèÏà¹Ø²âÊÔbin */
   76       =2 #define _TEST_XBUS_EN                   0     /* XBUS¶ÁÐ´²âÊÔ*/
   77       =2 #define _TEST_ROMECC_EN                 0     /* ¼ÆËãeccºÍprom membistµÄ½á¹û±È½Ï*/
   78       =2 #define _TEST_SPI0_EN                   0     /* test SPI0   */
   79       =2 #define _TEST_SPI0_DMA_EN               0     /* test SPI0_dma */
   80       =2 #define _TEST_SPI0_WK_EN                0     /* ºÍSPI0,I2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */   
   81       =2 #define _TEST_DEBUGOUT_EN               0     /* ²âÊÔÄÚ²¿ÐÅºÅ£¬µ¥¶À½øÐÐ²âÊÔ*/
   82       =2 /*******************************************************************************
   83       =2 * 1.Included files
   84       =2 *******************************************************************************/
   85       =2 #include "Typedef.h"
    1       =3 /*******************************************************************************
    2       =3  * Focaltech Systems (R)
    3       =3  * All Rights Reserved
    4       =3  *
    5       =3  * Project:     FT8836
    6       =3  * File:        DataType.h
    7       =3  *
    8       =3  * VERSION        DATE              AUTHOR
    9       =3  * V0.2           2014-04-18        xinkunpeng
   10       =3  *******************************************************************************/
   11       =3 #ifndef __DATATYPE_H__
   12       =3 #define __DATATYPE_H__
   13       =3 
   14       =3 /*******************************************************************************
   15       =3 * 1.Included files
   16       =3 *******************************************************************************/
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * 2.Global constant and macro definitions using #define
   20       =3 *******************************************************************************/
   21       =3 /* This is the header file CONV51.H */
   22       =3 #ifdef __C251__       // __C251__ is a define of C251
   23       =3 #define DRAM data     // data can be mapped directly to the 251 data space
   24       =3 #define IRAM near     // idata uses MOV Ri, use 251 near instead
   25       =3 #define XRAM near     // xdata uses MOVX or MOV @DR56, use 251 near instead
   26       =3 #define PRAM near     // pdata uses MOVX Ri, use 251 near instead
   27       =3 #define CROM code     // code uses MOVC A, use 251 const instead
   28       =3 #define ECODE ecode
   29       =3 #else
            =3 #define DRAM data     // if you compile with C51 the memory spaces are
            =3 #define IRAM idata    // mapped to the previous definitions
            =3 #define XRAM xdata
            =3 #define PRAM pdata
            =3 #define CROM code
            =3 #endif
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 6   

   36       =3 
   37       =3 #define SFR         sfr
   38       =3 #define SBIT        sbit
   39       =3 
   40       =3 #define VALID       1
   41       =3 #define INVALID     0
   42       =3 
   43       =3 #define TRUE        1
   44       =3 #define FALSE       0
   45       =3 
   46       =3 #define ENABLE      1
   47       =3 #define DISABLE     0
   48       =3 
   49       =3 #define ON  1
   50       =3 #define OFF 0
   51       =3 
   52       =3 
   53       =3 #define BITn(n)     ((UINT16)1<<(n))
   54       =3 
   55       =3 /*******************************************************************************
   56       =3 * 3.Global structures, unions and enumerations using typedef
   57       =3 *******************************************************************************/
   58       =3 /*Data Types(Compiler Specific) in C251*/
   59       =3 typedef bit  BOOLEAN;
   60       =3 typedef unsigned char  UINT8;
   61       =3 typedef signed   char  SINT8;
   62       =3 typedef unsigned short UINT16;
   63       =3 typedef signed   short SINT16;
   64       =3 typedef unsigned long  UINT32;
   65       =3 typedef signed   long  SINT32;
   66       =3 typedef float          FP32;
   67       =3 typedef double         FP64;
   68       =3 /*******************************************************************************
   69       =3 * 4.Global variable extern declarations
   70       =3 *******************************************************************************/
   71       =3 
   72       =3 /*******************************************************************************
   73       =3 * 5.Global function prototypes
   74       =3 *******************************************************************************/
   75       =3 
   76       =3 #endif/* DATATYPE_H */
   77       =3 
   86       =2 #include "FT8836.h"
    1       =3 /*******************************************************************************
    2       =3  * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3  *
    4       =3  * File Name: FT8836.h
    5       =3  *
    6       =3  *    Author: 
    7       =3  *
    8       =3  *   Created: 2016-07-11
    9       =3  *
   10       =3  *  Abstract: 1. In this file, sfrs(special function registers) and their bits
   11       =3  *            are defined for chip ft8626 based on platform C251.
   12       =3  *
   13       =3  *            2. Please note that there are some differences in the way the
   14       =3  *            instructions address bits between the two architectures MCS251 and
   15       =3  *            MCS51. The MCS251 does not have bit addresses as MCS51 does. A bit
   16       =3  *            can be addressed by name or by its location within a certain
   17       =3  *            register, but not by a bit address.
   18       =3  *
   19       =3  *            Table: Addressing Modes for Bit Instructions
   20       =3  *            -------------------------------------------------------------------
   21       =3  *            Architecture Variants Bit Address Memory/SFR Address Comments
   22       =3  *            -------------------------------------------------------------------
   23       =3  *            MCS251       Memory -- NA ------- 20H.0-7FH.7        does not have
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 7   

   24       =3  *            (bit)        SFR ----- NA ------- All defined SFRs   bit addresses
   25       =3  *            -------------------------------------------------------------------
   26       =3  *            MCS 51       Memory -- 00H-7FH -- 20H.0-7FH.7        not all SFRs
   27       =3  *            (bit51)      SFR ----- 80H-F8H -- XXH.0-XXH.7, where have bit
   28       =3  *                                              XX = 80,88,90,98,  addresses.
   29       =3  *                                              ..., F0, F8.
   30       =3  *            -------------------------------------------------------------------
   31       =3  *
   32       =3  *            3. This file is only used by library and driver of project ft5412.
   33       =3  *
   34       =3  * Reference: 1. Intel 8xc251sx User's Manual (8xc251sx_um.pdf)
   35       =3  *            2. Keil C251 help document
   36       =3  *
   37       =3  *******************************************************************************/
   38       =3 #ifndef __FT8836_H__
   39       =3 #define __FT8836_H__
   40       =3 
   41       =3 /* Conditional Compiler Options */
   42       =3 
   43       =3 /* Conditional Compiler Options */
   44       =3 /*******************************************************************************
   45       =3  * 1.Included files
   46       =3  *******************************************************************************/
   47       =3 
   48       =3 /*******************************************************************************
   49       =3  * 2.Global constant and macro definitions using #define
   50       =3  *******************************************************************************/
   51       =3 /******************************************************************************/
   52       =3 /* byte Registers */
   53       =3 
   54       =3 /*80-87*/
   55       =3 SFR P0BUF           = 0x80;   /*PoBuf*/
   56       =3 SFR SP              = 0x81; 
   57       =3 SFR DPL             = 0x82;
   58       =3 SFR DPH             = 0x83;
   59       =3 SFR DPXL            = 0x84;
   60       =3 SFR PCON            = 0x87;
   61       =3 
   62       =3 /*88-8F*/
   63       =3 SFR TCON            = 0x88;
   64       =3 SFR TMOD            = 0x89;
   65       =3 SFR TL0             = 0x8A;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼äµÍ8Î»£¬¼ÆÊýÊ±¼äÎªTL0[7:0]X4us,×î´óÖµ²»ÄÜ³¬¹ý1msÒ²¾ÍÊÇËµ×î´
             -óÖµÎª8¡¯hF9,´óÓÚ´ËÖµÊ±½«Ç¿ÖÆÎª8¡¯hF9. */
   66       =3 SFR TL1             = 0x8B;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼äµÍ8Î»£¬¼ÆÊýÊ±¼äÎªTL1[7:0]X4us */
   67       =3 SFR TH0             = 0x8C;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼ä¸ß8Î»£¬¼ÆÊýÊ±¼äÎªTH0[7:0]X1ms,TH0[7]±ØÐëÎª0£¬ËùÒÔ×î³¤Ê±¼äÎ
             -ª127ms */
   68       =3 SFR TH1             = 0x8D;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼ä¸ß8Î»£¬¼ÆÊýÊ±¼äÎªTH1[7:0]X1ms,TH1[7]±ØÐëÎª0£¬ËùÒÔ×î³¤Ê±¼äÎ
             -ª127ms */
   69       =3 
   70       =3 /*90-97*/
   71       =3 SFR I2CCON          = 0x90;
   72       =3 SFR I2CBUF          = 0x91;
   73       =3 SFR I2CADDR         = 0x92;
   74       =3 SFR I2CSTOP         = 0x93;
   75       =3 SFR P1BUF           = 0x94;   /*P1Buf*/
   76       =3 SFR I2CSEL          = 0x95;
   77       =3 SFR MMCON           = 0x97;
   78       =3 
   79       =3 /*98-9F*/
   80       =3 SFR SYSCON          = 0x98;
   81       =3 SFR WDTCON          = 0x99;
   82       =3 SFR WDTREL          = 0x9A;
   83       =3 SFR TDIV            = 0x9B;
   84       =3 SFR RTCIVL          = 0x9C; /*rtc¼ÆÊýÖÕÖ¹µÍ8Î»*/      
   85       =3 SFR RTCIVH          = 0x9D; /*rtc¼ÆÊýÖÕÖ¹¸ß8Î»*/
   86       =3 SFR RTCCON          = 0x9E;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 8   

   87       =3 SFR RTCSLN          = 0x9F; /*rtc Ê±¼äÆ¬¸öÊý*/
   88       =3 
   89       =3 /*A0-A7*/
   90       =3 SFR ANACON8         = 0xA0;
   91       =3 SFR SPI0CON         = 0xA2;
   92       =3 SFR SPI0CON2        = 0xA3;
   93       =3 SFR SPI0BUF         = 0xA4;
   94       =3 SFR SPI0CON3        = 0xA5;
   95       =3 SFR SPI0CON4        = 0xA6; 
   96       =3 SFR SPI0CON5        = 0xA7;
   97       =3 
   98       =3 /*A8-AF*/
   99       =3 SFR IEN0            = 0xA8;
  100       =3 SFR UARTCON         = 0xA9;
  101       =3 SFR UARTBUF         = 0xAA;
  102       =3 SFR UART_RELL       = 0xAB;
  103       =3 SFR P0DIR           = 0xAC;   /*P0¿Ú·½ÏòÅäÖÃ£¬1:Êä³ö, 0:ÊäÈë*/
  104       =3 SFR P1DIR           = 0xAD;   /*P1¿Ú·½ÏòÅäÖÃ£¬1:Êä³ö, 0:ÊäÈë*/
  105       =3 SFR UART_RELH       = 0xAE;
  106       =3 SFR UART_SDA        = 0xAF;
  107       =3 
  108       =3 /*B0-B7*/
  109       =3 SFR ANACON9         = 0xB0;
  110       =3 SFR SPI1CON3        = 0xB1;
  111       =3 SFR SPI1CON4        = 0xB2;
  112       =3 SFR SPI1CON         = 0xB3;
  113       =3 SFR SPI1CON2        = 0xB4;
  114       =3 SFR SPI1BUF         = 0xB5;
  115       =3 SFR RTCCON1         = 0xB6;
  116       =3 SFR IPH0            = 0xB7; 
  117       =3 
  118       =3 /*B8-BF*/
  119       =3 SFR IPL0            = 0xB8;
  120       =3 SFR CNTCON          = 0xB9;
  121       =3 SFR CNTIVL          = 0xBA;  /*CNT¼ÆÊýÖÕÖ¹µÍ8Î»*/
  122       =3 SFR CNTIVM          = 0xBB;  /*CNT¼ÆÊýÖÕÖ¹ÖÐ¼ä8Î»*/
  123       =3 SFR CNTIVH          = 0xBC;  /*CNT¼ÆÊýÖÕÖ¹¸ß8Î»*/
  124       =3 SFR FT_EN_REG       = 0xBD;  /*lcd otp to tp soc*/
  125       =3 SFR SPH             = 0xBE;
  126       =3 SFR CGUCON8         = 0xBF;
  127       =3 
  128       =3 /*C0-C7*/
  129       =3 SFR AIF            = 0xC0;
  130       =3 SFR ANACON1        = 0xC1;
  131       =3 SFR ANACON2        = 0xC2;
  132       =3 SFR ANACON3        = 0xC3;
  133       =3 SFR ANACON4        = 0xC4;
  134       =3 SFR ANACON5        = 0xC5;
  135       =3 SFR ANACON6        = 0xC6;
  136       =3 SFR ANACON7        = 0xC7;
  137       =3 
  138       =3 /*C8-CF*/
  139       =3 SFR CGUCON1        = 0xC8;
  140       =3 SFR CGUCON0        = 0xC9;
  141       =3 SFR CGUCON2        = 0xCA;
  142       =3 SFR CGUCON3        = 0xCB;
  143       =3 SFR CGUCON4        = 0xCC;
  144       =3 SFR CGUCON5        = 0xCD;
  145       =3 SFR CGUCON6        = 0xCE;
  146       =3 SFR CGUCON7        = 0xCF;
  147       =3 
  148       =3 /* D1-D7 */
  149       =3 SFR MEMBIST_EN1         = 0xD2;
  150       =3 SFR MEMBIST_EN2         = 0xD3;
  151       =3 SFR MEMBIST_FINISH1     = 0xD4;
  152       =3 SFR MEMBIST_FINISH2     = 0xD5;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 9   

  153       =3 SFR MEMBIST_FAIL1       = 0xD6;
  154       =3 SFR MEMBIST_FAIL2       = 0xD7;
  155       =3 
  156       =3 /* D8-DF */
  157       =3 SFR MEMBIST_ERRMAP1     = 0xD8;
  158       =3 SFR MEMBIST_ERRMAP2     = 0xD9;
  159       =3 SFR DSV_CON             = 0xDA;
  160       =3 SFR MEMBIST_ROMCRC0     = 0xDB;
  161       =3 SFR MEMBIST_ROMCRC1     = 0xDC; 
  162       =3 SFR MEMBIST_ROMCRC2     = 0xDD;
  163       =3 SFR MEMBIST_ROMCRC3     = 0xDE;
  164       =3 SFR IEN1                = 0xDF;
  165       =3 
  166       =3 /*E0-E7*/
  167       =3 SFR TESTCON0            = 0xE1;
  168       =3 SFR TESTCON1            = 0xE2;
  169       =3 SFR TESTCON2            = 0xE3;
  170       =3 SFR TESTCON3            = 0xE4;
  171       =3 SFR IWKSTA              = 0xE5;
  172       =3 SFR POR_STA             = 0xE6; /*POR¸´Î»¼ì²é*/
  173       =3 SFR RST_STA             = 0xE7; /*Pin reset¸´Î»¼ì²é*/
  174       =3 
  175       =3 
  176       =3 /*E8-EF*/
  177       =3 SFR AIE                 = 0xE8;
  178       =3 SFR SFTRST              = 0xE9;
  179       =3 SFR ANACON              = 0xEA;
  180       =3 SFR P0MOD               = 0xEB; /*0:P0 use as gpio;1:po use as function define*/
  181       =3 SFR P0SEL               = 0xEC; /*0:P0 as OD port; 1:P0 as PUSH-PULL port*/
  182       =3 SFR P1MOD               = 0xED; /*0:P1 use as gpio;1:p1 use as function define*/
  183       =3 SFR P1SEL               = 0xEE; /*0:P1 as OD port; 1:P1 as PUSH-PULL port*/
  184       =3 SFR XDP_STA             = 0xEF;
  185       =3 
  186       =3 /*F0-F7*/
  187       =3 SFR CNT_MASK            = 0xF1; /* 3'b00:porrst_cnt;3'b01:wdtrst_cnt;3'h02:extrst_cnt;3'h03:lcdrst_cnt;3'
             -b04:esd_cnt;3'h05:lvd_cnt*/
  188       =3 SFR CNT_STA             = 0xF2; /* ¸ù¾Ýcnt_maskµÄÖµ£¬¶À´¦²»Í¬µÄcntÖµ*/
  189       =3 SFR SSCG_CON0           = 0xF5;
  190       =3 SFR SSCG_CON1           = 0xF6; /* sscg_step:sscg increase/decrease period(500us/step). sscg trim code wi
             -ll increase in every(500ns*(step+1))*/
  191       =3 SFR AIPH                = 0xF7;
  192       =3 
  193       =3 /*F8-FF*/
  194       =3 SFR AIPL                = 0xF8;
  195       =3 SFR I2C_CMD0            = 0xF9; /* i2c hid command byte1 */
  196       =3 SFR I2C_CMD1            = 0xFA; /* i2c hid command byte2 */
  197       =3 SFR I2C_CMD2            = 0xFB; /* i2c hid command byte3 */
  198       =3 SFR I2C_CMD3            = 0xFC; /* i2c hid command byte4 */
  199       =3 SFR I2C_STATE           = 0xFD; /* i2C hid ÖÐ¶Ï±êÖ¾¼Ä´æÆ÷ */
  200       =3 SFR LED_EN              = 0xFE; /* 4¸öLEDµÆÊ¹ÄÜ; bit3~bit0ÓÐÐ§,Ã¿bit·Ö±ð¶ÔÓ¦Ò»¸öLEDÊ¹ÄÜ */
  201       =3 SFR LED_H_NUM           = 0xFF; /* led PWM²¨¸ßµçÆ½³ÖÐøµÄÖÜÆÚÊý£¬0~63¿ÉÅä£¬0´ú±í1¸ö32kÖÜÆÚ¸ßµçÆ½£¬63´ú±í64
             -¸ö32kÖÜÆÚ¸ßµçÆ½£¬¼´Ò»Ö±Îª¸ß£»*/
  202       =3 
  203       =3 
  204       =3 /******************************************************************************/
  205       =3 /* bit Registers */
  206       =3 
  207       =3 /*SSCG_CON0*/
  208       =3 /*bit5-4  sscg_amp */   /*sscg amplitude. Control the output sequence of DA_TRIM[2:0]. Clock stable time 
             -between each trim code is located in range 100ns-200ns*/
  209       =3 SBIT SSCG_SCAN_EN           = SSCG_CON0^1; /*0:stop sscg when scan 1:contiune sscg when scan(sync with sc
             -an)*/
  210       =3 SBIT SSCG_EN                = SSCG_CON0^0; /*0:disable sscg  1:enable sscg*/
  211       =3 
  212       =3 /*SPI0CON*/
  213       =3 SBIT SPI0RX_OVF_FLAG        = SPI0CON^6;  /*rx_reg_overflow±êÖ¾Î»£¬spi0½ÓÊÕÍêÊý¾Ýrx_regÎªÂúÊ±£¬Ó²¼þÖÃ1*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 10  

  214       =3 SBIT SPI0TX_UNF_FLAG        = SPI0CON^5;  /*tx_reg_underflow±êÖ¾Î»£¬spi0·¢ËÍÊý¾ÝÊ±rx_regÎª¿ÕÊ±£¬Ó²¼þÖÃ1*/
  215       =3 SBIT SPI0_START             = SPI0CON^4;  /*SPI0µÄslvelÏÂ½µÑØÀ´Ê±Îª¸ßµçÆ½£¬Èí¼þÇåÁã*/
  216       =3 SBIT SPI0_STOP              = SPI0CON^3;  /*SPI0µÄslvelÉÏÉýÑØÀ´Ê±Îª¸ßµçÆ½£¬Èí¼þÇåÁã*/
  217       =3 SBIT DMA_END_FLAG           = SPI0CON^2;  /*DMA²Ù×÷½áÊøÖÐ¶ÏÇëÇó±êÖ¾Î»£¬Èí¼þÇåÁã*/
  218       =3 SBIT SPI0RI                 = SPI0CON^1;  /*½ÓÊÕÍê±ÏÖÐ¶ÏÇëÇó±êÖ¾Î»*/
  219       =3 SBIT SPI0TI                 = SPI0CON^0;  /*·¢ËÍÇëÇóÖÐ¶Ï±êÖ¾Î»*/
  220       =3 
  221       =3 /*SPI0CON2*/
  222       =3 SBIT SPI0TX_AUTO_CLR        = SPI0CON2^7; /*ÊÇ·ñ×Ô¶¯Çå³ýtiÖÐ¶Ï±êÖ¾Î»£»0:ÐèÒªÈí¼þÇå£»1:Èí¼þÔÚÐ´tx_regÊ±Ó²¼
             -þ×Ô¶¯Çå*/
  223       =3 SBIT SPI0RX_AUTO_CLR        = SPI0CON2^6; /*ÊÇ·ñ×Ô¶¯Çå³ýriÖÐ¶Ï±êÖ¾Î». 0:ÐèÒªÈí¼þÇå; 1:Èí¼þÔÚ¶Árx_regÊ±Ó²¼
             -þ×Ô¶¯Çå*/
  224       =3 SBIT SPI0_EDGE_SEL          = SPI0CON2^5; /*0:sckÉÏÉýÑØÊä³ö;1:sckÏÂ½µÑØÊä³ö*/
  225       =3 SBIT SPI0_BUSY              = SPI0CON2^4; /*0:µÍµçÆ½×´Ì¬£¬Ö»ÄÜ¶Á²»ÄÜÐ´;1:SPI0ÕýÔÚ¼¤»î×´Ì¬*/
  226       =3 SBIT SPI0_STOP_EI           = SPI0CON2^3; /*spi_stopÖÐ¶ÏÇëÇóÐÅºÅÊ¹ÄÜ*/
  227       =3 SBIT DMA_END_EI             = SPI0CON2^2; /*DMA²Ù×÷½áÊøÖÐ¶ÏÇëÇóÊ¹ÄÜ*/
  228       =3 SBIT SPI0RI_EN              = SPI0CON2^1; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
  229       =3 SBIT SPI0TI_EN              = SPI0CON2^0; /*0:½ûÖ¹²úÉú·¢ËÍÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú·¢ËÍÖÐ¶ÏÇëÇóÐÅºÅ*/
  230       =3 
  231       =3 /*SPI0CON3*/
  232       =3 SBIT SPI0_WKEN              = SPI0CON3^7; /*spi wake up¹¦ÄÜÊ¹ÄÜÎ».0:disable;1:enable*/
  233       =3 SBIT SPI0_RI_PULSE_SEL      = SPI0CON3^4; /*0:rx_reg load at ti_ri_pulse falling edg;1:rx_reg load at ri_
             -pulse rising edge*/
  234       =3 //SBIT SPI0_CLR_NUM           = SPI0CON3^4; /*write 1 to clear byte num*/
  235       =3 /*spi0con3[3:0] dummy_byte_num csÏÂ½µÑØ¿ªÊ¼²åÈëµÄdummy byteÊý*/
  236       =3 
  237       =3 /*SPI0CON4*/
  238       =3 /*SPI0CON4[7:6] byte_num_rd_sel  byte_num¶Á³öÑ¡Ôñ.2'b00:byte_num_h; 2'b01:byte_num_m; 2'b10:byte_num_l */
  239       =3 /*SPI0CON4[5:0] byte_num_rd byte_num 6bit,ÓÉbyte_num¾ö¶¨*/
  240       =3 
  241       =3 /*SPI0CON5*/
  242       =3 SBIT SPI0RX_OVF_CLR         = SPI0CON5^6;  /*Ð´1Çå³ýrx_reg_overflow±êÖ¾Î»*/
  243       =3 SBIT SPI0TX_UNF_CLR         = SPI0CON5^5;  /*Ð´1Çå³ýtx_reg_underflow±êÖ¾Î»*/
  244       =3 SBIT SPI0_START_CLR         = SPI0CON5^4;  /*Ð´1Çå³ýspi0 start*/
  245       =3 SBIT SPI0_STOP_CLR          = SPI0CON5^3;  /*Ð´1Çå³ýspi0 stop*/
  246       =3 SBIT DMA_END_CLR            = SPI0CON5^2;  /*Ð´1Çå³ýdma end flag*/
  247       =3 SBIT SPI0RI_CLR             = SPI0CON5^1;  /*Ð´1Çå³ýSPI0RT*/
  248       =3 SBIT SPI0TI_CLR             = SPI0CON5^0;  /*Ð´1Çå³ýSPI0TI*/
  249       =3 
  250       =3 
  251       =3 /*SPICLKDIV: 000:4·ÖÆµ;001:6·ÖÆµ;010:8·ÖÆµ;011:12·ÖÆµ;100:16·ÖÆµ;101:18·ÖÆµ;110:20·ÖÆµ;111:24·ÖÆµ*/
  252       =3 /*SPI1CON*/
  253       =3 SBIT SPI1TI                  = SPI1CON^7;  /*·¢ËÍÇëÇóÖÐ¶Ï±êÖ¾Î»*/
  254       =3 SBIT SPI1RI                  = SPI1CON^6;  /*½ÓÊÕÍê±ÏÖÐ¶ÏÇëÇó±êÖ¾Î»*/
  255       =3 SBIT SPI1CKM                 = SPI1CON^5;  /*SPI1CLKDIVÖÐ¼äÎ»*/
  256       =3 SBIT SPI1CKL                 = SPI1CON^4;  /*SPI1CLKDIVµÍÎ»*/
  257       =3 SBIT SPI1PH                  = SPI1CON^3;  /*0:Ö±½Ó·¢ËÍÊý¾Ý,»º´æ°ë¸öcycle½ÓÊÕÊý¾Ý;1:Ö±½Ó½ÓÊÕÊý¾Ý,»º´æ°ë¸ö
             -cycle·¢ËÍÊý¾Ý*/
  258       =3 SBIT SPI1PO                  = SPI1CON^2;  /*0:low idle; 1:high idle*/
  259       =3 SBIT SPI1MAS                 = SPI1CON^1;  /*0:slave mode; 1:master mode*/ 
  260       =3 SBIT SPI1_SLVSLELEN          = SPI1CON^0;  /*0:masterÄ£Ê½ÏÂµÄslvseloÊÜÄÚ²¿Æô¶¯¿ØÖÆ;1:masterÄ£Ê½ÏÂslvseloÊ
             -ÜSPI1CON2[2]¿ØÖÆ*/
  261       =3 
  262       =3 /*SPI1CON2*/
  263       =3 SBIT SPI1TX_AUTO_CLR         = SPI1CON2^7; /*0:Èí¼þ×Ô¶¯ÇåtiÖÐ¶Ï±êÖ¾Î»;1:Èí¼þÔÚ¶Árx regÊ±Ó²¼þ×ÔÇå*/
  264       =3 SBIT SPI1RX_AUTO_CLR         = SPI1CON2^6; /*0:Èí¼þ×Ô¶¯ÇåriÖÐ¶Ï±êÖ¾Î»;1:Èí¼þÔÚ¶Átx regÊ±Ó²¼þ×ÔÇå*/
  265       =3 SBIT SPI1_BUSY               = SPI1CON2^5; /*0:µÍµçÆ½×´Ì¬,Ö»ÄÜ¶Á;1:SPI1Õý´¦ÓÚactive*/ 
  266       =3 SBIT SPI1_STOP               = SPI1CON2^4; 
  267       =3 SBIT SPI1_START              = SPI1CON2^3;
  268       =3 SBIT SPI1SLVELO              = SPI1CON2^2; /*µ±SPI1CON[0]Îª1Ê±,master×´Ì¬ÏÂ¸ÃÎ»Ö±½ÓÊä³öSPI1µÄslvsel£»µ±SP
             -I1CON[0]Îª0Ê±£¬¸ÃÎ»ÎÞÐ§*/
  269       =3 SBIT SPI1RI_EN               = SPI1CON2^1; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
  270       =3 SBIT SPI1TI_EN               = SPI1CON2^0; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
  271       =3 
  272       =3 /*SPI1CON3*/
  273       =3 SBIT SPI1MODE_SELH           = SPI1CON3^7; /*1:ÓÃIO0-IO2´«ÊäÊý¾Ý;0:¸ù¾ÝSPI1CON3[6]×´Ì¬¾ö¶¨*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 11  

  274       =3 SBIT SPI1MODE_SELL           = SPI1CON3^6; /*ÈôSPI1MODE_SELHÎª0,Ôò0:ÓÃIO0´«Êä;1:ÓÃIO0,IO1´«Êä*/
  275       =3 SBIT SPI1_SW_IO_ENH          = SPI1CON3^5; /*IO0,IO1·½Ïò¿ØÖÆÎ». 0:standard spi IO setting;1:¿ØÖÆIO0,IO1·½
             -Ïò×Ô¶¯ÇÐ»»,ÇÐ»»Ê±¼ä²ÎregÅäÖÃspi_dat_opn_num*/
  276       =3 SBIT SPI1_SW_IO_ENL          = SPI1CON3^4; /*IO2,IO3·½Ïò¿ØÖÆÎ». 0:standard spi IO setting;1:¿ØÖÆIO2,IO3·½
             -Ïò×Ô¶¯ÇÐ»»,ÇÐ»»Ê±¼ä²ÎregÅäÖÃspi_dat_opn_num*/
  277       =3 SBIT SW_1BYTE_LATER          = SPI1CON3^2; /*dual/quad spiÈí¼þÇÐ»»Ê±¼ä.0:Á¢¼´ÇÐ»»;1:ÔÚÏÂ¸öbyteÊý¾Ý´«Êä½áÊ
             -øÒÔºóµÄµÚÒ»¸öshift_out_sck_edgÖ®Ç°Íê³ÉÇÐ»»*/
  278       =3 SBIT SPI1_SW_DIR             = SPI1CON3^1; /*dual/quad spiÊ±Èí¼þÇÐ»»ioµÄ·½Ïò.0:Êä³ö;1:ÊäÈë*/
  279       =3 SBIT SPI1_SW_EN              = SPI1CON3^0; /*dual/quad spi Èí¼þio·½ÏòÇÐ»»Ê¹ÄÜ£¬Ð´1ÓÐÐ§.Ó²¼þÔÚÇÐ»»Ö®ºó×ÔÇå
             -*/
  280       =3 
  281       =3 /*SPI1CON4*/
  282       =3 SBIT SPI1IOSW_CKDLY_EN      = SPI1CON4^4; /*´«ÊäIOÇÐ»»·½ÏòÊ± 0:ÇÐ»»·½Ïò²»ÑÓÊ±;1:ÇÐ»»·½ÏòÑÓ³¤2¸öclk cycle*
             -/
  283       =3 SBIT SPI1_CURR_MODE         = SPI1CON4^3; /*spi master/slave mode×´Ì¬Î».1:Ä¿Ç°Îªmaster mode.0:Ä¿Ç°Î´slave
             - mode */
  284       =3 SBIT SPI1CKH                = SPI1CON4^2; /*SPI1CLKDIV¸ßÎ»*/
  285       =3 /*spi1con[1:0] sample_phase_sel*/ /*²ÉÑùÊ±ÖÓÑÓ³ÙÑ¡Ôñ. 00:ÎÞÑÓ³Ù;01:ÑÓ³Ù1¸öclk cycle; 10:ÑÓ³Ù2¸öclk cycle;
             - 11:ÑÓ³Ù3¸öclk cycle*/
  286       =3 
  287       =3 
  288       =3 /*UARTCON*/
  289       =3 SBIT UART_MODE              = UARTCON^7; /*uartÄ£Ê½Éè¶¨. 0:9bitÄ£Ê½; 1:8bitÄ£Ê½*/
  290       =3 SBIT UART_SM21              = UARTCON^5; /*1:ÔÚ9bitÒ»¶Ô¶àÍ¨ÐÅÄ£Ê½ÏÂ;0:ÔÚ9bitµã¶ÔµãÄ£Ê½*/  
  291       =3 SBIT UART_REN1              = UARTCON^4; /*½ÓÊÕÊÇÄÜ¿ØÖÆÎ».1:ÔÊÐí½ÓÊÕ;0:½ûÖ¹½ÓÊÕ*/
  292       =3 SBIT UART_TB81              = UARTCON^3; /*ÔÚ9bitÄ£Ê½ÏÂ£¬the content of·¢ËÍµÄµÚ9bit*/
  293       =3 SBIT UART_RB81              = UARTCON^2;   
  294       =3 SBIT UART_TI                = UARTCON^1;
  295       =3 SBIT UART_RI                = UARTCON^0;
  296       =3 
  297       =3 /* RTCCON */
  298       =3 SBIT RTC_START              = RTCCON^7;
  299       =3 SBIT RTC_INT_EN_ASM         = RTCCON^6;   /* ²úÉúÖÐ¶Ï¸øasmÊ¹ÄÜ.1:´ò¿ª;0:¹Ø±Õ */
  300       =3 SBIT RTC_START_STA          = RTCCON^5;   /* RTCÆô¶¯×´Ì¬.1:rtcÆô¶¯³É¹¦»ò¿ÕÏÐ;0:rtcÕýÔÚÆô¶¯»òÕýÔÚ¸´Î»*/
  301       =3 SBIT RTC_CLR                = RTCCON^4;
  302       =3 SBIT RTC_INT_EN_CPU         = RTCCON^2;   /* ²úÉúÖÐ¶Ï¸øcpuÊ¹ÄÜ.1:´ò¿ª;0:¹Ø±Õ */
  303       =3 SBIT RTC_AUTO_MODE          = RTCCON^1;   /* rtc²»ÐèÒª×öclr£¬×Ô¶¯ÖØ¸´¼ÆÊý*/
  304       =3 SBIT RTC_WP                 = RTCCON^0;
  305       =3 
  306       =3 /* RTCCON1 */
  307       =3 //[2:1] LCD_SRC_SEL lcd start sourcÑ¡Ôñ. 2'b00:vstart;2'b01:vmdi;2'b10:vend;2'b11:vblank
  308       =3 SBIT LCD_SRC_SEL_H          = RTCCON1^2;
  309       =3 SBIT LCD_SRC_SEL_L          = RTCCON1^1;
  310       =3 SBIT LCD_START_EN           = RTCCON1^0;   /* lcd vstart/wmid.vend/vblank Æô¶¯rtcÊ¹ÄÜÐÅºÅ */ 
  311       =3 
  312       =3 /*SYSCON*/
  313       =3 SBIT REMAP                  = SYSCON^7;
  314       =3 SBIT ESD_RST_EN             = SYSCON^6;   /* esd·¢ÉúÊ±Ðè²»ÐèÒªrstÏµÍ³.1:±íÊ¾ÐèÒªrstÏµÍ³;0:±íÊ¾²»rstÏµÍ³*/
  315       =3 SBIT BUS_SEL                = SYSCON^5;   /* RO. pad bus_sel */
  316       =3 SBIT WDT                    = SYSCON^4;   /* wdtÊ¹ÄÜ */
  317       =3 SBIT UART1                  = SYSCON^3;   /* uart1 */
  318       =3 SBIT UART0                  = SYSCON^2;   /* uart0: 2'b01: GPIO6; 2'b10: GPIO7; 2'b11: GPIO1.5; 2'b00: Æä
             -Ëû;  */
  319       =3 SBIT LVD_INT_CLR            = SYSCON^1;   /* Ð´1Çå³ýlvdµÄÖÐ¶Ï±êÖ¾,¸ÃbitÎ»Ð´1×ÔÇå */
  320       =3 SBIT ESD_INT_CLR            = SYSCON^0;   /* Ð´1Çå³ýesdµÄÖÐ¶Ï±êÖ¾,¸ÃbitÎ»Ð´1×ÔÇå */
  321       =3 
  322       =3 
  323       =3 /*IWKSTA*/
  324       =3 SBIT GPIO_INT               = IWKSTA^7; /* p0.6 pin½ÅÖÐ¶Ï»½ÐÑ±êÖ¾*/
  325       =3 SBIT LCD_ESD_WK_INT         = IWKSTA^6; /* lcd esd wakeupÖÐ¶Ï»½ÐÑ±êÖ¾ */
  326       =3 SBIT LCD_LVD_WK_INT         = IWKSTA^5; /* lcd lvd wakeupÖÐ¶Ï»½ÐÑ±êÖ¾ */
  327       =3 SBIT LCD_GPIO_WK_INT        = IWKSTA^4; /* lcd gpio wakeup status */
  328       =3 SBIT LCD_RELOAD_FLASH       = IWKSTA^3; /* LCD initial code reload */
  329       =3 SBIT ASM_MON_INT            = IWKSTA^2; /* asm monitorÖÐ¶Ï»½ÐÑ±êÖ¾ */
  330       =3 SBIT I2C_MON_INT            = IWKSTA^1; /* i2c monitorÖÐ¶Ï»½ÐÑ±êÖ¾ */
  331       =3 SBIT RTC_CNT_INT            = IWKSTA^0; /* RTC or CNTÖÐ¶Ï»½ÐÑ±êÖ¾ */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 12  

  332       =3 
  333       =3 /*SFTRST*/
  334       =3 SBIT SOFT_RST               = SFTRST^7; /*¶Á:Èí¸´Î»±êÖ¾*/
  335       =3 SBIT WDT_RST                = SFTRST^6; /*¶Á:wdt¸´Î»±êÖ¾*/
  336       =3 SBIT EXT_RST                = SFTRST^5; /*¶Á:Íâ²¿¸´Î»±êÖ¾*/
  337       =3 SBIT POR_RST                = SFTRST^4; /*por¸´Î»±êÖ¾*/
  338       =3 SBIT FLASH_HOLD_STA         = SFTRST^3; /*flash hold state*/
  339       =3 SBIT REMAP_RST              = SFTRST^1; /*¶Á:´ò¿ªremap¸´Î»Ê¹ÄÜ*/
  340       =3 /*SFTRST[0] */              /*µ±È«Ð´1ÊÇ²úÉú¸´Î»;È«Ð´0ÊÇ²úÉúremap¸´Î»;µ±¶ÁÊ±Ê±Èí¸´Î»±êÖ¾*/
  341       =3 
  342       =3 /* ANACON */
  343       =3 SBIT ARAM_SEL               = ANACON^7;  /* 1: mcu¿ØÖÆaram; 0: afe¿ØÖÆaram */
  344       =3 SBIT LCD_DSTAB_IOLOW        = ANACON^6;  /* lcd dstab·¢ÉúÊ±,¿ØÖÆTPµ½LCD DPµÄÐÅºÅÊÇ·ñÊä³öÎªµÍ£¬´Ó¶ø½µµÍÂ©µ
             -ç 1: Êä³öÎªµÍ£¬0: ²»Êä³öÎªµÍ */
  345       =3 SBIT I2C_WK_RST             = ANACON^5;  /* 0:Reset I2C monitor interrupt;1: release*/
  346       =3 SBIT I2C_SF_RST             = ANACON^4;  /* I2C module soft reset */
  347       =3 SBIT XSI_SEL                = ANACON^3;  /* xsi0/xsi1 accessing clock switch select. 0:MCU;1:AFE. */
  348       =3 SBIT AFE_RST                = ANACON^2;  /* afe sub-system soft reset including asm*/
  349       =3 SBIT FlASH_HOLD             = ANACON^1;  /* external SPI flash hold,1:hold state '0';0:hold state '1' */
  350       =3 SBIT GPIO_INT_SEL           = ANACON^0;  /* GPIO Interrupt source selecetion.1:GPIO interrupt is from p0.
             -7;0:GPIO interrupt is from p0.6 */
  351       =3 
  352       =3 /* XDP_STATUS*/
  353       =3 SBIT LVD_STA                = XDP_STA^6;  /* R0.lvdµÄstatus */
  354       =3 SBIT ESD_FLAG               = XDP_STA^5;  /* RW.esd·¢Éú±êÖ¾.1:±íÊ¾ÓÐ·¢ÉúesdÊÂ¼þ;0:±íÊ¾Ã»ÓÐ·¢ÉúesdÊÂ¼þ.Èí¼
             -þ¿ÉÇå³ý*/
  355       =3 SBIT LVD_FLAG               = XDP_STA^4;  /* RW.lvd·¢Éú±êÖ¾.1:ÓÐlvdÊÂ¼þ;0:Ã»ÓÐlvdÊÂ¼þ.Èí¼þ¿ÉÇå³ý */
  356       =3 SBIT ESD_STA                = XDP_STA^3;  /* RO.xdp esd status */
  357       =3 SBIT LVD_VDDI_STA           = XDP_STA^2;  /* RO.lvd_vddi status */
  358       =3 SBIT LVD_AVDD_STA           = XDP_STA^1;  /* RO.lvd_avdd status */
  359       =3 SBIT LVD_AVEE_STA           = XDP_STA^0;  /* RO.lvd_avee status */
  360       =3 
  361       =3 /* TEST_CON0 */
  362       =3 SBIT TEST_OUT0_EN           = TESTCON0^7; 
  363       =3 /*TEST_CON0[6:0]*/          /*Test out0 control */
  364       =3 
  365       =3 /* TEST_CON1 */
  366       =3 SBIT TEST_OUT1_EN           = TESTCON1^7; 
  367       =3 /*TEST_CON1[6:0]*/          /*Test out1 control */
  368       =3 
  369       =3 /* TEST_CON2 */
  370       =3 SBIT TEST_OUT2_EN           = TESTCON2^7; 
  371       =3 /*TEST_CON2[6:0]*/          /*Test out2 control */
  372       =3 
  373       =3 /* TEST_CON0 */
  374       =3 SBIT TEST_OUT3_EN           = TESTCON3^7; 
  375       =3 /*TEST_CON3[6:0]*/          /*Test out3 control */
  376       =3 
  377       =3 /* DSV_CON */
  378       =3 SBIT UART_INH               = DSV_CON^6;       /* selection of uart rx port*/
  379       =3 SBIT UART_INL               = DSV_CON^5;       /* 2'b00/2'b11:disable uart rxd;2'b01:p0.6;2'b10:p0.7*/
  380       =3 SBIT SPI_REPLACE_STA        = DSV_CON^4;       /* spi1ÊÇ·ñÌæ´úspi0×÷ÎªslaveµÄ×´Ì¬Î»;1:spi1×÷Îªslave;0:spi
             -1²»×÷Îªslave*/
  381       =3 SBIT SPI_REPLACE_SEL        = DSV_CON^3;       /* spi1×÷ÎªslaveµÄ¿ØÖÆ£¬ÔÚspi_replace_en=1Ê±Æð×÷ÓÃ.1:spi1Ì
             -æ»»spi0×÷Îªslave;0:spi1²»Ìæ»»spi0 */
  382       =3 SBIT SPI_REPLACE_EN         = DSV_CON^2;       /* spi1×÷ÎªslaveµÄ¿ØÖÆ.1:spi1ÊÇ·ñÎªslaveÊÜspi_replace_sel¿
             -ØÖÆ;*/
  383       =3 SBIT DSV_EN6_STA            = DSV_CON^1;       /* lcdÊä³öµÄdsv_en6µÄ×´Ì¬ */
  384       =3 SBIT DSV_EN                 = DSV_CON^0;       /* dsv en reg */
  385       =3 
  386       =3 /*FT_EN_REG*/
  387       =3 SBIT PDB                    = FT_EN_REG^6;     /* lcd to tp,µ±´ò¿ªÅúÆÀ¼ì²âÊ±,¼ì²â½á¹û.1:ÆÁÆÆ;0:ÆÁÃ»ÆÆ*/
  388       =3 SBIT PDB_EN                 = FT_EN_REG^5;     /* tp to lcd.1:¿ªÆôÆÆÆÁ¼ì²â */
  389       =3 SBIT DMA_REQ_INT_MASK       = FT_EN_REG^4;     /* dma_reqÆÁ±ÎcpuÖÐ¶ÏÊ¹ÄÜ.1:µ±dma_reqÎª1Ê±,ÆÁ±ÎcpuµÄ(³ýÁËt
             -imer0,timer1)ÖÐ¶Ï*/
  390       =3 SBIT DMA_ACK_INT_MASK       = FT_EN_REG^3;     /* dma_ackÆÁ±ÎcpuÖÐ¶ÏÊ¹ÄÜ.1:µ±dma_ackÎª1Ê±,ÆÁ±ÎcpuµÄ(³ýÁËt
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 13  

             -imer0,timer1)ÖÐ¶Ï*/
  391       =3 SBIT TEST_CLK_EN            = FT_EN_REG^2;     /* Ê±ÖÓ²âÊÔÊä³öÊ¹ÄÜ,GPIO6Êä³ö */
  392       =3 SBIT XSI_SEL_STA            = FT_EN_REG^1;     /* anacon[3] xsi clk swtich result.1:AFE can control xsi;0
             -:MCU can control xsi*/
  393       =3 SBIT FT_EN                  = FT_EN_REG^0;     /* lcd otp to tp soc */
  394       =3 
  395       =3 /* ANACON1 */
  396       =3 SBIT POWERGATING_CTRL       = ANACON1^7; /* ÎÞavddºÍaveeÊ±,¿ØÖÆafeµÄsx switch·Åµç.1:È¡¾öÓÚdsv_en,dsv_enÎª
             -1Ê±,²»·Åµç.dsv_enÎª0Ê±,·Åµç.0:²»·Åµç */
  397       =3 /* [6:4] vreftp_sel. vREF_TP voltage selection bits.0:2v; 1:2.5v; 2:3v; 3:3.5v; 4:4v; 5:4.5v; 6:5v; 7:4.5
             -v*/
  398       =3 SBIT VREFTP_BUF_SEL_M       = ANACON1^3; /* vref_tp/vdd5 slew rate control bit,output to xtp.0: no sr con
             -trol,vref_tp rise quickly.1:with sr control,set 1 for t32clk and then set to 0*/
  399       =3 SBIT VREFTP_BUF_SH_M        = ANACON1^2; /* ²ÉÑùµçÑ¹,¹Ì¶¨²ÉÑùµçÑ¹,Êä³ö¸øxtp.vref_tp/vdd5 sample/hold sign
             -al.0:hold; 1:enable*/
  400       =3 SBIT VREFTP_BUF_EN_M        = ANACON1^1; /* ¿ØÖÆÊä³öbuf enable,Êä³ö¸øxtp.vref_tp buf enable signal.0:disa
             -ble;1:enable*/
  401       =3 SBIT VREFTP_SETOP_EN_M      = ANACON1^0; /* vref_tp setting opµÄenable,Êä³ö¸øxtp.vref_tp volatge setting 
             -op enable singal.0:disable;1:enable */
  402       =3 
  403       =3 /* ANACON2 */
  404       =3 SBIT REFBG_EN               = ANACON2^7; /* tpµÄbandgapµÄenbale.É¨ÃèÊ±,Ò»¶¨Òª´ò¿ª.afe ref enable signal.0
             -:disable;1:enable */
  405       =3 SBIT VREFTP_BUF_SEL         = ANACON2^6; /* vref_tp/vdd5 slew rate control bit,output to xae_l,xafe_r.0:n
             -o sr control,vref_tp rise quickly;1:with sr control,set 1 for 16 t32clk and then set to 0*/
  406       =3 SBIT VREFTP_BUF_SH          = ANACON2^5; /* ²ÉÑùµçÑ¹,¹Ì¶¨²ÉÑùµçÑ¹,Êä³ö¸øxafe_l,xafe_r.vref_tp/vdd5 sample
             -/hold signal.0:hold; 1:enable*/
  407       =3 SBIT VREFTP_BUF_EN          = ANACON2^4; /* ¿ØÖÆÊä³öbuf enable,Êä³ö¸øxafe_l,xafe_r.vref_tp buf enable sig
             -nal.0:disable;1:enable*/
  408       =3 SBIT VREFTP_SETOP_EN        = ANACON2^3; /* vref tp setting opµÄenable,Êä³ö¸øxafe_l,xafe_r.vref_tp volatg
             -e setting op enable singal.0:disable;1:enable */
  409       =3 SBIT VDD5_SETOP_EN          = ANACON2^2; /* vdd5 volatage setting op enable signal.0:disable;1:enable*/
  410       =3 SBIT VDD5_BUF_EN            = ANACON2^1; /* vdd5 buf enable signal.0:disable;1:enable*/
  411       =3 SBIT VDD5_SECTRL            = ANACON2^0; /* vdd5 slew rate control bit.0:no sr control,vref_tp rise quick
             -ly.1:with sr control,set 1 for 16 t32clk and the set to 0*/
  412       =3 
  413       =3 /* ANACON3 */
  414       =3 SBIT DSV_EN_ALLON           = ANACON3^7; /* dsv_enÊÇ·ñÊ±¿Ì´ò¿ª.1:Ê±¿Ì´ò¿ª;0:ÓÉÉÏµçÊ±Ðò¾ö¶¨*/
  415       =3 SBIT LR_SEL                 = ANACON3^6; /* select p1_af and p2_af from left or right afe controller.1:ri
             -ght;0:left*/
  416       =3 SBIT VCOM_OPT_SEL           = ANACON3^5; /* ÓÃÓÚ¿ØÖÆvcom_optµÄÊä³ö.0:Ç¿ÖÆÊä³öÎªvcom.1:lcd termÊ±Îªvcom,tp
             - termÊ±,Îªafd*/
  417       =3 SBIT BGP_MASK               = ANACON3^4; /* ÓÃÓÚ¿ØÖÆºÚÆÁÊ±lcdµÄbandgap¿ª¹Ø.ÁÁÆÁÊ±,´Ë¿ª¹ØÓÉlcd¿ØÖÆ,ºÚÆÁÊ±,
             -ÓÉtp¿ØÖÆ.dsvÄ£Ê½ÏÂ,¶¯Ì¬ÇÐ»»,ÓÃÓÚ½ÚÊ¡¹¦ºÄ.1:¿ªÆôlcdµÄbandgap,tpÉ¨ÃèÊ±,ÐèÒª¿ªÆô´Ë¿ª¹Ø.0:¹Ø±ÕlcdµÄbandgap,tp²»É¨ÃèÊ±,¿ÉÒÔ¹Ø
             -±Õ´Ë¿ª¹Ø*/
  418       =3 SBIT LVD_MASK               = ANACON3^3; /* ÓÃÓÚ¿ØÖÆÊÇ·ñ¿ªÆôavdd/aveeµÄµôµçÕì²âµçÂ·.dsvÄ£Ê½ÏÂ,dsv_enÊ¹ÄÜÊ
             -±,¿É¿ªÆô,dsv_en²»Ê¹ÄÜ,ÐèÒª¹Ø±Õavdd/aveeµÄµôµçÕì²âµçÂ·,ÒÔ·ÅÎó´¥·¢lvdÕì²âµçÂ·.1:¿ªÆôµôµçÕì²âµçÂ·.0:¹Ø±Õ*/
  419       =3 
  420       =3 /* ANACON7*/
  421       =3 SBIT VREFTP_LOADREGU        = ANACON7^7; /* vreftp output buffer driving ability control signal.1:enhance
             - the driving ability to about 55mA.0:use default value about 37mA driving ability at least*/
  422       =3 SBIT DSV_EN_MASK            = ANACON7^6; /* dsv_enÐÅºÅµÄÑ¡ÔñÐÅºÅ.0:asmÉú³ÉµÄdsv_enÐÅºÅÎÞÐ§,ÓÉmcu¾ö¶¨ÊÇ·ñÆ
             -ô¶¯dsv_en;1:asmÉú³½¹ýµÄdsv_enÐÅºÅÓÐÐ§*/
  423       =3 SBIT NVDD2_MASK             = ANACON7^5; /* NVDD2ÔÚºÚÆÁÊ±µÄÊ¹ÄÜÐÅºÅ.nvdd2ÁÁÆÁÊ±ÊÜlcd¿ØÖÆ,ºÚÆÁÊ±,ÊÜtp¿ØÖÆ.
             -0:¹Ø±Õnvdd2;1:¿ªÆônvdd2*/
  424       =3 SBIT VRGEN_EN               = ANACON7^4; /* 32kÊ±ÖÓµçÔ´ÇÐ»»¹¦ÄÜ.0:Ñ¡ÔñÀ´×ÔÆ«ÖÃ.1:Ñ¡ÔñlcdÀ´µÄbandgapÆ«ÖÃ.º
             -ÚÆÁÊ±,´ËbitÎ»Ò»¶¨ÐèÒªÅäÖÃÎª0,ÁÁÆÁ¿ÉÅäÖÃ0£¬Ò²¿ÉÅäÖÃ³É1*/
  425       =3 /* [3:0] VRFE_VDD_TPS. VDDD 1.2V setting. 0:  1.3v; 
  426       =3                                           1:  1v;
  427       =3                                           2:  1.025v;
  428       =3                                           3:  1.05v;
  429       =3                                           4:  1.075v;
  430       =3                                           5:  1.1v;
  431       =3                                           6:  1.125v;
  432       =3                                           7:  1.150v;
  433       =3                                           8:  1.175v;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 14  

  434       =3                                           9:  1.2v
  435       =3                                           10: 1.225v
  436       =3                                           11: 1.25v
  437       =3                                           12: 1.275v
  438       =3                                           13: 1.325v
  439       =3                                           14: 1.35v
  440       =3                                           15: 1.375v*/
  441       =3 
  442       =3 /* ANACON8 */
  443       =3 SBIT VDD_TP_N2_MASK         = ANACON8^7; /* reg_en_vdd_tp_n2ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  444       =3 SBIT VDD_TP_N1_MASK         = ANACON8^6; /* reg_en_vdd_tp_n1ÐÅºÅÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  445       =3 SBIT VREFTP_SETOP_EN_M_MASK = ANACON8^5; /* vreftp_setop_en_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  446       =3 SBIT VREFTP_BUF_EN_M_MASK   = ANACON8^4; /* vreftp_buf_en_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  447       =3 SBIT VREFTP_SH_MASK         = ANACON8^3; /* vreftp_shÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  448       =3 SBIT VREFTP_SRCTRL_M_MASK   = ANACON8^2; /* vreftp_srctrl_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  449       =3 SBIT BGP_MASK_MASK          = ANACON8^1; /* bgp_maskÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  450       =3 SBIT NVDD2_MASK_MASK        = ANACON8^0; /* nvdd2_maskÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  451       =3 
  452       =3 /* ANACON9 */
  453       =3 SBIT VDD_TP_N3_MASK         = ANACON9^7; /* reg_en_vdd_tp_n3ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  454       =3 SBIT REGBG_EN_MASK          = ANACON9^6; /* reg_en1ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  455       =3 SBIT VREFTP_SETOP_EN_MASK   = ANACON9^5; /* vreftp_setop_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  456       =3 SBIT VREFTP_BUF_EN_MASK     = ANACON9^4; /* vreftp_buf_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  457       =3 SBIT VREFTP_SRCTRL_MASK     = ANACON9^3; /* vreftp_srctrlÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  458       =3 SBIT VDD5_SETOP_EN_MASK     = ANACON9^2; /* vdd5_setop_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  459       =3 SBIT VDD5_BUF_EN_MASK       = ANACON9^1; /* vdd5_buf_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  460       =3 SBIT VDD5_SRCTRL_MASK       = ANACON9^0; /* vdd5_srctrlÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
  461       =3 
  462       =3 /* PCON */
  463       =3 SBIT SMOD1                  = PCON^7;
  464       =3 SBIT SMOD0                  = PCON^6;
  465       =3 SBIT POF                    = PCON^4;
  466       =3 SBIT GF1                    = PCON^3;
  467       =3 SBIT GF0                    = PCON^2;
  468       =3 SBIT CORE_STOP              = PCON^1;         /* Stop Ä£Ê½¿ØÖÆÎ» .¸ÃÎ»Ð´1£¬½«½øÈëstopÄ£Ê½£¬Èç¹û¶Á¸ÃÎ»£¬¶Á
             -³öÀ´µÄÖµÎª0*/
  469       =3 SBIT CORE_IDLE              = PCON^0;         /* Idle Ä£Ê½¿ØÖÆÎ» ¡£¸ÃÎªÐ´1£¬Ç¿½øÈëIDLEÄ£Ê½£¬Èç¹û¶Á¸ÃÎ»£¬¶
             -Á³öÀ´µÄÖµÎª0*/
  470       =3 
  471       =3 /* CGUCON0 */
  472       =3 SBIT ASM_32K_EN             = CGUCON0^7;  /* asm 32k clock enable.1:enable;0:disable*/
  473       =3 SBIT STANDBY                = CGUCON0^6;  /* ÓÃÓÚÔÚÕý³£Ä£Ê½ÏÂ£¬mcu´¦ÓÚpower downÊ±£¬¶ÔoscÊ±ÖÓÒÔ¼°digitalµ
             -ÄÖ÷Ê±ÖÓµÄdisable.0:disable clock tree, osc48m;1:²»¹ØÊ±ÖÓ */
  474       =3 SBIT EN_32K                 = CGUCON0^5;  /* 1:´ò¿ª32k osc*/
  475       =3 SBIT SPI0_32K_EN            = CGUCON0^4;  /* SPI0 DMAÄ£¿éÖÐµÄcounterÊ±ÖÓgating*/
  476       =3 SBIT SPI0CKEN               = CGUCON0^3;  /* SPI0¹¤×÷Ê±ÖÓµÄenable gating */
  477       =3 SBIT PROBE32K_DIG_EN        = CGUCON0^2;  /* clk_32k dig probe enable signal.1:enable;0:disable */
  478       =3 SBIT LVD_SLEEP_EN           = CGUCON0^1;  /* LVDÊÂ¼þ·¢ÉúÊ±£¬ÊÇ·ñ¹Ø±ÕOSC.0:²»¹Ø±Õ,defaultÎª0.1:¹Ø±Õ */
  479       =3 SBIT PROBE32K_FROM1M_EN     = CGUCON0^0;  /* clk_32k_from_1m probe enable signal.1:enable;0:disable */
  480       =3 
  481       =3 
  482       =3 /* CGUCON1 */
  483       =3 SBIT SYSCKEN                = CGUCON1^7;     /* clock gating module:sysctrl,p0,p1*/
  484       =3 SBIT I2CCKEN                = CGUCON1^6;     /* i2c clk enable */
  485       =3 SBIT XSICKEN                = CGUCON1^5;     /* xsi source from core clock ,gating enable */
  486       =3 SBIT TIMER_500K_EN          = CGUCON1^4;     /* timer working clock enable signal.1:enable;0:disable*/
  487       =3 SBIT TIMERCKEN              = CGUCON1^3;     /* timer clk enable*/
  488       =3 SBIT UARTCKEN               = CGUCON1^2;     /* uart clk enable*/
  489       =3 SBIT DEBUGCKEN              = CGUCON1^1;     /* debug(including i2c debug) clk enable */
  490       =3 SBIT SPI1CKEN               = CGUCON1^0;     /* spi1 clk enable*/
  491       =3 
  492       =3 /* CGUCON2 */
  493       =3 SBIT CLKEN_500K             = CGUCON2^7;     /* 500k clock gating enable*/
  494       =3 SBIT CNTCKEN                = CGUCON2^6;     /* cnt clk enable */
  495       =3 SBIT LED_32K_EN             = CGUCON2^5;     /* Led controller working clock*/
  496       =3 SBIT PROMCKEN               = CGUCON2^4;     /* prom clk enable */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 15  

  497       =3 SBIT PRAMCKEN               = CGUCON2^3;     /* pram clk enable */
  498       =3 SBIT AFEACKEN               = CGUCON2^2;     /* asm clock gating enbale */
  499       =3 SBIT LEDCKEN                = CGUCON2^1;     /* led clk enable */
  500       =3 SBIT RTC_32K_EN             = CGUCON2^0;     /* RTC Working clock*/
  501       =3 
  502       =3 /* CGUCON3 */
  503       =3 SBIT DMACKEN                = CGUCON3^7;     /* CALÔËÐÐÊ±£¬cpuÊÇ·ñ½øÈëidle×´Ì¬¡£0:²»½øÈëidle×´Ì¬;1:½øÈëid
             -le×´Ì¬*/
  504       =3 SBIT CALCKEN                = CGUCON3^6;     /* cal clock enable*/
  505       =3 SBIT AFECKEN                = CGUCON3^5;     /* Clock dynamic gating AFE controller */
  506       =3 SBIT CLOSE_500K_EN          = CGUCON3^4;     /* mcu standby close 500k enable signal.1:close*/
  507       =3 SBIT XBUSCKEN               = CGUCON3^3;     /* Xsi0 clk enable */
  508       =3 SBIT AFESCKEN               = CGUCON3^2;     /* asm configure clock */
  509       =3 SBIT CLOSE_TIMER_EN         = CGUCON3^1;     /* mcu standby close timer clock enable sigal.1:close*/
  510       =3 SBIT RTCCKEN                = CGUCON3^0;
  511       =3 
  512       =3 /* CGUCON4 */
  513       =3 SBIT SSCG_CKEN              = CGUCON4^7;   /* sscg clk enable */
  514       =3 SBIT WDT_500K_EN            = CGUCON4^6;   /* CLK_500KµÄgating enable for wdt*/
  515       =3 SBIT PROBE32K_CKEN          = CGUCON4^4;   /* probe 32K clk enable */
  516       =3 SBIT PROBE48M_CKEN          = CGUCON4^3;   /* probe 48M clk enable */
  517       =3 /*CGUCON4[1:0] clk_div  use for select frequence for div clock source 0:1div;1:2div;2:4 div;3:8div*/
  518       =3 
  519       =3 
  520       =3 /* CGUCON5 for INT0 wake up */
  521       =3 SBIT GPIO_WKEN              = CGUCON5^7;  /* int0 wake up enable */
  522       =3 SBIT LCD_ESD_WKEN           = CGUCON5^6;  /* lcd esd wake up enble */
  523       =3 SBIT LCD_LVD_WKEN           = CGUCON5^5;  /* lcd lvd wake up enble */
  524       =3 SBIT LCD_TIM_WKEN           = CGUCON5^4;  /* lcd timing wake up enble */
  525       =3 SBIT LCD_RELOAD_FLASH_WKEN  = CGUCON5^3;  /* LCD reload flash wake up enable */
  526       =3 SBIT ASM_MON_WKEN           = CGUCON5^2;  /* scan monitor wake up enable */
  527       =3 SBIT I2C_MON_WKEN           = CGUCON5^1;  /* i2c monitor wake up enable */
  528       =3 SBIT RTC_CNT_WKEN           = CGUCON5^0;  /* RTC or CNT wake up enable */
  529       =3 
  530       =3 /* CGUCON6 */
  531       =3 SBIT CLK_WP                 = CGUCON6^0; /* Only CGU0 need */
  532       =3 
  533       =3 /* CGUCON7 */
  534       =3 /*CGUCON7[7:6] OSC_TEST_SEL            ÔÚgpio¿Ú²âÁ¿osc32kºÍosc48mÊ±ÖÓÊ±µÄÑ¡ÔñÐÅºÅ.3:32k_from_1m;2:32k_dig
             -;1:32K , 0:48M */
  535       =3 /*CGUCON7[5:0] OSC_TEST_DIV            Á¿²âOSC48M»òÕß32k OSCÊ±ÖÓÊ±£¬·ÖÆµÏ´ÊþÅäÖÃ*/
  536       =3 
  537       =3 SBIT SEL_32K_SRC            = CGUCON8^7; /* 32kÊ±ÖÓÔ´Ñ¡Ôñ.1:32kÑ¡Ôñ²úÉúÓÚÄ£Äâosc,1:32kÀ´Ô´ÓÚ1m·ÖÆµ*/
  538       =3 /* [6:0] fre_noadj_set. Êý×Ö32kÊ±ÖÓÊÇ·ñµ÷ÕûµÄÈÝÖµ. 1mÊ±ÖÓ,48mÀ´²â,Èç¹ûÕýºÃÊÇ32k,¸öÊýÎª1536.µ«ÊÇ1m·ÖÆµ¿ÉÄÜ
             -µ÷Õû²»µ½ÕýºÃ32k.
  539       =3 Òò´Ë»áÀ´»ØÕðµ´.ÎªÁË½â¾ö¸ÃÎÊÌâ,ÐèÉèÖÃ¸ÃÖµ.ÈôÉèÖÃÖµÎª15,·ÖÆµ³öÀ´µÄÊ±ÖÓ,±»¼ì²âÔÚ[1536-15,1536+15]Ö®¼ä,²»»áµ÷
             -Õû */
  540       =3 
  541       =3 /*I2CCON*/
  542       =3 SBIT I2C_WKEN               = I2CCON^5;      /* 0:disable i2c wakeup;1:enable i2c wakeup */
  543       =3 SBIT I2C_DEGLITCH_EN        = I2CCON^4;      /* analog deglitch enable.0:disable;1:enable */
  544       =3 SBIT I2C_BUSY               = I2CCON^3;      /* i2cÊÇ·ñ´¦ÓÚ·¢ËÍ/½ÓÊÕ×´Ì¬.0:idle;1:busy */
  545       =3 SBIT I2CTI                  = I2CCON^1;      /* hw set, sw clear */
  546       =3 SBIT I2CRI                  = I2CCON^0;      /* hw set, sw clear */
  547       =3 
  548       =3 /*I2CSTOP*/
  549       =3 SBIT I2C_WAIT               = I2CSTOP^7;     /* 0:ÊÍ·Åi2c scl;1:À­µÍi2c scl,À©Õ¹sclÖÜÆÚ;µ±slaveÃ¦Ê±²»ÄÜ¼°
             -Ê±ÏìÓ¦ */
  550       =3 SBIT COMP_BPSS              = I2CSTOP^6;     /* 0:Ê¹ÄÜi2cµØÖ·Æ¥Åä;1:È¡ÏûµØÖ·Æ¥Åä¿ØÖÆ */
  551       =3 SBIT ADDR_NACK              = I2CSTOP^5;     /* 0:¶Ôi2cµØÖ·½×¶Î·¢ack;1:¶Ôi2cµØÖ·½×¶Î·¢ËÍnack */
  552       =3 SBIT DATA_NACK              = I2CSTOP^4;     /* 0:¶Ôi2cÊý¾Ý½×¶Î·¢ack;1:¶Ôi2cÊý¾Ý½×¶Î·¢nack */
  553       =3 SBIT I2C_WK_STOP            = I2CSTOP^2;     /* wakeupÄ£¿é½ÓÊÕµ½ÕýÈ·µÄstop£¬write 0 to clear */
  554       =3 SBIT STOPID                 = I2CSTOP^1;     /* stop×´Ì¬×´Ì¬Î»,±íÊ¾µ±Ç°ÊÇwr stop»¹ÊÇrd stop.0: host write
             - stop 1: host read stop */
  555       =3 SBIT I2CSTP                 = I2CSTOP^0;     /* hw set when received right i2c stop statue,sw clear */
  556       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 16  

  557       =3 /*I2CSEL*/
  558       =3 SBIT I2C_MON_CFG            = I2CSEL^4;   /* 0: i2c¹¤×÷£¬i2c monitor²»¹¤×÷; 1:i2c²»¹¤×÷,i2c_monitor¹¤×÷ *
             -/
  559       =3 
  560       =3 /* I2CStart*/
  561       =3 SBIT I2C_WK_BYTE4_FLAG      = I2C_STATE^3;
  562       =3 SBIT I2C_WK_BYTE3_FLAG      = I2C_STATE^2;
  563       =3 SBIT I2C_WK_BYTE2_FLAG      = I2C_STATE^1;
  564       =3 SBIT I2C_WK_BYTE1_FLAG      = I2C_STATE^0;
  565       =3 
  566       =3 /*IEN1*/
  567       =3 SBIT SWDT                   = IEN1^6;     /*Active watchdog timer.1:active;0:idle*/
  568       =3 
  569       =3 /* WDTCON */
  570       =3 SBIT WDTACT                 = WDTCON^2;   /* wdt work state.1:wdt in running mode; 0:wdt in stop mode */
  571       =3 SBIT WDTSTARTEN             = WDTCON^1;   /* when write 1,wdt start running,it is auto clear to 0 */
  572       =3 SBIT WDTSTOPEN              = WDTCON^0;   /* when write 1,wdt stop running,it is auto clear to 0 */
  573       =3 
  574       =3 /*WDTREL*/
  575       =3 SBIT WDT_PRESCALE           = WDTREL^7;  /*Reload value for high-byte watchdog.1:Ã¿384¸öcycle¼ÆÊýÒ»´Î;0:Ã
             -¿24¸öcycle¼ÆÊýÒ»´Î*/
  576       =3 /*WDTREL[6:0]                   reload value for the high_seven_byte of the watchdog timer when a refresh
             - is triggered.*/
  577       =3 
  578       =3 /* TCON */
  579       =3 SBIT TF1 = TCON^7;               /* timer1 overflow flag£º
  580       =3                                    µ±timer1 overflowsÊ±»áÖÃ1£¬ÖÐ¶ÏÏìÓ¦Ê±Ó²¼þ»áÇåÁã */
  581       =3 SBIT TR1 = TCON^6;               /* timer1µÄ¿ØÖÆÎ»¡£
  582       =3                                    ¡°1¡±£ºÆð¶¯timer1,Ó²¼þ×Ô¶¯ÇåÁã£¨×¢Òâ£ºÔÚÆð¶¯timer1Ö®Ç°±ØÐëÒª°Ñtimer1Éè
             -¶¨ºÃ£© */
  583       =3 SBIT TF0 = TCON^5;               /* timer0 overflow flag£º
  584       =3                                     µ±timer0 overflowsÊ±»áÖÃ1£¬ÖÐ¶ÏÏìÓ¦Ê±Ó²¼þ»áÇåÁã */
  585       =3 SBIT TR0 = TCON^4;               /* timer0µÄ¿ØÖÆÎ»¡£
  586       =3                                    ¡°1¡±£ºÆð¶¯timer0,Ó²¼þ×Ô¶¯ÇåÁã£¨×¢Òâ£ºÔÚÆð¶¯timer0Ö®Ç°±ØÐëÒª°Ñtimer0Éè
             -¶¨ºÃ£© */
  587       =3 SBIT IF1 = TCON^3;               /* external interrupt 1 edge flag,hardware controlled
  588       =3                                     set when external interrupt 1 is detected
  589       =3                                     cleared when interrupt is processed */
  590       =3 SBIT IT1 = TCON^2;               /* external interrupt 1 signal type control bit
  591       =3                                     set to specify external interrupt 1 as falling edge triggered
  592       =3                                     cleared to specify external interrupt 1 as low level triggered */
  593       =3 SBIT IF0 = TCON^1;               /* external interrupt 0 edge flag , hardware controlled
  594       =3                                     set when external interrupt 0 is detected
  595       =3                                     cleared when interrupt is processed */
  596       =3 SBIT IT0 = TCON^0;               /* external interrupt 0 signal type control bit.
  597       =3                                     Set to specify External interrupt 0 as falling edge triggered.
  598       =3                                     Cleared to specify External interrupt 0 as low level triggered. */
  599       =3 /*TMOD*/
  600       =3 SBIT GATE1              = TMOD^7;  /*timer 1 gate*/
  601       =3 SBIT GATE0              = TMOD^3;  /*timer0 gate*/
  602       =3 /*TMOD[5:4]             time1 mode select. 00:timer stop; 01:16 bit counter single mode; 10:16 bit counte
             -r repeat mode; 11:half timer1ÔÝÍ£¹¤×÷,Èç¹û¸´Ô­µ½Ö®Ç°µÄÄ£Ê½,timer1½«¼ÌÐø¹¤×÷*/
  603       =3 /*TMOD[1:0]             time0 mode select.¹¦ÄÜÍ¬ÉÏ*/
  604       =3 
  605       =3 /*TDIV*/
  606       =3 SBIT INTSEL1            = TDIV^7;   /*timer1ÖÐ¶ÏÇå³ýÑ¡Ôñ.1:Èí¼þÇå³ý,Ð´intclr1Çå³ýtimer1ÖÐ¶Ï;0:Ó²¼þÇå³ý*/
  607       =3 SBIT INTSEL0            = TDIV^6;   /*timer0ÖÐ¶ÏÇå³ýÑ¡Ôñ.1:Èí¼þÇå³ý,Ð´intclr0Çå³ýtimer1ÖÐ¶Ï;0:Ó²¼þÇå³ý*/
  608       =3 SBIT INTCLR1            = TDIV^5;   /*Èí¼þÇå³ýÊ±,INTCLR1Ð´1Ê±Çå³ýtimer1ÖÐ¶Ï*/
  609       =3 SBIT INTCLR0            = TDIV^4;   /*Èí¼þÇå³ýÊ±,INTCLR0Ð´1Ê±Çå³ýtimer1ÖÐ¶Ï*/
  610       =3 
  611       =3 /* CNTCON */
  612       =3 SBIT CNT_START          = CNTCON^7;   /* 1: Æô¶¯CNT; 0: ¼ÆÊýÖÕÖ¹(¿ÉÒÔ¶ÁÈ¡¼ÆÊýÖµ) */
  613       =3 SBIT CNT_CLEAR          = CNTCON^4;   /* Çå³ýCNT¼ÆÊýÆ÷Öµµ½0 */
  614       =3 SBIT CNT_WKEN           = CNTCON^3;   /* CNT»½ÐÑÊ¹ÄÜ: 1:´ò¿ªÊ¹ÄÜ 0:¹Ø±Õ»½ÐÑÊ¹ÄÜ */
  615       =3 
  616       =3 /*LED_EN*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 17  

  617       =3 SBIT LED_5_EN           = LED_EN^5;
  618       =3 SBIT LED_4_EN           = LED_EN^4;
  619       =3 SBIT LED_3_EN           = LED_EN^3;
  620       =3 SBIT LED_2_EN           = LED_EN^2;
  621       =3 SBIT LED_1_EN           = LED_EN^1;
  622       =3 SBIT LED_0_EN           = LED_EN^0;
  623       =3 
  624       =3 /*MEMBIST_EN1*/
  625       =3 SBIT DRAM2_BIST_EN      = MEMBIST_EN1^7;
  626       =3 SBIT DRAM1_BIST_EN      = MEMBIST_EN1^6;
  627       =3 SBIT DRAM0_BIST_EN      = MEMBIST_EN1^5;
  628       =3 SBIT PRAM4_BIST_EN      = MEMBIST_EN1^4;
  629       =3 SBIT PRAM3_BIST_EN      = MEMBIST_EN1^3;
  630       =3 SBIT PRAM2_BIST_EN      = MEMBIST_EN1^2;
  631       =3 SBIT PRAM1_BIST_EN      = MEMBIST_EN1^1;
  632       =3 SBIT PRAM0_BIST_EN      = MEMBIST_EN1^0;
  633       =3 
  634       =3 /*MEMBIST_EN2*/
  635       =3 SBIT AFERAM_R_BIST_EN   = MEMBIST_EN2^3;
  636       =3 SBIT AFERAM_L_BIST_EN   = MEMBIST_EN2^2;
  637       =3 SBIT ARAM_BIST_EN       = MEMBIST_EN2^1;
  638       =3 SBIT PROM_BIST_EN       = MEMBIST_EN2^0;
  639       =3 
  640       =3 /*MEMBIST_FINISH1*/
  641       =3 SBIT DRAM2_FINISH       = MEMBIST_FINISH1^7;
  642       =3 SBIT DRAM1_FINISH       = MEMBIST_FINISH1^6;
  643       =3 SBIT DRAM0_FINISH       = MEMBIST_FINISH1^5;
  644       =3 SBIT PRAM4_FINISH       = MEMBIST_FINISH1^4;
  645       =3 SBIT PRAM3_FINISH       = MEMBIST_FINISH1^3;
  646       =3 SBIT PRAM2_FINISH       = MEMBIST_FINISH1^2;
  647       =3 SBIT PRAM1_FINISH       = MEMBIST_FINISH1^1;
  648       =3 SBIT PRAM0_FINISH       = MEMBIST_FINISH1^0;
  649       =3 
  650       =3 /*MEMBIST_FINISH2*/
  651       =3 SBIT RPTRAM_R_FINISH    = MEMBIST_FINISH2^7;
  652       =3 SBIT RPTRAM_L_FINISH    = MEMBIST_FINISH2^6;
  653       =3 SBIT ACCRAM_R_FINISH    = MEMBIST_FINISH2^5;
  654       =3 SBIT ACCRAM_L_FINISH    = MEMBIST_FINISH2^4;
  655       =3 SBIT TABRAM_R_FINISH    = MEMBIST_FINISH2^3;
  656       =3 SBIT TABRAM_L_FINISH    = MEMBIST_FINISH2^2;
  657       =3 SBIT ARAM_FINISH        = MEMBIST_FINISH2^1;
  658       =3 SBIT PROM_FINISH        = MEMBIST_FINISH2^0;
  659       =3 
  660       =3 /*MEMBIST_FAIL1*/
  661       =3 SBIT DRAM2_FAIL         = MEMBIST_FAIL1^7;
  662       =3 SBIT DRAM1_FAIL         = MEMBIST_FAIL1^6;
  663       =3 SBIT DRAM0_FAIL         = MEMBIST_FAIL1^5;
  664       =3 SBIT PRAM4_FAIL         = MEMBIST_FAIL1^4;
  665       =3 SBIT PRAM3_FAIL         = MEMBIST_FAIL1^3;
  666       =3 SBIT PRAM2_FAIL         = MEMBIST_FAIL1^2;
  667       =3 SBIT PRAM1_FAIL         = MEMBIST_FAIL1^1;
  668       =3 SBIT PRAM0_FAIL         = MEMBIST_FAIL1^0;
  669       =3 
  670       =3 /*MEMBIST_FAIL2*/
  671       =3 SBIT RPTRAM_R_FAIL      = MEMBIST_FAIL2^7;
  672       =3 SBIT RPTRAM_L_FAIL      = MEMBIST_FAIL2^6;
  673       =3 SBIT ACCRAM_R_FAIL      = MEMBIST_FAIL2^5;
  674       =3 SBIT ACCRAM_L_FAIL      = MEMBIST_FAIL2^4;
  675       =3 SBIT TABRAM_R_FAIL      = MEMBIST_FAIL2^3;
  676       =3 SBIT TABRAM_L_FAIL      = MEMBIST_FAIL2^2;
  677       =3 SBIT ARAM_FAIL          = MEMBIST_FAIL2^1;
  678       =3 SBIT PROM_FAIL          = MEMBIST_FAIL2^0;
  679       =3 
  680       =3 /*MEMBIST_ERRMAP1*/
  681       =3 SBIT DRAM2_ERRMAP       = MEMBIST_ERRMAP1^7;
  682       =3 SBIT DRAM1_ERRMAP       = MEMBIST_ERRMAP1^6;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 18  

  683       =3 SBIT DRAM0_ERRMAP       = MEMBIST_ERRMAP1^5;
  684       =3 SBIT PRAM4_ERRMAP       = MEMBIST_ERRMAP1^4;
  685       =3 SBIT PRAM3_ERRMAP       = MEMBIST_ERRMAP1^3;
  686       =3 SBIT PRAM2_ERRMAP       = MEMBIST_ERRMAP1^2;
  687       =3 SBIT PRAM1_ERRMAP       = MEMBIST_ERRMAP1^1;
  688       =3 SBIT PRAM0_ERRMAP       = MEMBIST_ERRMAP1^0;
  689       =3 
  690       =3 /*MEMBIST_ERRMAP2*/
  691       =3 SBIT RPTRAM_R_ERRMAP    = MEMBIST_ERRMAP2^7;
  692       =3 SBIT RPTRAM_L_ERRMAP    = MEMBIST_ERRMAP2^6;
  693       =3 SBIT ACCRAM_R_ERRMAP    = MEMBIST_ERRMAP2^5;
  694       =3 SBIT ACCRAM_L_ERRMAP    = MEMBIST_ERRMAP2^4;
  695       =3 SBIT TABRAM_R_ERRMAP    = MEMBIST_ERRMAP2^3;
  696       =3 SBIT TABRAM_L_ERRMAP    = MEMBIST_ERRMAP2^2;
  697       =3 SBIT ARAM_ERRMAP        = MEMBIST_ERRMAP2^1;
  698       =3 SBIT PROM_ERRMAP        = MEMBIST_ERRMAP2^0;
  699       =3 
  700       =3 /* AIF */
  701       =3 SBIT WDT_INT_IF         = AIF^4;      /* wdt intÇëÇóÐÅºÅ */
  702       =3 SBIT SPI0_INT_IF        = AIF^3;      /* spi0 intÇëÇóÐÅºÅ */
  703       =3 SBIT SPI1_INT_IF        = AIF^2;      /* spi1 intÇëÇóÐÅºÅ */
  704       =3 SBIT ASM_INT_IF         = AIF^1;      /* asm intÇëÇóÐÅºÅ */
  705       =3 SBIT I2C_STOP_IF        = AIF^0;      /* i2c stop intÇëÇóÐÅºÅ */
  706       =3 
  707       =3 /* AIE */
  708       =3 SBIT WDT_INT_EI         = AIE^4;    /* wdt int enable */
  709       =3 SBIT SPI0_EI            = AIE^3;    /* spi0 int enable*/
  710       =3 SBIT SPI1_EI            = AIE^2;    /* spi1 int enable */
  711       =3 SBIT ASM_EI             = AIE^1;    /* Asm int enable */
  712       =3 SBIT I2C_STOP_EI        = AIE^0;    /* i2c stop int enable */  
  713       =3 
  714       =3 
  715       =3 /* IEN0 */
  716       =3 SBIT EA                 = IEN0^7;  /* Global Interrupt Enable */
  717       =3 SBIT EC                 = IEN0^6;  /* uart */
  718       =3 SBIT ET2                = IEN0^5;  /* I2C */
  719       =3 SBIT ES                 = IEN0^4;  /* LCD TIMING int */
  720       =3 SBIT ET1                = IEN0^3;  /* timer1 */
  721       =3 SBIT EX1                = IEN0^2;  /* RTC or CNT */
  722       =3 SBIT ET0                = IEN0^1;  /* timer0 */
  723       =3 SBIT EX0                = IEN0^0;  /* int0 wake up */
  724       =3 
  725       =3 /* interruption priority */
  726       =3 SBIT IPHX0              = IPH0^0;   /* Int0 */
  727       =3 SBIT IPLX0              = IPL0^0;
  728       =3 SBIT IPHT0              = IPH0^1;   /* Time0 */
  729       =3 SBIT IPLT0              = IPL0^1;
  730       =3 SBIT IPHX1              = IPH0^2;   /* Int1 */
  731       =3 SBIT IPLX1              = IPL0^2;
  732       =3 SBIT IPHT1              = IPH0^3;   /* Time1 */
  733       =3 SBIT IPLT1              = IPL0^3;
  734       =3 SBIT LCD_IPH            = IPH0^4;   /* LCD int run */
  735       =3 SBIT LCD_IPL            = IPL0^4;
  736       =3 SBIT I2C_IPH            = IPH0^5;   /* I2C */
  737       =3 SBIT I2C_IPL            = IPL0^5;
  738       =3 SBIT Uart_IPH           = IPH0^6;   /* Uart */
  739       =3 SBIT Uart_IPL           = IPL0^6;
  740       =3 SBIT I2C_STOP_IPH       = AIPH^0;   /* I2C Stop */
  741       =3 SBIT I2C_STOP_IPL       = AIPL^0;
  742       =3 SBIT ASM_IPH            = AIPH^1;   /* ASM */
  743       =3 SBIT ASM_IPL            = AIPL^1;   
  744       =3 SBIT SPI1_IPH           = AIPH^2;   /* SPI1 */
  745       =3 SBIT SPI1_IPL           = AIPL^2;
  746       =3 SBIT SPI0_IPH           = AIPH^3;   /* SPI0 */
  747       =3 SBIT SPI0_IPL           = AIPL^3;
  748       =3 SBIT WDT_IPH            = AIPH^4;   /* wdt */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 19  

  749       =3 SBIT WDT_IPL            = AIPL^4;
  750       =3 
  751       =3 /* P0 */
  752       =3 SBIT P0_7               = P0BUF^7;
  753       =3 SBIT P0_6               = P0BUF^6;
  754       =3 SBIT P0_5               = P0BUF^5;
  755       =3 SBIT P0_4               = P0BUF^4;
  756       =3 SBIT P0_3               = P0BUF^3;
  757       =3 SBIT P0_2               = P0BUF^2;
  758       =3 SBIT P0_1               = P0BUF^1;
  759       =3 SBIT P0_0               = P0BUF^0;
  760       =3 
  761       =3 /*p1*/
  762       =3 SBIT P1_7               = P1BUF^7;
  763       =3 SBIT P1_6               = P1BUF^6;
  764       =3 SBIT P1_5               = P1BUF^5;
  765       =3 SBIT P1_4               = P1BUF^4;
  766       =3 SBIT P1_3               = P1BUF^3;
  767       =3 SBIT P1_2               = P1BUF^2;
  768       =3 SBIT P1_1               = P1BUF^1;
  769       =3 SBIT P1_0               = P1BUF^0;
  770       =3 
  771       =3 
  772       =3 /* GPIO pin definition */
  773       =3 SBIT Flash_WP           = P1BUF^7;
  774       =3 SBIT Flash_HOLD         = P1BUF^4;
  775       =3 
  776       =3 SBIT Flash_pad          = P1BUF^6;
  777       =3 SBIT Flash_DIR          = P1DIR^6;
  778       =3 SBIT Flash_GPIO         = P1MOD^6;
  779       =3 SBIT Flash_DM           = P1SEL^6;
  780       =3 
  781       =3 SBIT INTOUT             = P0BUF^6;
  782       =3 SBIT INTOUT_DIR         = P0DIR^6;
  783       =3 SBIT GPIO_INTOUT        = P0MOD^6;
  784       =3 SBIT INTOUT_DM          = P0SEL^6;
  785       =3 
  786       =3 SBIT GPIO3              = P0BUF^7;
  787       =3 SBIT GPIO3_DIR          = P0DIR^7;
  788       =3 SBIT GPIO3_INTOUT       = P0MOD^7;
  789       =3 SBIT GPIO3_DM           = P0SEL^7;
  790       =3 
  791       =3 SBIT GPIO4              = P1BUF^5;
  792       =3 SBIT GPIO4_DIR          = P1DIR^5;
  793       =3 SBIT GPIO4_INTOUT       = P1MOD^5;
  794       =3 SBIT GPIO4_DM           = P1SEL^5;
  795       =3 
  796       =3 /* mcu clk config */
  797       =3 #define MAIN_CLK  0 //0:48M; 1:24M   
  798       =3 /*******************************************************************************
  799       =3  * 3.Global structures, unions and enumerations using typedef
  800       =3  *******************************************************************************/
  801       =3 
  802       =3 /*******************************************************************************
  803       =3  * 4.Global variable extern declarations
  804       =3  *******************************************************************************/
  805       =3 
  806       =3 
  807       =3 /******************************************************************************
  808       =3 *
  809       =3 * App Info data section
  810       =3 ******************************************************************************/
  811       =3 // app ´æÔÚflashµÄÎïÀíµØÖ·
  812       =3 #define CODE_START_ADDR       0x1000
  813       =3 #define CODE_VERIF_ADDR       (CODE_START_ADDR+APP_VERIF_ADDR)
  814       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 20  

  815       =3 // app ´æÔÚpramµÄÎïÀíµØÖ·
  816       =3 #define APP_ADDR_START        0x0000  // app start addr
  817       =3 #define APP_START_OPCODE      0x02
  818       =3 
  819       =3 #define APP_VERIF_ADDR        0x100   // Verification Info
  820       =3 #define APP_VERIF_LEN         0x20
  821       =3 #define APP_VERIF_CODE_LEN    0x04    //appÖÐcode³¤¶ÈÐÅÏ¢
  822       =3 
  823       =3 typedef enum
  824       =3 {
  825       =3     APP_LEN      = 0x00,
  826       =3     APP_NE_LEN   = 0x02,
  827       =3     P1_ECC_H     = 0x04,
  828       =3     P1_ECC_L     = 0x05,
  829       =3     P1_ECC_NE_H  = 0x06,
  830       =3     P1_ECC_NE_L  = 0x07,
  831       =3     P2_ECC_H     = 0x08,
  832       =3     P2_ECC_L     = 0x09,
  833       =3     P2_ECC_NE_H  = 0x0A,
  834       =3     P2_ECC_NE_L  = 0x0B,
  835       =3     APP_LEN_H    = 0x12,
  836       =3     APP_LEN_H_NE = 0x14,
  837       =3 } ENUM_APP_INFO;
  838       =3 
  839       =3 // AppÑéÖ¤ÐÅÏ¢
  840       =3 #define ADDR_APP_LEN          (APP_VERIF_ADDR+APP_LEN)
  841       =3 #define ADDR_APP_NE_LEN       (APP_VERIF_ADDR+APP_NE_LEN)
  842       =3 #define ADDR_PART1_ECC        (APP_VERIF_ADDR+P1_ECC_H)
  843       =3 #define ADDR_PART1_ECC_NE     (APP_VERIF_ADDR+P1_ECC_NE_H)
  844       =3 #define ADDR_PART2_ECC        (APP_VERIF_ADDR+P2_ECC_H)
  845       =3 #define ADDR_PART2_ECC_NE     (APP_VERIF_ADDR+P2_ECC_NE_H)
  846       =3 #define ADDR_APP_LEN_H        (APP_VERIF_ADDR+APP_LEN_H)
  847       =3 #define ADDR_APP_LEN_H_NE     (APP_VERIF_ADDR+APP_LEN_H_NE)
  848       =3 
  849       =3 #define APP_ADDR_PART1_START  0x0000
  850       =3 #define APP_ADDR_PART1_LEN    ((APP_VERIF_ADDR)-(APP_ADDR_PART1_START))
  851       =3 #define APP_ADDR_PART2_START  ((APP_VERIF_ADDR)+(APP_VERIF_LEN)+(FW_CFG_TOTAL_SIZE))
  852       =3 
  853       =3 #define FLASH_APP_INFO        (APP_VERIF_ADDR + CODE_START_ADDR)
  854       =3 /******************************************************************************
  855       =3 *
  856       =3 * FW config data section
  857       =3 *******************************************************************************
  858       =3 /
  859       =3 /* FWÅäÖÃÇøÓò³¤¶È */
  860       =3 #define FW_CFG_TOTAL_SIZE          0x80
  861       =3 #define FW_CFG_INFO_SIZE           0x0E
  862       =3 
  863       =3 /* FWÅäÖÃÇøÓòÆ«ÒÆÁ¿ */
  864       =3 typedef enum
  865       =3 {
  866       =3     FW_CFG_I2C_OFFSET              = 0x00,     // master I2C  addr
  867       =3     FW_CFG_I2C_NE_OFFSET           = 0x01,     // ~master I2C addr
  868       =3     FW_CFG_IOVOLTAGE_OFFSET        = 0x02,     // Io Voltage 
  869       =3     FW_CFG_IOVOLTAGE_NE_OFFSET     = 0x03,     // ~Io Voltage
  870       =3     FW_CFG_VENDOR_OFFSET           = 0x04,     // Vendor 
  871       =3     FW_CFG_VENDOR_NE_OFFSET        = 0x05,     // ~Vendor
  872       =3     FW_CFG_SPI_CLK_OFFSET          = 0x06,     // SPI Clk
  873       =3     FW_CFG_SPI_CLK_NE_OFFSET       = 0x07,     // ~SPI Clk
  874       =3     FW_CFG_SYS_CLK_OFFSET          = 0x08,     // Sys Clk
  875       =3     FW_CFG_SYS_CLK_NE_OFFSET       = 0x09,     // ~Sys Clk 
  876       =3     FW_CFG_XBUS_CLK_OFFSET         = 0x0A,     // LCD xbus clk
  877       =3     FW_CFG_XBUS_CLK_NE_OFFSET      = 0x0B,     // ~LCD xbus clk
  878       =3     FW_CFG_SPI_IOMODE_OFFSET       = 0x0C,     // spi iomode
  879       =3     FW_CFG_SPI_IOMODE_NE_OFFSET    = 0x0D,     // ~spi iomode
  880       =3 } ENUM_FW_CFG_OFFSET;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 21  

  881       =3 
  882       =3 /* FWÅäÖÃÇøÓòFlashÎ»ÖÃ */
  883       =3 typedef enum
  884       =3 {
  885       =3     FW_CFG_START_FLASH_ADDR        = 0x0F80,
  886       =3     FW_CFG_I2C_FLASH_ADDR          = (FW_CFG_START_FLASH_ADDR+
  887       =3 FW_CFG_I2C_OFFSET),
  888       =3 } ENUM_FW_CFG_FLASH_ADDR;
  889       =3 
  890       =3 /* FWÅäÖÃ±¸·ÝÇøÓòFlashÎ»ÖÃ */
  891       =3 typedef enum
  892       =3 {
  893       =3     FW_CFG_BKUP_START_FLASH_ADDR   = 0x1120,
  894       =3     FW_CFG_BKUP_I2C_FLASH_ADDR     = (FW_CFG_BKUP_START_FLASH_ADDR+FW_CFG_I2C_OFFSET),
  895       =3 } ENUM_FW_CFG_BKUP_FLASH_ADDR;
  896       =3 
  897       =3 /* LCD OTPÅäÖÃÇøÓòÎ»ÖÃ */
  898       =3 typedef enum
  899       =3 {
  900       =3     LCD_OTP_REG_ADDR               = 0x9866,
  901       =3     LCD_OTP_MASTER_I2C_ADDR        = (LCD_OTP_REG_ADDR+FW_CFG_I2C_OFFSET),
  902       =3     LCD_OTP_MASTER_I2C_NE_ADDR,
  903       =3     LCD_OTP_SPI_CLK_ADDR           = (LCD_OTP_REG_ADDR+FW_CFG_SPI_CLK_OFFSET),
  904       =3     LCD_OTP_SPI_CLK_NE_ADDR,
  905       =3     LCD_OTP_SYS_CLK_ADDR,
  906       =3     LCD_OTP_SYS_CLK_NE_ADDR,
  907       =3     LCD_OTP_XBUS_CLK_ADDR,
  908       =3     LCD_OTP_XBUS_CLK_NE_ADDR,
  909       =3     LCD_OTP_SPI_IOMODE_ADDR,
  910       =3     LCD_OTP_SPI_IOMODE_NE_ADDR,
  911       =3 } ENUM_LCD_OTP_ADDR;
  912       =3 
  913       =3 #define REG8(n)  (*((volatile UINT8  *)(n)))
  914       =3 #define REG16(n) (*((volatile UINT16 *)(n)))
  915       =3 #define REG32(n) (*((volatile UINT32 *)(n)))
  916       =3 
  917       =3 #define APP_DATA_MAX         0x11800
  918       =3 #define RST_VALUE_UPGRADE    0x6B  /* Flag of upgrade according to Romboot */
  919       =3 
  920       =3 #define PRAM_ADDR8(n)    (*((UINT8 far *)((UINT32)0xFEE800 + (n))))
  921       =3 #define PRAM2_ADDR8(n)   (*((UINT8 far *)((UINT32)0xFF4000 + (n))))
  922       =3 
  923       =3 #define PRAM_PTR8(n)     ((volatile UINT8 far *)((UINT32)0xFEE800 + (n)))
  924       =3 #define PRAM2_PTR8(n)    ((volatile UINT8 far *)((UINT32)0xFF4000 + (n)))
  925       =3 
  926       =3 #define PROM_ADDR8(n)     (*((UINT8 far *)(0xFD0000 + n)))
  927       =3 #define DRAM_ADDR8(n)     (*((UINT8 *)(0x0000 + n)))
  928       =3 
  929       =3 
  930       =3 #define PRAM_ADDR16(n)     (*((UINT16 far *)(0xFEE800 + n)))
  931       =3 
  932       =3 #define PROM_ADDR16(n)     (*((UINT16 far *)((UINT32)0xFD0000 + n)))
  933       =3 #define DRAM_ADDR16(n)     (*((UINT16 *)((UINT32)0x0000 + n)))
  934       =3 
  935       =3 #define HOLD            while (1)
  936       =3 /*******************************************************************************
  937       =3  * Global function prototypes
  938       =3  *******************************************************************************/
  939       =3 
  940       =3 #endif
   87       =2 #include "FT8836_Reg.h"
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: FT8836_Reg.h
    5       =3 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 22  

    6       =3 *    Author: 
    7       =3 *
    8       =3 *   Created: 2016-07-11
    9       =3 *
   10       =3 *  Abstract: Define FT8836 Sram registers and their bits
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 
   16       =3 #ifndef _FT8836_REG_H_
   17       =3 #define _FT8836_REG_H_
   18       =3 
   19       =3 /* Conditional Compiler Options */
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * Included files
   23       =3 *******************************************************************************/
   24       =3 #include "FT8836.h"
    1       =4 /*******************************************************************************
    2       =4  * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =4  *
    4       =4  * File Name: FT8836.h
    5       =4  *
    6       =4  *    Author: 
    7       =4  *
    8       =4  *   Created: 2016-07-11
    9       =4  *
   10       =4  *  Abstract: 1. In this file, sfrs(special function registers) and their bits
   11       =4  *            are defined for chip ft8626 based on platform C251.
   12       =4  *
   13       =4  *            2. Please note that there are some differences in the way the
   14       =4  *            instructions address bits between the two architectures MCS251 and
   15       =4  *            MCS51. The MCS251 does not have bit addresses as MCS51 does. A bit
   16       =4  *            can be addressed by name or by its location within a certain
   17       =4  *            register, but not by a bit address.
   18       =4  *
   19       =4  *            Table: Addressing Modes for Bit Instructions
   20       =4  *            -------------------------------------------------------------------
   21       =4  *            Architecture Variants Bit Address Memory/SFR Address Comments
   22       =4  *            -------------------------------------------------------------------
   23       =4  *            MCS251       Memory -- NA ------- 20H.0-7FH.7        does not have
   24       =4  *            (bit)        SFR ----- NA ------- All defined SFRs   bit addresses
   25       =4  *            -------------------------------------------------------------------
   26       =4  *            MCS 51       Memory -- 00H-7FH -- 20H.0-7FH.7        not all SFRs
   27       =4  *            (bit51)      SFR ----- 80H-F8H -- XXH.0-XXH.7, where have bit
   28       =4  *                                              XX = 80,88,90,98,  addresses.
   29       =4  *                                              ..., F0, F8.
   30       =4  *            -------------------------------------------------------------------
   31       =4  *
   32       =4  *            3. This file is only used by library and driver of project ft5412.
   33       =4  *
   34       =4  * Reference: 1. Intel 8xc251sx User's Manual (8xc251sx_um.pdf)
   35       =4  *            2. Keil C251 help document
   36       =4  *
   37       =4  *******************************************************************************/
   38       =4 #ifndef __FT8836_H__
            =4 #define __FT8836_H__
            =4 
            =4 /* Conditional Compiler Options */
            =4 
            =4 /* Conditional Compiler Options */
            =4 /*******************************************************************************
            =4  * 1.Included files
            =4  *******************************************************************************/
            =4 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 23  

            =4 /*******************************************************************************
            =4  * 2.Global constant and macro definitions using #define
            =4  *******************************************************************************/
            =4 /******************************************************************************/
            =4 /* byte Registers */
            =4 
            =4 /*80-87*/
            =4 SFR P0BUF           = 0x80;   /*PoBuf*/
            =4 SFR SP              = 0x81; 
            =4 SFR DPL             = 0x82;
            =4 SFR DPH             = 0x83;
            =4 SFR DPXL            = 0x84;
            =4 SFR PCON            = 0x87;
            =4 
            =4 /*88-8F*/
            =4 SFR TCON            = 0x88;
            =4 SFR TMOD            = 0x89;
            =4 SFR TL0             = 0x8A;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼äµÍ8Î»£¬¼ÆÊýÊ±¼äÎªTL0[7:0]X4us,×î´óÖµ²»ÄÜ³¬¹ý1msÒ²¾ÍÊÇËµ×î´
             -óÖµÎª8¡¯hF9,´óÓÚ´ËÖµÊ±½«Ç¿ÖÆÎª8¡¯hF9. */
            =4 SFR TL1             = 0x8B;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼äµÍ8Î»£¬¼ÆÊýÊ±¼äÎªTL1[7:0]X4us */
            =4 SFR TH0             = 0x8C;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼ä¸ß8Î»£¬¼ÆÊýÊ±¼äÎªTH0[7:0]X1ms,TH0[7]±ØÐëÎª0£¬ËùÒÔ×î³¤Ê±¼äÎ
             -ª127ms */
            =4 SFR TH1             = 0x8D;   /* Éè¶¨¼ÆÊýÆ÷Ê±¼ä¸ß8Î»£¬¼ÆÊýÊ±¼äÎªTH1[7:0]X1ms,TH1[7]±ØÐëÎª0£¬ËùÒÔ×î³¤Ê±¼äÎ
             -ª127ms */
            =4 
            =4 /*90-97*/
            =4 SFR I2CCON          = 0x90;
            =4 SFR I2CBUF          = 0x91;
            =4 SFR I2CADDR         = 0x92;
            =4 SFR I2CSTOP         = 0x93;
            =4 SFR P1BUF           = 0x94;   /*P1Buf*/
            =4 SFR I2CSEL          = 0x95;
            =4 SFR MMCON           = 0x97;
            =4 
            =4 /*98-9F*/
            =4 SFR SYSCON          = 0x98;
            =4 SFR WDTCON          = 0x99;
            =4 SFR WDTREL          = 0x9A;
            =4 SFR TDIV            = 0x9B;
            =4 SFR RTCIVL          = 0x9C; /*rtc¼ÆÊýÖÕÖ¹µÍ8Î»*/      
            =4 SFR RTCIVH          = 0x9D; /*rtc¼ÆÊýÖÕÖ¹¸ß8Î»*/
            =4 SFR RTCCON          = 0x9E;
            =4 SFR RTCSLN          = 0x9F; /*rtc Ê±¼äÆ¬¸öÊý*/
            =4 
            =4 /*A0-A7*/
            =4 SFR ANACON8         = 0xA0;
            =4 SFR SPI0CON         = 0xA2;
            =4 SFR SPI0CON2        = 0xA3;
            =4 SFR SPI0BUF         = 0xA4;
            =4 SFR SPI0CON3        = 0xA5;
            =4 SFR SPI0CON4        = 0xA6; 
            =4 SFR SPI0CON5        = 0xA7;
            =4 
            =4 /*A8-AF*/
            =4 SFR IEN0            = 0xA8;
            =4 SFR UARTCON         = 0xA9;
            =4 SFR UARTBUF         = 0xAA;
            =4 SFR UART_RELL       = 0xAB;
            =4 SFR P0DIR           = 0xAC;   /*P0¿Ú·½ÏòÅäÖÃ£¬1:Êä³ö, 0:ÊäÈë*/
            =4 SFR P1DIR           = 0xAD;   /*P1¿Ú·½ÏòÅäÖÃ£¬1:Êä³ö, 0:ÊäÈë*/
            =4 SFR UART_RELH       = 0xAE;
            =4 SFR UART_SDA        = 0xAF;
            =4 
            =4 /*B0-B7*/
            =4 SFR ANACON9         = 0xB0;
            =4 SFR SPI1CON3        = 0xB1;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 24  

            =4 SFR SPI1CON4        = 0xB2;
            =4 SFR SPI1CON         = 0xB3;
            =4 SFR SPI1CON2        = 0xB4;
            =4 SFR SPI1BUF         = 0xB5;
            =4 SFR RTCCON1         = 0xB6;
            =4 SFR IPH0            = 0xB7; 
            =4 
            =4 /*B8-BF*/
            =4 SFR IPL0            = 0xB8;
            =4 SFR CNTCON          = 0xB9;
            =4 SFR CNTIVL          = 0xBA;  /*CNT¼ÆÊýÖÕÖ¹µÍ8Î»*/
            =4 SFR CNTIVM          = 0xBB;  /*CNT¼ÆÊýÖÕÖ¹ÖÐ¼ä8Î»*/
            =4 SFR CNTIVH          = 0xBC;  /*CNT¼ÆÊýÖÕÖ¹¸ß8Î»*/
            =4 SFR FT_EN_REG       = 0xBD;  /*lcd otp to tp soc*/
            =4 SFR SPH             = 0xBE;
            =4 SFR CGUCON8         = 0xBF;
            =4 
            =4 /*C0-C7*/
            =4 SFR AIF            = 0xC0;
            =4 SFR ANACON1        = 0xC1;
            =4 SFR ANACON2        = 0xC2;
            =4 SFR ANACON3        = 0xC3;
            =4 SFR ANACON4        = 0xC4;
            =4 SFR ANACON5        = 0xC5;
            =4 SFR ANACON6        = 0xC6;
            =4 SFR ANACON7        = 0xC7;
            =4 
            =4 /*C8-CF*/
            =4 SFR CGUCON1        = 0xC8;
            =4 SFR CGUCON0        = 0xC9;
            =4 SFR CGUCON2        = 0xCA;
            =4 SFR CGUCON3        = 0xCB;
            =4 SFR CGUCON4        = 0xCC;
            =4 SFR CGUCON5        = 0xCD;
            =4 SFR CGUCON6        = 0xCE;
            =4 SFR CGUCON7        = 0xCF;
            =4 
            =4 /* D1-D7 */
            =4 SFR MEMBIST_EN1         = 0xD2;
            =4 SFR MEMBIST_EN2         = 0xD3;
            =4 SFR MEMBIST_FINISH1     = 0xD4;
            =4 SFR MEMBIST_FINISH2     = 0xD5;
            =4 SFR MEMBIST_FAIL1       = 0xD6;
            =4 SFR MEMBIST_FAIL2       = 0xD7;
            =4 
            =4 /* D8-DF */
            =4 SFR MEMBIST_ERRMAP1     = 0xD8;
            =4 SFR MEMBIST_ERRMAP2     = 0xD9;
            =4 SFR DSV_CON             = 0xDA;
            =4 SFR MEMBIST_ROMCRC0     = 0xDB;
            =4 SFR MEMBIST_ROMCRC1     = 0xDC; 
            =4 SFR MEMBIST_ROMCRC2     = 0xDD;
            =4 SFR MEMBIST_ROMCRC3     = 0xDE;
            =4 SFR IEN1                = 0xDF;
            =4 
            =4 /*E0-E7*/
            =4 SFR TESTCON0            = 0xE1;
            =4 SFR TESTCON1            = 0xE2;
            =4 SFR TESTCON2            = 0xE3;
            =4 SFR TESTCON3            = 0xE4;
            =4 SFR IWKSTA              = 0xE5;
            =4 SFR POR_STA             = 0xE6; /*POR¸´Î»¼ì²é*/
            =4 SFR RST_STA             = 0xE7; /*Pin reset¸´Î»¼ì²é*/
            =4 
            =4 
            =4 /*E8-EF*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 25  

            =4 SFR AIE                 = 0xE8;
            =4 SFR SFTRST              = 0xE9;
            =4 SFR ANACON              = 0xEA;
            =4 SFR P0MOD               = 0xEB; /*0:P0 use as gpio;1:po use as function define*/
            =4 SFR P0SEL               = 0xEC; /*0:P0 as OD port; 1:P0 as PUSH-PULL port*/
            =4 SFR P1MOD               = 0xED; /*0:P1 use as gpio;1:p1 use as function define*/
            =4 SFR P1SEL               = 0xEE; /*0:P1 as OD port; 1:P1 as PUSH-PULL port*/
            =4 SFR XDP_STA             = 0xEF;
            =4 
            =4 /*F0-F7*/
            =4 SFR CNT_MASK            = 0xF1; /* 3'b00:porrst_cnt;3'b01:wdtrst_cnt;3'h02:extrst_cnt;3'h03:lcdrst_cnt;3'
             -b04:esd_cnt;3'h05:lvd_cnt*/
            =4 SFR CNT_STA             = 0xF2; /* ¸ù¾Ýcnt_maskµÄÖµ£¬¶À´¦²»Í¬µÄcntÖµ*/
            =4 SFR SSCG_CON0           = 0xF5;
            =4 SFR SSCG_CON1           = 0xF6; /* sscg_step:sscg increase/decrease period(500us/step). sscg trim code wi
             -ll increase in every(500ns*(step+1))*/
            =4 SFR AIPH                = 0xF7;
            =4 
            =4 /*F8-FF*/
            =4 SFR AIPL                = 0xF8;
            =4 SFR I2C_CMD0            = 0xF9; /* i2c hid command byte1 */
            =4 SFR I2C_CMD1            = 0xFA; /* i2c hid command byte2 */
            =4 SFR I2C_CMD2            = 0xFB; /* i2c hid command byte3 */
            =4 SFR I2C_CMD3            = 0xFC; /* i2c hid command byte4 */
            =4 SFR I2C_STATE           = 0xFD; /* i2C hid ÖÐ¶Ï±êÖ¾¼Ä´æÆ÷ */
            =4 SFR LED_EN              = 0xFE; /* 4¸öLEDµÆÊ¹ÄÜ; bit3~bit0ÓÐÐ§,Ã¿bit·Ö±ð¶ÔÓ¦Ò»¸öLEDÊ¹ÄÜ */
            =4 SFR LED_H_NUM           = 0xFF; /* led PWM²¨¸ßµçÆ½³ÖÐøµÄÖÜÆÚÊý£¬0~63¿ÉÅä£¬0´ú±í1¸ö32kÖÜÆÚ¸ßµçÆ½£¬63´ú±í64
             -¸ö32kÖÜÆÚ¸ßµçÆ½£¬¼´Ò»Ö±Îª¸ß£»*/
            =4 
            =4 
            =4 /******************************************************************************/
            =4 /* bit Registers */
            =4 
            =4 /*SSCG_CON0*/
            =4 /*bit5-4  sscg_amp */   /*sscg amplitude. Control the output sequence of DA_TRIM[2:0]. Clock stable time 
             -between each trim code is located in range 100ns-200ns*/
            =4 SBIT SSCG_SCAN_EN           = SSCG_CON0^1; /*0:stop sscg when scan 1:contiune sscg when scan(sync with sc
             -an)*/
            =4 SBIT SSCG_EN                = SSCG_CON0^0; /*0:disable sscg  1:enable sscg*/
            =4 
            =4 /*SPI0CON*/
            =4 SBIT SPI0RX_OVF_FLAG        = SPI0CON^6;  /*rx_reg_overflow±êÖ¾Î»£¬spi0½ÓÊÕÍêÊý¾Ýrx_regÎªÂúÊ±£¬Ó²¼þÖÃ1*/
            =4 SBIT SPI0TX_UNF_FLAG        = SPI0CON^5;  /*tx_reg_underflow±êÖ¾Î»£¬spi0·¢ËÍÊý¾ÝÊ±rx_regÎª¿ÕÊ±£¬Ó²¼þÖÃ1*/
            =4 SBIT SPI0_START             = SPI0CON^4;  /*SPI0µÄslvelÏÂ½µÑØÀ´Ê±Îª¸ßµçÆ½£¬Èí¼þÇåÁã*/
            =4 SBIT SPI0_STOP              = SPI0CON^3;  /*SPI0µÄslvelÉÏÉýÑØÀ´Ê±Îª¸ßµçÆ½£¬Èí¼þÇåÁã*/
            =4 SBIT DMA_END_FLAG           = SPI0CON^2;  /*DMA²Ù×÷½áÊøÖÐ¶ÏÇëÇó±êÖ¾Î»£¬Èí¼þÇåÁã*/
            =4 SBIT SPI0RI                 = SPI0CON^1;  /*½ÓÊÕÍê±ÏÖÐ¶ÏÇëÇó±êÖ¾Î»*/
            =4 SBIT SPI0TI                 = SPI0CON^0;  /*·¢ËÍÇëÇóÖÐ¶Ï±êÖ¾Î»*/
            =4 
            =4 /*SPI0CON2*/
            =4 SBIT SPI0TX_AUTO_CLR        = SPI0CON2^7; /*ÊÇ·ñ×Ô¶¯Çå³ýtiÖÐ¶Ï±êÖ¾Î»£»0:ÐèÒªÈí¼þÇå£»1:Èí¼þÔÚÐ´tx_regÊ±Ó²¼
             -þ×Ô¶¯Çå*/
            =4 SBIT SPI0RX_AUTO_CLR        = SPI0CON2^6; /*ÊÇ·ñ×Ô¶¯Çå³ýriÖÐ¶Ï±êÖ¾Î». 0:ÐèÒªÈí¼þÇå; 1:Èí¼þÔÚ¶Árx_regÊ±Ó²¼
             -þ×Ô¶¯Çå*/
            =4 SBIT SPI0_EDGE_SEL          = SPI0CON2^5; /*0:sckÉÏÉýÑØÊä³ö;1:sckÏÂ½µÑØÊä³ö*/
            =4 SBIT SPI0_BUSY              = SPI0CON2^4; /*0:µÍµçÆ½×´Ì¬£¬Ö»ÄÜ¶Á²»ÄÜÐ´;1:SPI0ÕýÔÚ¼¤»î×´Ì¬*/
            =4 SBIT SPI0_STOP_EI           = SPI0CON2^3; /*spi_stopÖÐ¶ÏÇëÇóÐÅºÅÊ¹ÄÜ*/
            =4 SBIT DMA_END_EI             = SPI0CON2^2; /*DMA²Ù×÷½áÊøÖÐ¶ÏÇëÇóÊ¹ÄÜ*/
            =4 SBIT SPI0RI_EN              = SPI0CON2^1; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
            =4 SBIT SPI0TI_EN              = SPI0CON2^0; /*0:½ûÖ¹²úÉú·¢ËÍÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú·¢ËÍÖÐ¶ÏÇëÇóÐÅºÅ*/
            =4 
            =4 /*SPI0CON3*/
            =4 SBIT SPI0_WKEN              = SPI0CON3^7; /*spi wake up¹¦ÄÜÊ¹ÄÜÎ».0:disable;1:enable*/
            =4 SBIT SPI0_RI_PULSE_SEL      = SPI0CON3^4; /*0:rx_reg load at ti_ri_pulse falling edg;1:rx_reg load at ri_
             -pulse rising edge*/
            =4 //SBIT SPI0_CLR_NUM           = SPI0CON3^4; /*write 1 to clear byte num*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 26  

            =4 /*spi0con3[3:0] dummy_byte_num csÏÂ½µÑØ¿ªÊ¼²åÈëµÄdummy byteÊý*/
            =4 
            =4 /*SPI0CON4*/
            =4 /*SPI0CON4[7:6] byte_num_rd_sel  byte_num¶Á³öÑ¡Ôñ.2'b00:byte_num_h; 2'b01:byte_num_m; 2'b10:byte_num_l */
            =4 /*SPI0CON4[5:0] byte_num_rd byte_num 6bit,ÓÉbyte_num¾ö¶¨*/
            =4 
            =4 /*SPI0CON5*/
            =4 SBIT SPI0RX_OVF_CLR         = SPI0CON5^6;  /*Ð´1Çå³ýrx_reg_overflow±êÖ¾Î»*/
            =4 SBIT SPI0TX_UNF_CLR         = SPI0CON5^5;  /*Ð´1Çå³ýtx_reg_underflow±êÖ¾Î»*/
            =4 SBIT SPI0_START_CLR         = SPI0CON5^4;  /*Ð´1Çå³ýspi0 start*/
            =4 SBIT SPI0_STOP_CLR          = SPI0CON5^3;  /*Ð´1Çå³ýspi0 stop*/
            =4 SBIT DMA_END_CLR            = SPI0CON5^2;  /*Ð´1Çå³ýdma end flag*/
            =4 SBIT SPI0RI_CLR             = SPI0CON5^1;  /*Ð´1Çå³ýSPI0RT*/
            =4 SBIT SPI0TI_CLR             = SPI0CON5^0;  /*Ð´1Çå³ýSPI0TI*/
            =4 
            =4 
            =4 /*SPICLKDIV: 000:4·ÖÆµ;001:6·ÖÆµ;010:8·ÖÆµ;011:12·ÖÆµ;100:16·ÖÆµ;101:18·ÖÆµ;110:20·ÖÆµ;111:24·ÖÆµ*/
            =4 /*SPI1CON*/
            =4 SBIT SPI1TI                  = SPI1CON^7;  /*·¢ËÍÇëÇóÖÐ¶Ï±êÖ¾Î»*/
            =4 SBIT SPI1RI                  = SPI1CON^6;  /*½ÓÊÕÍê±ÏÖÐ¶ÏÇëÇó±êÖ¾Î»*/
            =4 SBIT SPI1CKM                 = SPI1CON^5;  /*SPI1CLKDIVÖÐ¼äÎ»*/
            =4 SBIT SPI1CKL                 = SPI1CON^4;  /*SPI1CLKDIVµÍÎ»*/
            =4 SBIT SPI1PH                  = SPI1CON^3;  /*0:Ö±½Ó·¢ËÍÊý¾Ý,»º´æ°ë¸öcycle½ÓÊÕÊý¾Ý;1:Ö±½Ó½ÓÊÕÊý¾Ý,»º´æ°ë¸ö
             -cycle·¢ËÍÊý¾Ý*/
            =4 SBIT SPI1PO                  = SPI1CON^2;  /*0:low idle; 1:high idle*/
            =4 SBIT SPI1MAS                 = SPI1CON^1;  /*0:slave mode; 1:master mode*/ 
            =4 SBIT SPI1_SLVSLELEN          = SPI1CON^0;  /*0:masterÄ£Ê½ÏÂµÄslvseloÊÜÄÚ²¿Æô¶¯¿ØÖÆ;1:masterÄ£Ê½ÏÂslvseloÊ
             -ÜSPI1CON2[2]¿ØÖÆ*/
            =4 
            =4 /*SPI1CON2*/
            =4 SBIT SPI1TX_AUTO_CLR         = SPI1CON2^7; /*0:Èí¼þ×Ô¶¯ÇåtiÖÐ¶Ï±êÖ¾Î»;1:Èí¼þÔÚ¶Árx regÊ±Ó²¼þ×ÔÇå*/
            =4 SBIT SPI1RX_AUTO_CLR         = SPI1CON2^6; /*0:Èí¼þ×Ô¶¯ÇåriÖÐ¶Ï±êÖ¾Î»;1:Èí¼þÔÚ¶Átx regÊ±Ó²¼þ×ÔÇå*/
            =4 SBIT SPI1_BUSY               = SPI1CON2^5; /*0:µÍµçÆ½×´Ì¬,Ö»ÄÜ¶Á;1:SPI1Õý´¦ÓÚactive*/ 
            =4 SBIT SPI1_STOP               = SPI1CON2^4; 
            =4 SBIT SPI1_START              = SPI1CON2^3;
            =4 SBIT SPI1SLVELO              = SPI1CON2^2; /*µ±SPI1CON[0]Îª1Ê±,master×´Ì¬ÏÂ¸ÃÎ»Ö±½ÓÊä³öSPI1µÄslvsel£»µ±SP
             -I1CON[0]Îª0Ê±£¬¸ÃÎ»ÎÞÐ§*/
            =4 SBIT SPI1RI_EN               = SPI1CON2^1; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
            =4 SBIT SPI1TI_EN               = SPI1CON2^0; /*0:½ûÖ¹²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ;1:ÔÊÐí²úÉú½ÓÊÕÖÐ¶ÏÇëÇóÐÅºÅ*/
            =4 
            =4 /*SPI1CON3*/
            =4 SBIT SPI1MODE_SELH           = SPI1CON3^7; /*1:ÓÃIO0-IO2´«ÊäÊý¾Ý;0:¸ù¾ÝSPI1CON3[6]×´Ì¬¾ö¶¨*/
            =4 SBIT SPI1MODE_SELL           = SPI1CON3^6; /*ÈôSPI1MODE_SELHÎª0,Ôò0:ÓÃIO0´«Êä;1:ÓÃIO0,IO1´«Êä*/
            =4 SBIT SPI1_SW_IO_ENH          = SPI1CON3^5; /*IO0,IO1·½Ïò¿ØÖÆÎ». 0:standard spi IO setting;1:¿ØÖÆIO0,IO1·½
             -Ïò×Ô¶¯ÇÐ»»,ÇÐ»»Ê±¼ä²ÎregÅäÖÃspi_dat_opn_num*/
            =4 SBIT SPI1_SW_IO_ENL          = SPI1CON3^4; /*IO2,IO3·½Ïò¿ØÖÆÎ». 0:standard spi IO setting;1:¿ØÖÆIO2,IO3·½
             -Ïò×Ô¶¯ÇÐ»»,ÇÐ»»Ê±¼ä²ÎregÅäÖÃspi_dat_opn_num*/
            =4 SBIT SW_1BYTE_LATER          = SPI1CON3^2; /*dual/quad spiÈí¼þÇÐ»»Ê±¼ä.0:Á¢¼´ÇÐ»»;1:ÔÚÏÂ¸öbyteÊý¾Ý´«Êä½áÊ
             -øÒÔºóµÄµÚÒ»¸öshift_out_sck_edgÖ®Ç°Íê³ÉÇÐ»»*/
            =4 SBIT SPI1_SW_DIR             = SPI1CON3^1; /*dual/quad spiÊ±Èí¼þÇÐ»»ioµÄ·½Ïò.0:Êä³ö;1:ÊäÈë*/
            =4 SBIT SPI1_SW_EN              = SPI1CON3^0; /*dual/quad spi Èí¼þio·½ÏòÇÐ»»Ê¹ÄÜ£¬Ð´1ÓÐÐ§.Ó²¼þÔÚÇÐ»»Ö®ºó×ÔÇå
             -*/
            =4 
            =4 /*SPI1CON4*/
            =4 SBIT SPI1IOSW_CKDLY_EN      = SPI1CON4^4; /*´«ÊäIOÇÐ»»·½ÏòÊ± 0:ÇÐ»»·½Ïò²»ÑÓÊ±;1:ÇÐ»»·½ÏòÑÓ³¤2¸öclk cycle*
             -/
            =4 SBIT SPI1_CURR_MODE         = SPI1CON4^3; /*spi master/slave mode×´Ì¬Î».1:Ä¿Ç°Îªmaster mode.0:Ä¿Ç°Î´slave
             - mode */
            =4 SBIT SPI1CKH                = SPI1CON4^2; /*SPI1CLKDIV¸ßÎ»*/
            =4 /*spi1con[1:0] sample_phase_sel*/ /*²ÉÑùÊ±ÖÓÑÓ³ÙÑ¡Ôñ. 00:ÎÞÑÓ³Ù;01:ÑÓ³Ù1¸öclk cycle; 10:ÑÓ³Ù2¸öclk cycle;
             - 11:ÑÓ³Ù3¸öclk cycle*/
            =4 
            =4 
            =4 /*UARTCON*/
            =4 SBIT UART_MODE              = UARTCON^7; /*uartÄ£Ê½Éè¶¨. 0:9bitÄ£Ê½; 1:8bitÄ£Ê½*/
            =4 SBIT UART_SM21              = UARTCON^5; /*1:ÔÚ9bitÒ»¶Ô¶àÍ¨ÐÅÄ£Ê½ÏÂ;0:ÔÚ9bitµã¶ÔµãÄ£Ê½*/  
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 27  

            =4 SBIT UART_REN1              = UARTCON^4; /*½ÓÊÕÊÇÄÜ¿ØÖÆÎ».1:ÔÊÐí½ÓÊÕ;0:½ûÖ¹½ÓÊÕ*/
            =4 SBIT UART_TB81              = UARTCON^3; /*ÔÚ9bitÄ£Ê½ÏÂ£¬the content of·¢ËÍµÄµÚ9bit*/
            =4 SBIT UART_RB81              = UARTCON^2;   
            =4 SBIT UART_TI                = UARTCON^1;
            =4 SBIT UART_RI                = UARTCON^0;
            =4 
            =4 /* RTCCON */
            =4 SBIT RTC_START              = RTCCON^7;
            =4 SBIT RTC_INT_EN_ASM         = RTCCON^6;   /* ²úÉúÖÐ¶Ï¸øasmÊ¹ÄÜ.1:´ò¿ª;0:¹Ø±Õ */
            =4 SBIT RTC_START_STA          = RTCCON^5;   /* RTCÆô¶¯×´Ì¬.1:rtcÆô¶¯³É¹¦»ò¿ÕÏÐ;0:rtcÕýÔÚÆô¶¯»òÕýÔÚ¸´Î»*/
            =4 SBIT RTC_CLR                = RTCCON^4;
            =4 SBIT RTC_INT_EN_CPU         = RTCCON^2;   /* ²úÉúÖÐ¶Ï¸øcpuÊ¹ÄÜ.1:´ò¿ª;0:¹Ø±Õ */
            =4 SBIT RTC_AUTO_MODE          = RTCCON^1;   /* rtc²»ÐèÒª×öclr£¬×Ô¶¯ÖØ¸´¼ÆÊý*/
            =4 SBIT RTC_WP                 = RTCCON^0;
            =4 
            =4 /* RTCCON1 */
            =4 //[2:1] LCD_SRC_SEL lcd start sourcÑ¡Ôñ. 2'b00:vstart;2'b01:vmdi;2'b10:vend;2'b11:vblank
            =4 SBIT LCD_SRC_SEL_H          = RTCCON1^2;
            =4 SBIT LCD_SRC_SEL_L          = RTCCON1^1;
            =4 SBIT LCD_START_EN           = RTCCON1^0;   /* lcd vstart/wmid.vend/vblank Æô¶¯rtcÊ¹ÄÜÐÅºÅ */ 
            =4 
            =4 /*SYSCON*/
            =4 SBIT REMAP                  = SYSCON^7;
            =4 SBIT ESD_RST_EN             = SYSCON^6;   /* esd·¢ÉúÊ±Ðè²»ÐèÒªrstÏµÍ³.1:±íÊ¾ÐèÒªrstÏµÍ³;0:±íÊ¾²»rstÏµÍ³*/
            =4 SBIT BUS_SEL                = SYSCON^5;   /* RO. pad bus_sel */
            =4 SBIT WDT                    = SYSCON^4;   /* wdtÊ¹ÄÜ */
            =4 SBIT UART1                  = SYSCON^3;   /* uart1 */
            =4 SBIT UART0                  = SYSCON^2;   /* uart0: 2'b01: GPIO6; 2'b10: GPIO7; 2'b11: GPIO1.5; 2'b00: Æä
             -Ëû;  */
            =4 SBIT LVD_INT_CLR            = SYSCON^1;   /* Ð´1Çå³ýlvdµÄÖÐ¶Ï±êÖ¾,¸ÃbitÎ»Ð´1×ÔÇå */
            =4 SBIT ESD_INT_CLR            = SYSCON^0;   /* Ð´1Çå³ýesdµÄÖÐ¶Ï±êÖ¾,¸ÃbitÎ»Ð´1×ÔÇå */
            =4 
            =4 
            =4 /*IWKSTA*/
            =4 SBIT GPIO_INT               = IWKSTA^7; /* p0.6 pin½ÅÖÐ¶Ï»½ÐÑ±êÖ¾*/
            =4 SBIT LCD_ESD_WK_INT         = IWKSTA^6; /* lcd esd wakeupÖÐ¶Ï»½ÐÑ±êÖ¾ */
            =4 SBIT LCD_LVD_WK_INT         = IWKSTA^5; /* lcd lvd wakeupÖÐ¶Ï»½ÐÑ±êÖ¾ */
            =4 SBIT LCD_GPIO_WK_INT        = IWKSTA^4; /* lcd gpio wakeup status */
            =4 SBIT LCD_RELOAD_FLASH       = IWKSTA^3; /* LCD initial code reload */
            =4 SBIT ASM_MON_INT            = IWKSTA^2; /* asm monitorÖÐ¶Ï»½ÐÑ±êÖ¾ */
            =4 SBIT I2C_MON_INT            = IWKSTA^1; /* i2c monitorÖÐ¶Ï»½ÐÑ±êÖ¾ */
            =4 SBIT RTC_CNT_INT            = IWKSTA^0; /* RTC or CNTÖÐ¶Ï»½ÐÑ±êÖ¾ */
            =4 
            =4 /*SFTRST*/
            =4 SBIT SOFT_RST               = SFTRST^7; /*¶Á:Èí¸´Î»±êÖ¾*/
            =4 SBIT WDT_RST                = SFTRST^6; /*¶Á:wdt¸´Î»±êÖ¾*/
            =4 SBIT EXT_RST                = SFTRST^5; /*¶Á:Íâ²¿¸´Î»±êÖ¾*/
            =4 SBIT POR_RST                = SFTRST^4; /*por¸´Î»±êÖ¾*/
            =4 SBIT FLASH_HOLD_STA         = SFTRST^3; /*flash hold state*/
            =4 SBIT REMAP_RST              = SFTRST^1; /*¶Á:´ò¿ªremap¸´Î»Ê¹ÄÜ*/
            =4 /*SFTRST[0] */              /*µ±È«Ð´1ÊÇ²úÉú¸´Î»;È«Ð´0ÊÇ²úÉúremap¸´Î»;µ±¶ÁÊ±Ê±Èí¸´Î»±êÖ¾*/
            =4 
            =4 /* ANACON */
            =4 SBIT ARAM_SEL               = ANACON^7;  /* 1: mcu¿ØÖÆaram; 0: afe¿ØÖÆaram */
            =4 SBIT LCD_DSTAB_IOLOW        = ANACON^6;  /* lcd dstab·¢ÉúÊ±,¿ØÖÆTPµ½LCD DPµÄÐÅºÅÊÇ·ñÊä³öÎªµÍ£¬´Ó¶ø½µµÍÂ©µ
             -ç 1: Êä³öÎªµÍ£¬0: ²»Êä³öÎªµÍ */
            =4 SBIT I2C_WK_RST             = ANACON^5;  /* 0:Reset I2C monitor interrupt;1: release*/
            =4 SBIT I2C_SF_RST             = ANACON^4;  /* I2C module soft reset */
            =4 SBIT XSI_SEL                = ANACON^3;  /* xsi0/xsi1 accessing clock switch select. 0:MCU;1:AFE. */
            =4 SBIT AFE_RST                = ANACON^2;  /* afe sub-system soft reset including asm*/
            =4 SBIT FlASH_HOLD             = ANACON^1;  /* external SPI flash hold,1:hold state '0';0:hold state '1' */
            =4 SBIT GPIO_INT_SEL           = ANACON^0;  /* GPIO Interrupt source selecetion.1:GPIO interrupt is from p0.
             -7;0:GPIO interrupt is from p0.6 */
            =4 
            =4 /* XDP_STATUS*/
            =4 SBIT LVD_STA                = XDP_STA^6;  /* R0.lvdµÄstatus */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 28  

            =4 SBIT ESD_FLAG               = XDP_STA^5;  /* RW.esd·¢Éú±êÖ¾.1:±íÊ¾ÓÐ·¢ÉúesdÊÂ¼þ;0:±íÊ¾Ã»ÓÐ·¢ÉúesdÊÂ¼þ.Èí¼
             -þ¿ÉÇå³ý*/
            =4 SBIT LVD_FLAG               = XDP_STA^4;  /* RW.lvd·¢Éú±êÖ¾.1:ÓÐlvdÊÂ¼þ;0:Ã»ÓÐlvdÊÂ¼þ.Èí¼þ¿ÉÇå³ý */
            =4 SBIT ESD_STA                = XDP_STA^3;  /* RO.xdp esd status */
            =4 SBIT LVD_VDDI_STA           = XDP_STA^2;  /* RO.lvd_vddi status */
            =4 SBIT LVD_AVDD_STA           = XDP_STA^1;  /* RO.lvd_avdd status */
            =4 SBIT LVD_AVEE_STA           = XDP_STA^0;  /* RO.lvd_avee status */
            =4 
            =4 /* TEST_CON0 */
            =4 SBIT TEST_OUT0_EN           = TESTCON0^7; 
            =4 /*TEST_CON0[6:0]*/          /*Test out0 control */
            =4 
            =4 /* TEST_CON1 */
            =4 SBIT TEST_OUT1_EN           = TESTCON1^7; 
            =4 /*TEST_CON1[6:0]*/          /*Test out1 control */
            =4 
            =4 /* TEST_CON2 */
            =4 SBIT TEST_OUT2_EN           = TESTCON2^7; 
            =4 /*TEST_CON2[6:0]*/          /*Test out2 control */
            =4 
            =4 /* TEST_CON0 */
            =4 SBIT TEST_OUT3_EN           = TESTCON3^7; 
            =4 /*TEST_CON3[6:0]*/          /*Test out3 control */
            =4 
            =4 /* DSV_CON */
            =4 SBIT UART_INH               = DSV_CON^6;       /* selection of uart rx port*/
            =4 SBIT UART_INL               = DSV_CON^5;       /* 2'b00/2'b11:disable uart rxd;2'b01:p0.6;2'b10:p0.7*/
            =4 SBIT SPI_REPLACE_STA        = DSV_CON^4;       /* spi1ÊÇ·ñÌæ´úspi0×÷ÎªslaveµÄ×´Ì¬Î»;1:spi1×÷Îªslave;0:spi
             -1²»×÷Îªslave*/
            =4 SBIT SPI_REPLACE_SEL        = DSV_CON^3;       /* spi1×÷ÎªslaveµÄ¿ØÖÆ£¬ÔÚspi_replace_en=1Ê±Æð×÷ÓÃ.1:spi1Ì
             -æ»»spi0×÷Îªslave;0:spi1²»Ìæ»»spi0 */
            =4 SBIT SPI_REPLACE_EN         = DSV_CON^2;       /* spi1×÷ÎªslaveµÄ¿ØÖÆ.1:spi1ÊÇ·ñÎªslaveÊÜspi_replace_sel¿
             -ØÖÆ;*/
            =4 SBIT DSV_EN6_STA            = DSV_CON^1;       /* lcdÊä³öµÄdsv_en6µÄ×´Ì¬ */
            =4 SBIT DSV_EN                 = DSV_CON^0;       /* dsv en reg */
            =4 
            =4 /*FT_EN_REG*/
            =4 SBIT PDB                    = FT_EN_REG^6;     /* lcd to tp,µ±´ò¿ªÅúÆÀ¼ì²âÊ±,¼ì²â½á¹û.1:ÆÁÆÆ;0:ÆÁÃ»ÆÆ*/
            =4 SBIT PDB_EN                 = FT_EN_REG^5;     /* tp to lcd.1:¿ªÆôÆÆÆÁ¼ì²â */
            =4 SBIT DMA_REQ_INT_MASK       = FT_EN_REG^4;     /* dma_reqÆÁ±ÎcpuÖÐ¶ÏÊ¹ÄÜ.1:µ±dma_reqÎª1Ê±,ÆÁ±ÎcpuµÄ(³ýÁËt
             -imer0,timer1)ÖÐ¶Ï*/
            =4 SBIT DMA_ACK_INT_MASK       = FT_EN_REG^3;     /* dma_ackÆÁ±ÎcpuÖÐ¶ÏÊ¹ÄÜ.1:µ±dma_ackÎª1Ê±,ÆÁ±ÎcpuµÄ(³ýÁËt
             -imer0,timer1)ÖÐ¶Ï*/
            =4 SBIT TEST_CLK_EN            = FT_EN_REG^2;     /* Ê±ÖÓ²âÊÔÊä³öÊ¹ÄÜ,GPIO6Êä³ö */
            =4 SBIT XSI_SEL_STA            = FT_EN_REG^1;     /* anacon[3] xsi clk swtich result.1:AFE can control xsi;0
             -:MCU can control xsi*/
            =4 SBIT FT_EN                  = FT_EN_REG^0;     /* lcd otp to tp soc */
            =4 
            =4 /* ANACON1 */
            =4 SBIT POWERGATING_CTRL       = ANACON1^7; /* ÎÞavddºÍaveeÊ±,¿ØÖÆafeµÄsx switch·Åµç.1:È¡¾öÓÚdsv_en,dsv_enÎª
             -1Ê±,²»·Åµç.dsv_enÎª0Ê±,·Åµç.0:²»·Åµç */
            =4 /* [6:4] vreftp_sel. vREF_TP voltage selection bits.0:2v; 1:2.5v; 2:3v; 3:3.5v; 4:4v; 5:4.5v; 6:5v; 7:4.5
             -v*/
            =4 SBIT VREFTP_BUF_SEL_M       = ANACON1^3; /* vref_tp/vdd5 slew rate control bit,output to xtp.0: no sr con
             -trol,vref_tp rise quickly.1:with sr control,set 1 for t32clk and then set to 0*/
            =4 SBIT VREFTP_BUF_SH_M        = ANACON1^2; /* ²ÉÑùµçÑ¹,¹Ì¶¨²ÉÑùµçÑ¹,Êä³ö¸øxtp.vref_tp/vdd5 sample/hold sign
             -al.0:hold; 1:enable*/
            =4 SBIT VREFTP_BUF_EN_M        = ANACON1^1; /* ¿ØÖÆÊä³öbuf enable,Êä³ö¸øxtp.vref_tp buf enable signal.0:disa
             -ble;1:enable*/
            =4 SBIT VREFTP_SETOP_EN_M      = ANACON1^0; /* vref_tp setting opµÄenable,Êä³ö¸øxtp.vref_tp volatge setting 
             -op enable singal.0:disable;1:enable */
            =4 
            =4 /* ANACON2 */
            =4 SBIT REFBG_EN               = ANACON2^7; /* tpµÄbandgapµÄenbale.É¨ÃèÊ±,Ò»¶¨Òª´ò¿ª.afe ref enable signal.0
             -:disable;1:enable */
            =4 SBIT VREFTP_BUF_SEL         = ANACON2^6; /* vref_tp/vdd5 slew rate control bit,output to xae_l,xafe_r.0:n
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 29  

             -o sr control,vref_tp rise quickly;1:with sr control,set 1 for 16 t32clk and then set to 0*/
            =4 SBIT VREFTP_BUF_SH          = ANACON2^5; /* ²ÉÑùµçÑ¹,¹Ì¶¨²ÉÑùµçÑ¹,Êä³ö¸øxafe_l,xafe_r.vref_tp/vdd5 sample
             -/hold signal.0:hold; 1:enable*/
            =4 SBIT VREFTP_BUF_EN          = ANACON2^4; /* ¿ØÖÆÊä³öbuf enable,Êä³ö¸øxafe_l,xafe_r.vref_tp buf enable sig
             -nal.0:disable;1:enable*/
            =4 SBIT VREFTP_SETOP_EN        = ANACON2^3; /* vref tp setting opµÄenable,Êä³ö¸øxafe_l,xafe_r.vref_tp volatg
             -e setting op enable singal.0:disable;1:enable */
            =4 SBIT VDD5_SETOP_EN          = ANACON2^2; /* vdd5 volatage setting op enable signal.0:disable;1:enable*/
            =4 SBIT VDD5_BUF_EN            = ANACON2^1; /* vdd5 buf enable signal.0:disable;1:enable*/
            =4 SBIT VDD5_SECTRL            = ANACON2^0; /* vdd5 slew rate control bit.0:no sr control,vref_tp rise quick
             -ly.1:with sr control,set 1 for 16 t32clk and the set to 0*/
            =4 
            =4 /* ANACON3 */
            =4 SBIT DSV_EN_ALLON           = ANACON3^7; /* dsv_enÊÇ·ñÊ±¿Ì´ò¿ª.1:Ê±¿Ì´ò¿ª;0:ÓÉÉÏµçÊ±Ðò¾ö¶¨*/
            =4 SBIT LR_SEL                 = ANACON3^6; /* select p1_af and p2_af from left or right afe controller.1:ri
             -ght;0:left*/
            =4 SBIT VCOM_OPT_SEL           = ANACON3^5; /* ÓÃÓÚ¿ØÖÆvcom_optµÄÊä³ö.0:Ç¿ÖÆÊä³öÎªvcom.1:lcd termÊ±Îªvcom,tp
             - termÊ±,Îªafd*/
            =4 SBIT BGP_MASK               = ANACON3^4; /* ÓÃÓÚ¿ØÖÆºÚÆÁÊ±lcdµÄbandgap¿ª¹Ø.ÁÁÆÁÊ±,´Ë¿ª¹ØÓÉlcd¿ØÖÆ,ºÚÆÁÊ±,
             -ÓÉtp¿ØÖÆ.dsvÄ£Ê½ÏÂ,¶¯Ì¬ÇÐ»»,ÓÃÓÚ½ÚÊ¡¹¦ºÄ.1:¿ªÆôlcdµÄbandgap,tpÉ¨ÃèÊ±,ÐèÒª¿ªÆô´Ë¿ª¹Ø.0:¹Ø±ÕlcdµÄbandgap,tp²»É¨ÃèÊ±,¿ÉÒÔ¹Ø
             -±Õ´Ë¿ª¹Ø*/
            =4 SBIT LVD_MASK               = ANACON3^3; /* ÓÃÓÚ¿ØÖÆÊÇ·ñ¿ªÆôavdd/aveeµÄµôµçÕì²âµçÂ·.dsvÄ£Ê½ÏÂ,dsv_enÊ¹ÄÜÊ
             -±,¿É¿ªÆô,dsv_en²»Ê¹ÄÜ,ÐèÒª¹Ø±Õavdd/aveeµÄµôµçÕì²âµçÂ·,ÒÔ·ÅÎó´¥·¢lvdÕì²âµçÂ·.1:¿ªÆôµôµçÕì²âµçÂ·.0:¹Ø±Õ*/
            =4 
            =4 /* ANACON7*/
            =4 SBIT VREFTP_LOADREGU        = ANACON7^7; /* vreftp output buffer driving ability control signal.1:enhance
             - the driving ability to about 55mA.0:use default value about 37mA driving ability at least*/
            =4 SBIT DSV_EN_MASK            = ANACON7^6; /* dsv_enÐÅºÅµÄÑ¡ÔñÐÅºÅ.0:asmÉú³ÉµÄdsv_enÐÅºÅÎÞÐ§,ÓÉmcu¾ö¶¨ÊÇ·ñÆ
             -ô¶¯dsv_en;1:asmÉú³½¹ýµÄdsv_enÐÅºÅÓÐÐ§*/
            =4 SBIT NVDD2_MASK             = ANACON7^5; /* NVDD2ÔÚºÚÆÁÊ±µÄÊ¹ÄÜÐÅºÅ.nvdd2ÁÁÆÁÊ±ÊÜlcd¿ØÖÆ,ºÚÆÁÊ±,ÊÜtp¿ØÖÆ.
             -0:¹Ø±Õnvdd2;1:¿ªÆônvdd2*/
            =4 SBIT VRGEN_EN               = ANACON7^4; /* 32kÊ±ÖÓµçÔ´ÇÐ»»¹¦ÄÜ.0:Ñ¡ÔñÀ´×ÔÆ«ÖÃ.1:Ñ¡ÔñlcdÀ´µÄbandgapÆ«ÖÃ.º
             -ÚÆÁÊ±,´ËbitÎ»Ò»¶¨ÐèÒªÅäÖÃÎª0,ÁÁÆÁ¿ÉÅäÖÃ0£¬Ò²¿ÉÅäÖÃ³É1*/
            =4 /* [3:0] VRFE_VDD_TPS. VDDD 1.2V setting. 0:  1.3v; 
            =4                                           1:  1v;
            =4                                           2:  1.025v;
            =4                                           3:  1.05v;
            =4                                           4:  1.075v;
            =4                                           5:  1.1v;
            =4                                           6:  1.125v;
            =4                                           7:  1.150v;
            =4                                           8:  1.175v;
            =4                                           9:  1.2v
            =4                                           10: 1.225v
            =4                                           11: 1.25v
            =4                                           12: 1.275v
            =4                                           13: 1.325v
            =4                                           14: 1.35v
            =4                                           15: 1.375v*/
            =4 
            =4 /* ANACON8 */
            =4 SBIT VDD_TP_N2_MASK         = ANACON8^7; /* reg_en_vdd_tp_n2ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VDD_TP_N1_MASK         = ANACON8^6; /* reg_en_vdd_tp_n1ÐÅºÅÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_SETOP_EN_M_MASK = ANACON8^5; /* vreftp_setop_en_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_BUF_EN_M_MASK   = ANACON8^4; /* vreftp_buf_en_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_SH_MASK         = ANACON8^3; /* vreftp_shÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_SRCTRL_M_MASK   = ANACON8^2; /* vreftp_srctrl_mÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT BGP_MASK_MASK          = ANACON8^1; /* bgp_maskÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT NVDD2_MASK_MASK        = ANACON8^0; /* nvdd2_maskÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 
            =4 /* ANACON9 */
            =4 SBIT VDD_TP_N3_MASK         = ANACON9^7; /* reg_en_vdd_tp_n3ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT REGBG_EN_MASK          = ANACON9^6; /* reg_en1ÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_SETOP_EN_MASK   = ANACON9^5; /* vreftp_setop_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_BUF_EN_MASK     = ANACON9^4; /* vreftp_buf_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VREFTP_SRCTRL_MASK     = ANACON9^3; /* vreftp_srctrlÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 30  

            =4 SBIT VDD5_SETOP_EN_MASK     = ANACON9^2; /* vdd5_setop_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VDD5_BUF_EN_MASK       = ANACON9^1; /* vdd5_buf_enÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 SBIT VDD5_SRCTRL_MASK       = ANACON9^0; /* vdd5_srctrlÐÅºÅµÄÀ´Ô´.0:À´×Ômcu;1:À´×Ôasm*/
            =4 
            =4 /* PCON */
            =4 SBIT SMOD1                  = PCON^7;
            =4 SBIT SMOD0                  = PCON^6;
            =4 SBIT POF                    = PCON^4;
            =4 SBIT GF1                    = PCON^3;
            =4 SBIT GF0                    = PCON^2;
            =4 SBIT CORE_STOP              = PCON^1;         /* Stop Ä£Ê½¿ØÖÆÎ» .¸ÃÎ»Ð´1£¬½«½øÈëstopÄ£Ê½£¬Èç¹û¶Á¸ÃÎ»£¬¶Á
             -³öÀ´µÄÖµÎª0*/
            =4 SBIT CORE_IDLE              = PCON^0;         /* Idle Ä£Ê½¿ØÖÆÎ» ¡£¸ÃÎªÐ´1£¬Ç¿½øÈëIDLEÄ£Ê½£¬Èç¹û¶Á¸ÃÎ»£¬¶
             -Á³öÀ´µÄÖµÎª0*/
            =4 
            =4 /* CGUCON0 */
            =4 SBIT ASM_32K_EN             = CGUCON0^7;  /* asm 32k clock enable.1:enable;0:disable*/
            =4 SBIT STANDBY                = CGUCON0^6;  /* ÓÃÓÚÔÚÕý³£Ä£Ê½ÏÂ£¬mcu´¦ÓÚpower downÊ±£¬¶ÔoscÊ±ÖÓÒÔ¼°digitalµ
             -ÄÖ÷Ê±ÖÓµÄdisable.0:disable clock tree, osc48m;1:²»¹ØÊ±ÖÓ */
            =4 SBIT EN_32K                 = CGUCON0^5;  /* 1:´ò¿ª32k osc*/
            =4 SBIT SPI0_32K_EN            = CGUCON0^4;  /* SPI0 DMAÄ£¿éÖÐµÄcounterÊ±ÖÓgating*/
            =4 SBIT SPI0CKEN               = CGUCON0^3;  /* SPI0¹¤×÷Ê±ÖÓµÄenable gating */
            =4 SBIT PROBE32K_DIG_EN        = CGUCON0^2;  /* clk_32k dig probe enable signal.1:enable;0:disable */
            =4 SBIT LVD_SLEEP_EN           = CGUCON0^1;  /* LVDÊÂ¼þ·¢ÉúÊ±£¬ÊÇ·ñ¹Ø±ÕOSC.0:²»¹Ø±Õ,defaultÎª0.1:¹Ø±Õ */
            =4 SBIT PROBE32K_FROM1M_EN     = CGUCON0^0;  /* clk_32k_from_1m probe enable signal.1:enable;0:disable */
            =4 
            =4 
            =4 /* CGUCON1 */
            =4 SBIT SYSCKEN                = CGUCON1^7;     /* clock gating module:sysctrl,p0,p1*/
            =4 SBIT I2CCKEN                = CGUCON1^6;     /* i2c clk enable */
            =4 SBIT XSICKEN                = CGUCON1^5;     /* xsi source from core clock ,gating enable */
            =4 SBIT TIMER_500K_EN          = CGUCON1^4;     /* timer working clock enable signal.1:enable;0:disable*/
            =4 SBIT TIMERCKEN              = CGUCON1^3;     /* timer clk enable*/
            =4 SBIT UARTCKEN               = CGUCON1^2;     /* uart clk enable*/
            =4 SBIT DEBUGCKEN              = CGUCON1^1;     /* debug(including i2c debug) clk enable */
            =4 SBIT SPI1CKEN               = CGUCON1^0;     /* spi1 clk enable*/
            =4 
            =4 /* CGUCON2 */
            =4 SBIT CLKEN_500K             = CGUCON2^7;     /* 500k clock gating enable*/
            =4 SBIT CNTCKEN                = CGUCON2^6;     /* cnt clk enable */
            =4 SBIT LED_32K_EN             = CGUCON2^5;     /* Led controller working clock*/
            =4 SBIT PROMCKEN               = CGUCON2^4;     /* prom clk enable */
            =4 SBIT PRAMCKEN               = CGUCON2^3;     /* pram clk enable */
            =4 SBIT AFEACKEN               = CGUCON2^2;     /* asm clock gating enbale */
            =4 SBIT LEDCKEN                = CGUCON2^1;     /* led clk enable */
            =4 SBIT RTC_32K_EN             = CGUCON2^0;     /* RTC Working clock*/
            =4 
            =4 /* CGUCON3 */
            =4 SBIT DMACKEN                = CGUCON3^7;     /* CALÔËÐÐÊ±£¬cpuÊÇ·ñ½øÈëidle×´Ì¬¡£0:²»½øÈëidle×´Ì¬;1:½øÈëid
             -le×´Ì¬*/
            =4 SBIT CALCKEN                = CGUCON3^6;     /* cal clock enable*/
            =4 SBIT AFECKEN                = CGUCON3^5;     /* Clock dynamic gating AFE controller */
            =4 SBIT CLOSE_500K_EN          = CGUCON3^4;     /* mcu standby close 500k enable signal.1:close*/
            =4 SBIT XBUSCKEN               = CGUCON3^3;     /* Xsi0 clk enable */
            =4 SBIT AFESCKEN               = CGUCON3^2;     /* asm configure clock */
            =4 SBIT CLOSE_TIMER_EN         = CGUCON3^1;     /* mcu standby close timer clock enable sigal.1:close*/
            =4 SBIT RTCCKEN                = CGUCON3^0;
            =4 
            =4 /* CGUCON4 */
            =4 SBIT SSCG_CKEN              = CGUCON4^7;   /* sscg clk enable */
            =4 SBIT WDT_500K_EN            = CGUCON4^6;   /* CLK_500KµÄgating enable for wdt*/
            =4 SBIT PROBE32K_CKEN          = CGUCON4^4;   /* probe 32K clk enable */
            =4 SBIT PROBE48M_CKEN          = CGUCON4^3;   /* probe 48M clk enable */
            =4 /*CGUCON4[1:0] clk_div  use for select frequence for div clock source 0:1div;1:2div;2:4 div;3:8div*/
            =4 
            =4 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 31  

            =4 /* CGUCON5 for INT0 wake up */
            =4 SBIT GPIO_WKEN              = CGUCON5^7;  /* int0 wake up enable */
            =4 SBIT LCD_ESD_WKEN           = CGUCON5^6;  /* lcd esd wake up enble */
            =4 SBIT LCD_LVD_WKEN           = CGUCON5^5;  /* lcd lvd wake up enble */
            =4 SBIT LCD_TIM_WKEN           = CGUCON5^4;  /* lcd timing wake up enble */
            =4 SBIT LCD_RELOAD_FLASH_WKEN  = CGUCON5^3;  /* LCD reload flash wake up enable */
            =4 SBIT ASM_MON_WKEN           = CGUCON5^2;  /* scan monitor wake up enable */
            =4 SBIT I2C_MON_WKEN           = CGUCON5^1;  /* i2c monitor wake up enable */
            =4 SBIT RTC_CNT_WKEN           = CGUCON5^0;  /* RTC or CNT wake up enable */
            =4 
            =4 /* CGUCON6 */
            =4 SBIT CLK_WP                 = CGUCON6^0; /* Only CGU0 need */
            =4 
            =4 /* CGUCON7 */
            =4 /*CGUCON7[7:6] OSC_TEST_SEL            ÔÚgpio¿Ú²âÁ¿osc32kºÍosc48mÊ±ÖÓÊ±µÄÑ¡ÔñÐÅºÅ.3:32k_from_1m;2:32k_dig
             -;1:32K , 0:48M */
            =4 /*CGUCON7[5:0] OSC_TEST_DIV            Á¿²âOSC48M»òÕß32k OSCÊ±ÖÓÊ±£¬·ÖÆµÏ´ÊþÅäÖÃ*/
            =4 
            =4 SBIT SEL_32K_SRC            = CGUCON8^7; /* 32kÊ±ÖÓÔ´Ñ¡Ôñ.1:32kÑ¡Ôñ²úÉúÓÚÄ£Äâosc,1:32kÀ´Ô´ÓÚ1m·ÖÆµ*/
            =4 /* [6:0] fre_noadj_set. Êý×Ö32kÊ±ÖÓÊÇ·ñµ÷ÕûµÄÈÝÖµ. 1mÊ±ÖÓ,48mÀ´²â,Èç¹ûÕýºÃÊÇ32k,¸öÊýÎª1536.µ«ÊÇ1m·ÖÆµ¿ÉÄÜ
             -µ÷Õû²»µ½ÕýºÃ32k.
            =4 Òò´Ë»áÀ´»ØÕðµ´.ÎªÁË½â¾ö¸ÃÎÊÌâ,ÐèÉèÖÃ¸ÃÖµ.ÈôÉèÖÃÖµÎª15,·ÖÆµ³öÀ´µÄÊ±ÖÓ,±»¼ì²âÔÚ[1536-15,1536+15]Ö®¼ä,²»»áµ÷
             -Õû */
            =4 
            =4 /*I2CCON*/
            =4 SBIT I2C_WKEN               = I2CCON^5;      /* 0:disable i2c wakeup;1:enable i2c wakeup */
            =4 SBIT I2C_DEGLITCH_EN        = I2CCON^4;      /* analog deglitch enable.0:disable;1:enable */
            =4 SBIT I2C_BUSY               = I2CCON^3;      /* i2cÊÇ·ñ´¦ÓÚ·¢ËÍ/½ÓÊÕ×´Ì¬.0:idle;1:busy */
            =4 SBIT I2CTI                  = I2CCON^1;      /* hw set, sw clear */
            =4 SBIT I2CRI                  = I2CCON^0;      /* hw set, sw clear */
            =4 
            =4 /*I2CSTOP*/
            =4 SBIT I2C_WAIT               = I2CSTOP^7;     /* 0:ÊÍ·Åi2c scl;1:À­µÍi2c scl,À©Õ¹sclÖÜÆÚ;µ±slaveÃ¦Ê±²»ÄÜ¼°
             -Ê±ÏìÓ¦ */
            =4 SBIT COMP_BPSS              = I2CSTOP^6;     /* 0:Ê¹ÄÜi2cµØÖ·Æ¥Åä;1:È¡ÏûµØÖ·Æ¥Åä¿ØÖÆ */
            =4 SBIT ADDR_NACK              = I2CSTOP^5;     /* 0:¶Ôi2cµØÖ·½×¶Î·¢ack;1:¶Ôi2cµØÖ·½×¶Î·¢ËÍnack */
            =4 SBIT DATA_NACK              = I2CSTOP^4;     /* 0:¶Ôi2cÊý¾Ý½×¶Î·¢ack;1:¶Ôi2cÊý¾Ý½×¶Î·¢nack */
            =4 SBIT I2C_WK_STOP            = I2CSTOP^2;     /* wakeupÄ£¿é½ÓÊÕµ½ÕýÈ·µÄstop£¬write 0 to clear */
            =4 SBIT STOPID                 = I2CSTOP^1;     /* stop×´Ì¬×´Ì¬Î»,±íÊ¾µ±Ç°ÊÇwr stop»¹ÊÇrd stop.0: host write
             - stop 1: host read stop */
            =4 SBIT I2CSTP                 = I2CSTOP^0;     /* hw set when received right i2c stop statue,sw clear */
            =4 
            =4 /*I2CSEL*/
            =4 SBIT I2C_MON_CFG            = I2CSEL^4;   /* 0: i2c¹¤×÷£¬i2c monitor²»¹¤×÷; 1:i2c²»¹¤×÷,i2c_monitor¹¤×÷ *
             -/
            =4 
            =4 /* I2CStart*/
            =4 SBIT I2C_WK_BYTE4_FLAG      = I2C_STATE^3;
            =4 SBIT I2C_WK_BYTE3_FLAG      = I2C_STATE^2;
            =4 SBIT I2C_WK_BYTE2_FLAG      = I2C_STATE^1;
            =4 SBIT I2C_WK_BYTE1_FLAG      = I2C_STATE^0;
            =4 
            =4 /*IEN1*/
            =4 SBIT SWDT                   = IEN1^6;     /*Active watchdog timer.1:active;0:idle*/
            =4 
            =4 /* WDTCON */
            =4 SBIT WDTACT                 = WDTCON^2;   /* wdt work state.1:wdt in running mode; 0:wdt in stop mode */
            =4 SBIT WDTSTARTEN             = WDTCON^1;   /* when write 1,wdt start running,it is auto clear to 0 */
            =4 SBIT WDTSTOPEN              = WDTCON^0;   /* when write 1,wdt stop running,it is auto clear to 0 */
            =4 
            =4 /*WDTREL*/
            =4 SBIT WDT_PRESCALE           = WDTREL^7;  /*Reload value for high-byte watchdog.1:Ã¿384¸öcycle¼ÆÊýÒ»´Î;0:Ã
             -¿24¸öcycle¼ÆÊýÒ»´Î*/
            =4 /*WDTREL[6:0]                   reload value for the high_seven_byte of the watchdog timer when a refresh
             - is triggered.*/
            =4 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 32  

            =4 /* TCON */
            =4 SBIT TF1 = TCON^7;               /* timer1 overflow flag£º
            =4                                    µ±timer1 overflowsÊ±»áÖÃ1£¬ÖÐ¶ÏÏìÓ¦Ê±Ó²¼þ»áÇåÁã */
            =4 SBIT TR1 = TCON^6;               /* timer1µÄ¿ØÖÆÎ»¡£
            =4                                    ¡°1¡±£ºÆð¶¯timer1,Ó²¼þ×Ô¶¯ÇåÁã£¨×¢Òâ£ºÔÚÆð¶¯timer1Ö®Ç°±ØÐëÒª°Ñtimer1Éè
             -¶¨ºÃ£© */
            =4 SBIT TF0 = TCON^5;               /* timer0 overflow flag£º
            =4                                     µ±timer0 overflowsÊ±»áÖÃ1£¬ÖÐ¶ÏÏìÓ¦Ê±Ó²¼þ»áÇåÁã */
            =4 SBIT TR0 = TCON^4;               /* timer0µÄ¿ØÖÆÎ»¡£
            =4                                    ¡°1¡±£ºÆð¶¯timer0,Ó²¼þ×Ô¶¯ÇåÁã£¨×¢Òâ£ºÔÚÆð¶¯timer0Ö®Ç°±ØÐëÒª°Ñtimer0Éè
             -¶¨ºÃ£© */
            =4 SBIT IF1 = TCON^3;               /* external interrupt 1 edge flag,hardware controlled
            =4                                     set when external interrupt 1 is detected
            =4                                     cleared when interrupt is processed */
            =4 SBIT IT1 = TCON^2;               /* external interrupt 1 signal type control bit
            =4                                     set to specify external interrupt 1 as falling edge triggered
            =4                                     cleared to specify external interrupt 1 as low level triggered */
            =4 SBIT IF0 = TCON^1;               /* external interrupt 0 edge flag , hardware controlled
            =4                                     set when external interrupt 0 is detected
            =4                                     cleared when interrupt is processed */
            =4 SBIT IT0 = TCON^0;               /* external interrupt 0 signal type control bit.
            =4                                     Set to specify External interrupt 0 as falling edge triggered.
            =4                                     Cleared to specify External interrupt 0 as low level triggered. */
            =4 /*TMOD*/
            =4 SBIT GATE1              = TMOD^7;  /*timer 1 gate*/
            =4 SBIT GATE0              = TMOD^3;  /*timer0 gate*/
            =4 /*TMOD[5:4]             time1 mode select. 00:timer stop; 01:16 bit counter single mode; 10:16 bit counte
             -r repeat mode; 11:half timer1ÔÝÍ£¹¤×÷,Èç¹û¸´Ô­µ½Ö®Ç°µÄÄ£Ê½,timer1½«¼ÌÐø¹¤×÷*/
            =4 /*TMOD[1:0]             time0 mode select.¹¦ÄÜÍ¬ÉÏ*/
            =4 
            =4 /*TDIV*/
            =4 SBIT INTSEL1            = TDIV^7;   /*timer1ÖÐ¶ÏÇå³ýÑ¡Ôñ.1:Èí¼þÇå³ý,Ð´intclr1Çå³ýtimer1ÖÐ¶Ï;0:Ó²¼þÇå³ý*/
            =4 SBIT INTSEL0            = TDIV^6;   /*timer0ÖÐ¶ÏÇå³ýÑ¡Ôñ.1:Èí¼þÇå³ý,Ð´intclr0Çå³ýtimer1ÖÐ¶Ï;0:Ó²¼þÇå³ý*/
            =4 SBIT INTCLR1            = TDIV^5;   /*Èí¼þÇå³ýÊ±,INTCLR1Ð´1Ê±Çå³ýtimer1ÖÐ¶Ï*/
            =4 SBIT INTCLR0            = TDIV^4;   /*Èí¼þÇå³ýÊ±,INTCLR0Ð´1Ê±Çå³ýtimer1ÖÐ¶Ï*/
            =4 
            =4 /* CNTCON */
            =4 SBIT CNT_START          = CNTCON^7;   /* 1: Æô¶¯CNT; 0: ¼ÆÊýÖÕÖ¹(¿ÉÒÔ¶ÁÈ¡¼ÆÊýÖµ) */
            =4 SBIT CNT_CLEAR          = CNTCON^4;   /* Çå³ýCNT¼ÆÊýÆ÷Öµµ½0 */
            =4 SBIT CNT_WKEN           = CNTCON^3;   /* CNT»½ÐÑÊ¹ÄÜ: 1:´ò¿ªÊ¹ÄÜ 0:¹Ø±Õ»½ÐÑÊ¹ÄÜ */
            =4 
            =4 /*LED_EN*/
            =4 SBIT LED_5_EN           = LED_EN^5;
            =4 SBIT LED_4_EN           = LED_EN^4;
            =4 SBIT LED_3_EN           = LED_EN^3;
            =4 SBIT LED_2_EN           = LED_EN^2;
            =4 SBIT LED_1_EN           = LED_EN^1;
            =4 SBIT LED_0_EN           = LED_EN^0;
            =4 
            =4 /*MEMBIST_EN1*/
            =4 SBIT DRAM2_BIST_EN      = MEMBIST_EN1^7;
            =4 SBIT DRAM1_BIST_EN      = MEMBIST_EN1^6;
            =4 SBIT DRAM0_BIST_EN      = MEMBIST_EN1^5;
            =4 SBIT PRAM4_BIST_EN      = MEMBIST_EN1^4;
            =4 SBIT PRAM3_BIST_EN      = MEMBIST_EN1^3;
            =4 SBIT PRAM2_BIST_EN      = MEMBIST_EN1^2;
            =4 SBIT PRAM1_BIST_EN      = MEMBIST_EN1^1;
            =4 SBIT PRAM0_BIST_EN      = MEMBIST_EN1^0;
            =4 
            =4 /*MEMBIST_EN2*/
            =4 SBIT AFERAM_R_BIST_EN   = MEMBIST_EN2^3;
            =4 SBIT AFERAM_L_BIST_EN   = MEMBIST_EN2^2;
            =4 SBIT ARAM_BIST_EN       = MEMBIST_EN2^1;
            =4 SBIT PROM_BIST_EN       = MEMBIST_EN2^0;
            =4 
            =4 /*MEMBIST_FINISH1*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 33  

            =4 SBIT DRAM2_FINISH       = MEMBIST_FINISH1^7;
            =4 SBIT DRAM1_FINISH       = MEMBIST_FINISH1^6;
            =4 SBIT DRAM0_FINISH       = MEMBIST_FINISH1^5;
            =4 SBIT PRAM4_FINISH       = MEMBIST_FINISH1^4;
            =4 SBIT PRAM3_FINISH       = MEMBIST_FINISH1^3;
            =4 SBIT PRAM2_FINISH       = MEMBIST_FINISH1^2;
            =4 SBIT PRAM1_FINISH       = MEMBIST_FINISH1^1;
            =4 SBIT PRAM0_FINISH       = MEMBIST_FINISH1^0;
            =4 
            =4 /*MEMBIST_FINISH2*/
            =4 SBIT RPTRAM_R_FINISH    = MEMBIST_FINISH2^7;
            =4 SBIT RPTRAM_L_FINISH    = MEMBIST_FINISH2^6;
            =4 SBIT ACCRAM_R_FINISH    = MEMBIST_FINISH2^5;
            =4 SBIT ACCRAM_L_FINISH    = MEMBIST_FINISH2^4;
            =4 SBIT TABRAM_R_FINISH    = MEMBIST_FINISH2^3;
            =4 SBIT TABRAM_L_FINISH    = MEMBIST_FINISH2^2;
            =4 SBIT ARAM_FINISH        = MEMBIST_FINISH2^1;
            =4 SBIT PROM_FINISH        = MEMBIST_FINISH2^0;
            =4 
            =4 /*MEMBIST_FAIL1*/
            =4 SBIT DRAM2_FAIL         = MEMBIST_FAIL1^7;
            =4 SBIT DRAM1_FAIL         = MEMBIST_FAIL1^6;
            =4 SBIT DRAM0_FAIL         = MEMBIST_FAIL1^5;
            =4 SBIT PRAM4_FAIL         = MEMBIST_FAIL1^4;
            =4 SBIT PRAM3_FAIL         = MEMBIST_FAIL1^3;
            =4 SBIT PRAM2_FAIL         = MEMBIST_FAIL1^2;
            =4 SBIT PRAM1_FAIL         = MEMBIST_FAIL1^1;
            =4 SBIT PRAM0_FAIL         = MEMBIST_FAIL1^0;
            =4 
            =4 /*MEMBIST_FAIL2*/
            =4 SBIT RPTRAM_R_FAIL      = MEMBIST_FAIL2^7;
            =4 SBIT RPTRAM_L_FAIL      = MEMBIST_FAIL2^6;
            =4 SBIT ACCRAM_R_FAIL      = MEMBIST_FAIL2^5;
            =4 SBIT ACCRAM_L_FAIL      = MEMBIST_FAIL2^4;
            =4 SBIT TABRAM_R_FAIL      = MEMBIST_FAIL2^3;
            =4 SBIT TABRAM_L_FAIL      = MEMBIST_FAIL2^2;
            =4 SBIT ARAM_FAIL          = MEMBIST_FAIL2^1;
            =4 SBIT PROM_FAIL          = MEMBIST_FAIL2^0;
            =4 
            =4 /*MEMBIST_ERRMAP1*/
            =4 SBIT DRAM2_ERRMAP       = MEMBIST_ERRMAP1^7;
            =4 SBIT DRAM1_ERRMAP       = MEMBIST_ERRMAP1^6;
            =4 SBIT DRAM0_ERRMAP       = MEMBIST_ERRMAP1^5;
            =4 SBIT PRAM4_ERRMAP       = MEMBIST_ERRMAP1^4;
            =4 SBIT PRAM3_ERRMAP       = MEMBIST_ERRMAP1^3;
            =4 SBIT PRAM2_ERRMAP       = MEMBIST_ERRMAP1^2;
            =4 SBIT PRAM1_ERRMAP       = MEMBIST_ERRMAP1^1;
            =4 SBIT PRAM0_ERRMAP       = MEMBIST_ERRMAP1^0;
            =4 
            =4 /*MEMBIST_ERRMAP2*/
            =4 SBIT RPTRAM_R_ERRMAP    = MEMBIST_ERRMAP2^7;
            =4 SBIT RPTRAM_L_ERRMAP    = MEMBIST_ERRMAP2^6;
            =4 SBIT ACCRAM_R_ERRMAP    = MEMBIST_ERRMAP2^5;
            =4 SBIT ACCRAM_L_ERRMAP    = MEMBIST_ERRMAP2^4;
            =4 SBIT TABRAM_R_ERRMAP    = MEMBIST_ERRMAP2^3;
            =4 SBIT TABRAM_L_ERRMAP    = MEMBIST_ERRMAP2^2;
            =4 SBIT ARAM_ERRMAP        = MEMBIST_ERRMAP2^1;
            =4 SBIT PROM_ERRMAP        = MEMBIST_ERRMAP2^0;
            =4 
            =4 /* AIF */
            =4 SBIT WDT_INT_IF         = AIF^4;      /* wdt intÇëÇóÐÅºÅ */
            =4 SBIT SPI0_INT_IF        = AIF^3;      /* spi0 intÇëÇóÐÅºÅ */
            =4 SBIT SPI1_INT_IF        = AIF^2;      /* spi1 intÇëÇóÐÅºÅ */
            =4 SBIT ASM_INT_IF         = AIF^1;      /* asm intÇëÇóÐÅºÅ */
            =4 SBIT I2C_STOP_IF        = AIF^0;      /* i2c stop intÇëÇóÐÅºÅ */
            =4 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 34  

            =4 /* AIE */
            =4 SBIT WDT_INT_EI         = AIE^4;    /* wdt int enable */
            =4 SBIT SPI0_EI            = AIE^3;    /* spi0 int enable*/
            =4 SBIT SPI1_EI            = AIE^2;    /* spi1 int enable */
            =4 SBIT ASM_EI             = AIE^1;    /* Asm int enable */
            =4 SBIT I2C_STOP_EI        = AIE^0;    /* i2c stop int enable */  
            =4 
            =4 
            =4 /* IEN0 */
            =4 SBIT EA                 = IEN0^7;  /* Global Interrupt Enable */
            =4 SBIT EC                 = IEN0^6;  /* uart */
            =4 SBIT ET2                = IEN0^5;  /* I2C */
            =4 SBIT ES                 = IEN0^4;  /* LCD TIMING int */
            =4 SBIT ET1                = IEN0^3;  /* timer1 */
            =4 SBIT EX1                = IEN0^2;  /* RTC or CNT */
            =4 SBIT ET0                = IEN0^1;  /* timer0 */
            =4 SBIT EX0                = IEN0^0;  /* int0 wake up */
            =4 
            =4 /* interruption priority */
            =4 SBIT IPHX0              = IPH0^0;   /* Int0 */
            =4 SBIT IPLX0              = IPL0^0;
            =4 SBIT IPHT0              = IPH0^1;   /* Time0 */
            =4 SBIT IPLT0              = IPL0^1;
            =4 SBIT IPHX1              = IPH0^2;   /* Int1 */
            =4 SBIT IPLX1              = IPL0^2;
            =4 SBIT IPHT1              = IPH0^3;   /* Time1 */
            =4 SBIT IPLT1              = IPL0^3;
            =4 SBIT LCD_IPH            = IPH0^4;   /* LCD int run */
            =4 SBIT LCD_IPL            = IPL0^4;
            =4 SBIT I2C_IPH            = IPH0^5;   /* I2C */
            =4 SBIT I2C_IPL            = IPL0^5;
            =4 SBIT Uart_IPH           = IPH0^6;   /* Uart */
            =4 SBIT Uart_IPL           = IPL0^6;
            =4 SBIT I2C_STOP_IPH       = AIPH^0;   /* I2C Stop */
            =4 SBIT I2C_STOP_IPL       = AIPL^0;
            =4 SBIT ASM_IPH            = AIPH^1;   /* ASM */
            =4 SBIT ASM_IPL            = AIPL^1;   
            =4 SBIT SPI1_IPH           = AIPH^2;   /* SPI1 */
            =4 SBIT SPI1_IPL           = AIPL^2;
            =4 SBIT SPI0_IPH           = AIPH^3;   /* SPI0 */
            =4 SBIT SPI0_IPL           = AIPL^3;
            =4 SBIT WDT_IPH            = AIPH^4;   /* wdt */
            =4 SBIT WDT_IPL            = AIPL^4;
            =4 
            =4 /* P0 */
            =4 SBIT P0_7               = P0BUF^7;
            =4 SBIT P0_6               = P0BUF^6;
            =4 SBIT P0_5               = P0BUF^5;
            =4 SBIT P0_4               = P0BUF^4;
            =4 SBIT P0_3               = P0BUF^3;
            =4 SBIT P0_2               = P0BUF^2;
            =4 SBIT P0_1               = P0BUF^1;
            =4 SBIT P0_0               = P0BUF^0;
            =4 
            =4 /*p1*/
            =4 SBIT P1_7               = P1BUF^7;
            =4 SBIT P1_6               = P1BUF^6;
            =4 SBIT P1_5               = P1BUF^5;
            =4 SBIT P1_4               = P1BUF^4;
            =4 SBIT P1_3               = P1BUF^3;
            =4 SBIT P1_2               = P1BUF^2;
            =4 SBIT P1_1               = P1BUF^1;
            =4 SBIT P1_0               = P1BUF^0;
            =4 
            =4 
            =4 /* GPIO pin definition */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 35  

            =4 SBIT Flash_WP           = P1BUF^7;
            =4 SBIT Flash_HOLD         = P1BUF^4;
            =4 
            =4 SBIT Flash_pad          = P1BUF^6;
            =4 SBIT Flash_DIR          = P1DIR^6;
            =4 SBIT Flash_GPIO         = P1MOD^6;
            =4 SBIT Flash_DM           = P1SEL^6;
            =4 
            =4 SBIT INTOUT             = P0BUF^6;
            =4 SBIT INTOUT_DIR         = P0DIR^6;
            =4 SBIT GPIO_INTOUT        = P0MOD^6;
            =4 SBIT INTOUT_DM          = P0SEL^6;
            =4 
            =4 SBIT GPIO3              = P0BUF^7;
            =4 SBIT GPIO3_DIR          = P0DIR^7;
            =4 SBIT GPIO3_INTOUT       = P0MOD^7;
            =4 SBIT GPIO3_DM           = P0SEL^7;
            =4 
            =4 SBIT GPIO4              = P1BUF^5;
            =4 SBIT GPIO4_DIR          = P1DIR^5;
            =4 SBIT GPIO4_INTOUT       = P1MOD^5;
            =4 SBIT GPIO4_DM           = P1SEL^5;
            =4 
            =4 /* mcu clk config */
            =4 #define MAIN_CLK  0 //0:48M; 1:24M   
            =4 /*******************************************************************************
            =4  * 3.Global structures, unions and enumerations using typedef
            =4  *******************************************************************************/
            =4 
            =4 /*******************************************************************************
            =4  * 4.Global variable extern declarations
            =4  *******************************************************************************/
            =4 
            =4 
            =4 /******************************************************************************
            =4 *
            =4 * App Info data section
            =4 ******************************************************************************/
            =4 // app ´æÔÚflashµÄÎïÀíµØÖ·
            =4 #define CODE_START_ADDR       0x1000
            =4 #define CODE_VERIF_ADDR       (CODE_START_ADDR+APP_VERIF_ADDR)
            =4 
            =4 // app ´æÔÚpramµÄÎïÀíµØÖ·
            =4 #define APP_ADDR_START        0x0000  // app start addr
            =4 #define APP_START_OPCODE      0x02
            =4 
            =4 #define APP_VERIF_ADDR        0x100   // Verification Info
            =4 #define APP_VERIF_LEN         0x20
            =4 #define APP_VERIF_CODE_LEN    0x04    //appÖÐcode³¤¶ÈÐÅÏ¢
            =4 
            =4 typedef enum
            =4 {
            =4     APP_LEN      = 0x00,
            =4     APP_NE_LEN   = 0x02,
            =4     P1_ECC_H     = 0x04,
            =4     P1_ECC_L     = 0x05,
            =4     P1_ECC_NE_H  = 0x06,
            =4     P1_ECC_NE_L  = 0x07,
            =4     P2_ECC_H     = 0x08,
            =4     P2_ECC_L     = 0x09,
            =4     P2_ECC_NE_H  = 0x0A,
            =4     P2_ECC_NE_L  = 0x0B,
            =4     APP_LEN_H    = 0x12,
            =4     APP_LEN_H_NE = 0x14,
            =4 } ENUM_APP_INFO;
            =4 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 36  

            =4 // AppÑéÖ¤ÐÅÏ¢
            =4 #define ADDR_APP_LEN          (APP_VERIF_ADDR+APP_LEN)
            =4 #define ADDR_APP_NE_LEN       (APP_VERIF_ADDR+APP_NE_LEN)
            =4 #define ADDR_PART1_ECC        (APP_VERIF_ADDR+P1_ECC_H)
            =4 #define ADDR_PART1_ECC_NE     (APP_VERIF_ADDR+P1_ECC_NE_H)
            =4 #define ADDR_PART2_ECC        (APP_VERIF_ADDR+P2_ECC_H)
            =4 #define ADDR_PART2_ECC_NE     (APP_VERIF_ADDR+P2_ECC_NE_H)
            =4 #define ADDR_APP_LEN_H        (APP_VERIF_ADDR+APP_LEN_H)
            =4 #define ADDR_APP_LEN_H_NE     (APP_VERIF_ADDR+APP_LEN_H_NE)
            =4 
            =4 #define APP_ADDR_PART1_START  0x0000
            =4 #define APP_ADDR_PART1_LEN    ((APP_VERIF_ADDR)-(APP_ADDR_PART1_START))
            =4 #define APP_ADDR_PART2_START  ((APP_VERIF_ADDR)+(APP_VERIF_LEN)+(FW_CFG_TOTAL_SIZE))
            =4 
            =4 #define FLASH_APP_INFO        (APP_VERIF_ADDR + CODE_START_ADDR)
            =4 /******************************************************************************
            =4 *
            =4 * FW config data section
            =4 *******************************************************************************
            =4 /
            =4 /* FWÅäÖÃÇøÓò³¤¶È */
            =4 #define FW_CFG_TOTAL_SIZE          0x80
            =4 #define FW_CFG_INFO_SIZE           0x0E
            =4 
            =4 /* FWÅäÖÃÇøÓòÆ«ÒÆÁ¿ */
            =4 typedef enum
            =4 {
            =4     FW_CFG_I2C_OFFSET              = 0x00,     // master I2C  addr
            =4     FW_CFG_I2C_NE_OFFSET           = 0x01,     // ~master I2C addr
            =4     FW_CFG_IOVOLTAGE_OFFSET        = 0x02,     // Io Voltage 
            =4     FW_CFG_IOVOLTAGE_NE_OFFSET     = 0x03,     // ~Io Voltage
            =4     FW_CFG_VENDOR_OFFSET           = 0x04,     // Vendor 
            =4     FW_CFG_VENDOR_NE_OFFSET        = 0x05,     // ~Vendor
            =4     FW_CFG_SPI_CLK_OFFSET          = 0x06,     // SPI Clk
            =4     FW_CFG_SPI_CLK_NE_OFFSET       = 0x07,     // ~SPI Clk
            =4     FW_CFG_SYS_CLK_OFFSET          = 0x08,     // Sys Clk
            =4     FW_CFG_SYS_CLK_NE_OFFSET       = 0x09,     // ~Sys Clk 
            =4     FW_CFG_XBUS_CLK_OFFSET         = 0x0A,     // LCD xbus clk
            =4     FW_CFG_XBUS_CLK_NE_OFFSET      = 0x0B,     // ~LCD xbus clk
            =4     FW_CFG_SPI_IOMODE_OFFSET       = 0x0C,     // spi iomode
            =4     FW_CFG_SPI_IOMODE_NE_OFFSET    = 0x0D,     // ~spi iomode
            =4 } ENUM_FW_CFG_OFFSET;
            =4 
            =4 /* FWÅäÖÃÇøÓòFlashÎ»ÖÃ */
            =4 typedef enum
            =4 {
            =4     FW_CFG_START_FLASH_ADDR        = 0x0F80,
            =4     FW_CFG_I2C_FLASH_ADDR          = (FW_CFG_START_FLASH_ADDR+
            =4 FW_CFG_I2C_OFFSET),
            =4 } ENUM_FW_CFG_FLASH_ADDR;
            =4 
            =4 /* FWÅäÖÃ±¸·ÝÇøÓòFlashÎ»ÖÃ */
            =4 typedef enum
            =4 {
            =4     FW_CFG_BKUP_START_FLASH_ADDR   = 0x1120,
            =4     FW_CFG_BKUP_I2C_FLASH_ADDR     = (FW_CFG_BKUP_START_FLASH_ADDR+FW_CFG_I2C_OFFSET),
            =4 } ENUM_FW_CFG_BKUP_FLASH_ADDR;
            =4 
            =4 /* LCD OTPÅäÖÃÇøÓòÎ»ÖÃ */
            =4 typedef enum
            =4 {
            =4     LCD_OTP_REG_ADDR               = 0x9866,
            =4     LCD_OTP_MASTER_I2C_ADDR        = (LCD_OTP_REG_ADDR+FW_CFG_I2C_OFFSET),
            =4     LCD_OTP_MASTER_I2C_NE_ADDR,
            =4     LCD_OTP_SPI_CLK_ADDR           = (LCD_OTP_REG_ADDR+FW_CFG_SPI_CLK_OFFSET),
            =4     LCD_OTP_SPI_CLK_NE_ADDR,
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 37  

            =4     LCD_OTP_SYS_CLK_ADDR,
            =4     LCD_OTP_SYS_CLK_NE_ADDR,
            =4     LCD_OTP_XBUS_CLK_ADDR,
            =4     LCD_OTP_XBUS_CLK_NE_ADDR,
            =4     LCD_OTP_SPI_IOMODE_ADDR,
            =4     LCD_OTP_SPI_IOMODE_NE_ADDR,
            =4 } ENUM_LCD_OTP_ADDR;
            =4 
            =4 #define REG8(n)  (*((volatile UINT8  *)(n)))
            =4 #define REG16(n) (*((volatile UINT16 *)(n)))
            =4 #define REG32(n) (*((volatile UINT32 *)(n)))
            =4 
            =4 #define APP_DATA_MAX         0x11800
            =4 #define RST_VALUE_UPGRADE    0x6B  /* Flag of upgrade according to Romboot */
            =4 
            =4 #define PRAM_ADDR8(n)    (*((UINT8 far *)((UINT32)0xFEE800 + (n))))
            =4 #define PRAM2_ADDR8(n)   (*((UINT8 far *)((UINT32)0xFF4000 + (n))))
            =4 
            =4 #define PRAM_PTR8(n)     ((volatile UINT8 far *)((UINT32)0xFEE800 + (n)))
            =4 #define PRAM2_PTR8(n)    ((volatile UINT8 far *)((UINT32)0xFF4000 + (n)))
            =4 
            =4 #define PROM_ADDR8(n)     (*((UINT8 far *)(0xFD0000 + n)))
            =4 #define DRAM_ADDR8(n)     (*((UINT8 *)(0x0000 + n)))
            =4 
            =4 
            =4 #define PRAM_ADDR16(n)     (*((UINT16 far *)(0xFEE800 + n)))
            =4 
            =4 #define PROM_ADDR16(n)     (*((UINT16 far *)((UINT32)0xFD0000 + n)))
            =4 #define DRAM_ADDR16(n)     (*((UINT16 *)((UINT32)0x0000 + n)))
            =4 
            =4 #define HOLD            while (1)
            =4 /*******************************************************************************
            =4  * Global function prototypes
            =4  *******************************************************************************/
            =4 
            =4 #endif
   25       =3 
   26       =3 /*******************************************************************************
   27       =3 * Global constant and macro definitions using #define
   28       =3 *******************************************************************************/
   29       =3 #define ARAM_DATA_BASE_ADDR              0xA000
   30       =3 #define SPI1_REG_BASE_ADDR               0xB220
   31       =3 /* SPI0 reg Start Addr */
   32       =3 #define SPI0_REG_BASE_ADDR               0xB200
   33       =3 
   34       =3 #define SPI0_DMA_CTRL                    REG16(SPI0_REG_BASE_ADDR+(0x00<<1))
   35       =3 #define SPI0_DMA_ERR_TIMEOUT_CTRL        REG16(SPI0_REG_BASE_ADDR+(0x01<<1))
   36       =3 #define SPI0_DMA_ADDR_H                  REG16(SPI0_REG_BASE_ADDR+(0x02<<1))
   37       =3 #define SPI0_DMA_START_ADDR_L            REG16(SPI0_REG_BASE_ADDR+(0x03<<1))            
   38       =3 #define SPI0_DMA_END_ADDR_L              REG16(SPI0_REG_BASE_ADDR+(0x04<<1))         
   39       =3 #define SPI0_DMA_CRC                     REG16(SPI0_REG_BASE_ADDR+(0x05<<1))
   40       =3 #define SPI0_DMA_SRCR                    REG16(SPI0_REG_BASE_ADDR+(0x06<<1))
   41       =3 /* XSI reg ¿ØÖÆÇø */
   42       =3 
   43       =3 /* XSI0 reg start addr */
   44       =3 #define XSI0_REG_BASE_ADDR     0xB400
   45       =3 
   46       =3 #define XSI0_WDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x00<<1))
   47       =3 #define XSI0_RDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x01<<1))
   48       =3 #define XSI0_CLK_SEL           REG16(XSI0_REG_BASE_ADDR+(0x02<<1))
   49       =3 #define XSI0_STOP              REG16(XSI0_REG_BASE_ADDR+(0x03<<1))
   50       =3 #define XSI0_TX_INT            REG16(XSI0_REG_BASE_ADDR+(0x04<<1))
   51       =3 
   52       =3 /* XSI1 reg start addr */
   53       =3 #define XSI1_REG_BASE_ADDR     0xB800
   54       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 38  

   55       =3 #define XSI1_WDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x00<<1))
   56       =3 #define XSI1_RDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x01<<1))
   57       =3 #define XSI1_CLK_SEL           REG16(XSI1_REG_BASE_ADDR+(0x02<<1))
   58       =3 #define XSI1_STOP              REG16(XSI1_REG_BASE_ADDR+(0x03<<1))
   59       =3 #define XSI1_TX_INT            REG16(XSI1_REG_BASE_ADDR+(0x04<<1))
   60       =3 
   61       =3 /* XBUS reg start addr */
   62       =3 #define XBUS_REG_BASE_ADDR     0xBC00
   63       =3 
   64       =3 #define XBUS_RDATA_LO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x00<<1))
   65       =3 #define XBUS_RDATA_HO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x01<<1))
   66       =3 #define XBUS_REGFILE_CTRL      REG16(XBUS_REG_BASE_ADDR+(0x02<<1))
   67       =3 #define XBUS_CMD               REG16(XBUS_REG_BASE_ADDR+(0x03<<1))
   68       =3 #define XBUS_RLD_DATA          REG16(XBUS_REG_BASE_ADDR+(0x04<<1))
   69       =3 
   70       =3 /* reload dma base addr */
   71       =3 //#define RELOAD_DMA_START_ADDR  0x9D00
   72       =3 /******************************************************************************/
   73       =3 /******************************************************************************/
   74       =3 /* CAL reg Start Addr */
   75       =3 #define CAL_REG_BASE_ADDR       0xB000
   76       =3 
   77       =3 /* ASM reg Start Addr */
   78       =3 #define ASM_REG_BASE_ADDR       0xB100
   79       =3 
   80       =3 
   81       =3 /*******************************************************************************
   82       =3 * Global structures, unions and enumerations using typedef
   83       =3 *******************************************************************************/
   84       =3 /*************************************************************/
   85       =3 /* XSI reg */
   86       =3 typedef struct
   87       =3 {
   88       =3     UINT16 Wdata;        // (0x00<<1)
   89       =3     UINT16 Rdata;        // (0x01<<1)
   90       =3     UINT16 Clksel;       // (0x02<<1)
   91       =3     UINT16 Stop;         // (0x03<<1)
   92       =3     UINT16 Tx_int;       // (0x04<<1)
   93       =3 } ST_XSIRegisters;
   94       =3 
   95       =3 typedef union
   96       =3 {
   97       =3     ST_XSIRegisters reg;
   98       =3     UINT16 offset[sizeof(ST_XSIRegisters)>>1];
   99       =3 } Union_XSIReg;
  100       =3 
  101       =3 /*************************************************************/
  102       =3 // cal
  103       =3 typedef struct
  104       =3 {
  105       =3     UINT16 rCmd;           // (0x00<<1)
  106       =3     UINT16 rDmaLen;        // (0x01<<1)
  107       =3     UINT16 rS1Addr;        // (0x02<<1)
  108       =3     UINT16 rS2Addr;        // (0x03<<1)
  109       =3     UINT16 rOutAddr;       // (0x04<<1)
  110       =3     UINT16 rPar;           // (0x05<<1)
  111       =3     UINT16 rSize;          // (0x06<<1)
  112       =3     UINT16 rPThd;          // (0x07<<1)
  113       =3     UINT16 rNThd;          // (0x08<<1)
  114       =3     UINT16 rAThd;          // (0x09<<1)
  115       =3     UINT16 rDmask;         // (0x0A<<1)
  116       =3     UINT16 rPaCnt;         // (0x0B<<1)
  117       =3     UINT16 rNaCnt;         // (0x0C<<1)
  118       =3     UINT16 rPsCnt;         // (0x0D<<1)
  119       =3     UINT16 rNsCnt;         // (0x0E<<1)
  120       =3     UINT16 rMaxV;          // (0x0F<<1)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 39  

  121       =3     UINT16 rMaxPos;        // (0x10<<1)
  122       =3     UINT16 rMinV;          // (0x11<<1)
  123       =3     UINT16 rMinPos;        // (0x12<<1)
  124       =3     UINT16 rID0;           // (0x13<<1)
  125       =3     UINT16 rID1;           // (0x14<<1)
  126       =3     UINT16 rID2;           // (0x15<<1)
  127       =3     UINT16 rCrc;           // (0x16<<1)
  128       =3     UINT16 rChk;           // (0x17<<1)
  129       =3     UINT16 rNaThd;         // (0x18<<1)
  130       =3     UINT16 rTxRxNum;       // (0x19<<1)
  131       =3     UINT16 rDivShift;      // (0x1a<<1)
  132       =3     UINT16 rSubabsMax;     // (0x1b<<1)
  133       =3     UINT16 rInt;           // (0x1c<<1)
  134       =3     UINT16 rCntNum;        // (0x1d<<1)
  135       =3     UINT16 rDmaskA;        // (0x1e<<1)
  136       =3     UINT16 rTxRxNumAm;     // (0x1f<<1)
  137       =3     UINT16 rTxRxNumAs;     // (0x20<<1)
  138       =3     UINT16 rSizeAm;        // (0x21<<1)
  139       =3     UINT16 rSizeAs;        // (0x22<<1)
  140       =3     UINT16 rS1AddrA;       // (0x23<<1)
  141       =3     UINT16 rS2AddrA;       // (0x24<<1)
  142       =3     UINT16 rOutAddrA;      // (0x25<<1)
  143       =3     UINT16 rSel;           // (0x26<<1)
  144       =3 } ST_CalRegisters;
  145       =3 
  146       =3 typedef union
  147       =3 {
  148       =3     ST_CalRegisters reg;
  149       =3     UINT16 offset[sizeof(ST_CalRegisters)>>1];
  150       =3 } Union_CalReg;
  151       =3 
  152       =3 /*************************************************************/
  153       =3 /*XBUS reg*/
  154       =3 typedef struct
  155       =3 {  
  156       =3     UINT16 rdata_lo_byte;
  157       =3     UINT16 rdata_ho_byte;
  158       =3     UINT16 lcd_regfile_ctrl;
  159       =3     UINT16 xbus_cmd;//bit1 reload_end;bit0 reload_abort
  160       =3     UINT16 xbus_rld_data;//reload_data
  161       =3 }ST_LcdWrapRegisters;
  162       =3 
  163       =3 typedef union
  164       =3 {
  165       =3     ST_LcdWrapRegisters reg;
  166       =3     UINT16 offset[sizeof(ST_LcdWrapRegisters)>>1];
  167       =3 }Union_LcdReg;
  168       =3 
  169       =3 /*************************************************************/
  170       =3 /*SPI0_DMA reg*/
  171       =3 typedef struct
  172       =3 {
  173       =3     UINT16 dma_ctrl;
  174       =3     UINT16 timeout_ctrl;
  175       =3     UINT16 addr_h;
  176       =3     UINT16 start_addr_l;
  177       =3     UINT16 end_addr_l;
  178       =3     UINT16 dma_crc;
  179       =3     UINT16 dma_srcr;
  180       =3     
  181       =3 }ST_Spi0DmaRegisters;
  182       =3 
  183       =3 /*SPI1_DMA reg*/
  184       =3 typedef struct
  185       =3 {
  186       =3     UINT16 dma_ctrl;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 40  

  187       =3     UINT16 timeout_ctrl;
  188       =3     UINT16 addr_h;
  189       =3     UINT16 start_addr_l;
  190       =3     UINT16 end_addr_l;
  191       =3     UINT16 dma_crc;
  192       =3     UINT16 dma_srcr;
  193       =3     
  194       =3 }ST_Spi1DmaRegisters;
  195       =3 
  196       =3 typedef union
  197       =3 {
  198       =3     ST_Spi0DmaRegisters reg;
  199       =3     UINT16 offset[sizeof(ST_Spi0DmaRegisters)>>1];
  200       =3 }Union_Spi0Reg;
  201       =3 
  202       =3 /*************************************************************/
  203       =3 /* ASM reg */
  204       =3 typedef struct
  205       =3 {
  206       =3     UINT16 usAsmIntFlag0;         // 00  RO
  207       =3     UINT16 usAsmIntFlag1;         // 01  RO
  208       =3     UINT16 usAsmIntClr0;          // 02  WO
  209       =3     UINT16 usAsmIntClr1;          // 03  WO
  210       =3     UINT16 usAsmIntEn0;           // 04
  211       =3     UINT16 usAsmIntEn1;           // 05
  212       =3     UINT16 usAsmIntWakeEn0;       // 06
  213       =3     UINT16 usAsmIntWakeEn1;       // 07
  214       =3     UINT16 usAsmIntSta;           // 08  RO
  215       =3     UINT16 usAsmScanSta0;         // 09  RO
  216       =3     UINT16 usAsmScanSta1;         // 10  RO
  217       =3     UINT16 usAsmScanSta2;         // 11  RO
  218       =3     UINT16 usAsmScanSta3;         // 12  RO
  219       =3     UINT16 usAsmScanCtrl;         // 13  WO
  220       =3     UINT16 usAsmScanCfg0;         // 14
  221       =3     UINT16 usAsmScanCfg1;         // 15
  222       =3     UINT16 usAsmTpFrameCfg0;      // 16
  223       =3     UINT16 usAsmTpFrameCfg1;      // 17
  224       =3     UINT16 usAsmTpFrameCfg2;      // 18
  225       =3     UINT16 usAsmTpFrameCfg3;      // 19
  226       =3     UINT16 usAsmScanDly;          // 20
  227       =3     UINT16 usAsmStbMaseL;         // 21
  228       =3     UINT16 usAsmStbMaseH;         // 22  
  229       =3     UINT16 usAsmAramBaseL;        // 23
  230       =3     UINT16 usAsmAramBaseR;        // 24
  231       =3     UINT16 usAsmAramBaseKey;      // 25    
  232       =3     UINT16 usAsmAramCBL;          // 26
  233       =3     UINT16 usAsmAramCBR;          // 27
  234       =3     UINT16 usAsmAramCBKey;        // 28
  235       =3     UINT16 usAsmReserve0;         // 29 Î´¶¨Òå
  236       =3     UINT16 usAsmReserve1;         // 30 Î´¶¨Òå
  237       =3     UINT16 usAsmReserve2;         // 31 Î´¶¨Òå
  238       =3     UINT16 usAsmHwMonCrtl0;       // 32
  239       =3     UINT16 usAsmHwMonCtrl1;       // 33
  240       =3     UINT16 usAsmHwMonCfg0;        // 34
  241       =3     UINT16 usAsmHwMonCfg1;        // 35
  242       =3     UINT16 usAsmHwMonCfg2;        // 36
  243       =3     UINT16 usAsmHwMonCfg3;        // 37
  244       =3     UINT16 usAsmHwMonCfg4;        // 38
  245       =3     UINT16 usAsmHwMonTimer;       // 39
  246       =3     UINT16 usAsmVreshCfgLcdon;    // 40
  247       =3 } ST_AsmRegisters;
  248       =3 
  249       =3 typedef union
  250       =3 {
  251       =3     ST_AsmRegisters reg;
  252       =3     UINT16 offset[sizeof(ST_AsmRegisters)>>1];
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 41  

  253       =3 } Union_AsmReg;
  254       =3 
  255       =3 
  256       =3 /*******************************************************************************/
  257       =3 /* AFE reg */
  258       =3 #if 0
            =3 typedef struct
            =3 {
            =3     UINT16 usAfeAsmCfg;              // 0x00
            =3     UINT16 usAfePanelCfg0;           // 0x01
            =3     UINT16 usAfePanelCfg1;           // 0x02
            =3     UINT16 usAfePanelCfg2;           // 0x03
            =3     UINT16 usAfeSysCfg0;             // 0x04
            =3     UINT16 usAfeSysCfg1;             // 0x05
            =3     UINT16 usAfeScanCfg0;            // 0x06
            =3     UINT16 usAfeScanCfg1;            // 0x07
            =3     UINT16 usAfeDummyScanCfg;        // 0x08
            =3     UINT16 usAfeBaseTrackCfg;        // 0x09
            =3     UINT16 usAfeAcc_Offset;          // 0x0A
            =3     UINT16 usAfeTpMonTh;             // 0x0B
            =3     UINT16 usAfeKeyMonTh;            // 0x0C
            =3     UINT16 usAfeAnaGenCfg0;          // 0x0D
            =3     UINT16 usAfeAnaGenCfg1;          // 0x0E
            =3     UINT16 usAfeAnaCaCfg0;           // 0x0F
            =3     UINT16 usAfeAnaCaCfg1;           // 0x10
            =3     UINT16 usAfeAnaCaCfg2;           // 0x11
            =3     UINT16 usAfeAnaP1P2Cfg0;         // 0x12
            =3     UINT16 usAfeAnaP1P2Cfg1;         // 0x13
            =3     UINT16 usAfeAnaP1P2Cfg2;         // 0x14 
            =3     UINT16 usAfeAnaP1P2Cfg3;         // 0x15    
            =3     UINT16 usAfeAnaP1P2Cfg4;         // 0x16
            =3     UINT16 usAfeAnaP1P2Cfg5;         // 0x17
            =3     UINT16 usAfeP1P2DlyCfg0;         // 0x18
            =3     UINT16 usAfeP1P2DlyCfg1;         // 0x19
            =3     UINT16 usAfeAnaShcfg0;           // 0x1A
            =3     UINT16 usAfeAnaShcfg1;           // 0x1B
            =3     UINT16 usAfeAnaShcfg2;           // 0x1C
            =3     UINT16 usAfeAnaShcfg3;           // 0x1D
            =3     UINT16 usAfeAnaShcfg4;           // 0x1E
            =3     UINT16 usAfeAnaShcfg5;           // 0x1F
            =3     UINT16 usAfeAnaShcfg6;           // 0x20
            =3     UINT16 usAfeAnaAdcCfg0;          // 0x21
            =3     UINT16 usAfeAnaAdcCfg1;          // 0x22 
            =3     UINT16 usAfeAnaAdcCfg2;          // 0x23
            =3     UINT16 usAfeAnaAdcCfg3;          // 0x24
            =3     UINT16 usAfeGiphP1P2Cfg;         // 0x25
            =3     UINT16 usAfeGiplP1P2Cfg;         // 0x26
            =3     UINT16 usAfeSdVcomCfg;           // 0x27
            =3     UINT16 usAfeSxP1P2Cfg;           // 0x28
            =3     UINT16 usAllGateOnLCfg;          // 0x29
            =3     UINT16 usAllGateOffLCfg;         // 0x2A
            =3     UINT16 usAllGateStopLCfg;        // 0x2B
            =3     UINT16 usAllGateHCfg;            // 0x2C
            =3     UINT16 usRptRawdataNum;          // 0x2D
            =3     UINT16 usCbAdjustTh;             // 0x2E
            =3     UINT16 usTestModeCfg;            // 0x2F
            =3     UINT16 usPrescanTime;            // 0x30
            =3     UINT16 usDischargeTime;          // 0x31
            =3     UINT16 usAfeAnaStaticCfg0;       // 0x32
            =3     UINT16 usAfeAnaStaticCfg1;       // 0x33
            =3     UINT16 usAfeAnaStaticCfg2;       // 0x34
            =3     UINT16 usAfeAnaStaticCfg3;       // 0x35
            =3     UINT16 usAfeTestPin0Cfg0;        // 0x36
            =3     UINT16 usAfeTestPin0Cfg1;        // 0x37
            =3     UINT16 usAfeTestPin0Cfg2;        // 0x38
            =3     UINT16 usAfeTestPin1Cfg0;        // 0x39
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 42  

            =3     UINT16 usAfeTestPin1Cfg1;        // 0x3A
            =3     UINT16 usAfeTestPin1Cfg2;        // 0x3B
            =3     UINT16 usReserveZone1;           // 0x3C
            =3     UINT16 usReserveZone2;           // 0x3D
            =3     UINT16 usReserveZone3;           // 0x3E
            =3     UINT16 usReserveZone4;           // 0x3F    
            =3     UINT16 usMcapScanCfg;            // 0x40
            =3     UINT16 usMcapScanSr;             // 0x41
            =3     UINT16 usMcapKeyInterVal6;       // 0x42
            =3     UINT16 usMcapDummyScanNum;       // 0x43
            =3     UINT16 usMcapRawShiftCof;        // 0x44
            =3     UINT16 usMcapRawOffSetL;         // 0x45
            =3     UINT16 usMcapAdcCfg;             // 0x46
            =3     UINT16 usMcapAdcDat0;            // 0x47
            =3     UINT16 usMcapInitSamplCfg;       // 0x48
            =3     UINT16 usMcapOverFlowThr;        // 0x49
            =3     UINT16 usMcapUnderFlowThr;       // 0x4A
            =3     UINT16 usMcapOverFlowUpBound;    // 0x4B
            =3     UINT16 usMcapOverFlowPointFrame; // 0x4C
            =3     UINT16 usMcapNormalSignalUpThr;  // 0x4D
            =3     UINT16 usMcapNormalSignalDwThr;  // 0x4E
            =3     UINT16 usMcapOverFlowClrFrameNum;// 0x4F
            =3     UINT16 usMcapLpfirCfg;           // 0x50
            =3     UINT16 usMcapLpFirCfg0;          // 0x51
            =3     UINT16 usMcapLpFirCfg1;          // 0x52
            =3     UINT16 usMcapLpFirCfg2;          // 0x53
            =3     UINT16 usMcapLpFirCfg3;          // 0x54
            =3     UINT16 usMcapLpFirCfg4;          // 0x55  
            =3     UINT16 usMcapLpFirCfg5;          // 0x56
            =3     UINT16 usMcapLpFirCfg6;          // 0x57
            =3     UINT16 usMcapLpFirCfg7;          // 0x58
            =3    
            =3 } ST_AfeRegList;
            =3 #endif
  353       =3 
  354       =3 typedef enum
  355       =3 {
  356       =3     Addr_PANEL_MODE_CFG0 =1, 
  357       =3     Addr_PANEL_MODE_CFG1 =2,
  358       =3     Addr_PANEL_MODE_CFG2 =3, 
  359       =3     Addr_AFE_SYS_CFG0 =4, 
  360       =3     Addr_AFE_SYS_CFG1 =5, 
  361       =3     Addr_AFE_SCAN_CFG0 =6, 
  362       =3     Addr_AFE_SCAN_CFG1 =7, 
  363       =3     Addr_AFE_DUMMY_SCAN_CFG =8, 
  364       =3     Addr_AFE_BASE_TRACK_CFG =9, 
  365       =3     Addr_ACC_OFFSET =10, 
  366       =3     Addr_TP_MONITOR_THRESHOLD =11,
  367       =3     Addr_KEY_MONITOR_THRESHOLD =12, 
  368       =3     Addr_AFE_ANA_K1_CFG0 =13,
  369       =3     Addr_AFE_ANA_K2_CFG1 =14,
  370       =3     Addr_AFE_ANA_CA_CFG0 =15, 
  371       =3     Addr_AFE_ANA_CA_CFG1 =16, 
  372       =3     Addr_AFE_ANA_CA_CFG2 =17,
  373       =3     Addr_AFE_ANA_P1_P2_CFG0 =18, 
  374       =3     Addr_AFE_ANA_P1_P2_CFG1 =19,
  375       =3     Addr_AFE_ANA_P1_P2_CFG2 =20, 
  376       =3     Addr_AFE_ANA_P1_P2_CFG3 =21,
  377       =3     Addr_AFE_ANA_P1_P2_CFG4 =22, 
  378       =3     Addr_AFE_ANA_P1_P2_CFG5 =23, 
  379       =3     Addr_AFE_P1_P2_DLY_CFG0 =24, 
  380       =3     Addr_AFE_P1_P2_DLY_CFG1 =25, 
  381       =3     Addr_AFE_ANA_SH_CFG0 =26,
  382       =3     Addr_AFE_ANA_SH_CFG1 =27, 
  383       =3     Addr_AFE_ANA_SH_CFG2 =28, 
  384       =3     Addr_AFE_ANA_SH_CFG3 =29, 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 43  

  385       =3     Addr_AFE_ANA_SH_CFG4 =30, 
  386       =3     Addr_AFE_ANA_SH_CFG5 =31,
  387       =3     Addr_AFE_ANA_SH_CFG6 =32, 
  388       =3     Addr_AFE_ANA_ADC_CFG0 =33, 
  389       =3     Addr_AFE_ANA_ADC_CFG1 =34, 
  390       =3     Addr_AFE_ANA_ADC_CFG2 =35, 
  391       =3     Addr_AFE_ANA_ADC_CFG3 =36, 
  392       =3     Addr_AFE_GIPH_P1_P2_CFG =37, 
  393       =3     Addr_AFE_GIPL_P1_P2_CFG =38, 
  394       =3     Addr_AFE_SD_VOM_OPT_P1_P2_CFG =39,
  395       =3     Addr_AFE_SX_P1_P2_CFG =40, 
  396       =3     Addr_AFE_MOUT_GIPH_CFG = 41,
  397       =3     Addr_AFE_MOUT_GIPL_CFG = 42,
  398       =3     Addr_AFE_GOUT_GIPH_CFG = 43,
  399       =3     Addr_AFE_GOUT_GIPL_CFG = 44,
  400       =3    
  401       =3     Addr_ALL_GATE_ON_L_CFG =45, 
  402       =3     Addr_ALL_GATE_OFF_L_CFG =46,
  403       =3     Addr_ALL_GATE_STOP_L_CFG =47, 
  404       =3     Addr_ALL_GATE_H_CFG =48,                              
  405       =3     Addr_RPT_RAWDATA_NUM =49,                             
  406       =3     Addr_CB_ADJUST_THLD =50,                                
  407       =3     Addr_TEST_MODE_FLAG =51,                              
  408       =3     Addr_PRESCAN_TIME =52,                                 
  409       =3     Addr_DISCHARGE_TIME =53,                               
  410       =3     Addr_ANA_STATIC_CFG0 =54,                              
  411       =3     Addr_ANA_STATIC_CFG1 =55,                               
  412       =3     Addr_ANA_STATIC_CFG2 =56,                              
  413       =3     Addr_ANA_STATIC_CFG3 =57,                            
  414       =3     Addr_TEST_P0_CFG0 =58,                               
  415       =3     Addr_TEST_P0_CFG1 =59,                               
  416       =3     Addr_TEST_P0_CFG2 =60,                                 
  417       =3     Addr_TEST_P1_CFG0 =61,                               
  418       =3     Addr_TEST_P1_CFG1 =62,                                
  419       =3     Addr_TEST_P1_CFG2 =63,                                 
  420       =3                                                                                                          
             -                                                          
  421       =3     Addr_MCAP_SCAN_CFG =64,                                
  422       =3     Addr_MCAP_SCANSR =65,                                  
  423       =3     Addr_KEY_SAMPLE_INTERVAL_6 =66,                     
  424       =3     Addr_RAWSHIFTCAF =67,                                
  425       =3     Addr_RAWDATA_OFFSET_L =68,                           
  426       =3     Addr_ADC_CFG =69,                                      
  427       =3     Addr_ADC_DATA0 =70,                                   
  428       =3     Addr_MCAP_INIT_SAMPL_CFG =71,                         
  429       =3     Addr_OVERFLOW_THR =72,                                 
  430       =3     Addr_UNDERFLOW_THR =73,                                
  431       =3     Addr_OVERFLOW_UPBOUND =74,                            
  432       =3     Addr_OVER_POINT_FRAME =75,                             
  433       =3     Addr_NORMAL_SIGNAL_UPTHR =76,                          
  434       =3     Addr_NORMAL_SIGNAL_DWTHR =77,                        
  435       =3     Addr_OVERFLOW_CLR_FRAMENUM =78,                       
  436       =3     Addr_MCAP_LPFIR_CFG =79,                               
  437       =3     Addr_MCAP_LPFIR_COF0 =80,                              
  438       =3     Addr_MCAP_LPFIR_COF1 =81,                              
  439       =3     Addr_MCAP_LPFIR_COF2 =82,                             
  440       =3     Addr_MCAP_LPFIR_COF3 =83,                              
  441       =3     Addr_MCAP_LPFIR_COF4 =84,                              
  442       =3     Addr_MCAP_LPFIR_COF5 =85,                            
  443       =3     Addr_MCAP_LPFIR_COF6 =86,                             
  444       =3     Addr_MCAP_LPFIR_COF7 =87,   
  445       =3 }ENUM_AFE_ADDR;
  446       =3 
  447       =3 
  448       =3 /*******************************************************************************/
  449       =3 /* Afe table reg */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 44  

  450       =3 
  451       =3 /*******************************************************************************/
  452       =3 
  453       =3 
  454       =3 /*******************************************************************************
  455       =3 * Global variable extern declarations
  456       =3 *******************************************************************************/
  457       =3 
  458       =3 /*******************************************************************************
  459       =3 * Global function prototypes
  460       =3 *******************************************************************************/
  461       =3 
  462       =3 #endif //_FT8836_REG_H_
   88       =2 #include "Drv_mcu.h"
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Drv_mcu.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-24
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference: Transplant from FT5412 by linjianjun
   13       =3 *
   14       =3 *   Version: 0.2
   15       =3 *******************************************************************************/
   16       =3 #ifndef __DRV_MCU_H__
   17       =3 #define __DRV_MCU_H__
   18       =3 
   19       =3 
   20       =3 /*******************************************************************************
   21       =3 * 1.Included files
   22       =3 *******************************************************************************/
   23       =3 #include "CfgGlobal.h"
            =2 #include "Drv_XSI.h"
            =2 #include "Drv_XBUS.h"
            =2 #include "uart.h"
            =2 
            =2 #include "Test_GPIO.h"
            =2 #include "Test_WDT.h"
            =2 #include "Test_RTC.h"
            =2 #include "Test_timer.h"
            =2 #include "Test_Counter.h"
            =2 #include "Test_Prom.h"
            =2 #include "Test_Dram.h"
            =2 #include "Test_Aram.h"
            =2 #include "Test_SFR.h"
            =2 #include "Test_Reg.h"
            =2 #include "Test_I2C.h"
            =2 #include "Test_i2c_wakeup.h"
            =2 #include "Test_gpio_wakeup.h"
            =2 #include "Test_int_nest.h"
            =2 #include "Test_SPI.h"
            =2 #include "Test_CAL.h"
            =2 #include "Test_romboot.h"
            =2 #include "Test_Afe.h"
            =2 #include "Test_LED.h"
            =2 #include "Test_Xbus.h"
            =2 #include "Test_RomEcc.h"
            =2 #include "Test_Uart.h"
            =2 #include "Test_SOFT_RST.h"
            =2 #include "Test_spi0.h"
            =2 #include "Test_spi0_wakeup.h"
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 45  

            =2 #include "Test_SPI0_dma.h"
            =2 #include "checksum.h"
            =2 #include "Test_DebugOut.h"
            =2 /*******************************************************************************
            =2 * 3.Global structures, unions and enumerations using typedef
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 4.Global variable extern declarations
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 5.Global function prototypes
            =2 *******************************************************************************/
            =2 
            =2 #endif //GLOBAL_CONFIG_H
   23       =3 /*******************************************************************************
   23       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   23       =3 *
   23       =3 * File Name: Drv_mcu.h
   23       =3 *
   23       =3 *    Author: xinkunpeng
   23       =3 *
   23       =3 *   Created: 2014-04-24
   23       =3 *
   23       =3 *  Abstract:
   23       =3 *
   23       =3 * Reference: Transplant from FT5412 by linjianjun
   23       =3 *
   23       =3 *   Version: 0.2
   23       =3 *******************************************************************************/
   23       =3 #ifndef __DRV_MCU_H__
   23       =3 #define __DRV_MCU_H__
   23       =3 
   23       =3 
   23       =3 /*******************************************************************************
   23       =3 * 1.Included files
   23       =3 *******************************************************************************/
   23       =3 #include "CfgGlobal.h"
   24       =3 
   25       =3 /*******************************************************************************
   26       =3 * 2.Global constant and macro definitions using #define
   27       =3 *******************************************************************************/
   28       =3 #define I2C_SLAVE_ADDR 0x70
   29       =3 
   30       =3 
   31       =3 #define DATABUFF     I2CBUF
   32       =3 #define RIFLAG       I2CRI
   33       =3 #define TIFLAG       I2CTI
   34       =3 
   35       =3 
   36       =3 #define DrvSysPowerIdle()               DrvSysPowerMode(0)          //enter the idle mode 
   37       =3 #define DrvSysPowerStop()               DrvSysPowerMode(1)          //enter the stop mode 
   38       =3 #define DrvSysPowerStandby()            DrvSysPowerMode(2)          //enter the standby mode 
   39       =3 #define DrvSysPowerHibernate()          DrvSysPowerMode(1)          //enter the hibernate mode 
   40       =3 
   41       =3 /*******************************************************************************
   42       =3 * 3.Global structures, unions and enumerations using typedef
   43       =3 *******************************************************************************/
   44       =3 
   45       =3 /*******************************************************************************
   46       =3 * 4.Global variable extern declarations
   47       =3 *******************************************************************************/
   48       =3 extern UINT8 XRAM g_ucbuf[16];
   49       =3 
   50       =3 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 46  

   51       =3 * 5.Global function prototypes
   52       =3 *******************************************************************************/
   53       =3 
   54       =3 void DrvSysPowerMode(UINT8 pmode);
   55       =3 void DrvSysClkInit(UINT8 ucDiv);
   56       =3 void DrvIOInit(void);
   57       =3 void DelayUs(UINT8 ucDlyCnt);
   58       =3 void DelayMs(UINT16 ucDlyCnt);
   59       =3 #endif
   60       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Drv_XSI.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-05-14
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *   Version:
   15       =3 *******************************************************************************/
   16       =3 #ifndef __DRV_XSI_H__
   17       =3 #define __DRV_XSI_H__
   18       =3 
   19       =3 /*******************************************************************************
   20       =3 * 1.Included files
   21       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   22       =3 /*******************************************************************************
   22       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   22       =3 *
   22       =3 * File Name: Drv_XSI.h
   22       =3 *
   22       =3 *    Author: xinkunpeng
   22       =3 *
   22       =3 *   Created: 2014-05-14
   22       =3 *
   22       =3 *  Abstract:
   22       =3 *
   22       =3 * Reference:
   22       =3 *
   22       =3 *   Version:
   22       =3 *******************************************************************************/
   22       =3 #ifndef __DRV_XSI_H__
   22       =3 #define __DRV_XSI_H__
   22       =3 
   22       =3 /*******************************************************************************
   22       =3 * 1.Included files
   22       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   23       =3 #include "FT8836_Reg.h"
    1       =4 /*******************************************************************************
    2       =4 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =4 *
    4       =4 * File Name: FT8836_Reg.h
    5       =4 *
    6       =4 *    Author: 
    7       =4 *
    8       =4 *   Created: 2016-07-11
    9       =4 *
   10       =4 *  Abstract: Define FT8836 Sram registers and their bits
   11       =4 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 47  

   12       =4 * Reference:
   13       =4 *
   14       =4 *******************************************************************************/
   15       =4 
   16       =4 #ifndef _FT8836_REG_H_
            =4 #define _FT8836_REG_H_
            =4 
            =4 /* Conditional Compiler Options */
            =4 
            =4 /*******************************************************************************
            =4 * Included files
            =4 *******************************************************************************/
            =4 #include "FT8836.h"
            =4 
            =4 /*******************************************************************************
            =4 * Global constant and macro definitions using #define
            =4 *******************************************************************************/
            =4 #define ARAM_DATA_BASE_ADDR              0xA000
            =4 #define SPI1_REG_BASE_ADDR               0xB220
            =4 /* SPI0 reg Start Addr */
            =4 #define SPI0_REG_BASE_ADDR               0xB200
            =4 
            =4 #define SPI0_DMA_CTRL                    REG16(SPI0_REG_BASE_ADDR+(0x00<<1))
            =4 #define SPI0_DMA_ERR_TIMEOUT_CTRL        REG16(SPI0_REG_BASE_ADDR+(0x01<<1))
            =4 #define SPI0_DMA_ADDR_H                  REG16(SPI0_REG_BASE_ADDR+(0x02<<1))
            =4 #define SPI0_DMA_START_ADDR_L            REG16(SPI0_REG_BASE_ADDR+(0x03<<1))            
            =4 #define SPI0_DMA_END_ADDR_L              REG16(SPI0_REG_BASE_ADDR+(0x04<<1))         
            =4 #define SPI0_DMA_CRC                     REG16(SPI0_REG_BASE_ADDR+(0x05<<1))
            =4 #define SPI0_DMA_SRCR                    REG16(SPI0_REG_BASE_ADDR+(0x06<<1))
            =4 /* XSI reg ¿ØÖÆÇø */
            =4 
            =4 /* XSI0 reg start addr */
            =4 #define XSI0_REG_BASE_ADDR     0xB400
            =4 
            =4 #define XSI0_WDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x00<<1))
            =4 #define XSI0_RDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x01<<1))
            =4 #define XSI0_CLK_SEL           REG16(XSI0_REG_BASE_ADDR+(0x02<<1))
            =4 #define XSI0_STOP              REG16(XSI0_REG_BASE_ADDR+(0x03<<1))
            =4 #define XSI0_TX_INT            REG16(XSI0_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* XSI1 reg start addr */
            =4 #define XSI1_REG_BASE_ADDR     0xB800
            =4 
            =4 #define XSI1_WDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x00<<1))
            =4 #define XSI1_RDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x01<<1))
            =4 #define XSI1_CLK_SEL           REG16(XSI1_REG_BASE_ADDR+(0x02<<1))
            =4 #define XSI1_STOP              REG16(XSI1_REG_BASE_ADDR+(0x03<<1))
            =4 #define XSI1_TX_INT            REG16(XSI1_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* XBUS reg start addr */
            =4 #define XBUS_REG_BASE_ADDR     0xBC00
            =4 
            =4 #define XBUS_RDATA_LO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x00<<1))
            =4 #define XBUS_RDATA_HO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x01<<1))
            =4 #define XBUS_REGFILE_CTRL      REG16(XBUS_REG_BASE_ADDR+(0x02<<1))
            =4 #define XBUS_CMD               REG16(XBUS_REG_BASE_ADDR+(0x03<<1))
            =4 #define XBUS_RLD_DATA          REG16(XBUS_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* reload dma base addr */
            =4 //#define RELOAD_DMA_START_ADDR  0x9D00
            =4 /******************************************************************************/
            =4 /******************************************************************************/
            =4 /* CAL reg Start Addr */
            =4 #define CAL_REG_BASE_ADDR       0xB000
            =4 
            =4 /* ASM reg Start Addr */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 48  

            =4 #define ASM_REG_BASE_ADDR       0xB100
            =4 
            =4 
            =4 /*******************************************************************************
            =4 * Global structures, unions and enumerations using typedef
            =4 *******************************************************************************/
            =4 /*************************************************************/
            =4 /* XSI reg */
            =4 typedef struct
            =4 {
            =4     UINT16 Wdata;        // (0x00<<1)
            =4     UINT16 Rdata;        // (0x01<<1)
            =4     UINT16 Clksel;       // (0x02<<1)
            =4     UINT16 Stop;         // (0x03<<1)
            =4     UINT16 Tx_int;       // (0x04<<1)
            =4 } ST_XSIRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_XSIRegisters reg;
            =4     UINT16 offset[sizeof(ST_XSIRegisters)>>1];
            =4 } Union_XSIReg;
            =4 
            =4 /*************************************************************/
            =4 // cal
            =4 typedef struct
            =4 {
            =4     UINT16 rCmd;           // (0x00<<1)
            =4     UINT16 rDmaLen;        // (0x01<<1)
            =4     UINT16 rS1Addr;        // (0x02<<1)
            =4     UINT16 rS2Addr;        // (0x03<<1)
            =4     UINT16 rOutAddr;       // (0x04<<1)
            =4     UINT16 rPar;           // (0x05<<1)
            =4     UINT16 rSize;          // (0x06<<1)
            =4     UINT16 rPThd;          // (0x07<<1)
            =4     UINT16 rNThd;          // (0x08<<1)
            =4     UINT16 rAThd;          // (0x09<<1)
            =4     UINT16 rDmask;         // (0x0A<<1)
            =4     UINT16 rPaCnt;         // (0x0B<<1)
            =4     UINT16 rNaCnt;         // (0x0C<<1)
            =4     UINT16 rPsCnt;         // (0x0D<<1)
            =4     UINT16 rNsCnt;         // (0x0E<<1)
            =4     UINT16 rMaxV;          // (0x0F<<1)
            =4     UINT16 rMaxPos;        // (0x10<<1)
            =4     UINT16 rMinV;          // (0x11<<1)
            =4     UINT16 rMinPos;        // (0x12<<1)
            =4     UINT16 rID0;           // (0x13<<1)
            =4     UINT16 rID1;           // (0x14<<1)
            =4     UINT16 rID2;           // (0x15<<1)
            =4     UINT16 rCrc;           // (0x16<<1)
            =4     UINT16 rChk;           // (0x17<<1)
            =4     UINT16 rNaThd;         // (0x18<<1)
            =4     UINT16 rTxRxNum;       // (0x19<<1)
            =4     UINT16 rDivShift;      // (0x1a<<1)
            =4     UINT16 rSubabsMax;     // (0x1b<<1)
            =4     UINT16 rInt;           // (0x1c<<1)
            =4     UINT16 rCntNum;        // (0x1d<<1)
            =4     UINT16 rDmaskA;        // (0x1e<<1)
            =4     UINT16 rTxRxNumAm;     // (0x1f<<1)
            =4     UINT16 rTxRxNumAs;     // (0x20<<1)
            =4     UINT16 rSizeAm;        // (0x21<<1)
            =4     UINT16 rSizeAs;        // (0x22<<1)
            =4     UINT16 rS1AddrA;       // (0x23<<1)
            =4     UINT16 rS2AddrA;       // (0x24<<1)
            =4     UINT16 rOutAddrA;      // (0x25<<1)
            =4     UINT16 rSel;           // (0x26<<1)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 49  

            =4 } ST_CalRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_CalRegisters reg;
            =4     UINT16 offset[sizeof(ST_CalRegisters)>>1];
            =4 } Union_CalReg;
            =4 
            =4 /*************************************************************/
            =4 /*XBUS reg*/
            =4 typedef struct
            =4 {  
            =4     UINT16 rdata_lo_byte;
            =4     UINT16 rdata_ho_byte;
            =4     UINT16 lcd_regfile_ctrl;
            =4     UINT16 xbus_cmd;//bit1 reload_end;bit0 reload_abort
            =4     UINT16 xbus_rld_data;//reload_data
            =4 }ST_LcdWrapRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_LcdWrapRegisters reg;
            =4     UINT16 offset[sizeof(ST_LcdWrapRegisters)>>1];
            =4 }Union_LcdReg;
            =4 
            =4 /*************************************************************/
            =4 /*SPI0_DMA reg*/
            =4 typedef struct
            =4 {
            =4     UINT16 dma_ctrl;
            =4     UINT16 timeout_ctrl;
            =4     UINT16 addr_h;
            =4     UINT16 start_addr_l;
            =4     UINT16 end_addr_l;
            =4     UINT16 dma_crc;
            =4     UINT16 dma_srcr;
            =4     
            =4 }ST_Spi0DmaRegisters;
            =4 
            =4 /*SPI1_DMA reg*/
            =4 typedef struct
            =4 {
            =4     UINT16 dma_ctrl;
            =4     UINT16 timeout_ctrl;
            =4     UINT16 addr_h;
            =4     UINT16 start_addr_l;
            =4     UINT16 end_addr_l;
            =4     UINT16 dma_crc;
            =4     UINT16 dma_srcr;
            =4     
            =4 }ST_Spi1DmaRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_Spi0DmaRegisters reg;
            =4     UINT16 offset[sizeof(ST_Spi0DmaRegisters)>>1];
            =4 }Union_Spi0Reg;
            =4 
            =4 /*************************************************************/
            =4 /* ASM reg */
            =4 typedef struct
            =4 {
            =4     UINT16 usAsmIntFlag0;         // 00  RO
            =4     UINT16 usAsmIntFlag1;         // 01  RO
            =4     UINT16 usAsmIntClr0;          // 02  WO
            =4     UINT16 usAsmIntClr1;          // 03  WO
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 50  

            =4     UINT16 usAsmIntEn0;           // 04
            =4     UINT16 usAsmIntEn1;           // 05
            =4     UINT16 usAsmIntWakeEn0;       // 06
            =4     UINT16 usAsmIntWakeEn1;       // 07
            =4     UINT16 usAsmIntSta;           // 08  RO
            =4     UINT16 usAsmScanSta0;         // 09  RO
            =4     UINT16 usAsmScanSta1;         // 10  RO
            =4     UINT16 usAsmScanSta2;         // 11  RO
            =4     UINT16 usAsmScanSta3;         // 12  RO
            =4     UINT16 usAsmScanCtrl;         // 13  WO
            =4     UINT16 usAsmScanCfg0;         // 14
            =4     UINT16 usAsmScanCfg1;         // 15
            =4     UINT16 usAsmTpFrameCfg0;      // 16
            =4     UINT16 usAsmTpFrameCfg1;      // 17
            =4     UINT16 usAsmTpFrameCfg2;      // 18
            =4     UINT16 usAsmTpFrameCfg3;      // 19
            =4     UINT16 usAsmScanDly;          // 20
            =4     UINT16 usAsmStbMaseL;         // 21
            =4     UINT16 usAsmStbMaseH;         // 22  
            =4     UINT16 usAsmAramBaseL;        // 23
            =4     UINT16 usAsmAramBaseR;        // 24
            =4     UINT16 usAsmAramBaseKey;      // 25    
            =4     UINT16 usAsmAramCBL;          // 26
            =4     UINT16 usAsmAramCBR;          // 27
            =4     UINT16 usAsmAramCBKey;        // 28
            =4     UINT16 usAsmReserve0;         // 29 Î´¶¨Òå
            =4     UINT16 usAsmReserve1;         // 30 Î´¶¨Òå
            =4     UINT16 usAsmReserve2;         // 31 Î´¶¨Òå
            =4     UINT16 usAsmHwMonCrtl0;       // 32
            =4     UINT16 usAsmHwMonCtrl1;       // 33
            =4     UINT16 usAsmHwMonCfg0;        // 34
            =4     UINT16 usAsmHwMonCfg1;        // 35
            =4     UINT16 usAsmHwMonCfg2;        // 36
            =4     UINT16 usAsmHwMonCfg3;        // 37
            =4     UINT16 usAsmHwMonCfg4;        // 38
            =4     UINT16 usAsmHwMonTimer;       // 39
            =4     UINT16 usAsmVreshCfgLcdon;    // 40
            =4 } ST_AsmRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_AsmRegisters reg;
            =4     UINT16 offset[sizeof(ST_AsmRegisters)>>1];
            =4 } Union_AsmReg;
            =4 
            =4 
            =4 /*******************************************************************************/
            =4 /* AFE reg */
            =4 #if 0
            =4 typedef struct
            =4 {
            =4     UINT16 usAfeAsmCfg;              // 0x00
            =4     UINT16 usAfePanelCfg0;           // 0x01
            =4     UINT16 usAfePanelCfg1;           // 0x02
            =4     UINT16 usAfePanelCfg2;           // 0x03
            =4     UINT16 usAfeSysCfg0;             // 0x04
            =4     UINT16 usAfeSysCfg1;             // 0x05
            =4     UINT16 usAfeScanCfg0;            // 0x06
            =4     UINT16 usAfeScanCfg1;            // 0x07
            =4     UINT16 usAfeDummyScanCfg;        // 0x08
            =4     UINT16 usAfeBaseTrackCfg;        // 0x09
            =4     UINT16 usAfeAcc_Offset;          // 0x0A
            =4     UINT16 usAfeTpMonTh;             // 0x0B
            =4     UINT16 usAfeKeyMonTh;            // 0x0C
            =4     UINT16 usAfeAnaGenCfg0;          // 0x0D
            =4     UINT16 usAfeAnaGenCfg1;          // 0x0E
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 51  

            =4     UINT16 usAfeAnaCaCfg0;           // 0x0F
            =4     UINT16 usAfeAnaCaCfg1;           // 0x10
            =4     UINT16 usAfeAnaCaCfg2;           // 0x11
            =4     UINT16 usAfeAnaP1P2Cfg0;         // 0x12
            =4     UINT16 usAfeAnaP1P2Cfg1;         // 0x13
            =4     UINT16 usAfeAnaP1P2Cfg2;         // 0x14 
            =4     UINT16 usAfeAnaP1P2Cfg3;         // 0x15    
            =4     UINT16 usAfeAnaP1P2Cfg4;         // 0x16
            =4     UINT16 usAfeAnaP1P2Cfg5;         // 0x17
            =4     UINT16 usAfeP1P2DlyCfg0;         // 0x18
            =4     UINT16 usAfeP1P2DlyCfg1;         // 0x19
            =4     UINT16 usAfeAnaShcfg0;           // 0x1A
            =4     UINT16 usAfeAnaShcfg1;           // 0x1B
            =4     UINT16 usAfeAnaShcfg2;           // 0x1C
            =4     UINT16 usAfeAnaShcfg3;           // 0x1D
            =4     UINT16 usAfeAnaShcfg4;           // 0x1E
            =4     UINT16 usAfeAnaShcfg5;           // 0x1F
            =4     UINT16 usAfeAnaShcfg6;           // 0x20
            =4     UINT16 usAfeAnaAdcCfg0;          // 0x21
            =4     UINT16 usAfeAnaAdcCfg1;          // 0x22 
            =4     UINT16 usAfeAnaAdcCfg2;          // 0x23
            =4     UINT16 usAfeAnaAdcCfg3;          // 0x24
            =4     UINT16 usAfeGiphP1P2Cfg;         // 0x25
            =4     UINT16 usAfeGiplP1P2Cfg;         // 0x26
            =4     UINT16 usAfeSdVcomCfg;           // 0x27
            =4     UINT16 usAfeSxP1P2Cfg;           // 0x28
            =4     UINT16 usAllGateOnLCfg;          // 0x29
            =4     UINT16 usAllGateOffLCfg;         // 0x2A
            =4     UINT16 usAllGateStopLCfg;        // 0x2B
            =4     UINT16 usAllGateHCfg;            // 0x2C
            =4     UINT16 usRptRawdataNum;          // 0x2D
            =4     UINT16 usCbAdjustTh;             // 0x2E
            =4     UINT16 usTestModeCfg;            // 0x2F
            =4     UINT16 usPrescanTime;            // 0x30
            =4     UINT16 usDischargeTime;          // 0x31
            =4     UINT16 usAfeAnaStaticCfg0;       // 0x32
            =4     UINT16 usAfeAnaStaticCfg1;       // 0x33
            =4     UINT16 usAfeAnaStaticCfg2;       // 0x34
            =4     UINT16 usAfeAnaStaticCfg3;       // 0x35
            =4     UINT16 usAfeTestPin0Cfg0;        // 0x36
            =4     UINT16 usAfeTestPin0Cfg1;        // 0x37
            =4     UINT16 usAfeTestPin0Cfg2;        // 0x38
            =4     UINT16 usAfeTestPin1Cfg0;        // 0x39
            =4     UINT16 usAfeTestPin1Cfg1;        // 0x3A
            =4     UINT16 usAfeTestPin1Cfg2;        // 0x3B
            =4     UINT16 usReserveZone1;           // 0x3C
            =4     UINT16 usReserveZone2;           // 0x3D
            =4     UINT16 usReserveZone3;           // 0x3E
            =4     UINT16 usReserveZone4;           // 0x3F    
            =4     UINT16 usMcapScanCfg;            // 0x40
            =4     UINT16 usMcapScanSr;             // 0x41
            =4     UINT16 usMcapKeyInterVal6;       // 0x42
            =4     UINT16 usMcapDummyScanNum;       // 0x43
            =4     UINT16 usMcapRawShiftCof;        // 0x44
            =4     UINT16 usMcapRawOffSetL;         // 0x45
            =4     UINT16 usMcapAdcCfg;             // 0x46
            =4     UINT16 usMcapAdcDat0;            // 0x47
            =4     UINT16 usMcapInitSamplCfg;       // 0x48
            =4     UINT16 usMcapOverFlowThr;        // 0x49
            =4     UINT16 usMcapUnderFlowThr;       // 0x4A
            =4     UINT16 usMcapOverFlowUpBound;    // 0x4B
            =4     UINT16 usMcapOverFlowPointFrame; // 0x4C
            =4     UINT16 usMcapNormalSignalUpThr;  // 0x4D
            =4     UINT16 usMcapNormalSignalDwThr;  // 0x4E
            =4     UINT16 usMcapOverFlowClrFrameNum;// 0x4F
            =4     UINT16 usMcapLpfirCfg;           // 0x50
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 52  

            =4     UINT16 usMcapLpFirCfg0;          // 0x51
            =4     UINT16 usMcapLpFirCfg1;          // 0x52
            =4     UINT16 usMcapLpFirCfg2;          // 0x53
            =4     UINT16 usMcapLpFirCfg3;          // 0x54
            =4     UINT16 usMcapLpFirCfg4;          // 0x55  
            =4     UINT16 usMcapLpFirCfg5;          // 0x56
            =4     UINT16 usMcapLpFirCfg6;          // 0x57
            =4     UINT16 usMcapLpFirCfg7;          // 0x58
            =4    
            =4 } ST_AfeRegList;
            =4 #endif
            =4 
            =4 typedef enum
            =4 {
            =4     Addr_PANEL_MODE_CFG0 =1, 
            =4     Addr_PANEL_MODE_CFG1 =2,
            =4     Addr_PANEL_MODE_CFG2 =3, 
            =4     Addr_AFE_SYS_CFG0 =4, 
            =4     Addr_AFE_SYS_CFG1 =5, 
            =4     Addr_AFE_SCAN_CFG0 =6, 
            =4     Addr_AFE_SCAN_CFG1 =7, 
            =4     Addr_AFE_DUMMY_SCAN_CFG =8, 
            =4     Addr_AFE_BASE_TRACK_CFG =9, 
            =4     Addr_ACC_OFFSET =10, 
            =4     Addr_TP_MONITOR_THRESHOLD =11,
            =4     Addr_KEY_MONITOR_THRESHOLD =12, 
            =4     Addr_AFE_ANA_K1_CFG0 =13,
            =4     Addr_AFE_ANA_K2_CFG1 =14,
            =4     Addr_AFE_ANA_CA_CFG0 =15, 
            =4     Addr_AFE_ANA_CA_CFG1 =16, 
            =4     Addr_AFE_ANA_CA_CFG2 =17,
            =4     Addr_AFE_ANA_P1_P2_CFG0 =18, 
            =4     Addr_AFE_ANA_P1_P2_CFG1 =19,
            =4     Addr_AFE_ANA_P1_P2_CFG2 =20, 
            =4     Addr_AFE_ANA_P1_P2_CFG3 =21,
            =4     Addr_AFE_ANA_P1_P2_CFG4 =22, 
            =4     Addr_AFE_ANA_P1_P2_CFG5 =23, 
            =4     Addr_AFE_P1_P2_DLY_CFG0 =24, 
            =4     Addr_AFE_P1_P2_DLY_CFG1 =25, 
            =4     Addr_AFE_ANA_SH_CFG0 =26,
            =4     Addr_AFE_ANA_SH_CFG1 =27, 
            =4     Addr_AFE_ANA_SH_CFG2 =28, 
            =4     Addr_AFE_ANA_SH_CFG3 =29, 
            =4     Addr_AFE_ANA_SH_CFG4 =30, 
            =4     Addr_AFE_ANA_SH_CFG5 =31,
            =4     Addr_AFE_ANA_SH_CFG6 =32, 
            =4     Addr_AFE_ANA_ADC_CFG0 =33, 
            =4     Addr_AFE_ANA_ADC_CFG1 =34, 
            =4     Addr_AFE_ANA_ADC_CFG2 =35, 
            =4     Addr_AFE_ANA_ADC_CFG3 =36, 
            =4     Addr_AFE_GIPH_P1_P2_CFG =37, 
            =4     Addr_AFE_GIPL_P1_P2_CFG =38, 
            =4     Addr_AFE_SD_VOM_OPT_P1_P2_CFG =39,
            =4     Addr_AFE_SX_P1_P2_CFG =40, 
            =4     Addr_AFE_MOUT_GIPH_CFG = 41,
            =4     Addr_AFE_MOUT_GIPL_CFG = 42,
            =4     Addr_AFE_GOUT_GIPH_CFG = 43,
            =4     Addr_AFE_GOUT_GIPL_CFG = 44,
            =4    
            =4     Addr_ALL_GATE_ON_L_CFG =45, 
            =4     Addr_ALL_GATE_OFF_L_CFG =46,
            =4     Addr_ALL_GATE_STOP_L_CFG =47, 
            =4     Addr_ALL_GATE_H_CFG =48,                              
            =4     Addr_RPT_RAWDATA_NUM =49,                             
            =4     Addr_CB_ADJUST_THLD =50,                                
            =4     Addr_TEST_MODE_FLAG =51,                              
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 53  

            =4     Addr_PRESCAN_TIME =52,                                 
            =4     Addr_DISCHARGE_TIME =53,                               
            =4     Addr_ANA_STATIC_CFG0 =54,                              
            =4     Addr_ANA_STATIC_CFG1 =55,                               
            =4     Addr_ANA_STATIC_CFG2 =56,                              
            =4     Addr_ANA_STATIC_CFG3 =57,                            
            =4     Addr_TEST_P0_CFG0 =58,                               
            =4     Addr_TEST_P0_CFG1 =59,                               
            =4     Addr_TEST_P0_CFG2 =60,                                 
            =4     Addr_TEST_P1_CFG0 =61,                               
            =4     Addr_TEST_P1_CFG1 =62,                                
            =4     Addr_TEST_P1_CFG2 =63,                                 
            =4                                                                                                          
             -                                                          
            =4     Addr_MCAP_SCAN_CFG =64,                                
            =4     Addr_MCAP_SCANSR =65,                                  
            =4     Addr_KEY_SAMPLE_INTERVAL_6 =66,                     
            =4     Addr_RAWSHIFTCAF =67,                                
            =4     Addr_RAWDATA_OFFSET_L =68,                           
            =4     Addr_ADC_CFG =69,                                      
            =4     Addr_ADC_DATA0 =70,                                   
            =4     Addr_MCAP_INIT_SAMPL_CFG =71,                         
            =4     Addr_OVERFLOW_THR =72,                                 
            =4     Addr_UNDERFLOW_THR =73,                                
            =4     Addr_OVERFLOW_UPBOUND =74,                            
            =4     Addr_OVER_POINT_FRAME =75,                             
            =4     Addr_NORMAL_SIGNAL_UPTHR =76,                          
            =4     Addr_NORMAL_SIGNAL_DWTHR =77,                        
            =4     Addr_OVERFLOW_CLR_FRAMENUM =78,                       
            =4     Addr_MCAP_LPFIR_CFG =79,                               
            =4     Addr_MCAP_LPFIR_COF0 =80,                              
            =4     Addr_MCAP_LPFIR_COF1 =81,                              
            =4     Addr_MCAP_LPFIR_COF2 =82,                             
            =4     Addr_MCAP_LPFIR_COF3 =83,                              
            =4     Addr_MCAP_LPFIR_COF4 =84,                              
            =4     Addr_MCAP_LPFIR_COF5 =85,                            
            =4     Addr_MCAP_LPFIR_COF6 =86,                             
            =4     Addr_MCAP_LPFIR_COF7 =87,   
            =4 }ENUM_AFE_ADDR;
            =4 
            =4 
            =4 /*******************************************************************************/
            =4 /* Afe table reg */
            =4 
            =4 /*******************************************************************************/
            =4 
            =4 
            =4 /*******************************************************************************
            =4 * Global variable extern declarations
            =4 *******************************************************************************/
            =4 
            =4 /*******************************************************************************
            =4 * Global function prototypes
            =4 *******************************************************************************/
            =4 
            =4 #endif //_FT8836_REG_H_
   24       =3 
   25       =3 /*******************************************************************************
   26       =3 * 2.Global constant and macro definitions using #define
   27       =3 *******************************************************************************/
   28       =3 #define AFE_REG          0
   29       =3 #define XSI_S_REG        1
   30       =3 #define XSI_WDATA_DUMMY  0
   31       =3 
   32       =3 /* Bit defined of Afe_en reg */
   33       =3 #define XSI_WDATA_ADDR    0
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 54  

   34       =3 #define XSI_WDATA_SEL    11
   35       =3 #define XSI_WDATA_WR     15
   36       =3 
   37       =3 #define LCD_PAGE_SEL     8
   38       =3 #define XSI_LCD_ECC      0
   39       =3 #define XSI_LCD_PAGE0    1
   40       =3 #define XSI_LCD_PAGE1    2
   41       =3 /*******************************************************************************
   42       =3 * 3.Global structures, unions and enumerations using typedef
   43       =3 *******************************************************************************/
   44       =3 
   45       =3 /*******************************************************************************
   46       =3 * 4.Global variable extern declarations
   47       =3 *******************************************************************************/
   48       =3 extern ST_XSIRegisters * XRAM pXSI0Regs;
   49       =3 extern ST_XSIRegisters * XRAM pXSI1Regs;
   50       =3 
   51       =3 /*******************************************************************************
   52       =3 * 5.Global function prototypes
   53       =3 *******************************************************************************/
   54       =3 void Drv_XsiInit();
   55       =3 UINT16 Drv_XsiReadReg(ST_XSIRegisters *pXSIRegs, UINT16 addr, UINT8 flag);
   56       =3 void Drv_XsiWriteReg(ST_XSIRegisters *pXSIRegs, UINT16 usAddr, UINT16 usData,UINT8 flag);
   57       =3 void Drv_XsiRead(ST_XSIRegisters *pXSIRegs, UINT16 usAddr, UINT16 *pBuf, UINT16 len, UINT8 flag);
   58       =3 void Drv_XsiWrite(ST_XSIRegisters *pXSIRegs, UINT16 usAddr, UINT16 *pBuf, UINT16 len, UINT8 flag);
   59       =3 
   60       =3 #if _TEST_XSI_EN
            =3 void Test_Xsi();
            =3 #else
   63       =3 #define  Test_Xsi   /##/
   64       =3 #endif
   65       =3 
   66       =3 #endif
   67       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Drv_Xbus.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2016-06-14
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *   Version:
   15       =3 *******************************************************************************/
   16       =3 #ifndef __DRV_XBUS_H__
   17       =3 #define __DRV_XBUS_H__
   18       =3 
   19       =3 /*******************************************************************************
   20       =3 * 1.Included files
   21       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   22       =3 /*******************************************************************************
   22       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   22       =3 *
   22       =3 * File Name: Drv_Xbus.h
   22       =3 *
   22       =3 *    Author: xinkunpeng
   22       =3 *
   22       =3 *   Created: 2016-06-14
   22       =3 *
   22       =3 *  Abstract:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 55  

   22       =3 *
   22       =3 * Reference:
   22       =3 *
   22       =3 *   Version:
   22       =3 *******************************************************************************/
   22       =3 #ifndef __DRV_XBUS_H__
   22       =3 #define __DRV_XBUS_H__
   22       =3 
   22       =3 /*******************************************************************************
   22       =3 * 1.Included files
   22       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   23       =3 #include "FT8836_Reg.h"
    1       =4 /*******************************************************************************
    2       =4 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =4 *
    4       =4 * File Name: FT8836_Reg.h
    5       =4 *
    6       =4 *    Author: 
    7       =4 *
    8       =4 *   Created: 2016-07-11
    9       =4 *
   10       =4 *  Abstract: Define FT8836 Sram registers and their bits
   11       =4 *
   12       =4 * Reference:
   13       =4 *
   14       =4 *******************************************************************************/
   15       =4 
   16       =4 #ifndef _FT8836_REG_H_
            =4 #define _FT8836_REG_H_
            =4 
            =4 /* Conditional Compiler Options */
            =4 
            =4 /*******************************************************************************
            =4 * Included files
            =4 *******************************************************************************/
            =4 #include "FT8836.h"
            =4 
            =4 /*******************************************************************************
            =4 * Global constant and macro definitions using #define
            =4 *******************************************************************************/
            =4 #define ARAM_DATA_BASE_ADDR              0xA000
            =4 #define SPI1_REG_BASE_ADDR               0xB220
            =4 /* SPI0 reg Start Addr */
            =4 #define SPI0_REG_BASE_ADDR               0xB200
            =4 
            =4 #define SPI0_DMA_CTRL                    REG16(SPI0_REG_BASE_ADDR+(0x00<<1))
            =4 #define SPI0_DMA_ERR_TIMEOUT_CTRL        REG16(SPI0_REG_BASE_ADDR+(0x01<<1))
            =4 #define SPI0_DMA_ADDR_H                  REG16(SPI0_REG_BASE_ADDR+(0x02<<1))
            =4 #define SPI0_DMA_START_ADDR_L            REG16(SPI0_REG_BASE_ADDR+(0x03<<1))            
            =4 #define SPI0_DMA_END_ADDR_L              REG16(SPI0_REG_BASE_ADDR+(0x04<<1))         
            =4 #define SPI0_DMA_CRC                     REG16(SPI0_REG_BASE_ADDR+(0x05<<1))
            =4 #define SPI0_DMA_SRCR                    REG16(SPI0_REG_BASE_ADDR+(0x06<<1))
            =4 /* XSI reg ¿ØÖÆÇø */
            =4 
            =4 /* XSI0 reg start addr */
            =4 #define XSI0_REG_BASE_ADDR     0xB400
            =4 
            =4 #define XSI0_WDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x00<<1))
            =4 #define XSI0_RDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x01<<1))
            =4 #define XSI0_CLK_SEL           REG16(XSI0_REG_BASE_ADDR+(0x02<<1))
            =4 #define XSI0_STOP              REG16(XSI0_REG_BASE_ADDR+(0x03<<1))
            =4 #define XSI0_TX_INT            REG16(XSI0_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* XSI1 reg start addr */
            =4 #define XSI1_REG_BASE_ADDR     0xB800
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 56  

            =4 
            =4 #define XSI1_WDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x00<<1))
            =4 #define XSI1_RDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x01<<1))
            =4 #define XSI1_CLK_SEL           REG16(XSI1_REG_BASE_ADDR+(0x02<<1))
            =4 #define XSI1_STOP              REG16(XSI1_REG_BASE_ADDR+(0x03<<1))
            =4 #define XSI1_TX_INT            REG16(XSI1_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* XBUS reg start addr */
            =4 #define XBUS_REG_BASE_ADDR     0xBC00
            =4 
            =4 #define XBUS_RDATA_LO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x00<<1))
            =4 #define XBUS_RDATA_HO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x01<<1))
            =4 #define XBUS_REGFILE_CTRL      REG16(XBUS_REG_BASE_ADDR+(0x02<<1))
            =4 #define XBUS_CMD               REG16(XBUS_REG_BASE_ADDR+(0x03<<1))
            =4 #define XBUS_RLD_DATA          REG16(XBUS_REG_BASE_ADDR+(0x04<<1))
            =4 
            =4 /* reload dma base addr */
            =4 //#define RELOAD_DMA_START_ADDR  0x9D00
            =4 /******************************************************************************/
            =4 /******************************************************************************/
            =4 /* CAL reg Start Addr */
            =4 #define CAL_REG_BASE_ADDR       0xB000
            =4 
            =4 /* ASM reg Start Addr */
            =4 #define ASM_REG_BASE_ADDR       0xB100
            =4 
            =4 
            =4 /*******************************************************************************
            =4 * Global structures, unions and enumerations using typedef
            =4 *******************************************************************************/
            =4 /*************************************************************/
            =4 /* XSI reg */
            =4 typedef struct
            =4 {
            =4     UINT16 Wdata;        // (0x00<<1)
            =4     UINT16 Rdata;        // (0x01<<1)
            =4     UINT16 Clksel;       // (0x02<<1)
            =4     UINT16 Stop;         // (0x03<<1)
            =4     UINT16 Tx_int;       // (0x04<<1)
            =4 } ST_XSIRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_XSIRegisters reg;
            =4     UINT16 offset[sizeof(ST_XSIRegisters)>>1];
            =4 } Union_XSIReg;
            =4 
            =4 /*************************************************************/
            =4 // cal
            =4 typedef struct
            =4 {
            =4     UINT16 rCmd;           // (0x00<<1)
            =4     UINT16 rDmaLen;        // (0x01<<1)
            =4     UINT16 rS1Addr;        // (0x02<<1)
            =4     UINT16 rS2Addr;        // (0x03<<1)
            =4     UINT16 rOutAddr;       // (0x04<<1)
            =4     UINT16 rPar;           // (0x05<<1)
            =4     UINT16 rSize;          // (0x06<<1)
            =4     UINT16 rPThd;          // (0x07<<1)
            =4     UINT16 rNThd;          // (0x08<<1)
            =4     UINT16 rAThd;          // (0x09<<1)
            =4     UINT16 rDmask;         // (0x0A<<1)
            =4     UINT16 rPaCnt;         // (0x0B<<1)
            =4     UINT16 rNaCnt;         // (0x0C<<1)
            =4     UINT16 rPsCnt;         // (0x0D<<1)
            =4     UINT16 rNsCnt;         // (0x0E<<1)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 57  

            =4     UINT16 rMaxV;          // (0x0F<<1)
            =4     UINT16 rMaxPos;        // (0x10<<1)
            =4     UINT16 rMinV;          // (0x11<<1)
            =4     UINT16 rMinPos;        // (0x12<<1)
            =4     UINT16 rID0;           // (0x13<<1)
            =4     UINT16 rID1;           // (0x14<<1)
            =4     UINT16 rID2;           // (0x15<<1)
            =4     UINT16 rCrc;           // (0x16<<1)
            =4     UINT16 rChk;           // (0x17<<1)
            =4     UINT16 rNaThd;         // (0x18<<1)
            =4     UINT16 rTxRxNum;       // (0x19<<1)
            =4     UINT16 rDivShift;      // (0x1a<<1)
            =4     UINT16 rSubabsMax;     // (0x1b<<1)
            =4     UINT16 rInt;           // (0x1c<<1)
            =4     UINT16 rCntNum;        // (0x1d<<1)
            =4     UINT16 rDmaskA;        // (0x1e<<1)
            =4     UINT16 rTxRxNumAm;     // (0x1f<<1)
            =4     UINT16 rTxRxNumAs;     // (0x20<<1)
            =4     UINT16 rSizeAm;        // (0x21<<1)
            =4     UINT16 rSizeAs;        // (0x22<<1)
            =4     UINT16 rS1AddrA;       // (0x23<<1)
            =4     UINT16 rS2AddrA;       // (0x24<<1)
            =4     UINT16 rOutAddrA;      // (0x25<<1)
            =4     UINT16 rSel;           // (0x26<<1)
            =4 } ST_CalRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_CalRegisters reg;
            =4     UINT16 offset[sizeof(ST_CalRegisters)>>1];
            =4 } Union_CalReg;
            =4 
            =4 /*************************************************************/
            =4 /*XBUS reg*/
            =4 typedef struct
            =4 {  
            =4     UINT16 rdata_lo_byte;
            =4     UINT16 rdata_ho_byte;
            =4     UINT16 lcd_regfile_ctrl;
            =4     UINT16 xbus_cmd;//bit1 reload_end;bit0 reload_abort
            =4     UINT16 xbus_rld_data;//reload_data
            =4 }ST_LcdWrapRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_LcdWrapRegisters reg;
            =4     UINT16 offset[sizeof(ST_LcdWrapRegisters)>>1];
            =4 }Union_LcdReg;
            =4 
            =4 /*************************************************************/
            =4 /*SPI0_DMA reg*/
            =4 typedef struct
            =4 {
            =4     UINT16 dma_ctrl;
            =4     UINT16 timeout_ctrl;
            =4     UINT16 addr_h;
            =4     UINT16 start_addr_l;
            =4     UINT16 end_addr_l;
            =4     UINT16 dma_crc;
            =4     UINT16 dma_srcr;
            =4     
            =4 }ST_Spi0DmaRegisters;
            =4 
            =4 /*SPI1_DMA reg*/
            =4 typedef struct
            =4 {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 58  

            =4     UINT16 dma_ctrl;
            =4     UINT16 timeout_ctrl;
            =4     UINT16 addr_h;
            =4     UINT16 start_addr_l;
            =4     UINT16 end_addr_l;
            =4     UINT16 dma_crc;
            =4     UINT16 dma_srcr;
            =4     
            =4 }ST_Spi1DmaRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_Spi0DmaRegisters reg;
            =4     UINT16 offset[sizeof(ST_Spi0DmaRegisters)>>1];
            =4 }Union_Spi0Reg;
            =4 
            =4 /*************************************************************/
            =4 /* ASM reg */
            =4 typedef struct
            =4 {
            =4     UINT16 usAsmIntFlag0;         // 00  RO
            =4     UINT16 usAsmIntFlag1;         // 01  RO
            =4     UINT16 usAsmIntClr0;          // 02  WO
            =4     UINT16 usAsmIntClr1;          // 03  WO
            =4     UINT16 usAsmIntEn0;           // 04
            =4     UINT16 usAsmIntEn1;           // 05
            =4     UINT16 usAsmIntWakeEn0;       // 06
            =4     UINT16 usAsmIntWakeEn1;       // 07
            =4     UINT16 usAsmIntSta;           // 08  RO
            =4     UINT16 usAsmScanSta0;         // 09  RO
            =4     UINT16 usAsmScanSta1;         // 10  RO
            =4     UINT16 usAsmScanSta2;         // 11  RO
            =4     UINT16 usAsmScanSta3;         // 12  RO
            =4     UINT16 usAsmScanCtrl;         // 13  WO
            =4     UINT16 usAsmScanCfg0;         // 14
            =4     UINT16 usAsmScanCfg1;         // 15
            =4     UINT16 usAsmTpFrameCfg0;      // 16
            =4     UINT16 usAsmTpFrameCfg1;      // 17
            =4     UINT16 usAsmTpFrameCfg2;      // 18
            =4     UINT16 usAsmTpFrameCfg3;      // 19
            =4     UINT16 usAsmScanDly;          // 20
            =4     UINT16 usAsmStbMaseL;         // 21
            =4     UINT16 usAsmStbMaseH;         // 22  
            =4     UINT16 usAsmAramBaseL;        // 23
            =4     UINT16 usAsmAramBaseR;        // 24
            =4     UINT16 usAsmAramBaseKey;      // 25    
            =4     UINT16 usAsmAramCBL;          // 26
            =4     UINT16 usAsmAramCBR;          // 27
            =4     UINT16 usAsmAramCBKey;        // 28
            =4     UINT16 usAsmReserve0;         // 29 Î´¶¨Òå
            =4     UINT16 usAsmReserve1;         // 30 Î´¶¨Òå
            =4     UINT16 usAsmReserve2;         // 31 Î´¶¨Òå
            =4     UINT16 usAsmHwMonCrtl0;       // 32
            =4     UINT16 usAsmHwMonCtrl1;       // 33
            =4     UINT16 usAsmHwMonCfg0;        // 34
            =4     UINT16 usAsmHwMonCfg1;        // 35
            =4     UINT16 usAsmHwMonCfg2;        // 36
            =4     UINT16 usAsmHwMonCfg3;        // 37
            =4     UINT16 usAsmHwMonCfg4;        // 38
            =4     UINT16 usAsmHwMonTimer;       // 39
            =4     UINT16 usAsmVreshCfgLcdon;    // 40
            =4 } ST_AsmRegisters;
            =4 
            =4 typedef union
            =4 {
            =4     ST_AsmRegisters reg;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 59  

            =4     UINT16 offset[sizeof(ST_AsmRegisters)>>1];
            =4 } Union_AsmReg;
            =4 
            =4 
            =4 /*******************************************************************************/
            =4 /* AFE reg */
            =4 #if 0
            =4 typedef struct
            =4 {
            =4     UINT16 usAfeAsmCfg;              // 0x00
            =4     UINT16 usAfePanelCfg0;           // 0x01
            =4     UINT16 usAfePanelCfg1;           // 0x02
            =4     UINT16 usAfePanelCfg2;           // 0x03
            =4     UINT16 usAfeSysCfg0;             // 0x04
            =4     UINT16 usAfeSysCfg1;             // 0x05
            =4     UINT16 usAfeScanCfg0;            // 0x06
            =4     UINT16 usAfeScanCfg1;            // 0x07
            =4     UINT16 usAfeDummyScanCfg;        // 0x08
            =4     UINT16 usAfeBaseTrackCfg;        // 0x09
            =4     UINT16 usAfeAcc_Offset;          // 0x0A
            =4     UINT16 usAfeTpMonTh;             // 0x0B
            =4     UINT16 usAfeKeyMonTh;            // 0x0C
            =4     UINT16 usAfeAnaGenCfg0;          // 0x0D
            =4     UINT16 usAfeAnaGenCfg1;          // 0x0E
            =4     UINT16 usAfeAnaCaCfg0;           // 0x0F
            =4     UINT16 usAfeAnaCaCfg1;           // 0x10
            =4     UINT16 usAfeAnaCaCfg2;           // 0x11
            =4     UINT16 usAfeAnaP1P2Cfg0;         // 0x12
            =4     UINT16 usAfeAnaP1P2Cfg1;         // 0x13
            =4     UINT16 usAfeAnaP1P2Cfg2;         // 0x14 
            =4     UINT16 usAfeAnaP1P2Cfg3;         // 0x15    
            =4     UINT16 usAfeAnaP1P2Cfg4;         // 0x16
            =4     UINT16 usAfeAnaP1P2Cfg5;         // 0x17
            =4     UINT16 usAfeP1P2DlyCfg0;         // 0x18
            =4     UINT16 usAfeP1P2DlyCfg1;         // 0x19
            =4     UINT16 usAfeAnaShcfg0;           // 0x1A
            =4     UINT16 usAfeAnaShcfg1;           // 0x1B
            =4     UINT16 usAfeAnaShcfg2;           // 0x1C
            =4     UINT16 usAfeAnaShcfg3;           // 0x1D
            =4     UINT16 usAfeAnaShcfg4;           // 0x1E
            =4     UINT16 usAfeAnaShcfg5;           // 0x1F
            =4     UINT16 usAfeAnaShcfg6;           // 0x20
            =4     UINT16 usAfeAnaAdcCfg0;          // 0x21
            =4     UINT16 usAfeAnaAdcCfg1;          // 0x22 
            =4     UINT16 usAfeAnaAdcCfg2;          // 0x23
            =4     UINT16 usAfeAnaAdcCfg3;          // 0x24
            =4     UINT16 usAfeGiphP1P2Cfg;         // 0x25
            =4     UINT16 usAfeGiplP1P2Cfg;         // 0x26
            =4     UINT16 usAfeSdVcomCfg;           // 0x27
            =4     UINT16 usAfeSxP1P2Cfg;           // 0x28
            =4     UINT16 usAllGateOnLCfg;          // 0x29
            =4     UINT16 usAllGateOffLCfg;         // 0x2A
            =4     UINT16 usAllGateStopLCfg;        // 0x2B
            =4     UINT16 usAllGateHCfg;            // 0x2C
            =4     UINT16 usRptRawdataNum;          // 0x2D
            =4     UINT16 usCbAdjustTh;             // 0x2E
            =4     UINT16 usTestModeCfg;            // 0x2F
            =4     UINT16 usPrescanTime;            // 0x30
            =4     UINT16 usDischargeTime;          // 0x31
            =4     UINT16 usAfeAnaStaticCfg0;       // 0x32
            =4     UINT16 usAfeAnaStaticCfg1;       // 0x33
            =4     UINT16 usAfeAnaStaticCfg2;       // 0x34
            =4     UINT16 usAfeAnaStaticCfg3;       // 0x35
            =4     UINT16 usAfeTestPin0Cfg0;        // 0x36
            =4     UINT16 usAfeTestPin0Cfg1;        // 0x37
            =4     UINT16 usAfeTestPin0Cfg2;        // 0x38
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 60  

            =4     UINT16 usAfeTestPin1Cfg0;        // 0x39
            =4     UINT16 usAfeTestPin1Cfg1;        // 0x3A
            =4     UINT16 usAfeTestPin1Cfg2;        // 0x3B
            =4     UINT16 usReserveZone1;           // 0x3C
            =4     UINT16 usReserveZone2;           // 0x3D
            =4     UINT16 usReserveZone3;           // 0x3E
            =4     UINT16 usReserveZone4;           // 0x3F    
            =4     UINT16 usMcapScanCfg;            // 0x40
            =4     UINT16 usMcapScanSr;             // 0x41
            =4     UINT16 usMcapKeyInterVal6;       // 0x42
            =4     UINT16 usMcapDummyScanNum;       // 0x43
            =4     UINT16 usMcapRawShiftCof;        // 0x44
            =4     UINT16 usMcapRawOffSetL;         // 0x45
            =4     UINT16 usMcapAdcCfg;             // 0x46
            =4     UINT16 usMcapAdcDat0;            // 0x47
            =4     UINT16 usMcapInitSamplCfg;       // 0x48
            =4     UINT16 usMcapOverFlowThr;        // 0x49
            =4     UINT16 usMcapUnderFlowThr;       // 0x4A
            =4     UINT16 usMcapOverFlowUpBound;    // 0x4B
            =4     UINT16 usMcapOverFlowPointFrame; // 0x4C
            =4     UINT16 usMcapNormalSignalUpThr;  // 0x4D
            =4     UINT16 usMcapNormalSignalDwThr;  // 0x4E
            =4     UINT16 usMcapOverFlowClrFrameNum;// 0x4F
            =4     UINT16 usMcapLpfirCfg;           // 0x50
            =4     UINT16 usMcapLpFirCfg0;          // 0x51
            =4     UINT16 usMcapLpFirCfg1;          // 0x52
            =4     UINT16 usMcapLpFirCfg2;          // 0x53
            =4     UINT16 usMcapLpFirCfg3;          // 0x54
            =4     UINT16 usMcapLpFirCfg4;          // 0x55  
            =4     UINT16 usMcapLpFirCfg5;          // 0x56
            =4     UINT16 usMcapLpFirCfg6;          // 0x57
            =4     UINT16 usMcapLpFirCfg7;          // 0x58
            =4    
            =4 } ST_AfeRegList;
            =4 #endif
            =4 
            =4 typedef enum
            =4 {
            =4     Addr_PANEL_MODE_CFG0 =1, 
            =4     Addr_PANEL_MODE_CFG1 =2,
            =4     Addr_PANEL_MODE_CFG2 =3, 
            =4     Addr_AFE_SYS_CFG0 =4, 
            =4     Addr_AFE_SYS_CFG1 =5, 
            =4     Addr_AFE_SCAN_CFG0 =6, 
            =4     Addr_AFE_SCAN_CFG1 =7, 
            =4     Addr_AFE_DUMMY_SCAN_CFG =8, 
            =4     Addr_AFE_BASE_TRACK_CFG =9, 
            =4     Addr_ACC_OFFSET =10, 
            =4     Addr_TP_MONITOR_THRESHOLD =11,
            =4     Addr_KEY_MONITOR_THRESHOLD =12, 
            =4     Addr_AFE_ANA_K1_CFG0 =13,
            =4     Addr_AFE_ANA_K2_CFG1 =14,
            =4     Addr_AFE_ANA_CA_CFG0 =15, 
            =4     Addr_AFE_ANA_CA_CFG1 =16, 
            =4     Addr_AFE_ANA_CA_CFG2 =17,
            =4     Addr_AFE_ANA_P1_P2_CFG0 =18, 
            =4     Addr_AFE_ANA_P1_P2_CFG1 =19,
            =4     Addr_AFE_ANA_P1_P2_CFG2 =20, 
            =4     Addr_AFE_ANA_P1_P2_CFG3 =21,
            =4     Addr_AFE_ANA_P1_P2_CFG4 =22, 
            =4     Addr_AFE_ANA_P1_P2_CFG5 =23, 
            =4     Addr_AFE_P1_P2_DLY_CFG0 =24, 
            =4     Addr_AFE_P1_P2_DLY_CFG1 =25, 
            =4     Addr_AFE_ANA_SH_CFG0 =26,
            =4     Addr_AFE_ANA_SH_CFG1 =27, 
            =4     Addr_AFE_ANA_SH_CFG2 =28, 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 61  

            =4     Addr_AFE_ANA_SH_CFG3 =29, 
            =4     Addr_AFE_ANA_SH_CFG4 =30, 
            =4     Addr_AFE_ANA_SH_CFG5 =31,
            =4     Addr_AFE_ANA_SH_CFG6 =32, 
            =4     Addr_AFE_ANA_ADC_CFG0 =33, 
            =4     Addr_AFE_ANA_ADC_CFG1 =34, 
            =4     Addr_AFE_ANA_ADC_CFG2 =35, 
            =4     Addr_AFE_ANA_ADC_CFG3 =36, 
            =4     Addr_AFE_GIPH_P1_P2_CFG =37, 
            =4     Addr_AFE_GIPL_P1_P2_CFG =38, 
            =4     Addr_AFE_SD_VOM_OPT_P1_P2_CFG =39,
            =4     Addr_AFE_SX_P1_P2_CFG =40, 
            =4     Addr_AFE_MOUT_GIPH_CFG = 41,
            =4     Addr_AFE_MOUT_GIPL_CFG = 42,
            =4     Addr_AFE_GOUT_GIPH_CFG = 43,
            =4     Addr_AFE_GOUT_GIPL_CFG = 44,
            =4    
            =4     Addr_ALL_GATE_ON_L_CFG =45, 
            =4     Addr_ALL_GATE_OFF_L_CFG =46,
            =4     Addr_ALL_GATE_STOP_L_CFG =47, 
            =4     Addr_ALL_GATE_H_CFG =48,                              
            =4     Addr_RPT_RAWDATA_NUM =49,                             
            =4     Addr_CB_ADJUST_THLD =50,                                
            =4     Addr_TEST_MODE_FLAG =51,                              
            =4     Addr_PRESCAN_TIME =52,                                 
            =4     Addr_DISCHARGE_TIME =53,                               
            =4     Addr_ANA_STATIC_CFG0 =54,                              
            =4     Addr_ANA_STATIC_CFG1 =55,                               
            =4     Addr_ANA_STATIC_CFG2 =56,                              
            =4     Addr_ANA_STATIC_CFG3 =57,                            
            =4     Addr_TEST_P0_CFG0 =58,                               
            =4     Addr_TEST_P0_CFG1 =59,                               
            =4     Addr_TEST_P0_CFG2 =60,                                 
            =4     Addr_TEST_P1_CFG0 =61,                               
            =4     Addr_TEST_P1_CFG1 =62,                                
            =4     Addr_TEST_P1_CFG2 =63,                                 
            =4                                                                                                          
             -                                                          
            =4     Addr_MCAP_SCAN_CFG =64,                                
            =4     Addr_MCAP_SCANSR =65,                                  
            =4     Addr_KEY_SAMPLE_INTERVAL_6 =66,                     
            =4     Addr_RAWSHIFTCAF =67,                                
            =4     Addr_RAWDATA_OFFSET_L =68,                           
            =4     Addr_ADC_CFG =69,                                      
            =4     Addr_ADC_DATA0 =70,                                   
            =4     Addr_MCAP_INIT_SAMPL_CFG =71,                         
            =4     Addr_OVERFLOW_THR =72,                                 
            =4     Addr_UNDERFLOW_THR =73,                                
            =4     Addr_OVERFLOW_UPBOUND =74,                            
            =4     Addr_OVER_POINT_FRAME =75,                             
            =4     Addr_NORMAL_SIGNAL_UPTHR =76,                          
            =4     Addr_NORMAL_SIGNAL_DWTHR =77,                        
            =4     Addr_OVERFLOW_CLR_FRAMENUM =78,                       
            =4     Addr_MCAP_LPFIR_CFG =79,                               
            =4     Addr_MCAP_LPFIR_COF0 =80,                              
            =4     Addr_MCAP_LPFIR_COF1 =81,                              
            =4     Addr_MCAP_LPFIR_COF2 =82,                             
            =4     Addr_MCAP_LPFIR_COF3 =83,                              
            =4     Addr_MCAP_LPFIR_COF4 =84,                              
            =4     Addr_MCAP_LPFIR_COF5 =85,                            
            =4     Addr_MCAP_LPFIR_COF6 =86,                             
            =4     Addr_MCAP_LPFIR_COF7 =87,   
            =4 }ENUM_AFE_ADDR;
            =4 
            =4 
            =4 /*******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 62  

            =4 /* Afe table reg */
            =4 
            =4 /*******************************************************************************/
            =4 
            =4 
            =4 /*******************************************************************************
            =4 * Global variable extern declarations
            =4 *******************************************************************************/
            =4 
            =4 /*******************************************************************************
            =4 * Global function prototypes
            =4 *******************************************************************************/
            =4 
            =4 #endif //_FT8836_REG_H_
   24       =3 
   25       =3 /*******************************************************************************
   26       =3 * 2.Global constant and macro definitions using #define
   27       =3 *******************************************************************************/
   28       =3 
   29       =3 /*******************************************************************************
   30       =3 * 3.Global structures, unions and enumerations using typedef
   31       =3 *******************************************************************************/
   32       =3 
   33       =3 /*******************************************************************************
   34       =3 * 4.Global variable extern declarations
   35       =3 *******************************************************************************/
   36       =3 //extern ST_RlDmaRegisters * XRAM pRlDmaRegs;
   37       =3 extern ST_LcdWrapRegisters *XRAM pLcdWrapRegs;
   38       =3 
   39       =3 /*******************************************************************************
   40       =3 * 5.Global function prototypes
   41       =3 *******************************************************************************/
   42       =3 void Drv_XbusInit();
   43       =3 UINT16 DrvXbus_ReadLcd16(UINT16 usaddr);
   44       =3 void DrvXbus_WriteLcd8(UINT16 usaddr,UINT8 usdata);
   45       =3 
   46       =3 #if _TEST_XBUS_EN
            =3 void Test_Xbus(void);
            =3 #else
   49       =3 //#define Test_Xbus  /##/
   50       =3 #endif
   51       =3 
   52       =3 #endif
   53       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: uart.h
    5       =3 *
    6       =3 *    Author: linjianjun
    7       =3 *
    8       =3 *   Created: 2013-06-05
    9       =3 *
   10       =3 *  Abstract: DBG_Êä³ö²»ÄÜ»»ÐÐ²Ù×÷
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef  __UART1_H__
   16       =3 #define  __UART1_H__
   17       =3 
   18       =3 /* Conditional Compiler Options */
   19       =3 #define _BLK_DBG_EN      1
   20       =3 
   21       =3 #if _BLK_DBG_EN
   22       =3 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 63  

   23       =3 * Included files
   24       =3 *******************************************************************************/
   25       =3 #include <STDIO.H>
    1       =4 /*--------------------------------------------------------------------------
    2       =4 STDIO.H
    3       =4 
    4       =4 Prototypes for standard I/O functions for C251 Version 3.
    5       =4 Copyright (c) 1995-2001 Keil Elektronik GmbH and Keil Software, Inc.
    6       =4 All rights reserved.
    7       =4 --------------------------------------------------------------------------*/
    8       =4 
    9       =4 #pragma SAVE
   10       =4 #pragma PARM251
   11       =4 
   12       =4 #ifndef EOF
   13       =4  #define EOF -1
   14       =4 #endif
   15       =4 
   16       =4 #ifndef NULL
            =4  #define NULL ((void *) 0)
            =4 #endif
   19       =4 
   20       =4 #ifndef _SIZE_T
            =4  #define _SIZE_T
            =4  typedef unsigned int size_t;
            =4 #endif
   24       =4 
   25       =4 #if (__C251__ >= 200) 
   26       =4 #pragma SAVE
   27       =4 #pragma FUNCTIONS(STATIC)
   28       =4 /* only static functions available */
   29       =4 extern char _getkey  (void);
   30       =4 extern char getchar  (void);
   31       =4 extern char ungetchar(char);
   32       =4 extern char putchar  (char);
   33       =4 extern int  printf   (const char *, ...); 
   34       =4 extern char *gets    (char *, int n);
   35       =4 extern int  scanf    (const char *, ...);
   36       =4 extern int  vprintf  (const char *, char *);
   37       =4 extern int  puts     (const char *);
   38       =4 #pragma RESTORE
   39       =4 /* available as reentrant & non-reentrant version */
   40       =4 extern int  sprintf  (char *, const char *, ...);
   41       =4 extern int  vsprintf (char *, const char *, char *);
   42       =4 extern int  sscanf   (char *, const char *, ...);
   43       =4 #else
            =4 extern char _getkey (void);
            =4 extern char getchar (void);
            =4 extern char ungetchar (char);
            =4 extern char putchar (char);
            =4 extern int printf   (const char *, ...);
            =4 extern int sprintf  (char *, const char *, ...);
            =4 extern int vprintf  (const char *, char *);
            =4 extern int vsprintf (char *, const char *, char *);
            =4 extern char *gets (char *, int n);
            =4 extern int scanf (const char *, ...);
            =4 extern int sscanf (char *, const char *, ...);
            =4 extern int puts (const char *);
            =4 #endif
   57       =4 
   58       =4 #pragma RESTORE
   26       =3 #include <REG251S.H>
    1       =4 /*--------------------------------------------------------------------------
    2       =4 REG251S.H
    3       =4 
    4       =4 Header file for 8xC251SA/SB/SQ/SP
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 64  

    5       =4 Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
    6       =4 All rights reserved.
    7       =4 --------------------------------------------------------------------------*/
    8       =4 
    9       =4 #ifndef __REG251S_H__
   10       =4 #define __REG251S_H__
   11       =4 
   12       =4 /*  BYTE Registers  */
   13       =4 sfr P0   = 0x80;
   14       =4 sfr P1   = 0x90;
   15       =4 sfr P2   = 0xA0;
   16       =4 sfr P3   = 0xB0;
   17       =4 sfr PSW  = 0xD0;
   18       =4 sfr PSW1 = 0xD1;
   19       =4 sfr ACC  = 0xE0;
   20       =4 sfr B    = 0xF0;
   21       =4 sfr SP   = 0x81;
   22       =4 sfr SPH  = 0xBE;
   23       =4 sfr DPL  = 0x82;
   24       =4 sfr DPH  = 0x83;
   25       =4 sfr DPXL = 0x84;
   26       =4 sfr PCON = 0x87;
   27       =4 sfr TCON = 0x88;
   28       =4 sfr TMOD = 0x89;
   29       =4 sfr TL0  = 0x8A;
   30       =4 sfr TL1  = 0x8B;
   31       =4 sfr TH0  = 0x8C;
   32       =4 sfr TH1  = 0x8D;
   33       =4 sfr IE0  = 0xA8;
   34       =4 sfr IPL0 = 0xB8;
   35       =4 sfr IPH0 = 0xB7;
   36       =4 sfr SCON = 0x98;
   37       =4 sfr SBUF = 0x99;
   38       =4 sfr SADDR  = 0xA9;
   39       =4 sfr SADEN  = 0xB9;
   40       =4 sfr T2CON  = 0xC8;
   41       =4 sfr T2MOD  = 0xC9;
   42       =4 sfr RCAP2L = 0xCA;
   43       =4 sfr RCAP2H = 0xCB;
   44       =4 sfr TL2    = 0xCC;
   45       =4 sfr TH2    = 0xCD;
   46       =4 sfr CCON   = 0xD8;
   47       =4 sfr CMOD   = 0xD9;
   48       =4 sfr CCAPM0 = 0xDA;
   49       =4 sfr CCAPM1 = 0xDB;
   50       =4 sfr CCAPM2 = 0xDC;
   51       =4 sfr CCAPM3 = 0xDD;
   52       =4 sfr CCAPM4 = 0xDE;
   53       =4 sfr CL     = 0xE9;
   54       =4 sfr CCAP0L = 0xEA;
   55       =4 sfr CCAP1L = 0xEB;
   56       =4 sfr CCAP2L = 0xEC;
   57       =4 sfr CCAP3L = 0xED;
   58       =4 sfr CCAP4L = 0xEE;
   59       =4 sfr CH     = 0xF9;
   60       =4 sfr CCAP0H = 0xFA;
   61       =4 sfr CCAP1H = 0xFB;
   62       =4 sfr CCAP2H = 0xFC;
   63       =4 sfr CCAP3H = 0xFD;
   64       =4 sfr CCAP4H = 0xFE;
   65       =4 sfr WDTRST = 0xA6;
   66       =4 sfr WCON   = 0xA7;
   67       =4 
   68       =4 
   69       =4 /*  BIT Registers  */
   70       =4 /*  PSW   */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 65  

   71       =4 sbit CY   = 0xD7;
   72       =4 sbit AC   = 0xD6;
   73       =4 sbit F0   = 0xD5;
   74       =4 sbit RS1  = 0xD4;
   75       =4 sbit RS0  = 0xD3;
   76       =4 sbit OV   = 0xD2;
   77       =4 sbit UD   = 0xD1;
   78       =4 sbit P    = 0xD0;
   79       =4 
   80       =4 /*  TCON  */
   81       =4 sbit TF1  = 0x8F;
   82       =4 sbit TR1  = 0x8E;
   83       =4 sbit TF0  = 0x8D;
   84       =4 sbit TR0  = 0x8C;
   85       =4 sbit IE1_ = 0x8B;
   86       =4 sbit IT1  = 0x8A;
   87       =4 sbit IE0_ = 0x89;
   88       =4 sbit IT0  = 0x88;
   89       =4 
   90       =4 /*  IE0   */
   91       =4 sbit EA   = 0xAF;
   92       =4 sbit EC   = 0xAE;
   93       =4 sbit ET2  = 0xAD;
   94       =4 sbit ES   = 0xAC;
   95       =4 sbit ET1  = 0xAB;
   96       =4 sbit EX1  = 0xAA;
   97       =4 sbit ET0  = 0xA9;
   98       =4 sbit EX0  = 0xA8;
   99       =4 
  100       =4 /*  IPL0  */ 
  101       =4 sbit PPC  = 0xBE;
  102       =4 sbit PT2  = 0xBD;
  103       =4 sbit PS   = 0xBC;
  104       =4 sbit PT1  = 0xBB;
  105       =4 sbit PX1  = 0xBA;
  106       =4 sbit PT0  = 0xB9;
  107       =4 sbit PX0  = 0xB8;
  108       =4 
  109       =4 /*  P3  */
  110       =4 sbit RD   = 0xB7;
  111       =4 sbit WR   = 0xB6;
  112       =4 sbit T1   = 0xB5;
  113       =4 sbit T0   = 0xB4;
  114       =4 sbit INT1 = 0xB3;
  115       =4 sbit INT0 = 0xB2;
  116       =4 sbit TXD  = 0xB1;
  117       =4 sbit RXD  = 0xB0;
  118       =4 
  119       =4 /*  SCON  */
  120       =4 sbit FE   = 0x9F;
  121       =4 sbit SM0  = 0x9F;
  122       =4 sbit SM1  = 0x9E;
  123       =4 sbit SM2  = 0x9D;
  124       =4 sbit REN  = 0x9C;
  125       =4 sbit TB8  = 0x9B;
  126       =4 sbit RB8  = 0x9A;
  127       =4 sbit TI   = 0x99;
  128       =4 sbit RI   = 0x98;
  129       =4 
  130       =4 /*  P1  */
  131       =4 sbit CEX4 = 0x97;
  132       =4 sbit CEX3 = 0x96;
  133       =4 sbit CEX2 = 0x95;
  134       =4 sbit CEX1 = 0x94;
  135       =4 sbit CEX0 = 0x93;
  136       =4 sbit ECI  = 0x92;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 66  

  137       =4 sbit T2EX = 0x91;
  138       =4 sbit T2   = 0x90;
  139       =4 
  140       =4 /*  T2CON  */
  141       =4 sbit TF2   = 0xCF;
  142       =4 sbit EXF2  = 0xCE;
  143       =4 sbit RCLK  = 0xCD;
  144       =4 sbit TCLK  = 0xCC;
  145       =4 sbit EXEN2 = 0xCB;
  146       =4 sbit TR2   = 0xCA;
  147       =4 sbit C_T2  = 0xC9;
  148       =4 sbit CP_RL2= 0xC8;
  149       =4 
  150       =4 /*  CCON  */
  151       =4 sbit CF    = 0xDF;
  152       =4 sbit CR    = 0xDE;
  153       =4 sbit CCF4  = 0xDC;
  154       =4 sbit CCF3  = 0xDB;
  155       =4 sbit CCF2  = 0xDA;
  156       =4 sbit CCF1  = 0xD9;
  157       =4 sbit CCF0  = 0xD8;
  158       =4 
  159       =4 #endif
   27       =3 #include "CfgGlobal.h"
   27       =3 /*******************************************************************************
   27       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
   27       =3 *
   27       =3 * File Name: uart.h
   27       =3 *
   27       =3 *    Author: linjianjun
   27       =3 *
   27       =3 *   Created: 2013-06-05
   27       =3 *
   27       =3 *  Abstract: DBG_Êä³ö²»ÄÜ»»ÐÐ²Ù×÷
   27       =3 *
   27       =3 * Reference:
   27       =3 *
   27       =3 *******************************************************************************/
   27       =3 #ifndef  __UART1_H__
   27       =3 #define  __UART1_H__
   27       =3 
   27       =3 /* Conditional Compiler Options */
   27       =3 #define _BLK_DBG_EN      1
   27       =3 
   27       =3 #if _BLK_DBG_EN
   27       =3 /*******************************************************************************
   27       =3 * Included files
   27       =3 *******************************************************************************/
   27       =3 #include <STDIO.H>
   27       =3 #include <REG251S.H>
   27       =3 #include "CfgGlobal.h"
   28       =3 
   29       =3 /*******************************************************************************
   30       =3 * Global constant and macro definitions using #define
   31       =3 *******************************************************************************/
   32       =3 #define BAUD_RATE 115200
   33       =3 //#define BAUD_RATE 57600
   34       =3 //#define BAUD_RATE 38400
   35       =3 //#define BAUD_RATE 19200
   36       =3 #define _UART_RECEIVE_EN   0  // ½ÓÊÕÊ¹ÄÜºê
   37       =3 
   38       =3 
   39       =3 #define _UART_OUT_GPIO2    0
   40       =3 #define _UART_OUT_GPIO3    1  //default
   41       =3 #define _UART_OUT_GPIO4    0
   42       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 67  

   43       =3 #define _FOR_RD            0
   44       =3 
   45       =3 /************** Ä£¿éÊä³öºê ***************/
   46       =3 /* module */
   47       =3 #if _FOR_RD
            =3 #define DBG_FLOW        /##/
            =3 #define DBG_SFR         /##/
            =3 #define DBG_DRAM        /##/
            =3 #define DBG_PROM        /##/
            =3 #define DBG_ARAM        /##/
            =3 #define DBG_SPI0_REG    /##/
            =3 #define DBG_XSI_REG     /##/
            =3 #define DBG_XBUS_REG    /##/
            =3 #define DBG_ASM_REG     /##/
            =3 #define DBG_CAL_REG     /##/
            =3 #define DBG_LCD_REG     /##/
            =3 #define DBG_AFE_REG     /##/
            =3 #define DBG_AFE_RAM     /##/
            =3 #define DBG_SPI         /##/
            =3 #define DBG_LED         /##/
            =3 #define DBG_I2C         /##/
            =3 
            =3 #define DBG_WDT         /##/
            =3 #define DBG_RTC         /##/
            =3 #define DBG_CNT         /##/
            =3 #define DBG_GPIO        /##/
            =3 #define DBG_TIMER       /##/
            =3 #define DBG_INT         /##/
            =3 #define DBG_GPIOWK      /##/
            =3 #define DBG_I2CWK       /##/
            =3 #define DBG_XSI         /##/
            =3 #define DBG_CAL         /##/
            =3 #define DBG_CAL_DATA    /##/
            =3 #define DBG_AFE         /##/
            =3 #define DBG_MODE        /##/
            =3 #define DBG_ERROR       /##/
            =3 #define DBG_UART        /##/
            =3 #define DBG_SPI0WK      /##/
            =3 #define DBG_DEBUGOUT    /##/
            =3 
            =3 #else
   84       =3 #define DBG_TEST        printf
   85       =3 #define DBG_FLOW        printf       //printf in main.c
   86       =3 #define DBG_SFR         printf
   87       =3 #define DBG_DRAM        printf
   88       =3 #define DBG_PROM        printf
   89       =3 #define DBG_ARAM        printf
   90       =3 #define DBG_SPI0_REG    printf
   91       =3 #define DBG_XSI_REG     printf
   92       =3 #define DBG_XBUS_REG    printf
   93       =3 #define DBG_ASM_REG     printf
   94       =3 #define DBG_CAL_REG     printf
   95       =3 #define DBG_LCD_REG     printf
   96       =3 #define DBG_AFE_REG     printf
   97       =3 #define DBG_AFE_RAM     printf
   98       =3 #define DBG_SPI         printf
   99       =3 #define DBG_LED         printf
  100       =3 #define DBG_I2C         printf
  101       =3 
  102       =3 #define DBG_WDT         printf
  103       =3 #define DBG_RTC         printf
  104       =3 #define DBG_CNT         printf
  105       =3 #define DBG_GPIO        printf
  106       =3 #define DBG_TIMER       printf
  107       =3 #define DBG_INT         /##/printf
  108       =3 #define DBG_GPIOWK      printf
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 68  

  109       =3 #define DBG_I2CWK       printf
  110       =3 #define DBG_XSI         printf
  111       =3 #define DBG_CAL         printf
  112       =3 #define DBG_CAL_DATA    printf
  113       =3 #define DBG_AFE         printf
  114       =3 #define DBG_MODE        printf
  115       =3 #define DBG_ERROR       printf
  116       =3 #define DBG_XBUS        printf
  117       =3 #define DBG_ECC         printf
  118       =3 #define DBG_UART        printf
  119       =3 #define DBG_SPI0WK      printf
  120       =3 #define DBG_DEBUGOUT    printf
  121       =3 #endif
  122       =3 
  123       =3 void  DrvUartInit(void);
  124       =3 SINT8 putchar(SINT8 c);
  125       =3 UINT8 CLK_DIV(UINT8 div);
  126       =3 
  127       =3 extern volatile UINT16 XRAM s_ucUartTxLen;
  128       =3 #else
            =3 #define DrvUartInit()   /##/
            =3 #define CLK_DIV()       /##/
            =3  
            =3 /************** Ä£¿éÊä³öºê ***************/
            =3 /* module */
            =3 #define DBG_FLOW        /##/
            =3 #define DBG_SFR         /##/
            =3 #define DBG_DRAM        /##/
            =3 #define DBG_PROM        /##/
            =3 #define DBG_ARAM        /##/
            =3 #define DBG_SPI0_REG    /##/
            =3 #define DBG_XSI_REG     /##/
            =3 #define DBG_XBUS_REG    /##/
            =3 #define DBG_ASM_REG     /##/
            =3 #define DBG_CAL_REG     /##/
            =3 #define DBG_LCD_REG     /##/
            =3 #define DBG_AFE_REG     /##/
            =3 #define DBG_AFE_RAM     /##/
            =3 #define DBG_SPI         /##/
            =3 #define DBG_LED         /##/
            =3 #define DBG_I2C         /##/
            =3 #define DBG_TEST        /##/printf
            =3 
            =3 #define DBG_WDT         /##/
            =3 #define DBG_RTC         /##/
            =3 #define DBG_CNT         /##/
            =3 #define DBG_GPIO        /##/
            =3 #define DBG_TIMER       /##/
            =3 #define DBG_INT         /##/
            =3 #define DBG_GPIOWK      /##/
            =3 #define DBG_I2CWK       /##/
            =3 #define DBG_XSI         /##/
            =3 #define DBG_CAL         /##/
            =3 #define DBG_CAL_DATA    /##/
            =3 #define DBG_AFE         /##/
            =3 #define DBG_MODE        /##/
            =3 #define DBG_ERROR       /##/
            =3 #define DBG_UART        /##/
            =3 #define DBG_SPI0WK      /##/
            =3 #define DBG_DEBUGOUT    /##/
            =3 
            =3 #endif
  171       =3 /*******************************************************************************
  172       =3 * Global variable extern declarations
  173       =3 *******************************************************************************/
  174       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 69  

  175       =3 /*******************************************************************************
  176       =3 * Global function prototypes
  177       =3 *******************************************************************************/
  178       =3 
  179       =3 #endif
  180       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_GPIO.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-18
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef _TEST_GPIO_H_
   19       =3 #define _TEST_GPIO_H_
   20       =3 
   21       =3 
   22       =3 /*******************************************************************************
   23       =3 * 1.Included files
   24       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   25       =3 /*******************************************************************************
   25       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   25       =3 *
   25       =3 * File Name: Test_GPIO.h
   25       =3 *
   25       =3 *    Author: xinkunpeng
   25       =3 *
   25       =3 *   Created: 2014-04-18
   25       =3 *
   25       =3 *  Abstract:
   25       =3 *
   25       =3 * Reference:
   25       =3 *
   25       =3 * Version:
   25       =3 * 0.1:
   25       =3 *
   25       =3 *******************************************************************************/
   25       =3 #ifndef _TEST_GPIO_H_
   25       =3 #define _TEST_GPIO_H_
   25       =3 
   25       =3 
   25       =3 /*******************************************************************************
   25       =3 * 1.Included files
   25       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   26       =3 
   27       =3 #if _TEST_GPIO_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 70  

            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_GPIO(void);
            =3 #else
   45       =3 #define Test_GPIO /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif // _DRV_MC_DATA_COLLECT_H_
   49       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_WDT.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2013-04-21
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef __TEST_WTD_H__
   16       =3 #define __TEST_WTD_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * 1.Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_WDT.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2013-04-21
   21       =3 *
   21       =3 *  Abstract:
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef __TEST_WTD_H__
   21       =3 #define __TEST_WTD_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * 1.Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_WDT_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 71  

            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_WDT(void);
            =3 #else
   42       =3 
   43       =3 #define Test_WDT() /##/
   44       =3 #endif
   45       =3 
   46       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_RTC.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-18
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_RTC__
   19       =3 #define __TEST_RTC__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_RTC.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-04-18
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_RTC__
   24       =3 #define __TEST_RTC__
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_RTC_EN
            =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 72  

            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_RTC(void);
            =3 #else
   45       =3 #define Test_RTC  /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_timer.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-24
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_TIMER_H__
   19       =3 #define __TEST_TIMER_H__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_timer.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-04-24
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_TIMER_H__
   24       =3 #define __TEST_TIMER_H__
   24       =3 
   24       =3 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 73  

   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_TIMER_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Timer(void);
            =3 #else
   45       =3 #define Test_Timer /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
   49       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_WDT.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2013-04-21
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef __TEST_CNT_H__
   16       =3 #define __TEST_CNT_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * 1.Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_WDT.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2013-04-21
   21       =3 *
   21       =3 *  Abstract:
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef __TEST_CNT_H__
   21       =3 #define __TEST_CNT_H__
   21       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 74  

   21       =3 /*******************************************************************************
   21       =3 * 1.Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_CNT_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Counter(void);
            =3 #else
   41       =3 
   42       =3 #define Test_Counter() /##/
   43       =3 #endif
   44       =3 
   45       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_Prom.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-24
    9       =3 *
   10       =3 *  Abstract: Please describe the interface in detail for this module
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_PROM_H__
   16       =3 #define _TEST_PROM_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_Prom.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2014-04-24
   21       =3 *
   21       =3 *  Abstract: Please describe the interface in detail for this module
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_PROM_H__
   21       =3 #define _TEST_PROM_H__
   21       =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 75  

   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 /*******************************************************************************
   24       =3 * Global constant and macro definitions using #define
   25       =3 *******************************************************************************/
   26       =3 
   27       =3 #if _TEST_PROM_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Prom(void);
            =3 #else
   41       =3 #define Test_Prom()  /##/
   42       =3 #endif
   43       =3 
   44       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_Dram.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-22
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_DRAM_H__
   16       =3 #define _TEST_DRAM_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_Dram.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2014-04-22
   21       =3 *
   21       =3 *  Abstract:
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_DRAM_H__
   21       =3 #define _TEST_DRAM_H__
   21       =3 
   21       =3 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 76  

   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_DRAM_EN
            =3 /*******************************************************************************
            =3 * Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 #define TEST_PATTERN1         0x5A
            =3 #define TEST_PATTERN2         0xA5
            =3 #define TEST_PATTERN3         0x55AA
            =3 #define TEST_PATTERN4         0xAA55
            =3 #define TEST_PATTERN5         0x12345678//0x55AA55AA
            =3 #define TEST_PATTERN6         0x11223344//0xAA55AA55
            =3 
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 extern UINT8  XRAM ucReadBack;
            =3 extern UINT16 XRAM usReadBack;
            =3 extern UINT32 XRAM ulReadBack;
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Dram(void);
            =3 #else
   50       =3 #define Test_Dram()  /##/
   51       =3 #endif
   52       =3 
   53       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_Aram.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-22
    9       =3 *
   10       =3 *  Abstract: Please describe the interface in detail for this module
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_ARAM_H__
   16       =3 #define _TEST_ARAM_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_Aram.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2014-04-22
   21       =3 *
   21       =3 *  Abstract: Please describe the interface in detail for this module
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 77  

   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_ARAM_H__
   21       =3 #define _TEST_ARAM_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 /*******************************************************************************
   24       =3 * Global constant and macro definitions using #define
   25       =3 *******************************************************************************/
   26       =3 
   27       =3 #if _TEST_ARAM_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Aram(void);
            =3 #else
   41       =3 #define Test_Aram()  /##/
   42       =3 #endif
   43       =3 
   44       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_SFR.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-23
    9       =3 *
   10       =3 *  Abstract: Please describe the interface in detail for this module
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_SFR_H__
   16       =3 #define _TEST_SFR_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * 1.Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_SFR.h
   21       =3 *
   21       =3 *    Author: xinkunpeng
   21       =3 *
   21       =3 *   Created: 2014-04-23
   21       =3 *
   21       =3 *  Abstract: Please describe the interface in detail for this module
   21       =3 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 78  

   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_SFR_H__
   21       =3 #define _TEST_SFR_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * 1.Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_SFR_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 sfr SFR_80H    =   0x80;
            =3 sfr SFR_81H    =   0x81;
            =3 sfr SFR_82H    =   0x82;
            =3 sfr SFR_83H    =   0x83;
            =3 sfr SFR_84H    =   0x84;
            =3 sfr SFR_85H    =   0x85;
            =3 sfr SFR_86H    =   0x86;
            =3 sfr SFR_87H    =   0x87;
            =3 sfr SFR_88H    =   0x88;
            =3 sfr SFR_89H    =   0x89;
            =3 sfr SFR_8AH    =   0x8A;
            =3 sfr SFR_8BH    =   0x8B;
            =3 sfr SFR_8CH    =   0x8C;
            =3 sfr SFR_8DH    =   0x8D;
            =3 sfr SFR_8EH    =   0x8E;
            =3 sfr SFR_8FH    =   0x8F;
            =3 sfr SFR_90H    =   0x90;
            =3 sfr SFR_91H    =   0x91;
            =3 sfr SFR_92H    =   0x92;
            =3 sfr SFR_93H    =   0x93;
            =3 sfr SFR_94H    =   0x94;
            =3 sfr SFR_95H    =   0x95;
            =3 sfr SFR_96H    =   0x96;
            =3 sfr SFR_97H    =   0x97;
            =3 sfr SFR_98H    =   0x98;
            =3 sfr SFR_99H    =   0x99;
            =3 sfr SFR_9AH    =   0x9A;
            =3 sfr SFR_9BH    =   0x9B;
            =3 sfr SFR_9CH    =   0x9C;
            =3 sfr SFR_9DH    =   0x9D;
            =3 sfr SFR_9EH    =   0x9E;
            =3 sfr SFR_9FH    =   0x9F;
            =3 sfr SFR_A0H    =   0xA0;
            =3 sfr SFR_A1H    =   0xA1;
            =3 sfr SFR_A2H    =   0xA2;
            =3 sfr SFR_A3H    =   0xA3;
            =3 sfr SFR_A4H    =   0xA4;
            =3 sfr SFR_A5H    =   0xA5;
            =3 sfr SFR_A6H    =   0xA6;
            =3 sfr SFR_A7H    =   0xA7;
            =3 sfr SFR_A8H    =   0xA8;
            =3 sfr SFR_A9H    =   0xA9;
            =3 sfr SFR_AAH    =   0xAA;
            =3 sfr SFR_ABH    =   0xAB;
            =3 sfr SFR_ACH    =   0xAC;
            =3 sfr SFR_ADH    =   0xAD;
            =3 sfr SFR_AEH    =   0xAE;
            =3 sfr SFR_AFH    =   0xAF;
            =3 sfr SFR_B0H    =   0xB0;
            =3 sfr SFR_B1H    =   0xB1;
            =3 sfr SFR_B2H    =   0xB2;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 79  

            =3 sfr SFR_B3H    =   0xB3;
            =3 sfr SFR_B4H    =   0xB4;
            =3 sfr SFR_B5H    =   0xB5;
            =3 sfr SFR_B6H    =   0xB6;
            =3 sfr SFR_B7H    =   0xB7;
            =3 sfr SFR_B8H    =   0xB8;
            =3 sfr SFR_B9H    =   0xB9;
            =3 sfr SFR_BAH    =   0xBA;
            =3 sfr SFR_BBH    =   0xBB;
            =3 sfr SFR_BCH    =   0xBC;
            =3 sfr SFR_BDH    =   0xBD;
            =3 sfr SFR_BEH    =   0xBE;
            =3 sfr SFR_BFH    =   0xBF;
            =3 sfr SFR_C0H    =   0xC0;
            =3 sfr SFR_C1H    =   0xC1;
            =3 sfr SFR_C2H    =   0xC2;
            =3 sfr SFR_C3H    =   0xC3;
            =3 sfr SFR_C4H    =   0xC4;
            =3 sfr SFR_C5H    =   0xC5;
            =3 sfr SFR_C6H    =   0xC6;
            =3 sfr SFR_C7H    =   0xC7;
            =3 sfr SFR_C8H    =   0xC8;
            =3 sfr SFR_C9H    =   0xC9;
            =3 sfr SFR_CAH    =   0xCA;
            =3 sfr SFR_CBH    =   0xCB;
            =3 sfr SFR_CCH    =   0xCC;
            =3 sfr SFR_CDH    =   0xCD;
            =3 sfr SFR_CEH    =   0xCE;
            =3 sfr SFR_CFH    =   0xCF;
            =3 sfr SFR_D0H    =   0xD0;
            =3 sfr SFR_D1H    =   0xD1;
            =3 sfr SFR_D2H    =   0xD2;
            =3 sfr SFR_D3H    =   0xD3;
            =3 sfr SFR_D4H    =   0xD4;
            =3 sfr SFR_D5H    =   0xD5;
            =3 sfr SFR_D6H    =   0xD6;
            =3 sfr SFR_D7H    =   0xD7;
            =3 sfr SFR_D8H    =   0xD8;
            =3 sfr SFR_D9H    =   0xD9;
            =3 sfr SFR_DAH    =   0xDA;
            =3 sfr SFR_DBH    =   0xDB;
            =3 sfr SFR_DCH    =   0xDC;
            =3 sfr SFR_DDH    =   0xDD;
            =3 sfr SFR_DEH    =   0xDE;
            =3 sfr SFR_DFH    =   0xDF;
            =3 sfr SFR_E0H    =   0xE0;
            =3 sfr SFR_E1H    =   0xE1;
            =3 sfr SFR_E2H    =   0xE2;
            =3 sfr SFR_E3H    =   0xE3;
            =3 sfr SFR_E4H    =   0xE4;
            =3 sfr SFR_E5H    =   0xE5;
            =3 sfr SFR_E6H    =   0xE6;
            =3 sfr SFR_E7H    =   0xE7;
            =3 sfr SFR_E8H    =   0xE8;
            =3 sfr SFR_E9H    =   0xE9;
            =3 sfr SFR_EAH    =   0xEA;
            =3 sfr SFR_EBH    =   0xEB;
            =3 sfr SFR_ECH    =   0xEC;
            =3 sfr SFR_EDH    =   0xED;
            =3 sfr SFR_EEH    =   0xEE;
            =3 sfr SFR_EFH    =   0xEF;
            =3 sfr SFR_F0H    =   0xF0;
            =3 sfr SFR_F1H    =   0xF1;
            =3 sfr SFR_F2H    =   0xF2;
            =3 sfr SFR_F3H    =   0xF3;
            =3 sfr SFR_F4H    =   0xF4;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 80  

            =3 sfr SFR_F5H    =   0xF5;
            =3 sfr SFR_F6H    =   0xF6;
            =3 sfr SFR_F7H    =   0xF7;
            =3 sfr SFR_F8H    =   0xF8;
            =3 sfr SFR_F9H    =   0xF9;
            =3 sfr SFR_FAH    =   0xFA;
            =3 sfr SFR_FBH    =   0xFB;
            =3 sfr SFR_FCH    =   0xFC;
            =3 sfr SFR_FDH    =   0xFD;
            =3 sfr SFR_FEH    =   0xFE;
            =3 sfr SFR_FFH    =   0xFF;
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 extern UINT8 XRAM g_ucSFR[256];
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 UINT8 SFRGetRegMapDataNormal(UINT8 ucAddr);
            =3 void Test_SFR();
            =3 #else
  171       =3 #define Test_SFR /##/
  172       =3 #define SFRGetRegMapDataNormal(x)  /##/
  173       =3 #endif
  174       =3 
  175       =3 #endif
  176       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R),All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_Reg.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-23
    9       =3 *
   10       =3 *  Abstract: Please describe the interface in detail for this module
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_REG_H_
   16       =3 #define _TEST_REG_H_
   17       =3 
   18       =3 /* Conditional Compiler Options */
   19       =3 /*******************************************************************************
   20       =3 * Included files
   21       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   22       =3 /*******************************************************************************
   22       =3 * Copyright (C) 2013-2014, FocalTech Systems (R),All Rights Reserved.
   22       =3 *
   22       =3 * File Name: Test_Reg.h
   22       =3 *
   22       =3 *    Author: xinkunpeng
   22       =3 *
   22       =3 *   Created: 2014-04-23
   22       =3 *
   22       =3 *  Abstract: Please describe the interface in detail for this module
   22       =3 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 81  

   22       =3 * Reference:
   22       =3 *
   22       =3 *******************************************************************************/
   22       =3 #ifndef _TEST_REG_H_
   22       =3 #define _TEST_REG_H_
   22       =3 
   22       =3 /* Conditional Compiler Options */
   22       =3 /*******************************************************************************
   22       =3 * Included files
   22       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   23       =3 
   24       =3 /*******************************************************************************
   25       =3 * Global constant and macro definitions using #define
   26       =3 *******************************************************************************/
   27       =3 
   28       =3 /*******************************************************************************
   29       =3 * Global structures, unions and enumerations using typedef
   30       =3 *******************************************************************************/
   31       =3 
   32       =3 /*******************************************************************************
   33       =3 * Global variable extern declarations
   34       =3 *******************************************************************************/
   35       =3 
   36       =3 /*******************************************************************************
   37       =3 * Global function prototypes
   38       =3 *******************************************************************************/
   39       =3 #if _TEST_SPI0_REG_EN
            =3 void Test_Spi0Reg(void);
            =3 #else
   42       =3 #define Test_Spi0Reg    /##/
   43       =3 #endif
   44       =3 
   45       =3 #if _TEST_XSI_REG_EN
            =3 void Test_XsiReg(void);
            =3 #else
   48       =3 #define Test_XsiReg    /##/
   49       =3 #endif
   50       =3 
   51       =3 #if _TEST_XBUS_REG_EN
            =3 void Test_XbusReg(void);
            =3 #else
   54       =3 #define Test_XbusReg   /##/
   55       =3 #endif
   56       =3 
   57       =3 #if _TEST_CAL_REG_EN
            =3 void Test_CalReg(void);
            =3 #else
   60       =3 #define Test_CalReg    /##/
   61       =3 #endif
   62       =3 
   63       =3 #if _TEST_AFE_REG_EN
            =3 void Test_AfeReg(void);
            =3 #else
   66       =3 #define Test_AfeReg    /##/
   67       =3 #endif
   68       =3 
   69       =3 #if _TEST_ASM_REG_EN
            =3 void Test_AsmReg(void);
            =3 #else
   72       =3 #define Test_AsmReg    /##/
   73       =3 #endif
   74       =3 #if _TEST_AFE_RAM_EN
            =3 #define  TEST_TAB_RAM_EN          1   // tab ram enble
            =3 #define  TEST_RPT_RAM_EN          1   // rpt ram enble
            =3 #define  TEST_ACC_RAM4_EN         1   // acc ram4 enble
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 82  

            =3 #define  TEST_ACC_RAM3_EN         1   // acc ram3 enble
            =3 #define  TEST_ACC_RAM2_EN         1   // acc ram3 enble
            =3 #define  TEST_ACC_RAM1_EN         1   // acc ram2 enble
            =3 
            =3 
            =3 void Test_Afe_Ram();
            =3 #else
   85       =3 #define  Test_Afe_Ram   /##/
   86       =3 #endif
   87       =3 
   88       =3 #if _TEST_LCD_REG_EN
            =3 void Test_LcdReg(void);
            =3 #else
   91       =3 #define Test_LcdReg    /##/
   92       =3 #endif
   93       =3 
   94       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_I2c.h
    5       =3 *
    6       =3 *    Author:
    7       =3 *
    8       =3 *   Created: 2014-04-28
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_I2C_H__
   16       =3 #define _TEST_I2C_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_I2c.h
   21       =3 *
   21       =3 *    Author:
   21       =3 *
   21       =3 *   Created: 2014-04-28
   21       =3 *
   21       =3 *  Abstract:
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_I2C_H__
   21       =3 #define _TEST_I2C_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_I2C_EN
            =3 
            =3 /*******************************************************************************
            =3 * Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 83  

            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_I2C(void);
            =3 void DrvI2cInit(void);
            =3 #else
   43       =3 #define Test_I2C()       /##/
   44       =3 #define DrvI2cInit()     /##/
   45       =3 #endif
   46       =3 
   47       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_i2c_wakeup.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-29
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef TEST_I2C_WAKEUP_H__
   19       =3 #define TEST_I2C_WAKEUP_H__
   20       =3 
   21       =3 
   22       =3 /*******************************************************************************
   23       =3 * 1.Included files
   24       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   25       =3 /*******************************************************************************
   25       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
   25       =3 *
   25       =3 * File Name: Test_i2c_wakeup.h
   25       =3 *
   25       =3 *    Author: xinkunpeng
   25       =3 *
   25       =3 *   Created: 2014-04-29
   25       =3 *
   25       =3 *  Abstract:
   25       =3 *
   25       =3 * Reference:
   25       =3 *
   25       =3 * Version:
   25       =3 * 0.1:
   25       =3 *
   25       =3 *******************************************************************************/
   25       =3 #ifndef TEST_I2C_WAKEUP_H__
   25       =3 #define TEST_I2C_WAKEUP_H__
   25       =3 
   25       =3 
   25       =3 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 84  

   25       =3 * 1.Included files
   25       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   26       =3 
   27       =3 #if _TEST_I2C_WK_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_I2CWakeup(void);
            =3 #else
   46       =3 #define Test_I2CWakeup /##/
   47       =3 #endif
   48       =3 
   49       =3 #endif
   50       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: test_gpio_wakeup.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2013-04-25
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_GPIO5_INT_H__
   19       =3 #define __TEST_GPIO5_INT_H__
   20       =3 
   21       =3 
   22       =3 /*******************************************************************************
   23       =3 * 1.Included files
   24       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   25       =3 /*******************************************************************************
   25       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   25       =3 *
   25       =3 * File Name: test_gpio_wakeup.h
   25       =3 *
   25       =3 *    Author: xinkunpeng
   25       =3 *
   25       =3 *   Created: 2013-04-25
   25       =3 *
   25       =3 *  Abstract:
   25       =3 *
   25       =3 * Reference:
   25       =3 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 85  

   25       =3 * Version:
   25       =3 * 0.1:
   25       =3 *
   25       =3 *******************************************************************************/
   25       =3 #ifndef __TEST_GPIO5_INT_H__
   25       =3 #define __TEST_GPIO5_INT_H__
   25       =3 
   25       =3 
   25       =3 /*******************************************************************************
   25       =3 * 1.Included files
   25       =3 *******************************************************************************/
   25       =3 #include "CfgGlobal.h"
   26       =3 
   27       =3 #if _TEST_GPIO_WK_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Int0Wakeup(void);
            =3 #else
   46       =3 #define Test_Int0Wakeup /##/
   47       =3 #endif
   48       =3 
   49       =3 #endif
   50       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_int_nest.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-29
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *   Version: 0.1
   15       =3 *
   16       =3 *******************************************************************************/
   17       =3 #ifndef __TEST_INT_NEST_H__
   18       =3 #define __TEST_INT_NEST_H__
   19       =3 
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_int_nest.h
   24       =3 *
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 86  

   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-04-29
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 *   Version: 0.1
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_INT_NEST_H__
   24       =3 #define __TEST_INT_NEST_H__
   24       =3 
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_INT_NEST_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_int_nest(void);
            =3 #else
   45       =3 #define Test_int_nest /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_spi.h
    5       =3 *
    6       =3 *    Author: tangsujun
    7       =3 *
    8       =3 *   Created: 2016-12-26
    9       =3 *
   10       =3 *  Abstract: 
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_SPI_H__
   16       =3 #define _TEST_SPI_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 87  

   21       =3 *
   21       =3 * File Name: Test_spi.h
   21       =3 *
   21       =3 *    Author: tangsujun
   21       =3 *
   21       =3 *   Created: 2016-12-26
   21       =3 *
   21       =3 *  Abstract: 
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_SPI_H__
   21       =3 #define _TEST_SPI_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 /*******************************************************************************
   24       =3 * Global constant and macro definitions using #define
   25       =3 *******************************************************************************/
   26       =3 #if _TEST_SPI_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_SPI_Flash();
            =3 void SPI_Init(void);
            =3 BOOLEAN SPIFlash_FastRead(UINT32 addr, UINT8 far *pBuf, UINT32 len);
            =3 #else
   42       =3 #define Test_SPI_Flash() /##/
   43       =3 #define SPI_Init(void)   /##/
   44       =3 #endif
   45       =3 
   46       =3 #endif
            =1 
            =1 #if _TEST_CAL_EN
            =1 /*******************************************************************************
            =1 * 2.Global constant and macro definitions using #define
            =1 *******************************************************************************/
            =1 /* ¿ÉÒÔÒ»Æð²âÊÔÄ£¿é */
            =1 #if 0
            =1 #define  TEST_CAL_ADD_EN        0   // ¼Ó·¨
            =1 #define  TEST_CAL_SUB_EN        0   // ¼õ·¨
            =1 #define  TEST_CAL_AMP_EN        0   // ³Ë·¨
            =1 #define  TEST_CAL_DIV_EN        0   // ³ý·¨  
            =1 #define  TEST_CAL_MOV_EN        0   // ²»×ªÖÃ°áÒÆ
            =1 #define  TEST_CAL_MOV2_EN       0   // ×ªÖÃ°áÒÆ(¾ØÕó×ªÖÃ°áÒÆÊ±×îºÃTxNum,RxNumÓëTxLen,RxLenÏàµÈ)  
            =1 #define  TEST_CAL_MUL2_1_EN     0   // Ò»Î¬¾ØÕó³Ë·¨      (Tx,Rx¾ù±ØÐë<=18)       
            =1 #define  TEST_CAL_MUL2_2_EN     0   // ¶þÎ¬¾ØÕó³Ë·¨
            =1 #define  TEST_CAL_COM_1_EN      0   // ¾ÉµÄ²¹³¥ÔËËã  
            =1 #define  TEST_CAL_COM_2_EN      0   // ÐÂµÄ²¹³¥ÔËËã 
            =1 #define  TEST_CAL_LDS_EN        0   // ¾ØÕóµã¶ÔÓ¦¾àÀëÔËËã
            =1 #define  TEST_CAL_MDS_EN        0   // Á½ÁÐµãµÄ¾ØÕóÔËËã  (Tx,Rx¾ù±ØÐë<=11)
            =1 #define  TEST_CAL_CHK_EN        0   // ¾ùÔÈ¶È¼ì²é
            =1 #define  TEST_CAL_CRC_EN        0   // CRCÐ£Ñé
            =1 #define  TEST_CAL_XORSUM_EN     0   // xorÒì»òÐ£Ñé
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 88  

            =1 #define  TEST_CAL_AMOV_EN       0  // AMOV    (ÒÔÏÂÎªÀ©Õ¹Ëã·¨)
            =1 #define  TEST_CAL_AVG_TX_EN     0   // ÐÐ¾ùÖµËã·¨ 
            =1 #define  TEST_CAL_AVG_RX_EN     0   // ÁÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG2_TX_EN    0   // È¥µô·¶Î§ÍâµÄÖµºóÐÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG2_RX_EN    0   // È¥µô·¶Î§ÍâµÄÖµºóÁÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG_ARAM_EN   0
            =1 #define  TEST_CAL_MIN_TX_EN     0   // ÐÐ×îÐ¡ÖµËã·¨
            =1 #define  TEST_CAL_MIN_RX_EN     0   // ÁÐ×îÐ¡ÖµËã·¨
            =1 #define  TEST_CAL_MAX_TX_EN     0   // ÐÐ×î´óÖµËã·¨
            =1 #define  TEST_CAL_MAX_RX_EN     0   // ÁÐ×î´óÖµËã·¨
            =1 #define  TEST_CAL_COUNT_EN      0   // ¾ØÕó´¦ÓÚÄ³¸öÇø¼äµÄ¸öÊý[max,min]
            =1 #define  TEST_CAL_SUBCONST_EN   0   // ¼ÆËãÃ¿ÐÐ(Tx)»òÕßÃ¿ÁÐ(Rx)µÄ¼õÈ¥Ò»¸ö³£Êý
            =1 #define  TEST_CAL_MAC_1_EN      0   // ×ÓÇøÓòÄ£Ê½MAC
            =1 #define  TEST_CAL_MAC_2_EN      0   // ÖØ¹¹Ä£Ê½MAC
            =1 #define  TEST_CAL_ID_EN         0   // IDÆ¥Åä
            =1 #define  TEST_CAL_PKS_EN        0   // Peak Search
            =1 
            =1 
            =1 #else//Auto
            =1 #define  TEST_CAL_ADD_EN        1   // ¼Ó·¨
            =1 #define  TEST_CAL_SUB_EN        1   // ¼õ·¨
            =1 #define  TEST_CAL_AMP_EN        1   // ³Ë·¨
            =1 #define  TEST_CAL_DIV_EN        1   // ³ý·¨
            =1 #define  TEST_CAL_MOV_EN        1   // ²»×ªÖÃ°áÒÆ
            =1 #define  TEST_CAL_MOV2_EN       1   // ×ªÖÃ°áÒÆ(¾ØÕó×ªÖÃ°áÒÆÊ±×îºÃTxNum,RxNumÓëTxLen,RxLenÏàµÈ)
            =1 #define  TEST_CAL_MUL2_1_EN     1   // Ò»Î¬¾ØÕó³Ë·¨      
            =1 #define  TEST_CAL_MUL2_2_EN     1   // ¶þÎ¬¾ØÕó³Ë·¨
            =1 #define  TEST_CAL_COM_1_EN      1   // ¾ÉµÄ²¹³¥ÔËËã
            =1 #define  TEST_CAL_COM_2_EN      1   // ÐÂµÄ²¹³¥ÔËËã 
            =1 #define  TEST_CAL_LDS_EN        1   // ¾ØÕóµã¶ÔÓ¦¾àÀëÔËËã
            =1 #define  TEST_CAL_MDS_EN        1   // Á½ÁÐµãµÄ¾ØÕóÔËËã 
            =1 #define  TEST_CAL_CHK_EN        1   // ¾ùÔÈ¶È¼ì²é
            =1 #define  TEST_CAL_CRC_EN        1   // CRCÐ£Ñé
            =1 #define  TEST_CAL_XORSUM_EN     1   // xorÒì»òÐ£Ñé
            =1 
            =1 #define  TEST_CAL_AMOV_EN       0   // AMOV    (ÒÔÏÂÎªÀ©Õ¹Ëã·¨)
            =1 #define  TEST_CAL_AVG_TX_EN     1   // ÐÐ¾ùÖµËã·¨ 
            =1 #define  TEST_CAL_AVG_RX_EN     1   // ÁÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG2_TX_EN    1   // È¥µô·¶Î§ÍâµÄÖµºóÐÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG2_RX_EN    1   // È¥µô·¶Î§ÍâµÄÖµºóÁÐ¾ùÖµËã·¨
            =1 #define  TEST_CAL_AVG_ARAM_EN   0
            =1 #define  TEST_CAL_MIN_TX_EN     1   // ÐÐ×îÐ¡ÖµËã·¨
            =1 #define  TEST_CAL_MIN_RX_EN     1   // ÁÐ×îÐ¡ÖµËã·¨
            =1 #define  TEST_CAL_MAX_TX_EN     1   // ÐÐ×î´óÖµËã·¨
            =1 #define  TEST_CAL_MAX_RX_EN     1   // ÁÐ×î´óÖµËã·¨
            =1 #define  TEST_CAL_COUNT_EN      1   // ¾ØÕó´¦ÓÚÄ³¸öÇø¼äµÄ¸öÊý[max,min]
            =1 #define  TEST_CAL_SUBCONST_EN   1   // ¼ÆËãÃ¿ÐÐ(Tx)»òÕßÃ¿ÁÐ(Rx)µÄ¼õÈ¥Ò»¸ö³£Êý 
            =1 #define  TEST_CAL_MAC_1_EN      1  // ×ÓÇøÓòÄ£Ê½MAC
            =1 #define  TEST_CAL_MAC_2_EN      1  // ÖØ¹¹Ä£Ê½MAC
            =1 #define  TEST_CAL_ID_EN         1  // IDÆ¥Åä
            =1 #define  TEST_CAL_PKS_EN        1  // Peak Search
            =1 #endif
            =1 
            =1 #if 1//8836ÐÂÔöÄ£¿é
            =1 /* µ¥¶À²âÊÔÄ£¿é */
            =1 
            =1 #define TEST_CAL_CMP_EN         1  //¾ØÕó±È½ÏËã·¨
            =1 #define TEST_CAL_MUL3_EN        1  //Êý×éÁ½Á½Ïà³ËËã·¨
            =1 #else
            =1 /* µ¥¶À²âÊÔÄ£¿é */
            =1 #define TEST_CAL_CMP_EN         0   //¾ØÕó±È½ÏËã·¨
            =1 #define TEST_CAL_MUL3_EN        0   //Êý×éÁ½Á½Ïà³ËËã·¨
            =1 
            =1 #endif
            =1 
            =1 #define  TEST_CAL_INT_EN        0   /* CalÄ£¿éÖÐ¶Ï´ò¶Ï²âÊÔ,RTC´ò¶Ï£¬±ØÐë´ò¿ªTEST_CAL_ADD_EN */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 89  

            =1 #define  TEST_CAL_MOV_INT_EN    0   /* CalÄ£¿éÖÐ¶Ï´ò¶Ï²âÊÔ,RTC´ò¶Ï£¬±ØÐë´ò¿ªTEST_CAL_MOV_EN */
            =1 #define  TEST_SPI0_CAL_INT_EN   0   /* CalÄ£¿éÖÐ¶Ï´ò¶Ï²âÊÔ,SPI0´ò¶Ï */
            =1 #define  TEST_SPI0_DMA_INT_EN   0   /* CalÄ£¿éÖÐ¶Ï´ò¶Ï²âÊÔ,Æô¶¯SPI0 DMA,±ØÐë´ò¿ªTEST_SPI0_CAL_INT_EN */
            =1 #define  TEST_RTC_CAL_EN        1
            =1 #define  TEST_LCD_CAL_EN        0
            =1 #define  TEST_ASM_CAL_EN        1
            =1 #define  TEST_IIC_CAL_EN        1
            =1 
            =1 
            =1 
            =1 /*******************************************************************************
            =1 * 3.Global structures, unions and enumerations using typedef
            =1 *******************************************************************************/
            =1 
            =1 /*******************************************************************************
            =1 * 4.Global variable extern declarations
            =1 *******************************************************************************/
            =1 //extern ST_FrameData  *g_stFrmData; // Frame Data
            =1 
            =1 /*******************************************************************************
            =1 * 5.Global function prototypes
            =1 *******************************************************************************/
            =1 void Test_CAL(void);
            =1 #else
            =1 #define Test_CAL /##/
            =1 #endif
            =1 
            =1 #endif // _DRV_MC_DATA_COLLECT_H_
  142       =1 
  108       =2 /*******************************************************************************
  108       =2 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
  108       =2 *
  108       =2 * File Name: CfgGlobal.h
  108       =2 *
  108       =2 *    Author: xinkunpeng
  108       =2 *
  108       =2 *   Created: 2014-04-18
  108       =2 *
  108       =2 *  Abstract:
  108       =2 *
  108       =2 * Reference: Transplant from FT5422 by xinkunpeng
  108       =2 *
  108       =2 *   Version: 0.2
  108       =2 *
  108       =2 *******************************************************************************/
  108       =2 #ifndef GLOBAL_CONFIG_H
  108       =2 #define GLOBAL_CONFIG_H
  108       =2 
  108       =2 /*******************************************************************************
  108       =2 * 2.Global constant and macro definitions using #define
  108       =2 *******************************************************************************/
  108       =2 
  108       =2 #define _SPI_FLASH_EN                   1      // spi flash--±ØÐë¿ª
  108       =2 #define _LCD_RELOAD_EN                  1      // APP´ÓFlashµ¼ÈëLCD_config
  108       =2 
  108       =2 #define TEST_MODE                       1
  108       =2 
  108       =2 #if TEST_MODE
  108       =2 #define _TEST_SFR_EN                    0       /* test the SFR read and write */
  108       =2 #define _TEST_DRAM_EN                   0       /* test dram read and write */
  108       =2 #define _TEST_PROM_EN                   0       /* test prom read only */   
  108       =2 #define _TEST_ARAM_EN                   0       /* test asmram read and write */
  108       =2 #define _TEST_XSI_REG_EN                0       /* XSI¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
  108       =2 #define _TEST_SPI0_REG_EN               0       /* SPI0¼Ä´æÆ÷¶ÁÐ´²âÊÔ */ 
  108       =2 #define _TEST_XBUS_REG_EN               0       /* XBUS¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
  108       =2 #define _TEST_ASM_REG_EN                0       /* ASM¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 90  

  108       =2 #define _TEST_CAL_REG_EN                0       /* CAL¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
  108       =2 #define _TEST_AFE_REG_EN                0       /* AFE¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
  108       =2 #define _TEST_LCD_REG_EN                0       /* LCD¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
  108       =2 #define _TEST_SPI_EN                    0       /* test SPI read  */
  108       =2 #define _TEST_LED_EN                    0       /* test the led */ 
  108       =2 #define _TEST_I2C_EN                    0       /* test I2C read and clk */
  108       =2 #define _TEST_AFE_RAM_EN                0       /* test the AFE ram buffer,²âÊÔÌ«ºÄÊ±¼ä×îºÃµ¥¶À½øÐÐ²âÊÔ *
             -/
  108       =2 #else
  108       =2 #define _TEST_SFR_EN                    1
  108       =2 #define _TEST_DRAM_EN                   1
  108       =2 #define _TEST_PROM_EN                   1
  108       =2 #define _TEST_ARAM_EN                   1
  108       =2 #define _TEST_SPI0_REG_EN               1
  108       =2 #define _TEST_XSI_REG_EN                1
  108       =2 #define _TEST_ASM_REG_EN                1      
  108       =2 #define _TEST_XBUS_REG_EN               1
  108       =2 #define _TEST_CAL_REG_EN                1
  108       =2 #define _TEST_AFE_REG_EN                1
  108       =2 #define _TEST_LCD_REG_EN                0
  108       =2 #define _TEST_SPI_EN                    1
  108       =2 #define _TEST_LED_EN                    1
  108       =2 #define _TEST_I2C_EN                    1
  108       =2 #define _TEST_AFE_RAM_EN                1
  108       =2 #endif
  108       =2 #define _TEST_UART_EN                   0
  108       =2 #define _TEST_SOFT_RST_EN               0     /* Èí¼þ¸´Î»²âÊÔ*/
  108       =2 #define _TEST_WDT_EN                    0     /* WDTµ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_RTC_EN                    0     /* ºÍCNTÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_CNT_EN                    0     /* ºÍRTCÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_GPIO_EN                   0     /* gpioÐèÒªÅÐ¶ÏÆäinput outputÒÔ¼°¸ßµÍµçÆ½ÇÐ»»µÄ×´Ì¬£¬Ðè·Ö±ð
             -µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_TIMER_EN                  0     /* Timerµ¥¶À½øÐÐ²âÊÔ */ 
  108       =2 #define _TEST_GPIO_WK_EN                0     /* int0ÖÐ¶Ï»½ÐÑÔ´¹ý¶à,µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_I2C_WK_EN                 0     /* ºÍI2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */ 
  108       =2 #define _TEST_INT_NEST_EN               0     /* ÖÐ¶ÏÇ¶Ì×²âÊÔ,µ¥¶À½øÐÐ²âÊÔ  */
  108       =2 #define _TEST_XSI_EN                    0     /* XSI¶ÁÐ´¿½»ú²âÊÔ£¬µ¥¶À²âÊÔ */
  108       =2 #define _TEST_CAL_EN                    1     /* CALÄ£¿é,²âÊÔÄ£¿é½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_AFE_EN                    0     /* AFEÄ£¿é,²âÊÔÄÚÈÝ½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
  108       =2 #define _TEST_ROMBOOT_EN                0     /* romboot testÊ¹ÓÃËùÐèÏà¹Ø²âÊÔbin */
  108       =2 #define _TEST_XBUS_EN                   0     /* XBUS¶ÁÐ´²âÊÔ*/
  108       =2 #define _TEST_ROMECC_EN                 0     /* ¼ÆËãeccºÍprom membistµÄ½á¹û±È½Ï*/
  108       =2 #define _TEST_SPI0_EN                   0     /* test SPI0   */
  108       =2 #define _TEST_SPI0_DMA_EN               0     /* test SPI0_dma */
  108       =2 #define _TEST_SPI0_WK_EN                0     /* ºÍSPI0,I2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */   
  108       =2 #define _TEST_DEBUGOUT_EN               0     /* ²âÊÔÄÚ²¿ÐÅºÅ£¬µ¥¶À½øÐÐ²âÊÔ*/
  108       =2 /*******************************************************************************
  108       =2 * 1.Included files
  108       =2 *******************************************************************************/
  108       =2 #include "Typedef.h"
  108       =2 #include "FT8836.h"
  108       =2 #include "FT8836_Reg.h"
  108       =2 #include "Drv_mcu.h"
  108       =2 #include "Drv_XSI.h"
  108       =2 #include "Drv_XBUS.h"
  108       =2 #include "uart.h"
  108       =2 
  108       =2 #include "Test_GPIO.h"
  108       =2 #include "Test_WDT.h"
  108       =2 #include "Test_RTC.h"
  108       =2 #include "Test_timer.h"
  108       =2 #include "Test_Counter.h"
  108       =2 #include "Test_Prom.h"
  108       =2 #include "Test_Dram.h"
  108       =2 #include "Test_Aram.h"
  108       =2 #include "Test_SFR.h"
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 91  

  108       =2 #include "Test_Reg.h"
  108       =2 #include "Test_I2C.h"
  108       =2 #include "Test_i2c_wakeup.h"
  108       =2 #include "Test_gpio_wakeup.h"
  108       =2 #include "Test_int_nest.h"
  108       =2 #include "Test_SPI.h"
  108       =2 #include "Test_CAL.h"
  109       =2 #include "Test_romboot.h"
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_romboot.h
    5       =3 *
    6       =3 *    Author:
    7       =3 *
    8       =3 *   Created: 2014-05-07
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *******************************************************************************/
   14       =3 #ifndef _TEST_ROMBOOT_H__
   15       =3 #define _TEST_ROMBOOT_H__
   16       =3 
   17       =3 /*******************************************************************************
   18       =3 * Included files
   19       =3 *******************************************************************************/
   20       =3 #include "CfgGlobal.h"
            =2 #include "Test_Afe.h"
            =2 #include "Test_LED.h"
            =2 #include "Test_Xbus.h"
            =2 #include "Test_RomEcc.h"
            =2 #include "Test_Uart.h"
            =2 #include "Test_SOFT_RST.h"
            =2 #include "Test_spi0.h"
            =2 #include "Test_spi0_wakeup.h"
            =2 #include "Test_SPI0_dma.h"
            =2 #include "checksum.h"
            =2 #include "Test_DebugOut.h"
            =2 /*******************************************************************************
            =2 * 3.Global structures, unions and enumerations using typedef
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 4.Global variable extern declarations
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 5.Global function prototypes
            =2 *******************************************************************************/
            =2 
            =2 #endif //GLOBAL_CONFIG_H
   20       =3 /*******************************************************************************
   20       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   20       =3 *
   20       =3 * File Name: Test_romboot.h
   20       =3 *
   20       =3 *    Author:
   20       =3 *
   20       =3 *   Created: 2014-05-07
   20       =3 *
   20       =3 *  Abstract:
   20       =3 *
   20       =3 * Reference:
   20       =3 *******************************************************************************/
   20       =3 #ifndef _TEST_ROMBOOT_H__
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 92  

   20       =3 #define _TEST_ROMBOOT_H__
   20       =3 
   20       =3 /*******************************************************************************
   20       =3 * Included files
   20       =3 *******************************************************************************/
   20       =3 #include "CfgGlobal.h"
   21       =3 
   22       =3 /*******************************************************************************
   23       =3 * Global constant and macro definitions using #define
   24       =3 *******************************************************************************/
   25       =3 
   26       =3 #if _TEST_ROMBOOT_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_romboot(void);
            =3 #else
   40       =3 #define Test_romboot()  /##/
   41       =3 #endif
   42       =3 
   43       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_Afe.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-05-15
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *   Version:
   15       =3 *******************************************************************************/
   16       =3 #ifndef __TEST_AFE_H__
   17       =3 #define __TEST_AFE_H__
   18       =3 
   19       =3 /*******************************************************************************
   20       =3 * 1.Included files
   21       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   22       =3 /*******************************************************************************
   22       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   22       =3 *
   22       =3 * File Name: Test_Afe.h
   22       =3 *
   22       =3 *    Author: xinkunpeng
   22       =3 *
   22       =3 *   Created: 2014-05-15
   22       =3 *
   22       =3 *  Abstract:
   22       =3 *
   22       =3 * Reference:
   22       =3 *
   22       =3 *   Version:
   22       =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 93  

   22       =3 #ifndef __TEST_AFE_H__
   22       =3 #define __TEST_AFE_H__
   22       =3 
   22       =3 /*******************************************************************************
   22       =3 * 1.Included files
   22       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   23       =3 
   24       =3 
   25       =3 /*******************************************************************************
   26       =3 * 2.Global constant and macro definitions using #define
   27       =3 *******************************************************************************/
   28       =3 
   29       =3 #define LCD_BUSY_FALL_INT0          BITn(15)
   30       =3 #define LCD_BUSY_RISE_INT0          BITn(14)
   31       =3 #define LCD_PANEL_CONFLICT_INT0     BITn(13)
   32       =3 #define LCD_DSTB_FAIL_INT0          BITn(12)
   33       =3 #define LCD_DSTB_RISE_INT0          BITn(11)
   34       =3 #define LCD_SYNC_MISS_FALL_INT0     BITn(10)
   35       =3 #define LCD_SYNC_MISS_RISE_INT0     BITn(9)
   36       =3 #define ARAM_READY_INT0             BITn(8)
   37       =3 #define FRAME_END_INT0              BITn(7)
   38       =3 #define AFE_DET_INT0                BITn(6)
   39       =3 #define LCD_VSTART_INT0             BITn(5)
   40       =3 #define LCD_VMID_INT0               BITn(4)
   41       =3 #define LCD_VEND_INT0               BITn(3)
   42       =3 #define LCD_VBLANK_INT0             BITn(2)
   43       =3 #define LCD_RUN_FALL_INT0           BITn(1)
   44       =3 #define LCD_RUN_RISE_INT0           BITn(0)
   45       =3 
   46       =3 #define LCD_HW_MON_TIMEOUT_INT1     BITn(14) 
   47       =3 #define LCD_LPF_MODE_EN_FALL_INT1   BITn(13)
   48       =3 #define LCD_LPF_MODE_EN_RISE_INT1   BITn(12)
   49       =3 #define LCD_STB_TICK_INT1           BITn(11)
   50       =3 #define LCD_ODD_EVEN_FALL_INT1      BITn(10)
   51       =3 #define LCD_ODD_EVEN_RISE_INT1      BITn(9)
   52       =3 #define LCD_VDO_MODE_FALL_INT1      BITn(8)
   53       =3 #define LCD_VDO_MODE_RISE_INT1      BITn(7)  
   54       =3 #define LCD_IDLE_MODE_FALL_INT1     BITn(6)  
   55       =3 #define LCD_IDLE_MODE_RISE_INT1     BITn(5)
   56       =3 #define LCD_3D_MODE_FALL_INT1       BITn(4)
   57       =3 #define LCD_3D_MODE_RISE_INT1       BITn(3)
   58       =3 #define LCD_RUN_INT1                BITn(2)
   59       =3 #define LCD_DSTB_INT1               BITn(1)
   60       =3 
   61       =3 
   62       =3 /* Asm Sta */
   63       =3 #define LCD_PANEL_CONFLICT_STA      BITn(14)
   64       =3 #define LCD_DSTB_STA                BITn(13)
   65       =3 #define LCD_SYNC_MISS_STA           BITn(12)
   66       =3 #define LCD_FRAME_END_STA           BITn(11)
   67       =3 #define LCD_TCH_DET_STA             BITn(10)
   68       =3 #define LCD_STB_TICK_STA            BITn(9)
   69       =3 #define LCD_VSTART_STA              BITn(8)
   70       =3 #define LCD_VMID_STA                BITn(7)
   71       =3 #define LCD_VEND_STA                BITn(6)
   72       =3 #define LCD_VBLANK_STA              BITn(5)
   73       =3 #define LCD_ODD_EVEN_STA            BITn(4)
   74       =3 #define LCD_VDO_MODE_STA            BITn(3)
   75       =3 #define LCD_IDLE_MODE_STA           BITn(2)
   76       =3 #define LCD_3D_MODE_STA             BITn(1)
   77       =3 #define LCD_RUN_STA                 BITn(0)
   78       =3 
   79       =3 /*Scan Sta1*/
   80       =3 #define TP_BUSY_STA                 BITn(11) // [11]  RO: TP busyµÄÊµÊ±×´Ì¬
   81       =3 #define LCD_BUSY_STA                BITn(10) // [10]  RO: LCD busyµÄÊµÊ±×´Ì¬   
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 94  

   82       =3 
   83       =3 /*Scan Sta2*/
   84       =3 #define LPF_MODE_TP_TURBO_ACK       BITn(13) // [13]  RO: 0:²»¿ª¿Ó  1:¿ª¿Ó
   85       =3 #define VB_MODE_ACK                 BITn(12) // [12]  RO: 0:Ð¡¿Ó    1:´ó¿Ó 
   86       =3 
   87       =3 
   88       =3 
   89       =3 /*******************************************************************************
   90       =3 * 3.Global structures, unions and enumerations using typedef
   91       =3 *******************************************************************************/
   92       =3 /* ASM_INT_FLAG0 bitÐÅÏ¢RO      0x00*/
   93       =3 typedef enum
   94       =3 {
   95       =3         BIT_LCD_BUSY_FALL_FLAG0                  = 15,
   96       =3         BIT_LCD_BUSY_RISE_FLAG0                  = 14,
   97       =3         BIT_LCD_PANEL_CONFLICT_FLAG0     = 13,
   98       =3         BIT_LCD_DSTB_FAIL_FLAG0                  = 12,
   99       =3         BIT_LCD_DSTB_RISE_FLAG0                  = 11,
  100       =3         BIT_LCD_SYNC_MISS_FALL_FLAG0     = 10,
  101       =3         BIT_LCD_SYNC_MISS_RISE_FLAG0     = 9,
  102       =3         BIT_LCD_ARAM_RDY_FLAG0                   = 8,
  103       =3         BIT_LCD_FRAME_END_FLAG0                  = 7,
  104       =3         BIT_LCD_TCH_DET_FLAG0                    = 6,
  105       =3         BIT_LCD_VSTART_FLAG0                     = 5,
  106       =3         BIT_LCD_VMID_FLAG0                               = 4,
  107       =3         BIT_LCD_VEND_FLAG0                               = 3,
  108       =3         BIT_LCD_VBLANK_FLAG0                     = 2,
  109       =3         BIT_LCD_RUN_FALL_FLAG0                   = 1,
  110       =3         BIT_LCD_RUN_RISE_FLAG0                   = 0,              
  111       =3 } ENUM_BIT_ASM_INT_FLAG0;
  112       =3 
  113       =3 /* ASM_INT_FLAG1 bitÐÅÏ¢RO      0x01*/
  114       =3 typedef enum
  115       =3 {                       
  116       =3         
  117       =3         BIT_LCD_STB_TICK_FLAG1                   = 11,
  118       =3         BIT_LCD_ODD_EVEN_FALL_FLAG1      = 10,
  119       =3         BIT_LCD_ODD_EVEN_RISE_FLAG1      = 9,
  120       =3         BIT_LCD_VDO_MODE_FALL_FLAG1      = 8,
  121       =3         BIT_LCD_VDO_MODE_RISE_FLAG1      = 7,  
  122       =3         BIT_LCD_IDLE_MODE_FALL_FLAG1     = 6,  
  123       =3         BIT_LCD_IDLE_MODE_RISE_FLAG1     = 5,
  124       =3         BIT_LCD_3D_MODE_FALL_FLAG1               = 4,
  125       =3         BIT_LCD_3D_MODE_RISE_FLAG1               = 3,
  126       =3         BIT_LCD_RUN_FLAG1                                = 2,
  127       =3         BIT_LCD_DSTB_FLAG1                               = 1,
  128       =3 } ENUM_BIT_ASM_INT_FLAG1;
  129       =3 
  130       =3 /* ASM_INT_CLR0 bitÐÅÏ¢WO 0x02*/
  131       =3 typedef enum
  132       =3 {
  133       =3         BIT_LCD_BUSY_FALL_CLR0                  = 15,
  134       =3         BIT_LCD_BUSY_RISE_CLR0                  = 14,
  135       =3         BIT_LCD_PANEL_CONFLICT_CLR0     = 13,
  136       =3         BIT_LCD_DSTB_FAIL_CLR0                  = 12,
  137       =3         BIT_LCD_DSTB_RISE_CLR0                  = 11,
  138       =3         BIT_LCD_SYNC_MISS_FALL_CLR0     = 10,
  139       =3         BIT_LCD_SYNC_MISS_RISE_CLR0     = 9,
  140       =3         BIT_LCD_ARAM_RDY_CLR0                   = 8,
  141       =3         BIT_LCD_FRAME_END_CLR0                  = 7,
  142       =3         BIT_LCD_TCH_DET_CLR0                    = 6,
  143       =3         BIT_LCD_VSTART_CLR0                     = 5,
  144       =3         BIT_LCD_VMID_CLR0                               = 4,
  145       =3         BIT_LCD_VEND_CLR0                               = 3,
  146       =3         BIT_LCD_VBLANK_CLR0                     = 2,
  147       =3         BIT_LCD_RUN_FALL_CLR0                   = 1,
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 95  

  148       =3         BIT_LCD_RUN_RISE_CLR0                   = 0,            
  149       =3 } ENUM_BIT_ASM_INT_CLR0;
  150       =3 
  151       =3 /* ASM_INT_CLR1 bitÐÅÏ¢WO 0x03*/
  152       =3 typedef enum
  153       =3 {       
  154       =3         BIT_HW_MON_TIMEOUT_CLR1                 = 14,
  155       =3         BIT_LPF_MODE_EN_FALL_CLR1               = 13,
  156       =3         BIT_LPF_MODE_EN_RISE_CLR1               = 12,
  157       =3         BIT_LCD_STB_TICK_CLR1                   = 11,    
  158       =3         BIT_LCD_ODD_EVEN_FALL_CLR1              = 10,
  159       =3         BIT_LCD_ODD_EVEN_RISE_CLR1              = 9,
  160       =3         BIT_LCD_VDO_MODE_FALL_CLR1              = 8,
  161       =3         BIT_LCD_VDO_MODE_RISE_CLR1              = 7,  
  162       =3         BIT_LCD_IDLE_MODE_FALL_CLR1     = 6,  
  163       =3         BIT_LCD_IDLE_MODE_RISE_CLR1     = 5,
  164       =3         BIT_LCD_3D_MODE_FALL_CLR1               = 4,
  165       =3         BIT_LCD_3D_MODE_RISE_CLR1               = 3,
  166       =3         BIT_LCD_RUN_CLR1                                = 2,
  167       =3         BIT_LCD_DSTB_CLR1                               = 1,   
  168       =3 } ENUM_BIT_ASM_INT_CLR1;
  169       =3 
  170       =3 /* ASM_INT_EN0 bitÐÅÏ¢0x04 */
  171       =3 typedef enum
  172       =3 {
  173       =3         BIT_LCD_BUSY_FALL_EN0              = 15,
  174       =3         BIT_LCD_BUSY_RISE_EN0              = 14,
  175       =3         BIT_LCD_PANEL_CONFLICT_EN0         = 13,
  176       =3         BIT_LCD_DSTB_FAIL_EN0              = 12,
  177       =3         BIT_LCD_DSTB_RISE_EN0              = 11,
  178       =3         BIT_LCD_SYNC_MISS_FALL_EN0         = 10,
  179       =3         BIT_LCD_SYNC_MISS_RISE_EN0         = 9,
  180       =3         BIT_LCD_ARAM_RDY_EN0               = 8,
  181       =3         BIT_LCD_FRAME_END_EN0              = 7,
  182       =3         BIT_LCD_TCH_DET_EN0                = 6,
  183       =3         BIT_LCD_VSTART_EN0                         = 5,
  184       =3         BIT_LCD_VMID_EN0                           = 4,
  185       =3         BIT_LCD_VEND_EN0                           = 3,
  186       =3         BIT_LCD_VBLANK_EN0                         = 2,
  187       =3         BIT_LCD_RUN_FALL_EN0               = 1,
  188       =3         BIT_LCD_RUN_RISE_EN0               = 0,            
  189       =3 } ENUM_BIT_ASM_INT_EN0;
  190       =3 
  191       =3 /* ASM_INT_EN1 bitÐÅÏ¢0x05 */
  192       =3 typedef enum
  193       =3 {
  194       =3         BIT_HW_MON_TIMEOUT_EN1             = 14,
  195       =3         BIT_LCD_LPF_MODE_EN_FALL_EN1   = 13,
  196       =3         BIT_LCD_LPF_MODE_EN_RISE_EN1   = 12,
  197       =3         BIT_LCD_STB_TICK_EN1               = 11,   
  198       =3         BIT_LCD_ODD_EVEN_FALL_EN1          = 10,
  199       =3         BIT_LCD_ODD_EVEN_RISE_EN1          = 9,
  200       =3         BIT_LCD_VDO_MODE_FALL_EN1          = 8,
  201       =3         BIT_LCD_VDO_MODE_RISE_EN1          = 7,  
  202       =3         BIT_LCD_IDLE_MODE_FALL_EN1         = 6,  
  203       =3         BIT_LCD_IDLE_MODE_RISE_EN1         = 5,
  204       =3         BIT_LCD_3D_MODE_FALL_EN1           = 4,
  205       =3         BIT_LCD_3D_MODE_RISE_EN1           = 3,
  206       =3         BIT_LCD_RUN_EN1                            = 2,
  207       =3         BIT_LCD_DSTB_EN1                           = 1,
  208       =3    
  209       =3 } ENUM_BIT_ASM_INT_EN1;
  210       =3 
  211       =3 /* ASM_INT_WAKE_EN0 bitÐÅÏ¢  06 */
  212       =3 typedef enum
  213       =3 {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 96  

  214       =3         BIT_LCD_BUSY_FALL_WAKE_EN0                      = 15,
  215       =3         BIT_LCD_BUSY_RISE_WAKE_EN0                      = 14,
  216       =3         BIT_LCD_PANEL_CONFLICT_WAKE_EN0         = 13,
  217       =3         BIT_LCD_DSTB_FAIL_WAKE_EN0                      = 12,
  218       =3         BIT_LCD_DSTB_RISE_WAKE_EN0                      = 11,
  219       =3         BIT_LCD_SYNC_MISS_FALL_WAKE_EN0         = 10,
  220       =3         BIT_LCD_SYNC_MISS_RISE_WAKE_EN0         = 9,
  221       =3         BIT_LCD_ARAM_RDY_WAKE_EN0                       = 8,
  222       =3         BIT_LCD_FRAME_END_WAKE_EN0                      = 7,
  223       =3         BIT_LCD_TCH_DET_WAKE_EN0                        = 6,
  224       =3         BIT_LCD_VSTART_WAKE_EN0                         = 5,
  225       =3         BIT_LCD_VMID_WAKE_EN0                           = 4,
  226       =3         BIT_LCD_VEND_WAKE_EN0                           = 3,
  227       =3         BIT_LCD_VBLANK_WAKE_EN0                         = 2,
  228       =3         BIT_LCD_RUN_FALL_WAKE_EN0                       = 1,
  229       =3         BIT_LCD_RUN_RISE_WAKE_EN0                       = 0,                      
  230       =3 } ENUM_BIT_ASM_WAKE_EN0 ;
  231       =3 
  232       =3 /* ASM_INT_WAKE_EN1 bitÐÅÏ¢  07 */
  233       =3 typedef enum
  234       =3 {
  235       =3         BIT_HW_MON_TIMEOUT_WAKE_EN1             = 14,
  236       =3         BIT_LCD_LPF_MODE_EN_FALL_WAKE_EN1       = 13,
  237       =3         BIT_LCD_LPF_MODE_EN_RISE_WAKE_EN1       = 12,
  238       =3         BIT_LCD_STB_TICK_WAKE_EN1                       = 11, 
  239       =3         BIT_LCD_ODD_EVEN_FALL_WAKE_EN1          = 10,
  240       =3         BIT_LCD_ODD_EVEN_RISE_WAKE_EN1          = 9,
  241       =3         BIT_LCD_VDO_MODE_FALL_WAKE_EN1          = 8,
  242       =3         BIT_LCD_VDO_MODE_RISE_WAKE_EN1          = 7,  
  243       =3         BIT_LCD_IDLE_MODE_FALL_WAKE_EN1         = 6,  
  244       =3         BIT_LCD_IDLE_MODE_RISE_WAKE_EN1         = 5,
  245       =3         BIT_LCD_3D_MODE_FALL_WAKE_EN1           = 4,
  246       =3         BIT_LCD_3D_MODE_RISE_WAKE_EN1           = 3,
  247       =3 } ENUM_BIT_ASM_WAKE_EN1;
  248       =3 
  249       =3 /* ASM_INT_STA0 bitÐÅÏ¢  RO  08 */
  250       =3 typedef enum
  251       =3 {
  252       =3         BIT_LCD_BUSY_STA                                = 15,
  253       =3         BIT_LCD_PANEL_CONFLICT_STA              = 14,
  254       =3         BIT_LCD_DSTB_STA                                = 13,
  255       =3         BIT_LCD_SYNC_MISS_STA                   = 12,
  256       =3         BIT_LCD_FRAME_END_STA                   = 11,
  257       =3         BIT_LCD_TCH_DET_STA                     = 10,
  258       =3         BIT_LCD_STB_TICK_STA                    = 9,
  259       =3         BIT_LCD_VSTART_STA                              = 8,
  260       =3         BIT_LCD_VMID_STA                                = 7,
  261       =3         BIT_LCD_VEND_STA                                = 6,
  262       =3         BIT_LCD_VBLANK_STA                              = 5,
  263       =3         BIT_LCD_ODD_EVEN_STA                    = 4,
  264       =3         BIT_LCD_VDO_MODE_STA                    = 3,
  265       =3         BIT_LCD_IDLE_MODE_STA                   = 2,
  266       =3         BIT_LCD_3D_MODE_STA                     = 1,
  267       =3         BIT_LCD_RUN_STA                                 = 0,
  268       =3 } ENUM_BIT_ASM_INT_STA0;
  269       =3 
  270       =3 /*******************************************************************************
  271       =3 * 4.Global variable extern declarations
  272       =3 *******************************************************************************/
  273       =3 extern ST_AsmRegisters * XRAM pAsmRegs;
  274       =3 /*******************************************************************************
  275       =3 * 5.Global function prototypes
  276       =3 ********************************************************************************/
  277       =3 void Afe_120Hz_Run(void);
  278       =3 void DrvAsmInterEnable0(UINT16 usInterMode);
  279       =3 void DrvAsmAramAvail(void);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 97  

  280       =3 void DrvAsmScanStart(void);
  281       =3 void DrvAsmInterEnable1(UINT16 usInterMode);
  282       =3 
  283       =3 #endif
  284       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_LED.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-06-06
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_LED__
   19       =3 #define __TEST_LED__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_LED.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-06-06
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_LED__
   24       =3 #define __TEST_LED__
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_LED_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 98  

            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_LED(void);
            =3 #else
   44       =3 #define Test_LED  /##/
   45       =3 #endif
   46       =3 
   47       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_LED.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-06-06
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_XBUS__
   19       =3 #define __TEST_XBUS__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_LED.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-06-06
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_XBUS__
   24       =3 #define __TEST_XBUS__
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_XBUS_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 99  

            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_Xbus(void);
            =3 #else
   44       =3 #define Test_Xbus  /##/
   45       =3 #endif
   46       =3 
   47       =3 #endif
   48       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_RomEcc.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-18
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_ROMECC__
   19       =3 #define __TEST_ROMECC__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_RomEcc.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-04-18
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
   24       =3 #ifndef __TEST_ROMECC__
   24       =3 #define __TEST_ROMECC__
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_ROMECC_EN
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 100 

            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_RomEcc(void);
            =3 #else
   45       =3 #define Test_RomEcc  /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
   49       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_UART.h
    5       =3 *
    6       =3 *    Author: 
    7       =3 *
    8       =3 *   Created: 2014-05-15
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *   Version:
   15       =3 *******************************************************************************/
   16       =3 #ifndef __TEST_UART_H__
   17       =3 #define __TEST_UART_H__
   18       =3 
   19       =3 /*******************************************************************************
   20       =3 * 1.Included files
   21       =3 *******************************************************************************/
   22       =3 #include "CfgGlobal.h"
   22       =3 /*******************************************************************************
   22       =3 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
   22       =3 *
   22       =3 * File Name: Test_UART.h
   22       =3 *
   22       =3 *    Author: 
   22       =3 *
   22       =3 *   Created: 2014-05-15
   22       =3 *
   22       =3 *  Abstract:
   22       =3 *
   22       =3 * Reference:
   22       =3 *
   22       =3 *   Version:
   22       =3 *******************************************************************************/
   22       =3 #ifndef __TEST_UART_H__
   22       =3 #define __TEST_UART_H__
   22       =3 
   22       =3 /*******************************************************************************
   22       =3 * 1.Included files
   22       =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 101 

   22       =3 #include "CfgGlobal.h"
   23       =3 
   24       =3 #if _TEST_UART_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_UART(void);
            =3 #else
   42       =3 #define  Test_UART   /##/
   43       =3 #endif
   44       =3 
   45       =3 #endif
   46       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_RTC.h
    5       =3 *
    6       =3 *    Author: xinkunpeng
    7       =3 *
    8       =3 *   Created: 2014-04-18
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 * Version:
   15       =3 * 0.1:
   16       =3 *
   17       =3 *******************************************************************************/
   18       =3 #ifndef __TEST_SOFT_RST__
   19       =3 #define __TEST_SOFT_RST__
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_RTC.h
   24       =3 *
   24       =3 *    Author: xinkunpeng
   24       =3 *
   24       =3 *   Created: 2014-04-18
   24       =3 *
   24       =3 *  Abstract:
   24       =3 *
   24       =3 * Reference:
   24       =3 *
   24       =3 * Version:
   24       =3 * 0.1:
   24       =3 *
   24       =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 102 

   24       =3 #ifndef __TEST_SOFT_RST__
   24       =3 #define __TEST_SOFT_RST__
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_SOFT_RST_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_SOFT_RST(void);
            =3 #else
   45       =3 #define Test_SOFT_RST  /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_spi0.h
    5       =3 *
    6       =3 *    Author: tangsujun
    7       =3 *
    8       =3 *   Created: 2017-02-06
    9       =3 *
   10       =3 *  Abstract: 
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_SPI0_H__
   16       =3 #define _TEST_SPI0_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_spi0.h
   21       =3 *
   21       =3 *    Author: tangsujun
   21       =3 *
   21       =3 *   Created: 2017-02-06
   21       =3 *
   21       =3 *  Abstract: 
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 103 

   21       =3 #ifndef _TEST_SPI0_H__
   21       =3 #define _TEST_SPI0_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 /*******************************************************************************
   24       =3 * Global constant and macro definitions using #define
   25       =3 *******************************************************************************/
   26       =3 #if _TEST_SPI0_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_SPI0(void);
            =3 void SPI0_Init(void);
            =3 
            =3 #else
   42       =3 #define Test_SPI0(void) /##/
   43       =3 #define SPI0_Init(void)   /##/
   44       =3 #endif
   45       =3 
   46       =3 #endif
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_spi0_wakeup.h
    5       =3 *
    6       =3 *    Author: tangsujun
    7       =3 *
    8       =3 *   Created: 2017-03-10
    9       =3 *
   10       =3 *  Abstract: 
   11       =3 *
   12       =3 * Reference: test spi0 wake up introduction:
   13       =3 *            g_ucTestCmd :  0x01 : idle wake up
   14       =3 *                           0x02 : standby wake up
   15       =3 *                           0x03 : stop wake up
   16       =3 *******************************************************************************/
   17       =3 #ifndef TEST_SPI0_WAKEUP_H__
   18       =3 #define TEST_SPI0_WAKEUP_H__
   19       =3 
   20       =3 
   21       =3 /*******************************************************************************
   22       =3 * 1.Included files
   23       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   24       =3 /*******************************************************************************
   24       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
   24       =3 *
   24       =3 * File Name: Test_spi0_wakeup.h
   24       =3 *
   24       =3 *    Author: tangsujun
   24       =3 *
   24       =3 *   Created: 2017-03-10
   24       =3 *
   24       =3 *  Abstract: 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 104 

   24       =3 *
   24       =3 * Reference: test spi0 wake up introduction:
   24       =3 *            g_ucTestCmd :  0x01 : idle wake up
   24       =3 *                           0x02 : standby wake up
   24       =3 *                           0x03 : stop wake up
   24       =3 *******************************************************************************/
   24       =3 #ifndef TEST_SPI0_WAKEUP_H__
   24       =3 #define TEST_SPI0_WAKEUP_H__
   24       =3 
   24       =3 
   24       =3 /*******************************************************************************
   24       =3 * 1.Included files
   24       =3 *******************************************************************************/
   24       =3 #include "CfgGlobal.h"
   25       =3 
   26       =3 #if _TEST_SPI0_WK_EN
            =3 
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_SPI0_Wakeup(void);
            =3 #else
   45       =3 #define Test_SPI0_Wakeup  /##/
   46       =3 #endif
   47       =3 
   48       =3 #endif
   49       =3 
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_spi0_dma.h
    5       =3 *
    6       =3 *    Author: tangsujun
    7       =3 *
    8       =3 *   Created: 2017-03-03
    9       =3 *
   10       =3 *  Abstract: 
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef _TEST_SPI0_DMA_H__
   16       =3 #define _TEST_SPI0_DMA_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2016-2018, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_spi0_dma.h
   21       =3 *
   21       =3 *    Author: tangsujun
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 105 

   21       =3 *
   21       =3 *   Created: 2017-03-03
   21       =3 *
   21       =3 *  Abstract: 
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef _TEST_SPI0_DMA_H__
   21       =3 #define _TEST_SPI0_DMA_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 /*******************************************************************************
   24       =3 * Global constant and macro definitions using #define
   25       =3 *******************************************************************************/
   26       =3 #if _TEST_SPI0_DMA_EN
            =3 /*******************************************************************************
            =3 * Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * Global variable extern declarations
            =3 *******************************************************************************/
            =3 /*DMA_SRCR REG*/
            =3 #define BIT_DMA_NOT_FINISH_FLAG      BITn(11) /*csÀ­¸ßÊ±£¬dmaÃ»ÓÐÍê³ÉÉèÖÃDMAÊý¾Ý°üÊý¾Ý´«Êä£¬»áÖÃ1,ÐèÒªÈí¼
             -þÇå0*/
            =3 #define BIT_DMA_TIMEOUT_FLAG         BITn(10) /*dmaÊý¾Ý´«ÊäÊ±·¢Éútimeout,»áÖÃ1,ÐèÒªÈí¼þÇå0.Ö»°üÀ¨Õ¼ÓÃ×ÜÏß
             -Ê±,²»°üÀ¨´«ÊäCRCÊ±¼ä*/
            =3 #define BIT_DMA_SCK_OVERTRANS_FLAG   BITn(9) /*DMAÊý¾Ý°ü´«Êä½áÊøºóhost¼ÌÐø·¢ËÍsck£¬»áÖÃ1£¬ÐèÒªÈí¼þÇå0*/
            =3 #define BIT_DMA_CRC_ERROR_FLAG       BITn(8) /*µ±´¦ÓÚdmaÐ´Ä£Ê½Ê±£¬µ±½ÓÊÕµ½Êý¾Ý¼ÆËã³öµÄcrcÓë½ÓÊÕµ½µÄcrc²»Ò
             -»ÖÂÊ±£¬ÖÃ1£¬Èí¼þÇå0*/
            =3 
            =3 #define BIT_DMA_NOT_FINISH_CLR       BITn(3) /*Ð´1Çådma_not_finish_flag*/
            =3 #define BIT_DMA_TIMEOUT_CLR          BITn(2) /*Ð´1Çådma_timeout_flag*/
            =3 #define BIT_DMA_SCK_OVERTRANS_CLR    BITn(1)  /*Ð´1Çådma_sck_overtrans_flag*/
            =3 #define BIT_DMA_CRC_ERROR_CLR        BITn(0)  /*Ð´1Çådma_crc_error_flag*/
            =3 /*DMA_CTRL REG*/
            =3 
            =3 #define BIT_DMA_TIMEOUT_EN           BITn(6)  /*timeout¹¦ÄÜÊ¹ÄÜ:0:disable;1:enable*/
            =3 #define BIT_DMA_TRANS_ERR_EN         BITn(5)  /*timerout»òdma½áÊøºóhost¼ÌÐø·¢ËÍsckÊÇ·ñÒª·¢ËÍdma_err_dat.0
             -:²»·¢ËÍ;1:·¢ËÍ*/
            =3 #define BIT_DMA_CRC_EN               BITn(4)  /*dma½ÓÊÕ/·¢ËÍÊý¾ÝÊÇ·ñÐèÒª½ÓÊÕ/·¢ËÍcrc. 0: no crc;1:crc*/
            =3 #define BIT_DMA_RW                   BITn(3)  /*dma¶Ôram½øÐÐ¶Á²Ù×÷»¹ÊÇÐ´²Ù×÷.0:¶Á;1:Ð´*/
            =3 //#define BIT_DMA_RAM_SEL              (BITn(2)|BITn(1))  /*dma·ÃÎÊµÄramÑ¡Ôñ. 2'b00:aram;2'b01:dram;2'b1x
             -:pram*/
            =3 #define BIT_DMA_EN                   BITn(0)  /*dma¹¦ÄÜÊ¹ÄÜhw auto clr after exit dma. 0:disbale;1:enable
             -*/
            =3 
            =3 
            =3 /*DMA_ERR_TIMEOUT_CTRL REG*/
            =3 #define BIT_DMA_TIMEOUT_NUM          BITn(8) /*dma timeoutÊ±¼äÉèÖÃ,ÒÔ32kÊ±ÖÓÎªµ¥Î»*/
            =3 #define BIT_DMA_ERR_DAT              BITn(0) /*err byte:µ±timeout»òÕßdma½áÊøºó£¬Èç¹ûhost¼ÌÐø·¢ËÍsck£¬spi0
             -Ïòhost·¢ËÍerror byte*/
            =3 
            =3 /*DMA_ADDR_H REG*/
            =3 #define BIT_DMA_START_ADDR_H         BITn(8) /*dmaµÄÆðÊ¼µØÖ·[16]*/
            =3 #define BIT_DMA_END_ADDR_H           BITn(0) /*dmaµÄ½áÊøµØÖ·[16]*/
            =3 
            =3 /*DMA_START_ADDR_L REG*/
            =3 #define BIT_DMA_START_ADDR_L         BITn(0) /*dmaµÄÆðÊ¼µØÖ·[15:0]*/
            =3 
            =3 /*DMA_END_ADDR_L REG*/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 106 

            =3 #define BIT_DMA_END_ADDR_L           BITn(0) /*dmaµÄ½áÊøµØÖ·[15:0]*/
            =3 
            =3 /*DMA_CRC REG*/
            =3 #define BIT_DMA_CRC                  BITn(0) /*dma´«ÊäÊý¾ÝµÄcrcÖµ*/
            =3 /*******************************************************************************
            =3 * Global function prototypes
            =3 *******************************************************************************/
            =3 void SPI0_DMA_Init(void);
            =3 void SPI0_DMA_ClrStatus(void);
            =3 void SPI0_DMA_Wait_Done(void);
            =3 void SPI0_DMA_SetAddr(UINT32 start_addr,UINT32 len,UINT16 mem_sel);
            =3 void SPI0_DMA_Enable(UINT8 time_out,UINT8 reg);
            =3 void Test_DMA(void);
            =3 #else
   80       =3 #define SPI0_DMA_Init       /##/
   81       =3 #define SPI0_DMA_ClrStatus  /##/
   82       =3 #define SPI0_DMA_Wait_Done  /##/
   83       =3 #define SPI0_DMA_SetAddr    /##/
   84       =3 #define SPI0_DMA_Enable     /##/
   85       =3 #define Test_DMA            /##/
   86       =3 
   87       =3 #endif
   88       =3 
   89       =3 #endif
    1       =3 /*
    2       =3  * Library: libcrc
    3       =3  * File:    include/checksum.h
    4       =3  * Author:  Lammert Bies
    5       =3  *
    6       =3  * This file is licensed under the MIT License as stated below
    7       =3  *
    8       =3  * Copyright (c) 1999-2016 Lammert Bies
    9       =3  *
   10       =3  * Permission is hereby granted, free of charge, to any person obtaining a copy
   11       =3  * of this software and associated documentation files (the "Software"), to deal
   12       =3  * in the Software without restriction, including without limitation the rights
   13       =3  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   14       =3  * copies of the Software, and to permit persons to whom the Software is
   15       =3  * furnished to do so, subject to the following conditions:
   16       =3  *
   17       =3  * The above copyright notice and this permission notice shall be included in all
   18       =3  * copies or substantial portions of the Software.
   19       =3  * 
   20       =3  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   21       =3  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   22       =3  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   23       =3  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   24       =3  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   25       =3  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   26       =3  * SOFTWARE.
   27       =3  *
   28       =3  * Description
   29       =3  * -----------
   30       =3  * The headerfile include/checksum.h contains the definitions and prototypes
   31       =3  * for routines that can be used to calculate several kinds of checksums.
   32       =3  */
   33       =3 
   34       =3 #ifndef DEF_LIBCRC_CHECKSUM_H
   35       =3 #define DEF_LIBCRC_CHECKSUM_H
   36       =3 
   37       =3 #include <stdio.h>
    1       =4 /*--------------------------------------------------------------------------
    2       =4 STDIO.H
    3       =4 
    4       =4 Prototypes for standard I/O functions for C251 Version 3.
    5       =4 Copyright (c) 1995-2001 Keil Elektronik GmbH and Keil Software, Inc.
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 107 

    6       =4 All rights reserved.
    7       =4 --------------------------------------------------------------------------*/
    8       =4 
    9       =4 #pragma SAVE
   10       =4 #pragma PARM251
   11       =4 
   12       =4 #ifndef EOF
            =4  #define EOF -1
            =4 #endif
   15       =4 
   16       =4 #ifndef NULL
            =4  #define NULL ((void *) 0)
            =4 #endif
   19       =4 
   20       =4 #ifndef _SIZE_T
            =4  #define _SIZE_T
            =4  typedef unsigned int size_t;
            =4 #endif
   24       =4 
   25       =4 #if (__C251__ >= 200) 
   26       =4 #pragma SAVE
   27       =4 #pragma FUNCTIONS(STATIC)
   28       =4 /* only static functions available */
   29       =4 extern char _getkey  (void);
   30       =4 extern char getchar  (void);
   31       =4 extern char ungetchar(char);
   32       =4 extern char putchar  (char);
   33       =4 extern int  printf   (const char *, ...); 
   34       =4 extern char *gets    (char *, int n);
   35       =4 extern int  scanf    (const char *, ...);
   36       =4 extern int  vprintf  (const char *, char *);
   37       =4 extern int  puts     (const char *);
   38       =4 #pragma RESTORE
   39       =4 /* available as reentrant & non-reentrant version */
   40       =4 extern int  sprintf  (char *, const char *, ...);
   41       =4 extern int  vsprintf (char *, const char *, char *);
   42       =4 extern int  sscanf   (char *, const char *, ...);
   43       =4 #else
            =4 extern char _getkey (void);
            =4 extern char getchar (void);
            =4 extern char ungetchar (char);
            =4 extern char putchar (char);
            =4 extern int printf   (const char *, ...);
            =4 extern int sprintf  (char *, const char *, ...);
            =4 extern int vprintf  (const char *, char *);
            =4 extern int vsprintf (char *, const char *, char *);
            =4 extern char *gets (char *, int n);
            =4 extern int scanf (const char *, ...);
            =4 extern int sscanf (char *, const char *, ...);
            =4 extern int puts (const char *);
            =4 #endif
   57       =4 
   58       =4 #pragma RESTORE
   38       =3 #include "CfgGlobal.h"
   38       =3 /*
   38       =3  * Library: libcrc
   38       =3  * File:    include/checksum.h
   38       =3  * Author:  Lammert Bies
   38       =3  *
   38       =3  * This file is licensed under the MIT License as stated below
   38       =3  *
   38       =3  * Copyright (c) 1999-2016 Lammert Bies
   38       =3  *
   38       =3  * Permission is hereby granted, free of charge, to any person obtaining a copy
   38       =3  * of this software and associated documentation files (the "Software"), to deal
   38       =3  * in the Software without restriction, including without limitation the rights
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 108 

   38       =3  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   38       =3  * copies of the Software, and to permit persons to whom the Software is
   38       =3  * furnished to do so, subject to the following conditions:
   38       =3  *
   38       =3  * The above copyright notice and this permission notice shall be included in all
   38       =3  * copies or substantial portions of the Software.
   38       =3  * 
   38       =3  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   38       =3  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   38       =3  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   38       =3  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   38       =3  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   38       =3  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   38       =3  * SOFTWARE.
   38       =3  *
   38       =3  * Description
   38       =3  * -----------
   38       =3  * The headerfile include/checksum.h contains the definitions and prototypes
   38       =3  * for routines that can be used to calculate several kinds of checksums.
   38       =3  */
   38       =3 
   38       =3 #ifndef DEF_LIBCRC_CHECKSUM_H
   38       =3 #define DEF_LIBCRC_CHECKSUM_H
   38       =3 
   38       =3 #include <stdio.h>
   38       =3 #include "CfgGlobal.h"
   39       =3 /*
   40       =3  * #define CRC_POLY_xxxx
   41       =3  *
   42       =3  * The constants of the form CRC_POLY_xxxx define the polynomials for some well
   43       =3  * known CRC calculations.
   44       =3  */
   45       =3 
   46       =3 #define         CRC_POLY_16             0xA001
   47       =3 #define         CRC_POLY_32             0xEDB88320L
   48       =3 #define         CRC_POLY_CCITT          0x1021
   49       =3 #define         CRC_POLY_DNP            0xA6BC
   50       =3 #define         CRC_POLY_KERMIT         0x8408
   51       =3 #define         CRC_POLY_SICK           0x8005
   52       =3 
   53       =3 /*
   54       =3  * #define CRC_START_xxxx
   55       =3  *
   56       =3  * The constants of the form CRC_START_xxxx define the values that are used for
   57       =3  * initialization of a CRC value for common used calculation methods.
   58       =3  */
   59       =3 
   60       =3 #define         CRC_START_8             0x00
   61       =3 #define         CRC_START_16            0x0000
   62       =3 #define         CRC_START_MODBUS        0xFFFF
   63       =3 #define         CRC_START_XMODEM        0x0000
   64       =3 #define         CRC_START_CCITT_1D0F    0x1D0F
   65       =3 #define         CRC_START_CCITT_FFFF    0xFFFF
   66       =3 #define         CRC_START_KERMIT        0xFFFF//0x0000
   67       =3 #define         CRC_START_SICK          0x0000
   68       =3 #define         CRC_START_DNP           0x0000
   69       =3 #define         CRC_START_32            0xFFFFFFFFL
   70       =3 
   71       =3 /*
   72       =3  * Prototype list of global functions
   73       =3  */
   74       =3 #if 0
            =3 unsigned char *         checksum_NMEA(     const unsigned char *input_str, unsigned char *result  );
            =3 unsigned char                   crc_8(             const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_16(            const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned long           crc_32(            const unsigned char *input_str, size_t num_bytes       );
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 109 

            =3 unsigned short          crc_ccitt_1d0f(    const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_ccitt_ffff(    const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_dnp(           const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_kermit(        const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_modbus(        const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_sick(          const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned short          crc_xmodem(        const unsigned char *input_str, size_t num_bytes       );
            =3 unsigned char                   update_crc_8(      unsigned char  crc, unsigned char c                          );
            =3 unsigned short          update_crc_16(     unsigned short crc, unsigned char c                          );
            =3 unsigned long           update_crc_32(     unsigned long crc, unsigned char c                          );
            =3 unsigned short          update_crc_ccitt(  unsigned short crc, unsigned char c                          );
            =3 unsigned short          update_crc_dnp(    unsigned short crc, unsigned char c                          );
            =3 unsigned short          update_crc_kermit( unsigned short crc, unsigned char c                          );
            =3 unsigned short          update_crc_sick(   unsigned short crc, unsigned char c, unsigned char prev_byte );
            =3 #endif  
   94       =3 unsigned short          crc_kermit(const unsigned char *input_str, unsigned short num_bytes);
   95       =3 unsigned short          update_crc_kermit(unsigned short crc, unsigned char c );
   96       =3 #endif  // DEF_LIBCRC_CHECKSUM_H
    1       =3 /*******************************************************************************
    2       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =3 *
    4       =3 * File Name: Test_DebugOut.h
    5       =3 *
    6       =3 *    Author: 
    7       =3 *
    8       =3 *   Created: 2017-04-18
    9       =3 *
   10       =3 *  Abstract:
   11       =3 *
   12       =3 * Reference:
   13       =3 *
   14       =3 *******************************************************************************/
   15       =3 #ifndef __TEST_DEBUG_OUT_H__
   16       =3 #define __TEST_DEBUG_OUT_H__
   17       =3 
   18       =3 /*******************************************************************************
   19       =3 * 1.Included files
   20       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   21       =3 /*******************************************************************************
   21       =3 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
   21       =3 *
   21       =3 * File Name: Test_DebugOut.h
   21       =3 *
   21       =3 *    Author: 
   21       =3 *
   21       =3 *   Created: 2017-04-18
   21       =3 *
   21       =3 *  Abstract:
   21       =3 *
   21       =3 * Reference:
   21       =3 *
   21       =3 *******************************************************************************/
   21       =3 #ifndef __TEST_DEBUG_OUT_H__
   21       =3 #define __TEST_DEBUG_OUT_H__
   21       =3 
   21       =3 /*******************************************************************************
   21       =3 * 1.Included files
   21       =3 *******************************************************************************/
   21       =3 #include "CfgGlobal.h"
   22       =3 
   23       =3 #if _TEST_DEBUGOUT_EN
            =3 /*******************************************************************************
            =3 * 2.Global constant and macro definitions using #define
            =3 *******************************************************************************/
            =3 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 110 

            =3 /*******************************************************************************
            =3 * 3.Global structures, unions and enumerations using typedef
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 4.Global variable extern declarations
            =3 *******************************************************************************/
            =3 
            =3 /*******************************************************************************
            =3 * 5.Global function prototypes
            =3 *******************************************************************************/
            =3 void Test_DebugOut(void);
            =3 #else
   41       =3 
   42       =3 #define Test_DebugOut() /##/
   43       =3 #endif
   44       =3 
   45       =3 #endif
   46       =3 
   24          #include "Drv_Cal.h"
    1       =1 /*******************************************************************************
    2       =1 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =1 *
    4       =1 * File Name: Drv_mcu.h
    5       =1 *
    6       =1 *    Author: xinkunpeng
    7       =1 *
    8       =1 *   Created: 2014-05-07
    9       =1 *
   10       =1 *  Abstract:
   11       =1 *
   12       =1 * Reference:
   13       =1 *
   14       =1 *   Version:
   15       =1 *******************************************************************************/
   16       =1 #ifndef __DRV_CAL_H__
   17       =1 #define __DRV_CAL_H__
   18       =1 
   19       =1 
   20       =1 /*******************************************************************************
   21       =1 * 1.Included files
   22       =1 *******************************************************************************/
   23       =1 #include "CfgGlobal.h"
    1       =2 /*******************************************************************************
    2       =2 * Copyright (C) 2012-2013, FocalTech Systems (R)£¬All Rights Reserved.
    3       =2 *
    4       =2 * File Name: CfgGlobal.h
    5       =2 *
    6       =2 *    Author: xinkunpeng
    7       =2 *
    8       =2 *   Created: 2014-04-18
    9       =2 *
   10       =2 *  Abstract:
   11       =2 *
   12       =2 * Reference: Transplant from FT5422 by xinkunpeng
   13       =2 *
   14       =2 *   Version: 0.2
   15       =2 *
   16       =2 *******************************************************************************/
   17       =2 #ifndef GLOBAL_CONFIG_H
            =2 #define GLOBAL_CONFIG_H
            =2 
            =2 /*******************************************************************************
            =2 * 2.Global constant and macro definitions using #define
            =2 *******************************************************************************/
            =2 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 111 

            =2 #define _SPI_FLASH_EN                   1      // spi flash--±ØÐë¿ª
            =2 #define _LCD_RELOAD_EN                  1      // APP´ÓFlashµ¼ÈëLCD_config
            =2 
            =2 #define TEST_MODE                       1
            =2 
            =2 #if TEST_MODE
            =2 #define _TEST_SFR_EN                    0       /* test the SFR read and write */
            =2 #define _TEST_DRAM_EN                   0       /* test dram read and write */
            =2 #define _TEST_PROM_EN                   0       /* test prom read only */   
            =2 #define _TEST_ARAM_EN                   0       /* test asmram read and write */
            =2 #define _TEST_XSI_REG_EN                0       /* XSI¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_SPI0_REG_EN               0       /* SPI0¼Ä´æÆ÷¶ÁÐ´²âÊÔ */ 
            =2 #define _TEST_XBUS_REG_EN               0       /* XBUS¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_ASM_REG_EN                0       /* ASM¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_CAL_REG_EN                0       /* CAL¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_AFE_REG_EN                0       /* AFE¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_LCD_REG_EN                0       /* LCD¼Ä´æÆ÷¶ÁÐ´²âÊÔ */
            =2 #define _TEST_SPI_EN                    0       /* test SPI read  */
            =2 #define _TEST_LED_EN                    0       /* test the led */ 
            =2 #define _TEST_I2C_EN                    0       /* test I2C read and clk */
            =2 #define _TEST_AFE_RAM_EN                0       /* test the AFE ram buffer,²âÊÔÌ«ºÄÊ±¼ä×îºÃµ¥¶À½øÐÐ²âÊÔ *
             -/
            =2 #else
            =2 #define _TEST_SFR_EN                    1
            =2 #define _TEST_DRAM_EN                   1
            =2 #define _TEST_PROM_EN                   1
            =2 #define _TEST_ARAM_EN                   1
            =2 #define _TEST_SPI0_REG_EN               1
            =2 #define _TEST_XSI_REG_EN                1
            =2 #define _TEST_ASM_REG_EN                1      
            =2 #define _TEST_XBUS_REG_EN               1
            =2 #define _TEST_CAL_REG_EN                1
            =2 #define _TEST_AFE_REG_EN                1
            =2 #define _TEST_LCD_REG_EN                0
            =2 #define _TEST_SPI_EN                    1
            =2 #define _TEST_LED_EN                    1
            =2 #define _TEST_I2C_EN                    1
            =2 #define _TEST_AFE_RAM_EN                1
            =2 #endif
            =2 #define _TEST_UART_EN                   0
            =2 #define _TEST_SOFT_RST_EN               0     /* Èí¼þ¸´Î»²âÊÔ*/
            =2 #define _TEST_WDT_EN                    0     /* WDTµ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_RTC_EN                    0     /* ºÍCNTÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_CNT_EN                    0     /* ºÍRTCÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_GPIO_EN                   0     /* gpioÐèÒªÅÐ¶ÏÆäinput outputÒÔ¼°¸ßµÍµçÆ½ÇÐ»»µÄ×´Ì¬£¬Ðè·Ö±ð
             -µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_TIMER_EN                  0     /* Timerµ¥¶À½øÐÐ²âÊÔ */ 
            =2 #define _TEST_GPIO_WK_EN                0     /* int0ÖÐ¶Ï»½ÐÑÔ´¹ý¶à,µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_I2C_WK_EN                 0     /* ºÍI2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */ 
            =2 #define _TEST_INT_NEST_EN               0     /* ÖÐ¶ÏÇ¶Ì×²âÊÔ,µ¥¶À½øÐÐ²âÊÔ  */
            =2 #define _TEST_XSI_EN                    0     /* XSI¶ÁÐ´¿½»ú²âÊÔ£¬µ¥¶À²âÊÔ */
            =2 #define _TEST_CAL_EN                    1     /* CALÄ£¿é,²âÊÔÄ£¿é½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_AFE_EN                    0     /* AFEÄ£¿é,²âÊÔÄÚÈÝ½Ï¶à,µ¥¶À½øÐÐ²âÊÔ */
            =2 #define _TEST_ROMBOOT_EN                0     /* romboot testÊ¹ÓÃËùÐèÏà¹Ø²âÊÔbin */
            =2 #define _TEST_XBUS_EN                   0     /* XBUS¶ÁÐ´²âÊÔ*/
            =2 #define _TEST_ROMECC_EN                 0     /* ¼ÆËãeccºÍprom membistµÄ½á¹û±È½Ï*/
            =2 #define _TEST_SPI0_EN                   0     /* test SPI0   */
            =2 #define _TEST_SPI0_DMA_EN               0     /* test SPI0_dma */
            =2 #define _TEST_SPI0_WK_EN                0     /* ºÍSPI0,I2CÖÐ¶Ï³åÍ»£¬µ¥¶À½øÐÐ²âÊÔ */   
            =2 #define _TEST_DEBUGOUT_EN               0     /* ²âÊÔÄÚ²¿ÐÅºÅ£¬µ¥¶À½øÐÐ²âÊÔ*/
            =2 /*******************************************************************************
            =2 * 1.Included files
            =2 *******************************************************************************/
            =2 #include "Typedef.h"
            =2 #include "FT8836.h"
            =2 #include "FT8836_Reg.h"
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 112 

            =2 #include "Drv_mcu.h"
            =2 #include "Drv_XSI.h"
            =2 #include "Drv_XBUS.h"
            =2 #include "uart.h"
            =2 
            =2 #include "Test_GPIO.h"
            =2 #include "Test_WDT.h"
            =2 #include "Test_RTC.h"
            =2 #include "Test_timer.h"
            =2 #include "Test_Counter.h"
            =2 #include "Test_Prom.h"
            =2 #include "Test_Dram.h"
            =2 #include "Test_Aram.h"
            =2 #include "Test_SFR.h"
            =2 #include "Test_Reg.h"
            =2 #include "Test_I2C.h"
            =2 #include "Test_i2c_wakeup.h"
            =2 #include "Test_gpio_wakeup.h"
            =2 #include "Test_int_nest.h"
            =2 #include "Test_SPI.h"
            =2 #include "Test_CAL.h"
            =2 #include "Test_romboot.h"
            =2 #include "Test_Afe.h"
            =2 #include "Test_LED.h"
            =2 #include "Test_Xbus.h"
            =2 #include "Test_RomEcc.h"
            =2 #include "Test_Uart.h"
            =2 #include "Test_SOFT_RST.h"
            =2 #include "Test_spi0.h"
            =2 #include "Test_spi0_wakeup.h"
            =2 #include "Test_SPI0_dma.h"
            =2 #include "checksum.h"
            =2 #include "Test_DebugOut.h"
            =2 /*******************************************************************************
            =2 * 3.Global structures, unions and enumerations using typedef
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 4.Global variable extern declarations
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * 5.Global function prototypes
            =2 *******************************************************************************/
            =2 
            =2 #endif //GLOBAL_CONFIG_H
   24       =1 #include "FT8836_Reg.h"
    1       =2 /*******************************************************************************
    2       =2 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =2 *
    4       =2 * File Name: FT8836_Reg.h
    5       =2 *
    6       =2 *    Author: 
    7       =2 *
    8       =2 *   Created: 2016-07-11
    9       =2 *
   10       =2 *  Abstract: Define FT8836 Sram registers and their bits
   11       =2 *
   12       =2 * Reference:
   13       =2 *
   14       =2 *******************************************************************************/
   15       =2 
   16       =2 #ifndef _FT8836_REG_H_
            =2 #define _FT8836_REG_H_
            =2 
            =2 /* Conditional Compiler Options */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 113 

            =2 
            =2 /*******************************************************************************
            =2 * Included files
            =2 *******************************************************************************/
            =2 #include "FT8836.h"
            =2 
            =2 /*******************************************************************************
            =2 * Global constant and macro definitions using #define
            =2 *******************************************************************************/
            =2 #define ARAM_DATA_BASE_ADDR              0xA000
            =2 #define SPI1_REG_BASE_ADDR               0xB220
            =2 /* SPI0 reg Start Addr */
            =2 #define SPI0_REG_BASE_ADDR               0xB200
            =2 
            =2 #define SPI0_DMA_CTRL                    REG16(SPI0_REG_BASE_ADDR+(0x00<<1))
            =2 #define SPI0_DMA_ERR_TIMEOUT_CTRL        REG16(SPI0_REG_BASE_ADDR+(0x01<<1))
            =2 #define SPI0_DMA_ADDR_H                  REG16(SPI0_REG_BASE_ADDR+(0x02<<1))
            =2 #define SPI0_DMA_START_ADDR_L            REG16(SPI0_REG_BASE_ADDR+(0x03<<1))            
            =2 #define SPI0_DMA_END_ADDR_L              REG16(SPI0_REG_BASE_ADDR+(0x04<<1))         
            =2 #define SPI0_DMA_CRC                     REG16(SPI0_REG_BASE_ADDR+(0x05<<1))
            =2 #define SPI0_DMA_SRCR                    REG16(SPI0_REG_BASE_ADDR+(0x06<<1))
            =2 /* XSI reg ¿ØÖÆÇø */
            =2 
            =2 /* XSI0 reg start addr */
            =2 #define XSI0_REG_BASE_ADDR     0xB400
            =2 
            =2 #define XSI0_WDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x00<<1))
            =2 #define XSI0_RDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x01<<1))
            =2 #define XSI0_CLK_SEL           REG16(XSI0_REG_BASE_ADDR+(0x02<<1))
            =2 #define XSI0_STOP              REG16(XSI0_REG_BASE_ADDR+(0x03<<1))
            =2 #define XSI0_TX_INT            REG16(XSI0_REG_BASE_ADDR+(0x04<<1))
            =2 
            =2 /* XSI1 reg start addr */
            =2 #define XSI1_REG_BASE_ADDR     0xB800
            =2 
            =2 #define XSI1_WDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x00<<1))
            =2 #define XSI1_RDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x01<<1))
            =2 #define XSI1_CLK_SEL           REG16(XSI1_REG_BASE_ADDR+(0x02<<1))
            =2 #define XSI1_STOP              REG16(XSI1_REG_BASE_ADDR+(0x03<<1))
            =2 #define XSI1_TX_INT            REG16(XSI1_REG_BASE_ADDR+(0x04<<1))
            =2 
            =2 /* XBUS reg start addr */
            =2 #define XBUS_REG_BASE_ADDR     0xBC00
            =2 
            =2 #define XBUS_RDATA_LO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x00<<1))
            =2 #define XBUS_RDATA_HO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x01<<1))
            =2 #define XBUS_REGFILE_CTRL      REG16(XBUS_REG_BASE_ADDR+(0x02<<1))
            =2 #define XBUS_CMD               REG16(XBUS_REG_BASE_ADDR+(0x03<<1))
            =2 #define XBUS_RLD_DATA          REG16(XBUS_REG_BASE_ADDR+(0x04<<1))
            =2 
            =2 /* reload dma base addr */
            =2 //#define RELOAD_DMA_START_ADDR  0x9D00
            =2 /******************************************************************************/
            =2 /******************************************************************************/
            =2 /* CAL reg Start Addr */
            =2 #define CAL_REG_BASE_ADDR       0xB000
            =2 
            =2 /* ASM reg Start Addr */
            =2 #define ASM_REG_BASE_ADDR       0xB100
            =2 
            =2 
            =2 /*******************************************************************************
            =2 * Global structures, unions and enumerations using typedef
            =2 *******************************************************************************/
            =2 /*************************************************************/
            =2 /* XSI reg */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 114 

            =2 typedef struct
            =2 {
            =2     UINT16 Wdata;        // (0x00<<1)
            =2     UINT16 Rdata;        // (0x01<<1)
            =2     UINT16 Clksel;       // (0x02<<1)
            =2     UINT16 Stop;         // (0x03<<1)
            =2     UINT16 Tx_int;       // (0x04<<1)
            =2 } ST_XSIRegisters;
            =2 
            =2 typedef union
            =2 {
            =2     ST_XSIRegisters reg;
            =2     UINT16 offset[sizeof(ST_XSIRegisters)>>1];
            =2 } Union_XSIReg;
            =2 
            =2 /*************************************************************/
            =2 // cal
            =2 typedef struct
            =2 {
            =2     UINT16 rCmd;           // (0x00<<1)
            =2     UINT16 rDmaLen;        // (0x01<<1)
            =2     UINT16 rS1Addr;        // (0x02<<1)
            =2     UINT16 rS2Addr;        // (0x03<<1)
            =2     UINT16 rOutAddr;       // (0x04<<1)
            =2     UINT16 rPar;           // (0x05<<1)
            =2     UINT16 rSize;          // (0x06<<1)
            =2     UINT16 rPThd;          // (0x07<<1)
            =2     UINT16 rNThd;          // (0x08<<1)
            =2     UINT16 rAThd;          // (0x09<<1)
            =2     UINT16 rDmask;         // (0x0A<<1)
            =2     UINT16 rPaCnt;         // (0x0B<<1)
            =2     UINT16 rNaCnt;         // (0x0C<<1)
            =2     UINT16 rPsCnt;         // (0x0D<<1)
            =2     UINT16 rNsCnt;         // (0x0E<<1)
            =2     UINT16 rMaxV;          // (0x0F<<1)
            =2     UINT16 rMaxPos;        // (0x10<<1)
            =2     UINT16 rMinV;          // (0x11<<1)
            =2     UINT16 rMinPos;        // (0x12<<1)
            =2     UINT16 rID0;           // (0x13<<1)
            =2     UINT16 rID1;           // (0x14<<1)
            =2     UINT16 rID2;           // (0x15<<1)
            =2     UINT16 rCrc;           // (0x16<<1)
            =2     UINT16 rChk;           // (0x17<<1)
            =2     UINT16 rNaThd;         // (0x18<<1)
            =2     UINT16 rTxRxNum;       // (0x19<<1)
            =2     UINT16 rDivShift;      // (0x1a<<1)
            =2     UINT16 rSubabsMax;     // (0x1b<<1)
            =2     UINT16 rInt;           // (0x1c<<1)
            =2     UINT16 rCntNum;        // (0x1d<<1)
            =2     UINT16 rDmaskA;        // (0x1e<<1)
            =2     UINT16 rTxRxNumAm;     // (0x1f<<1)
            =2     UINT16 rTxRxNumAs;     // (0x20<<1)
            =2     UINT16 rSizeAm;        // (0x21<<1)
            =2     UINT16 rSizeAs;        // (0x22<<1)
            =2     UINT16 rS1AddrA;       // (0x23<<1)
            =2     UINT16 rS2AddrA;       // (0x24<<1)
            =2     UINT16 rOutAddrA;      // (0x25<<1)
            =2     UINT16 rSel;           // (0x26<<1)
            =2 } ST_CalRegisters;
            =2 
            =2 typedef union
            =2 {
            =2     ST_CalRegisters reg;
            =2     UINT16 offset[sizeof(ST_CalRegisters)>>1];
            =2 } Union_CalReg;
            =2 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 115 

            =2 /*************************************************************/
            =2 /*XBUS reg*/
            =2 typedef struct
            =2 {  
            =2     UINT16 rdata_lo_byte;
            =2     UINT16 rdata_ho_byte;
            =2     UINT16 lcd_regfile_ctrl;
            =2     UINT16 xbus_cmd;//bit1 reload_end;bit0 reload_abort
            =2     UINT16 xbus_rld_data;//reload_data
            =2 }ST_LcdWrapRegisters;
            =2 
            =2 typedef union
            =2 {
            =2     ST_LcdWrapRegisters reg;
            =2     UINT16 offset[sizeof(ST_LcdWrapRegisters)>>1];
            =2 }Union_LcdReg;
            =2 
            =2 /*************************************************************/
            =2 /*SPI0_DMA reg*/
            =2 typedef struct
            =2 {
            =2     UINT16 dma_ctrl;
            =2     UINT16 timeout_ctrl;
            =2     UINT16 addr_h;
            =2     UINT16 start_addr_l;
            =2     UINT16 end_addr_l;
            =2     UINT16 dma_crc;
            =2     UINT16 dma_srcr;
            =2     
            =2 }ST_Spi0DmaRegisters;
            =2 
            =2 /*SPI1_DMA reg*/
            =2 typedef struct
            =2 {
            =2     UINT16 dma_ctrl;
            =2     UINT16 timeout_ctrl;
            =2     UINT16 addr_h;
            =2     UINT16 start_addr_l;
            =2     UINT16 end_addr_l;
            =2     UINT16 dma_crc;
            =2     UINT16 dma_srcr;
            =2     
            =2 }ST_Spi1DmaRegisters;
            =2 
            =2 typedef union
            =2 {
            =2     ST_Spi0DmaRegisters reg;
            =2     UINT16 offset[sizeof(ST_Spi0DmaRegisters)>>1];
            =2 }Union_Spi0Reg;
            =2 
            =2 /*************************************************************/
            =2 /* ASM reg */
            =2 typedef struct
            =2 {
            =2     UINT16 usAsmIntFlag0;         // 00  RO
            =2     UINT16 usAsmIntFlag1;         // 01  RO
            =2     UINT16 usAsmIntClr0;          // 02  WO
            =2     UINT16 usAsmIntClr1;          // 03  WO
            =2     UINT16 usAsmIntEn0;           // 04
            =2     UINT16 usAsmIntEn1;           // 05
            =2     UINT16 usAsmIntWakeEn0;       // 06
            =2     UINT16 usAsmIntWakeEn1;       // 07
            =2     UINT16 usAsmIntSta;           // 08  RO
            =2     UINT16 usAsmScanSta0;         // 09  RO
            =2     UINT16 usAsmScanSta1;         // 10  RO
            =2     UINT16 usAsmScanSta2;         // 11  RO
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 116 

            =2     UINT16 usAsmScanSta3;         // 12  RO
            =2     UINT16 usAsmScanCtrl;         // 13  WO
            =2     UINT16 usAsmScanCfg0;         // 14
            =2     UINT16 usAsmScanCfg1;         // 15
            =2     UINT16 usAsmTpFrameCfg0;      // 16
            =2     UINT16 usAsmTpFrameCfg1;      // 17
            =2     UINT16 usAsmTpFrameCfg2;      // 18
            =2     UINT16 usAsmTpFrameCfg3;      // 19
            =2     UINT16 usAsmScanDly;          // 20
            =2     UINT16 usAsmStbMaseL;         // 21
            =2     UINT16 usAsmStbMaseH;         // 22  
            =2     UINT16 usAsmAramBaseL;        // 23
            =2     UINT16 usAsmAramBaseR;        // 24
            =2     UINT16 usAsmAramBaseKey;      // 25    
            =2     UINT16 usAsmAramCBL;          // 26
            =2     UINT16 usAsmAramCBR;          // 27
            =2     UINT16 usAsmAramCBKey;        // 28
            =2     UINT16 usAsmReserve0;         // 29 Î´¶¨Òå
            =2     UINT16 usAsmReserve1;         // 30 Î´¶¨Òå
            =2     UINT16 usAsmReserve2;         // 31 Î´¶¨Òå
            =2     UINT16 usAsmHwMonCrtl0;       // 32
            =2     UINT16 usAsmHwMonCtrl1;       // 33
            =2     UINT16 usAsmHwMonCfg0;        // 34
            =2     UINT16 usAsmHwMonCfg1;        // 35
            =2     UINT16 usAsmHwMonCfg2;        // 36
            =2     UINT16 usAsmHwMonCfg3;        // 37
            =2     UINT16 usAsmHwMonCfg4;        // 38
            =2     UINT16 usAsmHwMonTimer;       // 39
            =2     UINT16 usAsmVreshCfgLcdon;    // 40
            =2 } ST_AsmRegisters;
            =2 
            =2 typedef union
            =2 {
            =2     ST_AsmRegisters reg;
            =2     UINT16 offset[sizeof(ST_AsmRegisters)>>1];
            =2 } Union_AsmReg;
            =2 
            =2 
            =2 /*******************************************************************************/
            =2 /* AFE reg */
            =2 #if 0
            =2 typedef struct
            =2 {
            =2     UINT16 usAfeAsmCfg;              // 0x00
            =2     UINT16 usAfePanelCfg0;           // 0x01
            =2     UINT16 usAfePanelCfg1;           // 0x02
            =2     UINT16 usAfePanelCfg2;           // 0x03
            =2     UINT16 usAfeSysCfg0;             // 0x04
            =2     UINT16 usAfeSysCfg1;             // 0x05
            =2     UINT16 usAfeScanCfg0;            // 0x06
            =2     UINT16 usAfeScanCfg1;            // 0x07
            =2     UINT16 usAfeDummyScanCfg;        // 0x08
            =2     UINT16 usAfeBaseTrackCfg;        // 0x09
            =2     UINT16 usAfeAcc_Offset;          // 0x0A
            =2     UINT16 usAfeTpMonTh;             // 0x0B
            =2     UINT16 usAfeKeyMonTh;            // 0x0C
            =2     UINT16 usAfeAnaGenCfg0;          // 0x0D
            =2     UINT16 usAfeAnaGenCfg1;          // 0x0E
            =2     UINT16 usAfeAnaCaCfg0;           // 0x0F
            =2     UINT16 usAfeAnaCaCfg1;           // 0x10
            =2     UINT16 usAfeAnaCaCfg2;           // 0x11
            =2     UINT16 usAfeAnaP1P2Cfg0;         // 0x12
            =2     UINT16 usAfeAnaP1P2Cfg1;         // 0x13
            =2     UINT16 usAfeAnaP1P2Cfg2;         // 0x14 
            =2     UINT16 usAfeAnaP1P2Cfg3;         // 0x15    
            =2     UINT16 usAfeAnaP1P2Cfg4;         // 0x16
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 117 

            =2     UINT16 usAfeAnaP1P2Cfg5;         // 0x17
            =2     UINT16 usAfeP1P2DlyCfg0;         // 0x18
            =2     UINT16 usAfeP1P2DlyCfg1;         // 0x19
            =2     UINT16 usAfeAnaShcfg0;           // 0x1A
            =2     UINT16 usAfeAnaShcfg1;           // 0x1B
            =2     UINT16 usAfeAnaShcfg2;           // 0x1C
            =2     UINT16 usAfeAnaShcfg3;           // 0x1D
            =2     UINT16 usAfeAnaShcfg4;           // 0x1E
            =2     UINT16 usAfeAnaShcfg5;           // 0x1F
            =2     UINT16 usAfeAnaShcfg6;           // 0x20
            =2     UINT16 usAfeAnaAdcCfg0;          // 0x21
            =2     UINT16 usAfeAnaAdcCfg1;          // 0x22 
            =2     UINT16 usAfeAnaAdcCfg2;          // 0x23
            =2     UINT16 usAfeAnaAdcCfg3;          // 0x24
            =2     UINT16 usAfeGiphP1P2Cfg;         // 0x25
            =2     UINT16 usAfeGiplP1P2Cfg;         // 0x26
            =2     UINT16 usAfeSdVcomCfg;           // 0x27
            =2     UINT16 usAfeSxP1P2Cfg;           // 0x28
            =2     UINT16 usAllGateOnLCfg;          // 0x29
            =2     UINT16 usAllGateOffLCfg;         // 0x2A
            =2     UINT16 usAllGateStopLCfg;        // 0x2B
            =2     UINT16 usAllGateHCfg;            // 0x2C
            =2     UINT16 usRptRawdataNum;          // 0x2D
            =2     UINT16 usCbAdjustTh;             // 0x2E
            =2     UINT16 usTestModeCfg;            // 0x2F
            =2     UINT16 usPrescanTime;            // 0x30
            =2     UINT16 usDischargeTime;          // 0x31
            =2     UINT16 usAfeAnaStaticCfg0;       // 0x32
            =2     UINT16 usAfeAnaStaticCfg1;       // 0x33
            =2     UINT16 usAfeAnaStaticCfg2;       // 0x34
            =2     UINT16 usAfeAnaStaticCfg3;       // 0x35
            =2     UINT16 usAfeTestPin0Cfg0;        // 0x36
            =2     UINT16 usAfeTestPin0Cfg1;        // 0x37
            =2     UINT16 usAfeTestPin0Cfg2;        // 0x38
            =2     UINT16 usAfeTestPin1Cfg0;        // 0x39
            =2     UINT16 usAfeTestPin1Cfg1;        // 0x3A
            =2     UINT16 usAfeTestPin1Cfg2;        // 0x3B
            =2     UINT16 usReserveZone1;           // 0x3C
            =2     UINT16 usReserveZone2;           // 0x3D
            =2     UINT16 usReserveZone3;           // 0x3E
            =2     UINT16 usReserveZone4;           // 0x3F    
            =2     UINT16 usMcapScanCfg;            // 0x40
            =2     UINT16 usMcapScanSr;             // 0x41
            =2     UINT16 usMcapKeyInterVal6;       // 0x42
            =2     UINT16 usMcapDummyScanNum;       // 0x43
            =2     UINT16 usMcapRawShiftCof;        // 0x44
            =2     UINT16 usMcapRawOffSetL;         // 0x45
            =2     UINT16 usMcapAdcCfg;             // 0x46
            =2     UINT16 usMcapAdcDat0;            // 0x47
            =2     UINT16 usMcapInitSamplCfg;       // 0x48
            =2     UINT16 usMcapOverFlowThr;        // 0x49
            =2     UINT16 usMcapUnderFlowThr;       // 0x4A
            =2     UINT16 usMcapOverFlowUpBound;    // 0x4B
            =2     UINT16 usMcapOverFlowPointFrame; // 0x4C
            =2     UINT16 usMcapNormalSignalUpThr;  // 0x4D
            =2     UINT16 usMcapNormalSignalDwThr;  // 0x4E
            =2     UINT16 usMcapOverFlowClrFrameNum;// 0x4F
            =2     UINT16 usMcapLpfirCfg;           // 0x50
            =2     UINT16 usMcapLpFirCfg0;          // 0x51
            =2     UINT16 usMcapLpFirCfg1;          // 0x52
            =2     UINT16 usMcapLpFirCfg2;          // 0x53
            =2     UINT16 usMcapLpFirCfg3;          // 0x54
            =2     UINT16 usMcapLpFirCfg4;          // 0x55  
            =2     UINT16 usMcapLpFirCfg5;          // 0x56
            =2     UINT16 usMcapLpFirCfg6;          // 0x57
            =2     UINT16 usMcapLpFirCfg7;          // 0x58
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 118 

            =2    
            =2 } ST_AfeRegList;
            =2 #endif
            =2 
            =2 typedef enum
            =2 {
            =2     Addr_PANEL_MODE_CFG0 =1, 
            =2     Addr_PANEL_MODE_CFG1 =2,
            =2     Addr_PANEL_MODE_CFG2 =3, 
            =2     Addr_AFE_SYS_CFG0 =4, 
            =2     Addr_AFE_SYS_CFG1 =5, 
            =2     Addr_AFE_SCAN_CFG0 =6, 
            =2     Addr_AFE_SCAN_CFG1 =7, 
            =2     Addr_AFE_DUMMY_SCAN_CFG =8, 
            =2     Addr_AFE_BASE_TRACK_CFG =9, 
            =2     Addr_ACC_OFFSET =10, 
            =2     Addr_TP_MONITOR_THRESHOLD =11,
            =2     Addr_KEY_MONITOR_THRESHOLD =12, 
            =2     Addr_AFE_ANA_K1_CFG0 =13,
            =2     Addr_AFE_ANA_K2_CFG1 =14,
            =2     Addr_AFE_ANA_CA_CFG0 =15, 
            =2     Addr_AFE_ANA_CA_CFG1 =16, 
            =2     Addr_AFE_ANA_CA_CFG2 =17,
            =2     Addr_AFE_ANA_P1_P2_CFG0 =18, 
            =2     Addr_AFE_ANA_P1_P2_CFG1 =19,
            =2     Addr_AFE_ANA_P1_P2_CFG2 =20, 
            =2     Addr_AFE_ANA_P1_P2_CFG3 =21,
            =2     Addr_AFE_ANA_P1_P2_CFG4 =22, 
            =2     Addr_AFE_ANA_P1_P2_CFG5 =23, 
            =2     Addr_AFE_P1_P2_DLY_CFG0 =24, 
            =2     Addr_AFE_P1_P2_DLY_CFG1 =25, 
            =2     Addr_AFE_ANA_SH_CFG0 =26,
            =2     Addr_AFE_ANA_SH_CFG1 =27, 
            =2     Addr_AFE_ANA_SH_CFG2 =28, 
            =2     Addr_AFE_ANA_SH_CFG3 =29, 
            =2     Addr_AFE_ANA_SH_CFG4 =30, 
            =2     Addr_AFE_ANA_SH_CFG5 =31,
            =2     Addr_AFE_ANA_SH_CFG6 =32, 
            =2     Addr_AFE_ANA_ADC_CFG0 =33, 
            =2     Addr_AFE_ANA_ADC_CFG1 =34, 
            =2     Addr_AFE_ANA_ADC_CFG2 =35, 
            =2     Addr_AFE_ANA_ADC_CFG3 =36, 
            =2     Addr_AFE_GIPH_P1_P2_CFG =37, 
            =2     Addr_AFE_GIPL_P1_P2_CFG =38, 
            =2     Addr_AFE_SD_VOM_OPT_P1_P2_CFG =39,
            =2     Addr_AFE_SX_P1_P2_CFG =40, 
            =2     Addr_AFE_MOUT_GIPH_CFG = 41,
            =2     Addr_AFE_MOUT_GIPL_CFG = 42,
            =2     Addr_AFE_GOUT_GIPH_CFG = 43,
            =2     Addr_AFE_GOUT_GIPL_CFG = 44,
            =2    
            =2     Addr_ALL_GATE_ON_L_CFG =45, 
            =2     Addr_ALL_GATE_OFF_L_CFG =46,
            =2     Addr_ALL_GATE_STOP_L_CFG =47, 
            =2     Addr_ALL_GATE_H_CFG =48,                              
            =2     Addr_RPT_RAWDATA_NUM =49,                             
            =2     Addr_CB_ADJUST_THLD =50,                                
            =2     Addr_TEST_MODE_FLAG =51,                              
            =2     Addr_PRESCAN_TIME =52,                                 
            =2     Addr_DISCHARGE_TIME =53,                               
            =2     Addr_ANA_STATIC_CFG0 =54,                              
            =2     Addr_ANA_STATIC_CFG1 =55,                               
            =2     Addr_ANA_STATIC_CFG2 =56,                              
            =2     Addr_ANA_STATIC_CFG3 =57,                            
            =2     Addr_TEST_P0_CFG0 =58,                               
            =2     Addr_TEST_P0_CFG1 =59,                               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 119 

            =2     Addr_TEST_P0_CFG2 =60,                                 
            =2     Addr_TEST_P1_CFG0 =61,                               
            =2     Addr_TEST_P1_CFG1 =62,                                
            =2     Addr_TEST_P1_CFG2 =63,                                 
            =2                                                                                                          
             -                                                          
            =2     Addr_MCAP_SCAN_CFG =64,                                
            =2     Addr_MCAP_SCANSR =65,                                  
            =2     Addr_KEY_SAMPLE_INTERVAL_6 =66,                     
            =2     Addr_RAWSHIFTCAF =67,                                
            =2     Addr_RAWDATA_OFFSET_L =68,                           
            =2     Addr_ADC_CFG =69,                                      
            =2     Addr_ADC_DATA0 =70,                                   
            =2     Addr_MCAP_INIT_SAMPL_CFG =71,                         
            =2     Addr_OVERFLOW_THR =72,                                 
            =2     Addr_UNDERFLOW_THR =73,                                
            =2     Addr_OVERFLOW_UPBOUND =74,                            
            =2     Addr_OVER_POINT_FRAME =75,                             
            =2     Addr_NORMAL_SIGNAL_UPTHR =76,                          
            =2     Addr_NORMAL_SIGNAL_DWTHR =77,                        
            =2     Addr_OVERFLOW_CLR_FRAMENUM =78,                       
            =2     Addr_MCAP_LPFIR_CFG =79,                               
            =2     Addr_MCAP_LPFIR_COF0 =80,                              
            =2     Addr_MCAP_LPFIR_COF1 =81,                              
            =2     Addr_MCAP_LPFIR_COF2 =82,                             
            =2     Addr_MCAP_LPFIR_COF3 =83,                              
            =2     Addr_MCAP_LPFIR_COF4 =84,                              
            =2     Addr_MCAP_LPFIR_COF5 =85,                            
            =2     Addr_MCAP_LPFIR_COF6 =86,                             
            =2     Addr_MCAP_LPFIR_COF7 =87,   
            =2 }ENUM_AFE_ADDR;
            =2 
            =2 
            =2 /*******************************************************************************/
            =2 /* Afe table reg */
            =2 
            =2 /*******************************************************************************/
            =2 
            =2 
            =2 /*******************************************************************************
            =2 * Global variable extern declarations
            =2 *******************************************************************************/
            =2 
            =2 /*******************************************************************************
            =2 * Global function prototypes
            =2 *******************************************************************************/
            =2 
            =2 #endif //_FT8836_REG_H_
   25       =1 
   26       =1 
   27       =1 #if _TEST_CAL_EN
   28       =1 /*******************************************************************************
   29       =1 * 2.Global constant and macro definitions using #define
   30       =1 *******************************************************************************/
   31       =1 // pCalCmd BIT DEFINITION
   32       =1 #define CAL_CMD_START          BITn(0)
   33       =1 #define CAL_CMD_RUNNING        BITn(1)
   34       =1 #define CAL_CMD_RESUME         BITn(2)
   35       =1 #define CAL_CMD_SUSPEND        BITn(3)
   36       =1 #define CAL_CMD_OP_CFG0        BITn(8)
   37       =1 #define CAL_CMD_OP_CFG1        BITn(9)
   38       =1 #define CAL_CMD_OP_CFG2        BITn(10)
   39       =1 #define CAL_CMD_DMA_OFF        BITn(11)
   40       =1 #define CAL_CMD_EXT_RESUME_EN  BITn(12)
   41       =1 #define CAL_CMD_MUL2_EN        BITn(13)
   42       =1 #define CAL_CMD_INT_CLR        BITn(14)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 120 

   43       =1 #define CAL_CMD_MOD_EXTEND     BITn(15)
   44       =1 #define CAL_OP_MASK            0x00F0
   45       =1 
   46       =1 //CALINT
   47       =1 #define CAL_CMD_AMOV_START     BITn(0)
   48       =1 #define CAL_CMD_AMOV_RESUME    BITn(1)
   49       =1 #define CAL_CMD_AMOV_INT_CLR   BITn(2)
   50       =1 #define CAL_CMD_AMOV_MODE      BITn(3)
   51       =1 #define CAL_CMD_AMOV_EN        BITn(4)
   52       =1 #define CAL_CMD_AMOV_SUSPEND   BITn(5)
   53       =1 #define CAL_CMD_AMOV_RUNNING   BITn(6)
   54       =1 #define CAL_CMD_AMOV_INT       BITn(7)
   55       =1 #define CAL_FUNC_SEL           BITn(14)
   56       =1 #define CAL_CMD_INT            BITn(15)
   57       =1 
   58       =1 //CALSEL
   59       =1 #define CAL_AMOV_CFG           BITn(14)
   60       =1 #if 0
            =1 #define CAL_DSEL_AMOV_DRAM     (0x00<<12)
            =1 #define CAL_DSEL_AMOV_ARAM     (0x01<<12)
            =1 #define CAL_DSEL_AMOV_PRAM     (0x02<<12)
            =1 #define CAL_S2SEL_AMOV_DRAM    (0x00<<10)
            =1 #define CAL_S2SEL_AMOV_ARAM    (0x01<<10)
            =1 #define CAL_S2SEL_AMOV_PRAM    (0x02<<10)
            =1 #define CAL_S1SEL_AMOV_DRAM    (0x00<<8)
            =1 #define CAL_S1SEL_AMOV_ARAM    (0x01<<8)
            =1 #define CAL_S1SEL_AMOV_PRAM    (0x02<<8)
            =1 #define CAL_DSEL_DRAM          (0x00<<4)
            =1 #define CAL_DSEL_ARAM          (0x01<<4)
            =1 #define CAL_DSEL_PRAM          (0x02<<4)
            =1 #define CAL_S2SEL_DRAM         (0x00<<2)
            =1 #define CAL_S2SEL_ARAM         (0x01<<2)
            =1 #define CAL_S2SEL_PRAM         (0x02<<2)
            =1 #define CAL_S1SEL_DRAM         (0x00<<0)
            =1 #define CAL_S1SEL_ARAM         (0x01<<0)
            =1 #define CAL_S1SEL_PRAM         (0x02<<0)
            =1 #endif
   80       =1 
   81       =1 // CAL_OP_MOD DEFINITION
   82       =1 #define OP_SUB                 (0x00<<4)
   83       =1 #define OP_ADD                 (0x01<<4)
   84       =1 #define OP_MOV                 (0x02<<4)
   85       =1 #define OP_COM                 (0x03<<4)
   86       =1 #define OP_AMP                 (0x04<<4)
   87       =1 //#define OP_FLT                 (0x05<<4)
   88       =1 #define OP_MDS                 (0x06<<4)
   89       =1 #define OP_LDS                 (0x07<<4)
   90       =1 #define OP_CHK                 (0x08<<4)
   91       =1 #define OP_CRC                 (0x09<<4)
   92       =1 #define OP_PKS                 (0x0A<<4)
   93       =1 //#define OP_MUL                 (0x0B<<4)
   94       =1 #define OP_MAC                 (0x0C<<4)
   95       =1 #define OP_KM                  (0x0D<<4)
   96       =1 #define OP_MUL2                (0x0E<<4)
   97       =1 #define OP_DIV                 (0x0F<<4)
   98       =1 
   99       =1 // CAL_EXTEND_MOD DEFINITION
  100       =1 #define EX_OP_AVG              (0x00<<4)
  101       =1 #define EX_OP_MIN              (0x01<<4)
  102       =1 #define EX_OP_MAX              (0x02<<4)
  103       =1 #define EX_OP_SUBCONST         (0x03<<4)
  104       =1 #define EX_OP_COUNT            (0x04<<4)
  105       =1 #define EX_OP_AMOV             (0x05<<4)
  106       =1 #define EX_OP_CMP              (0x07<<4)//FT8836 ÐÂ¼Ó
  107       =1 #define EX_OP_MUL3             (0x08<<4)//FT8836 ÐÂ¼Ó
  108       =1 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 121 

  109       =1 #define TX_LOCAL_NUM    18//18 // ×ÜµÄ´óÐ¡
  110       =1 #define RX_LOCAL_NUM    36//30 // 16//28
  111       =1 
  112       =1 #define CAL_TEST_TX     18//18//16 // ²âÊÔ¾Ö²¿
  113       =1 #define CAL_TEST_RX     36//30//28 //16//28
  114       =1 
  115       =1 
  116       =1 #define TX_ARAM_NUM    TX_LOCAL_NUM
  117       =1 #define RX_ARAM_NUM    RX_LOCAL_NUM
  118       =1 
  119       =1 #define CAL_ARAM_TX     18//16 // ²âÊÔ¾Ö²¿
  120       =1 #define CAL_ARAM_RX     36//30//28 //16//28
  121       =1 
  122       =1 
  123       =1 #define CAL_MDS_TX_POINT    11
  124       =1 #define CAL_MDS_RX_POINT    11
  125       =1 #define CAL_DATA_SIZE       (TX_LOCAL_NUM*RX_LOCAL_NUM)
  126       =1 #define ID_POS_DATA_SIZE    10
  127       =1 #define MAX_POINT           ID_POS_DATA_SIZE
  128       =1 #define MAX_PEAK            (MAX_POINT*3 )
  129       =1 
  130       =1 
  131       =1 // CRCÊý¾ÝÔ´Æ¬Çø
  132       =1 #define CRC_SRC_DRAM            0   // 00
  133       =1 #define CRC_SRC_FC_ZONE         1   // FC:0000 -- FC:FFFF
  134       =1 #define CRC_SRC_FD_ZONE         2   // FD:0000 -- FD:FFFF
  135       =1 #define CRC_SRC_FE_ZONE         3   // FE:0000 -- FE:FFFF
  136       =1 #define CRC_SRC_FF_ZONE         4   // FF:0000 -- FF:0000
  137       =1 
  138       =1 #define CRC_MOD_XOR             1   // Òì»òÇóºÍ
  139       =1 #define CRC_MOD_CRC             0   // CRC8·½Ê½
  140       =1 
  141       =1 #define SUB_MOD_0               0   // sign ¼Ó¼õ sign = sign
  142       =1 #define SUB_MOD_1               1   // unsign ¼Ó¼õ unsign = unsign
  143       =1 
  144       =1 #define MOV_CFG_0               0   // ²»×ªÖÃ
  145       =1 #define MOV_CFG_1               1   // ×ªÖÃ
  146       =1 
  147       =1 #define SIGN_MOD_0              0   // sign ¼Ó¼õ sign = sign
  148       =1 #define SIGN_MOD_1              1   // unsign ¼Ó¼õ unsign = unsign
  149       =1 
  150       =1 #define MUL2_CFG_0              0   // mul2°´ÁÐ³Ë¹Ì¶¨³£Êý
  151       =1 #define MUL2_CFG_1              1   // mul2°´ÐÐ³Ë¹Ì¶¨³£Êý
  152       =1 
  153       =1 #define MUL2_MODE_0             0   //MUL2Ñ¡Ôñ1Î¬Êý×é³ËÒÔ2Î¬Êý×éµÄ·½Ê½
  154       =1 #define MUL2_MODE_1             1   //MUL2Ñ¡Ôñ2Î¬Êý×é³ËÒÔ2Î¬Êý×éµÄ·½Ê½
  155       =1 
  156       =1 #define MAC_MOD_0               0   // original positive value
  157       =1 #define MAC_MOD_1               1   // absolute value
  158       =1 
  159       =1 #define MAC_CFG_0               0   // sub-region of frame data
  160       =1 #define MAC_CFG_1               1   // re-pack data
  161       =1 
  162       =1 #define COM_CFG_0           0   // com¾ÉËã·¨
  163       =1 #define COM_CFG_1           1   // comÐÂËã·¨: ÐÐÁÐ²¹³¥Ëã·¨
  164       =1 
  165       =1 #define EX_MOD_TX           0   // À©Õ¹ÃüÁîavg/min/max°´ÐÐ¼ÆËã
  166       =1 #define EX_MOD_RX           1   // À©Õ¹ÃüÁîavg/min/max°´ÁÐ¼ÆËã
  167       =1 
  168       =1 #define EX_CFG_ORG          0   // À©Õ¹ÃüÁîavg/min/max°´Ô­Ê¼Êý¾Ý¼ÆËã
  169       =1 #define EX_CFG_ABS          1   // À©Õ¹ÃüÁîavg/min/max°´¾ø¶ÔÖµ¼ÆËã
  170       =1 
  171       =1 #define CMP_CFG_0            0 //Çó×î´óÖµ
  172       =1 #define CMP_CFG_1            1//Çó×îÐ¡Öµ
  173       =1 
  174       =1 #define AVG_MODE_0         0//³¬¹ýãÐÖµµÄÊý¾ÝÓÃãÐÖµ´úÌæ
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 122 

  175       =1 #define AVG_MODE_1         1//³¬¹ýãÐÖµµÄÊý¾ÝÖ±½Ó¶ªÆú
  176       =1 
  177       =1 
  178       =1 #define MAC_TX_START         2 //mac×ÓÇøÓòÄ£Ê½txÆðÊ¼µØÖ·
  179       =1 #define MAC_RX_START         2//mac×ÓÇøÓòÄ£Ê½rxÆðÊ¼µØÖ·
  180       =1 #define MAC_TX_LEN           5//macËã·¨txÔËËã³¤¶È
  181       =1 #define MAC_RX_LEN           5//macËã·¨rxÔËËã³¤¶È
  182       =1 
  183       =1 
  184       =1 /* CAL COMÔËËãÏà¹Ø²ÎÊýÅäÖÃ */
  185       =1 #define COMPENSATION_MODE           0      // 0:normal(full screen) 1:single point
  186       =1 #define NO_COMPENSATION_TX_LENGTH   8      // bit7:4 in pCalRegs->rPThd
  187       =1 #define NO_COMPENSATION_RX_LENGTH   3      // bit3:0 in pCalRegs->rPThd
  188       =1 #define NO_COMPENSATION_TX_START    0      // bit[15:8] in pCalRegs->rPar
  189       =1 #define NO_COMPENSATION_RX_START    0      // bit[7:0] in pCalRegs->Par
  190       =1 
  191       =1 /* CAL MACÔËËãÔëÉùãÐÖµ */
  192       =1 // length for calculate output
  193       =1 // DrvCal_Mac: need 6
  194       =1 // DrvCal_McPeak:need MC_MAX_PEAK
  195       =1 // DrvCal_KmID:need 11*11
  196       =1 // DrvCal_MatrixMul: need 28*3 (3 buffers)
  197       =1 #define CAL_COMMON_SIZE         (11*11)  //It is the max size of above case
  198       =1 
  199       =1 /* Frame Data */
  200       =1 /* Ôö¼Ó×ÓÔªËØÊ±£¬16Î»±ØÐëÔÚÇ°Ãæ£¬±£Ö¤calÔËËãÊÇÅ¼µØÖ·ÔËËã */
  201       =1 typedef struct
  202       =1 {
  203       =1     UINT16 CalBaseAddr[CAL_DATA_SIZE];      // cal base data buffer
  204       =1     UINT16 CalBaseAddr1[CAL_DATA_SIZE];      // cal base data buffer
  205       =1     UINT16 CalBaseAddr2[CAL_DATA_SIZE];      // cal base data buffer
  206       =1     SINT16 ScDiff[CAL_DATA_SIZE];           // sc diff data buffer
  207       =1     UINT16 LastIdPos[ID_POS_DATA_SIZE<<1];  // (x,y)
  208       =1     UINT16 CurrIdPos[ID_POS_DATA_SIZE<<1];  // (x,y)
  209       =1     SINT16 CalOut[CAL_COMMON_SIZE];         // hardware calculating output
  210       =1 } ST_FrameData;
  211       =1 /*******************************************************************************
  212       =1 * 3.Global structures, unions and enumerations using typedef
  213       =1 *******************************************************************************/
  214       =1 /* CAL¾ØÕóÔËËã²ÎÊý */
  215       =1 typedef struct
  216       =1 {
  217       =1     UINT8 ucTxLen;           // ¾ØÕó²Ù×÷ÐÐÊý
  218       =1     UINT8 ucRxLen;           // ¾ØÕó²Ù×÷ÁÐÊý
  219       =1     UINT8 ucShift;           // ½á¹ûÓÒÒÆ¸öÊý
  220       =1     UINT8 ucCfg;            // ÅäÖÃ²ÎÊý
  221       =1     UINT8 ucDataType;       // À©Õ¹ÃüÁîavg/min/maxÔËËãÊý¾Ý: Ô­Öµor¾ø¶ÔÖµ
  222       =1     UINT8 ucLineCfg;        // À©Õ¹ÃüÁîavg/min/maxÔËËãÊý¾Ý: °´ÐÐ¼ÆËãor°´ÁÐ¼ÆËã
  223       =1     UINT16 usSrc1Addr;       // ²Ù×÷Êý1µÄÄÚ´æ¿ªÊ¼µØÖ·
  224       =1     UINT16 usSrc2Addr;       // ²Ù×÷Êý2µÄÄÚ´æ¿ªÊ¼µØÖ·
  225       =1     UINT16 usDstAddr;        // ÔËËã½á¹ûµÄÄÚ´æ¿ªÊ¼µØÖ·
  226       =1     UINT16 usCalCmd;         // ÔËËã·ûºÅ    
  227       =1 } ST_CalMcMatrixParam;
  228       =1 
  229       =1 /* ²éÕÒpeak½á¹ûÐÅÏ¢ */
  230       =1 typedef struct
  231       =1 {
  232       =1     UINT8 ucMcPosPeakNum;     // Positvie Peak Number
  233       =1     UINT8 ucMcNegPeakNum;     // Negative Peak Number
  234       =1     UINT16 ucMcPosAreaChNum;  // Positive Area Peak Number
  235       =1     UINT16 ucMcNegAreaChNum;  // Negative Area Peak Number
  236       =1     UINT16 usMCminValue;      // min-peak diff value
  237       =1     UINT16 usMCminPos;        // min-peak pos, B15--B8:Y,B7--B0:X
  238       =1     UINT16 usMCmaxValue;      // max-peak diff value
  239       =1     UINT16 usMCmaxPos;        // max-peak pos, B15--B8:Y,B7--B0:X
  240       =1 } ST_CalMcPeakInfo;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 123 

  241       =1 
  242       =1 /* ²éÕÒpeakÔËËã²ÎÊý */
  243       =1 typedef struct
  244       =1 {
  245       =1     UINT8 ucRxLen;           // Rx Length
  246       =1     UINT8 ucTxLen;           // Tx Length
  247       =1     UINT8 ucMaxPeakNum;      // ×î´ópeakÊýÁ¿
  248       =1     UINT8 ucSearchMod;       // 0: Ê®×Ö;  1: Ã××Ö
  249       =1 
  250       =1     UINT16 usDiffAddr;       // DiffÄÚ´æµÄ¿ªÊ¼µØÖ·
  251       =1     UINT16 usCalOutAddr;     // ÕýpeakÄÚ´æµÄ¿ªÊ¼µØÖ·
  252       =1     UINT16 usNegOutAddr;     // ¸ºpeakÄÚ´æµÄ¿ªÊ¼µØÖ·
  253       =1 
  254       =1     SINT16 usPosThd;         // Positive Peak Threshold
  255       =1     SINT16 usNegThd;         // Negative Peak Threshold
  256       =1     UINT16 usAreaThd;        // Area Peak Threshold
  257       =1     SINT16 usNegAreaThd;     // Area Peak Threshold
  258       =1 } ST_CalMcPeakDetectParam;
  259       =1 
  260       =1 /* Peak Data */
  261       =1 typedef struct
  262       =1 {
  263       =1     UINT8 aucMcPosPeak[MAX_PEAK][2];            //[P][0]:TX,  [P][1]:RX
  264       =1     UINT8 aucMcNegPeak[MAX_PEAK][2];            //[P][0]:TX,  [P][1]:RX
  265       =1     UINT8 aucMcPeakValid[(MAX_PEAK >> 3) + 1];  //»¥µçÈÝPEAK ÓÐÐ§ÐÔ±êÊ¶£¬Ã¿¸öPEAK ÓÃÒ»¸öbit ±êÊ¶ÆäÓÐÐ§ÐÔ
  266       =1     UINT8 ucMcPosPeakNum;                         //»¥µçÈÝÕýPEAK ÊýÁ¿
  267       =1     UINT8 ucMcNegPeakNum;                         //»¥µçÈÝ¸ºPEAK ÊýÁ¿
  268       =1     UINT8 ucCurrPeakNum;                          //ÉÏÒ»Ö¡Êµ¼ÊµãÊý
  269       =1     UINT8 ucLastPeakNum;                          //ÉÏÒ»Ö¡Êµ¼ÊµãÊý
  270       =1     UINT16 ucMcPosAreaChNum;                       //»¥µçÈÝ³¬¹ýAREA TH CH ÊýÁ¿
  271       =1     UINT16 ucMcNegAreaChNum;                       //»¥µçÈÝ³¬¹ýAREA TH CH ÊýÁ¿    
  272       =1 } ST_PeakData;
  273       =1 
  274       =1 typedef struct
  275       =1 {
  276       =1     UINT8 ucRxStart;
  277       =1     UINT8 ucTxStart;
  278       =1     UINT8 ucRxLen;
  279       =1     UINT8 ucTxLen;
  280       =1     UINT8 ucNoise;
  281       =1     UINT8 ucMode;      //0:FILTER_ORG  1:FILTER_ABS
  282       =1     UINT16 usDiffAddr;
  283       =1     UINT16 usCalOutAddr;
  284       =1 } ST_CalMcMacParam;
  285       =1 
  286       =1 /* IDÔËËã²ÎÊý */
  287       =1 typedef struct
  288       =1 {
  289       =1     UINT8  ucLastPoint;      // ÉÏÒ»Ö¡µãÊý
  290       =1     UINT8  ucCurrPoint;      // µ±Ç°Ö¡µãÊý
  291       =1     UINT16 usLastIdPosAddr;  // ÉÏÒ»Ö¡µãÐÅÏ¢ËùÔÚÄÚ´æµÄ¿ªÊ¼µØÖ·
  292       =1     UINT16 usCurrIdPosAddr;  // µ±Ç°Ö¡µãÐÅÏ¢ËùÔÚÄÚ´æµÄ¿ªÊ¼µØÖ·
  293       =1     UINT16 usCalOut;         // IDÆ¥Åä½á¹ûËùÔÚÄÚ´æµÄ¿ªÊ¼µØÖ·
  294       =1 } ST_CalKmIdParam;
  295       =1 
  296       =1 /* AMOVÔËËã²ÎÊý */
  297       =1 typedef struct
  298       =1 {
  299       =1     UINT8 ucS1TxLen;      // ¾ØÕóS1µÄTxLen
  300       =1     UINT8 ucS1RxLen;      // ¾ØÕóS1µÄRxLen
  301       =1     UINT16 usSrc1Addr;    // ²Ù×÷ÊýS1µÄÄÚ´æ¿ªÊ¼µØÖ·
  302       =1     UINT16 usDstAddr;     // ÔËËã½á¹ûµÄÄÚ´æ¿ªÊ¼µØÖ·
  303       =1     UINT16 usDmaMask;     // À©Õ¹ÃüÁîavg/min/maxÔËËãÊý¾Ý: Ô­Öµor¾ø¶ÔÖµ
  304       =1 } ST_CalMatrixAMov;
  305       =1 
  306       =1 /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 124 

  307       =1 * 4.Global variable extern declarations
  308       =1 *******************************************************************************/
  309       =1 extern BOOLEAN g_bCalResumeFlag;
  310       =1 extern ST_CalRegisters *pCalRegs;
  311       =1 extern UINT8 g_ucCalStartFlag,g_ucAmoveStart;
  312       =1 
  313       =1 /*******************************************************************************
  314       =1 * 5.Global function prototypes
  315       =1 *******************************************************************************/
  316       =1 void DrvCal_Init(UINT8 ucTxNum, UINT8 ucRxNum, UINT16 usDmask,UINT16 usDmaskA);
  317       =1 void DrvCal_Cmd(UINT16 cmd);
  318       =1 void DrvCal_MatrixProc(ST_CalMcMatrixParam *pMcMP);
  319       =1 void DrvCal_MatrixAmp(ST_CalMcMatrixParam *pMcMP, SINT16 mul);
  320       =1 void DrvCal_MatrixDiv(ST_CalMcMatrixParam *pMcMP, UINT8 div);
  321       =1 void DrvCal_MatrixMul(ST_CalMcMatrixParam *pMcMP, UINT8 K_Num);
  322       =1 void DrvCal_McPeak(ST_CalMcPeakDetectParam *pMcPDP, ST_CalMcPeakInfo *pMcPI);
  323       =1 void DrvCal_Mac(ST_CalMcMacParam *pMacParm);
  324       =1 void DrvCal_KmID(ST_CalKmIdParam *pKmIDParm);
  325       =1 UINT16 DrvCal_CRC16(UINT16 usSrc1Addr, UINT16 usLen, UINT8 Area, BOOLEAN type);
  326       =1 void DrvCal_MatrixMul2(ST_CalMcMatrixParam *pMcMP,BOOLEAN MulMode);
  327       =1 void DrvCal_MatrixCompensation(ST_CalMcMatrixParam *pMcMP, UINT8 Thr, UINT8 Cfg);
  328       =1 void DrvCal_LDS(ST_CalMcMatrixParam *pMcMP);
  329       =1 void DrvCal_MDS(ST_CalMcMatrixParam *pMcMP);
  330       =1 UINT16 DrvCal_Noise(UINT16 usSrc1Addr,UINT8 Tx_Len, UINT8 Rx_Len);
  331       =1 void DrvCal_MatrixAMov(ST_CalMatrixAMov *pMcMP);
  332       =1 void DrvCal_MatrixAvg(ST_CalMcMatrixParam *pMcMP,UINT8 usAvgMode);
  333       =1 void DrvCal_MatrixMaxMin(ST_CalMcMatrixParam *pMcMP);
  334       =1 UINT16 DrvCal_MatrixCount(ST_CalMcMatrixParam *pMcMP, SINT16 ssMin,SINT16 ssMax);
  335       =1 void DrvCal_MatrixSubConst(ST_CalMcMatrixParam *pMcMP);
  336       =1 void DrvCal_MatrixCMP(ST_CalMcMatrixParam *pMcMP);
  337       =1 void DrvCal_MatrixMul3(ST_CalMcMatrixParam *pMcMP);
  338       =1 #endif
  339       =1 #endif
  340       =1 
  341       =1 
   25          #include "FT8836_Reg.h"
    1       =1 /*******************************************************************************
    2       =1 * Copyright (C) 2013-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =1 *
    4       =1 * File Name: FT8836_Reg.h
    5       =1 *
    6       =1 *    Author: 
    7       =1 *
    8       =1 *   Created: 2016-07-11
    9       =1 *
   10       =1 *  Abstract: Define FT8836 Sram registers and their bits
   11       =1 *
   12       =1 * Reference:
   13       =1 *
   14       =1 *******************************************************************************/
   15       =1 
   16       =1 #ifndef _FT8836_REG_H_
            =1 #define _FT8836_REG_H_
            =1 
            =1 /* Conditional Compiler Options */
            =1 
            =1 /*******************************************************************************
            =1 * Included files
            =1 *******************************************************************************/
            =1 #include "FT8836.h"
            =1 
            =1 /*******************************************************************************
            =1 * Global constant and macro definitions using #define
            =1 *******************************************************************************/
            =1 #define ARAM_DATA_BASE_ADDR              0xA000
            =1 #define SPI1_REG_BASE_ADDR               0xB220
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 125 

            =1 /* SPI0 reg Start Addr */
            =1 #define SPI0_REG_BASE_ADDR               0xB200
            =1 
            =1 #define SPI0_DMA_CTRL                    REG16(SPI0_REG_BASE_ADDR+(0x00<<1))
            =1 #define SPI0_DMA_ERR_TIMEOUT_CTRL        REG16(SPI0_REG_BASE_ADDR+(0x01<<1))
            =1 #define SPI0_DMA_ADDR_H                  REG16(SPI0_REG_BASE_ADDR+(0x02<<1))
            =1 #define SPI0_DMA_START_ADDR_L            REG16(SPI0_REG_BASE_ADDR+(0x03<<1))            
            =1 #define SPI0_DMA_END_ADDR_L              REG16(SPI0_REG_BASE_ADDR+(0x04<<1))         
            =1 #define SPI0_DMA_CRC                     REG16(SPI0_REG_BASE_ADDR+(0x05<<1))
            =1 #define SPI0_DMA_SRCR                    REG16(SPI0_REG_BASE_ADDR+(0x06<<1))
            =1 /* XSI reg ¿ØÖÆÇø */
            =1 
            =1 /* XSI0 reg start addr */
            =1 #define XSI0_REG_BASE_ADDR     0xB400
            =1 
            =1 #define XSI0_WDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x00<<1))
            =1 #define XSI0_RDATA_LOC         REG16(XSI0_REG_BASE_ADDR+(0x01<<1))
            =1 #define XSI0_CLK_SEL           REG16(XSI0_REG_BASE_ADDR+(0x02<<1))
            =1 #define XSI0_STOP              REG16(XSI0_REG_BASE_ADDR+(0x03<<1))
            =1 #define XSI0_TX_INT            REG16(XSI0_REG_BASE_ADDR+(0x04<<1))
            =1 
            =1 /* XSI1 reg start addr */
            =1 #define XSI1_REG_BASE_ADDR     0xB800
            =1 
            =1 #define XSI1_WDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x00<<1))
            =1 #define XSI1_RDATA_LOC         REG16(XSI1_REG_BASE_ADDR+(0x01<<1))
            =1 #define XSI1_CLK_SEL           REG16(XSI1_REG_BASE_ADDR+(0x02<<1))
            =1 #define XSI1_STOP              REG16(XSI1_REG_BASE_ADDR+(0x03<<1))
            =1 #define XSI1_TX_INT            REG16(XSI1_REG_BASE_ADDR+(0x04<<1))
            =1 
            =1 /* XBUS reg start addr */
            =1 #define XBUS_REG_BASE_ADDR     0xBC00
            =1 
            =1 #define XBUS_RDATA_LO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x00<<1))
            =1 #define XBUS_RDATA_HO_BYTE     REG16(XBUS_REG_BASE_ADDR+(0x01<<1))
            =1 #define XBUS_REGFILE_CTRL      REG16(XBUS_REG_BASE_ADDR+(0x02<<1))
            =1 #define XBUS_CMD               REG16(XBUS_REG_BASE_ADDR+(0x03<<1))
            =1 #define XBUS_RLD_DATA          REG16(XBUS_REG_BASE_ADDR+(0x04<<1))
            =1 
            =1 /* reload dma base addr */
            =1 //#define RELOAD_DMA_START_ADDR  0x9D00
            =1 /******************************************************************************/
            =1 /******************************************************************************/
            =1 /* CAL reg Start Addr */
            =1 #define CAL_REG_BASE_ADDR       0xB000
            =1 
            =1 /* ASM reg Start Addr */
            =1 #define ASM_REG_BASE_ADDR       0xB100
            =1 
            =1 
            =1 /*******************************************************************************
            =1 * Global structures, unions and enumerations using typedef
            =1 *******************************************************************************/
            =1 /*************************************************************/
            =1 /* XSI reg */
            =1 typedef struct
            =1 {
            =1     UINT16 Wdata;        // (0x00<<1)
            =1     UINT16 Rdata;        // (0x01<<1)
            =1     UINT16 Clksel;       // (0x02<<1)
            =1     UINT16 Stop;         // (0x03<<1)
            =1     UINT16 Tx_int;       // (0x04<<1)
            =1 } ST_XSIRegisters;
            =1 
            =1 typedef union
            =1 {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 126 

            =1     ST_XSIRegisters reg;
            =1     UINT16 offset[sizeof(ST_XSIRegisters)>>1];
            =1 } Union_XSIReg;
            =1 
            =1 /*************************************************************/
            =1 // cal
            =1 typedef struct
            =1 {
            =1     UINT16 rCmd;           // (0x00<<1)
            =1     UINT16 rDmaLen;        // (0x01<<1)
            =1     UINT16 rS1Addr;        // (0x02<<1)
            =1     UINT16 rS2Addr;        // (0x03<<1)
            =1     UINT16 rOutAddr;       // (0x04<<1)
            =1     UINT16 rPar;           // (0x05<<1)
            =1     UINT16 rSize;          // (0x06<<1)
            =1     UINT16 rPThd;          // (0x07<<1)
            =1     UINT16 rNThd;          // (0x08<<1)
            =1     UINT16 rAThd;          // (0x09<<1)
            =1     UINT16 rDmask;         // (0x0A<<1)
            =1     UINT16 rPaCnt;         // (0x0B<<1)
            =1     UINT16 rNaCnt;         // (0x0C<<1)
            =1     UINT16 rPsCnt;         // (0x0D<<1)
            =1     UINT16 rNsCnt;         // (0x0E<<1)
            =1     UINT16 rMaxV;          // (0x0F<<1)
            =1     UINT16 rMaxPos;        // (0x10<<1)
            =1     UINT16 rMinV;          // (0x11<<1)
            =1     UINT16 rMinPos;        // (0x12<<1)
            =1     UINT16 rID0;           // (0x13<<1)
            =1     UINT16 rID1;           // (0x14<<1)
            =1     UINT16 rID2;           // (0x15<<1)
            =1     UINT16 rCrc;           // (0x16<<1)
            =1     UINT16 rChk;           // (0x17<<1)
            =1     UINT16 rNaThd;         // (0x18<<1)
            =1     UINT16 rTxRxNum;       // (0x19<<1)
            =1     UINT16 rDivShift;      // (0x1a<<1)
            =1     UINT16 rSubabsMax;     // (0x1b<<1)
            =1     UINT16 rInt;           // (0x1c<<1)
            =1     UINT16 rCntNum;        // (0x1d<<1)
            =1     UINT16 rDmaskA;        // (0x1e<<1)
            =1     UINT16 rTxRxNumAm;     // (0x1f<<1)
            =1     UINT16 rTxRxNumAs;     // (0x20<<1)
            =1     UINT16 rSizeAm;        // (0x21<<1)
            =1     UINT16 rSizeAs;        // (0x22<<1)
            =1     UINT16 rS1AddrA;       // (0x23<<1)
            =1     UINT16 rS2AddrA;       // (0x24<<1)
            =1     UINT16 rOutAddrA;      // (0x25<<1)
            =1     UINT16 rSel;           // (0x26<<1)
            =1 } ST_CalRegisters;
            =1 
            =1 typedef union
            =1 {
            =1     ST_CalRegisters reg;
            =1     UINT16 offset[sizeof(ST_CalRegisters)>>1];
            =1 } Union_CalReg;
            =1 
            =1 /*************************************************************/
            =1 /*XBUS reg*/
            =1 typedef struct
            =1 {  
            =1     UINT16 rdata_lo_byte;
            =1     UINT16 rdata_ho_byte;
            =1     UINT16 lcd_regfile_ctrl;
            =1     UINT16 xbus_cmd;//bit1 reload_end;bit0 reload_abort
            =1     UINT16 xbus_rld_data;//reload_data
            =1 }ST_LcdWrapRegisters;
            =1 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 127 

            =1 typedef union
            =1 {
            =1     ST_LcdWrapRegisters reg;
            =1     UINT16 offset[sizeof(ST_LcdWrapRegisters)>>1];
            =1 }Union_LcdReg;
            =1 
            =1 /*************************************************************/
            =1 /*SPI0_DMA reg*/
            =1 typedef struct
            =1 {
            =1     UINT16 dma_ctrl;
            =1     UINT16 timeout_ctrl;
            =1     UINT16 addr_h;
            =1     UINT16 start_addr_l;
            =1     UINT16 end_addr_l;
            =1     UINT16 dma_crc;
            =1     UINT16 dma_srcr;
            =1     
            =1 }ST_Spi0DmaRegisters;
            =1 
            =1 /*SPI1_DMA reg*/
            =1 typedef struct
            =1 {
            =1     UINT16 dma_ctrl;
            =1     UINT16 timeout_ctrl;
            =1     UINT16 addr_h;
            =1     UINT16 start_addr_l;
            =1     UINT16 end_addr_l;
            =1     UINT16 dma_crc;
            =1     UINT16 dma_srcr;
            =1     
            =1 }ST_Spi1DmaRegisters;
            =1 
            =1 typedef union
            =1 {
            =1     ST_Spi0DmaRegisters reg;
            =1     UINT16 offset[sizeof(ST_Spi0DmaRegisters)>>1];
            =1 }Union_Spi0Reg;
            =1 
            =1 /*************************************************************/
            =1 /* ASM reg */
            =1 typedef struct
            =1 {
            =1     UINT16 usAsmIntFlag0;         // 00  RO
            =1     UINT16 usAsmIntFlag1;         // 01  RO
            =1     UINT16 usAsmIntClr0;          // 02  WO
            =1     UINT16 usAsmIntClr1;          // 03  WO
            =1     UINT16 usAsmIntEn0;           // 04
            =1     UINT16 usAsmIntEn1;           // 05
            =1     UINT16 usAsmIntWakeEn0;       // 06
            =1     UINT16 usAsmIntWakeEn1;       // 07
            =1     UINT16 usAsmIntSta;           // 08  RO
            =1     UINT16 usAsmScanSta0;         // 09  RO
            =1     UINT16 usAsmScanSta1;         // 10  RO
            =1     UINT16 usAsmScanSta2;         // 11  RO
            =1     UINT16 usAsmScanSta3;         // 12  RO
            =1     UINT16 usAsmScanCtrl;         // 13  WO
            =1     UINT16 usAsmScanCfg0;         // 14
            =1     UINT16 usAsmScanCfg1;         // 15
            =1     UINT16 usAsmTpFrameCfg0;      // 16
            =1     UINT16 usAsmTpFrameCfg1;      // 17
            =1     UINT16 usAsmTpFrameCfg2;      // 18
            =1     UINT16 usAsmTpFrameCfg3;      // 19
            =1     UINT16 usAsmScanDly;          // 20
            =1     UINT16 usAsmStbMaseL;         // 21
            =1     UINT16 usAsmStbMaseH;         // 22  
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 128 

            =1     UINT16 usAsmAramBaseL;        // 23
            =1     UINT16 usAsmAramBaseR;        // 24
            =1     UINT16 usAsmAramBaseKey;      // 25    
            =1     UINT16 usAsmAramCBL;          // 26
            =1     UINT16 usAsmAramCBR;          // 27
            =1     UINT16 usAsmAramCBKey;        // 28
            =1     UINT16 usAsmReserve0;         // 29 Î´¶¨Òå
            =1     UINT16 usAsmReserve1;         // 30 Î´¶¨Òå
            =1     UINT16 usAsmReserve2;         // 31 Î´¶¨Òå
            =1     UINT16 usAsmHwMonCrtl0;       // 32
            =1     UINT16 usAsmHwMonCtrl1;       // 33
            =1     UINT16 usAsmHwMonCfg0;        // 34
            =1     UINT16 usAsmHwMonCfg1;        // 35
            =1     UINT16 usAsmHwMonCfg2;        // 36
            =1     UINT16 usAsmHwMonCfg3;        // 37
            =1     UINT16 usAsmHwMonCfg4;        // 38
            =1     UINT16 usAsmHwMonTimer;       // 39
            =1     UINT16 usAsmVreshCfgLcdon;    // 40
            =1 } ST_AsmRegisters;
            =1 
            =1 typedef union
            =1 {
            =1     ST_AsmRegisters reg;
            =1     UINT16 offset[sizeof(ST_AsmRegisters)>>1];
            =1 } Union_AsmReg;
            =1 
            =1 
            =1 /*******************************************************************************/
            =1 /* AFE reg */
            =1 #if 0
            =1 typedef struct
            =1 {
            =1     UINT16 usAfeAsmCfg;              // 0x00
            =1     UINT16 usAfePanelCfg0;           // 0x01
            =1     UINT16 usAfePanelCfg1;           // 0x02
            =1     UINT16 usAfePanelCfg2;           // 0x03
            =1     UINT16 usAfeSysCfg0;             // 0x04
            =1     UINT16 usAfeSysCfg1;             // 0x05
            =1     UINT16 usAfeScanCfg0;            // 0x06
            =1     UINT16 usAfeScanCfg1;            // 0x07
            =1     UINT16 usAfeDummyScanCfg;        // 0x08
            =1     UINT16 usAfeBaseTrackCfg;        // 0x09
            =1     UINT16 usAfeAcc_Offset;          // 0x0A
            =1     UINT16 usAfeTpMonTh;             // 0x0B
            =1     UINT16 usAfeKeyMonTh;            // 0x0C
            =1     UINT16 usAfeAnaGenCfg0;          // 0x0D
            =1     UINT16 usAfeAnaGenCfg1;          // 0x0E
            =1     UINT16 usAfeAnaCaCfg0;           // 0x0F
            =1     UINT16 usAfeAnaCaCfg1;           // 0x10
            =1     UINT16 usAfeAnaCaCfg2;           // 0x11
            =1     UINT16 usAfeAnaP1P2Cfg0;         // 0x12
            =1     UINT16 usAfeAnaP1P2Cfg1;         // 0x13
            =1     UINT16 usAfeAnaP1P2Cfg2;         // 0x14 
            =1     UINT16 usAfeAnaP1P2Cfg3;         // 0x15    
            =1     UINT16 usAfeAnaP1P2Cfg4;         // 0x16
            =1     UINT16 usAfeAnaP1P2Cfg5;         // 0x17
            =1     UINT16 usAfeP1P2DlyCfg0;         // 0x18
            =1     UINT16 usAfeP1P2DlyCfg1;         // 0x19
            =1     UINT16 usAfeAnaShcfg0;           // 0x1A
            =1     UINT16 usAfeAnaShcfg1;           // 0x1B
            =1     UINT16 usAfeAnaShcfg2;           // 0x1C
            =1     UINT16 usAfeAnaShcfg3;           // 0x1D
            =1     UINT16 usAfeAnaShcfg4;           // 0x1E
            =1     UINT16 usAfeAnaShcfg5;           // 0x1F
            =1     UINT16 usAfeAnaShcfg6;           // 0x20
            =1     UINT16 usAfeAnaAdcCfg0;          // 0x21
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 129 

            =1     UINT16 usAfeAnaAdcCfg1;          // 0x22 
            =1     UINT16 usAfeAnaAdcCfg2;          // 0x23
            =1     UINT16 usAfeAnaAdcCfg3;          // 0x24
            =1     UINT16 usAfeGiphP1P2Cfg;         // 0x25
            =1     UINT16 usAfeGiplP1P2Cfg;         // 0x26
            =1     UINT16 usAfeSdVcomCfg;           // 0x27
            =1     UINT16 usAfeSxP1P2Cfg;           // 0x28
            =1     UINT16 usAllGateOnLCfg;          // 0x29
            =1     UINT16 usAllGateOffLCfg;         // 0x2A
            =1     UINT16 usAllGateStopLCfg;        // 0x2B
            =1     UINT16 usAllGateHCfg;            // 0x2C
            =1     UINT16 usRptRawdataNum;          // 0x2D
            =1     UINT16 usCbAdjustTh;             // 0x2E
            =1     UINT16 usTestModeCfg;            // 0x2F
            =1     UINT16 usPrescanTime;            // 0x30
            =1     UINT16 usDischargeTime;          // 0x31
            =1     UINT16 usAfeAnaStaticCfg0;       // 0x32
            =1     UINT16 usAfeAnaStaticCfg1;       // 0x33
            =1     UINT16 usAfeAnaStaticCfg2;       // 0x34
            =1     UINT16 usAfeAnaStaticCfg3;       // 0x35
            =1     UINT16 usAfeTestPin0Cfg0;        // 0x36
            =1     UINT16 usAfeTestPin0Cfg1;        // 0x37
            =1     UINT16 usAfeTestPin0Cfg2;        // 0x38
            =1     UINT16 usAfeTestPin1Cfg0;        // 0x39
            =1     UINT16 usAfeTestPin1Cfg1;        // 0x3A
            =1     UINT16 usAfeTestPin1Cfg2;        // 0x3B
            =1     UINT16 usReserveZone1;           // 0x3C
            =1     UINT16 usReserveZone2;           // 0x3D
            =1     UINT16 usReserveZone3;           // 0x3E
            =1     UINT16 usReserveZone4;           // 0x3F    
            =1     UINT16 usMcapScanCfg;            // 0x40
            =1     UINT16 usMcapScanSr;             // 0x41
            =1     UINT16 usMcapKeyInterVal6;       // 0x42
            =1     UINT16 usMcapDummyScanNum;       // 0x43
            =1     UINT16 usMcapRawShiftCof;        // 0x44
            =1     UINT16 usMcapRawOffSetL;         // 0x45
            =1     UINT16 usMcapAdcCfg;             // 0x46
            =1     UINT16 usMcapAdcDat0;            // 0x47
            =1     UINT16 usMcapInitSamplCfg;       // 0x48
            =1     UINT16 usMcapOverFlowThr;        // 0x49
            =1     UINT16 usMcapUnderFlowThr;       // 0x4A
            =1     UINT16 usMcapOverFlowUpBound;    // 0x4B
            =1     UINT16 usMcapOverFlowPointFrame; // 0x4C
            =1     UINT16 usMcapNormalSignalUpThr;  // 0x4D
            =1     UINT16 usMcapNormalSignalDwThr;  // 0x4E
            =1     UINT16 usMcapOverFlowClrFrameNum;// 0x4F
            =1     UINT16 usMcapLpfirCfg;           // 0x50
            =1     UINT16 usMcapLpFirCfg0;          // 0x51
            =1     UINT16 usMcapLpFirCfg1;          // 0x52
            =1     UINT16 usMcapLpFirCfg2;          // 0x53
            =1     UINT16 usMcapLpFirCfg3;          // 0x54
            =1     UINT16 usMcapLpFirCfg4;          // 0x55  
            =1     UINT16 usMcapLpFirCfg5;          // 0x56
            =1     UINT16 usMcapLpFirCfg6;          // 0x57
            =1     UINT16 usMcapLpFirCfg7;          // 0x58
            =1    
            =1 } ST_AfeRegList;
            =1 #endif
            =1 
            =1 typedef enum
            =1 {
            =1     Addr_PANEL_MODE_CFG0 =1, 
            =1     Addr_PANEL_MODE_CFG1 =2,
            =1     Addr_PANEL_MODE_CFG2 =3, 
            =1     Addr_AFE_SYS_CFG0 =4, 
            =1     Addr_AFE_SYS_CFG1 =5, 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 130 

            =1     Addr_AFE_SCAN_CFG0 =6, 
            =1     Addr_AFE_SCAN_CFG1 =7, 
            =1     Addr_AFE_DUMMY_SCAN_CFG =8, 
            =1     Addr_AFE_BASE_TRACK_CFG =9, 
            =1     Addr_ACC_OFFSET =10, 
            =1     Addr_TP_MONITOR_THRESHOLD =11,
            =1     Addr_KEY_MONITOR_THRESHOLD =12, 
            =1     Addr_AFE_ANA_K1_CFG0 =13,
            =1     Addr_AFE_ANA_K2_CFG1 =14,
            =1     Addr_AFE_ANA_CA_CFG0 =15, 
            =1     Addr_AFE_ANA_CA_CFG1 =16, 
            =1     Addr_AFE_ANA_CA_CFG2 =17,
            =1     Addr_AFE_ANA_P1_P2_CFG0 =18, 
            =1     Addr_AFE_ANA_P1_P2_CFG1 =19,
            =1     Addr_AFE_ANA_P1_P2_CFG2 =20, 
            =1     Addr_AFE_ANA_P1_P2_CFG3 =21,
            =1     Addr_AFE_ANA_P1_P2_CFG4 =22, 
            =1     Addr_AFE_ANA_P1_P2_CFG5 =23, 
            =1     Addr_AFE_P1_P2_DLY_CFG0 =24, 
            =1     Addr_AFE_P1_P2_DLY_CFG1 =25, 
            =1     Addr_AFE_ANA_SH_CFG0 =26,
            =1     Addr_AFE_ANA_SH_CFG1 =27, 
            =1     Addr_AFE_ANA_SH_CFG2 =28, 
            =1     Addr_AFE_ANA_SH_CFG3 =29, 
            =1     Addr_AFE_ANA_SH_CFG4 =30, 
            =1     Addr_AFE_ANA_SH_CFG5 =31,
            =1     Addr_AFE_ANA_SH_CFG6 =32, 
            =1     Addr_AFE_ANA_ADC_CFG0 =33, 
            =1     Addr_AFE_ANA_ADC_CFG1 =34, 
            =1     Addr_AFE_ANA_ADC_CFG2 =35, 
            =1     Addr_AFE_ANA_ADC_CFG3 =36, 
            =1     Addr_AFE_GIPH_P1_P2_CFG =37, 
            =1     Addr_AFE_GIPL_P1_P2_CFG =38, 
            =1     Addr_AFE_SD_VOM_OPT_P1_P2_CFG =39,
            =1     Addr_AFE_SX_P1_P2_CFG =40, 
            =1     Addr_AFE_MOUT_GIPH_CFG = 41,
            =1     Addr_AFE_MOUT_GIPL_CFG = 42,
            =1     Addr_AFE_GOUT_GIPH_CFG = 43,
            =1     Addr_AFE_GOUT_GIPL_CFG = 44,
            =1    
            =1     Addr_ALL_GATE_ON_L_CFG =45, 
            =1     Addr_ALL_GATE_OFF_L_CFG =46,
            =1     Addr_ALL_GATE_STOP_L_CFG =47, 
            =1     Addr_ALL_GATE_H_CFG =48,                              
            =1     Addr_RPT_RAWDATA_NUM =49,                             
            =1     Addr_CB_ADJUST_THLD =50,                                
            =1     Addr_TEST_MODE_FLAG =51,                              
            =1     Addr_PRESCAN_TIME =52,                                 
            =1     Addr_DISCHARGE_TIME =53,                               
            =1     Addr_ANA_STATIC_CFG0 =54,                              
            =1     Addr_ANA_STATIC_CFG1 =55,                               
            =1     Addr_ANA_STATIC_CFG2 =56,                              
            =1     Addr_ANA_STATIC_CFG3 =57,                            
            =1     Addr_TEST_P0_CFG0 =58,                               
            =1     Addr_TEST_P0_CFG1 =59,                               
            =1     Addr_TEST_P0_CFG2 =60,                                 
            =1     Addr_TEST_P1_CFG0 =61,                               
            =1     Addr_TEST_P1_CFG1 =62,                                
            =1     Addr_TEST_P1_CFG2 =63,                                 
            =1                                                                                                          
             -                                                          
            =1     Addr_MCAP_SCAN_CFG =64,                                
            =1     Addr_MCAP_SCANSR =65,                                  
            =1     Addr_KEY_SAMPLE_INTERVAL_6 =66,                     
            =1     Addr_RAWSHIFTCAF =67,                                
            =1     Addr_RAWDATA_OFFSET_L =68,                           
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 131 

            =1     Addr_ADC_CFG =69,                                      
            =1     Addr_ADC_DATA0 =70,                                   
            =1     Addr_MCAP_INIT_SAMPL_CFG =71,                         
            =1     Addr_OVERFLOW_THR =72,                                 
            =1     Addr_UNDERFLOW_THR =73,                                
            =1     Addr_OVERFLOW_UPBOUND =74,                            
            =1     Addr_OVER_POINT_FRAME =75,                             
            =1     Addr_NORMAL_SIGNAL_UPTHR =76,                          
            =1     Addr_NORMAL_SIGNAL_DWTHR =77,                        
            =1     Addr_OVERFLOW_CLR_FRAMENUM =78,                       
            =1     Addr_MCAP_LPFIR_CFG =79,                               
            =1     Addr_MCAP_LPFIR_COF0 =80,                              
            =1     Addr_MCAP_LPFIR_COF1 =81,                              
            =1     Addr_MCAP_LPFIR_COF2 =82,                             
            =1     Addr_MCAP_LPFIR_COF3 =83,                              
            =1     Addr_MCAP_LPFIR_COF4 =84,                              
            =1     Addr_MCAP_LPFIR_COF5 =85,                            
            =1     Addr_MCAP_LPFIR_COF6 =86,                             
            =1     Addr_MCAP_LPFIR_COF7 =87,   
            =1 }ENUM_AFE_ADDR;
            =1 
            =1 
            =1 /*******************************************************************************/
            =1 /* Afe table reg */
            =1 
            =1 /*******************************************************************************/
            =1 
            =1 
            =1 /*******************************************************************************
            =1 * Global variable extern declarations
            =1 *******************************************************************************/
            =1 
            =1 /*******************************************************************************
            =1 * Global function prototypes
            =1 *******************************************************************************/
            =1 
            =1 #endif //_FT8836_REG_H_
   26          #include "Test_Afe.h"
    1       =1 /*******************************************************************************
    2       =1 * Copyright (C) 2012-2014, FocalTech Systems (R)£¬All Rights Reserved.
    3       =1 *
    4       =1 * File Name: Test_Afe.h
    5       =1 *
    6       =1 *    Author: xinkunpeng
    7       =1 *
    8       =1 *   Created: 2014-05-15
    9       =1 *
   10       =1 *  Abstract:
   11       =1 *
   12       =1 * Reference:
   13       =1 *
   14       =1 *   Version:
   15       =1 *******************************************************************************/
   16       =1 #ifndef __TEST_AFE_H__
            =1 #define __TEST_AFE_H__
            =1 
            =1 /*******************************************************************************
            =1 * 1.Included files
            =1 *******************************************************************************/
            =1 #include "CfgGlobal.h"
            =1 
            =1 
            =1 /*******************************************************************************
            =1 * 2.Global constant and macro definitions using #define
            =1 *******************************************************************************/
            =1 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 132 

            =1 #define LCD_BUSY_FALL_INT0          BITn(15)
            =1 #define LCD_BUSY_RISE_INT0          BITn(14)
            =1 #define LCD_PANEL_CONFLICT_INT0     BITn(13)
            =1 #define LCD_DSTB_FAIL_INT0          BITn(12)
            =1 #define LCD_DSTB_RISE_INT0          BITn(11)
            =1 #define LCD_SYNC_MISS_FALL_INT0     BITn(10)
            =1 #define LCD_SYNC_MISS_RISE_INT0     BITn(9)
            =1 #define ARAM_READY_INT0             BITn(8)
            =1 #define FRAME_END_INT0              BITn(7)
            =1 #define AFE_DET_INT0                BITn(6)
            =1 #define LCD_VSTART_INT0             BITn(5)
            =1 #define LCD_VMID_INT0               BITn(4)
            =1 #define LCD_VEND_INT0               BITn(3)
            =1 #define LCD_VBLANK_INT0             BITn(2)
            =1 #define LCD_RUN_FALL_INT0           BITn(1)
            =1 #define LCD_RUN_RISE_INT0           BITn(0)
            =1 
            =1 #define LCD_HW_MON_TIMEOUT_INT1     BITn(14) 
            =1 #define LCD_LPF_MODE_EN_FALL_INT1   BITn(13)
            =1 #define LCD_LPF_MODE_EN_RISE_INT1   BITn(12)
            =1 #define LCD_STB_TICK_INT1           BITn(11)
            =1 #define LCD_ODD_EVEN_FALL_INT1      BITn(10)
            =1 #define LCD_ODD_EVEN_RISE_INT1      BITn(9)
            =1 #define LCD_VDO_MODE_FALL_INT1      BITn(8)
            =1 #define LCD_VDO_MODE_RISE_INT1      BITn(7)  
            =1 #define LCD_IDLE_MODE_FALL_INT1     BITn(6)  
            =1 #define LCD_IDLE_MODE_RISE_INT1     BITn(5)
            =1 #define LCD_3D_MODE_FALL_INT1       BITn(4)
            =1 #define LCD_3D_MODE_RISE_INT1       BITn(3)
            =1 #define LCD_RUN_INT1                BITn(2)
            =1 #define LCD_DSTB_INT1               BITn(1)
            =1 
            =1 
            =1 /* Asm Sta */
            =1 #define LCD_PANEL_CONFLICT_STA      BITn(14)
            =1 #define LCD_DSTB_STA                BITn(13)
            =1 #define LCD_SYNC_MISS_STA           BITn(12)
            =1 #define LCD_FRAME_END_STA           BITn(11)
            =1 #define LCD_TCH_DET_STA             BITn(10)
            =1 #define LCD_STB_TICK_STA            BITn(9)
            =1 #define LCD_VSTART_STA              BITn(8)
            =1 #define LCD_VMID_STA                BITn(7)
            =1 #define LCD_VEND_STA                BITn(6)
            =1 #define LCD_VBLANK_STA              BITn(5)
            =1 #define LCD_ODD_EVEN_STA            BITn(4)
            =1 #define LCD_VDO_MODE_STA            BITn(3)
            =1 #define LCD_IDLE_MODE_STA           BITn(2)
            =1 #define LCD_3D_MODE_STA             BITn(1)
            =1 #define LCD_RUN_STA                 BITn(0)
            =1 
            =1 /*Scan Sta1*/
            =1 #define TP_BUSY_STA                 BITn(11) // [11]  RO: TP busyµÄÊµÊ±×´Ì¬
            =1 #define LCD_BUSY_STA                BITn(10) // [10]  RO: LCD busyµÄÊµÊ±×´Ì¬   
            =1 
            =1 /*Scan Sta2*/
            =1 #define LPF_MODE_TP_TURBO_ACK       BITn(13) // [13]  RO: 0:²»¿ª¿Ó  1:¿ª¿Ó
            =1 #define VB_MODE_ACK                 BITn(12) // [12]  RO: 0:Ð¡¿Ó    1:´ó¿Ó 
            =1 
            =1 
            =1 
            =1 /*******************************************************************************
            =1 * 3.Global structures, unions and enumerations using typedef
            =1 *******************************************************************************/
            =1 /* ASM_INT_FLAG0 bitÐÅÏ¢RO      0x00*/
            =1 typedef enum
            =1 {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 133 

            =1         BIT_LCD_BUSY_FALL_FLAG0                  = 15,
            =1         BIT_LCD_BUSY_RISE_FLAG0                  = 14,
            =1         BIT_LCD_PANEL_CONFLICT_FLAG0     = 13,
            =1         BIT_LCD_DSTB_FAIL_FLAG0                  = 12,
            =1         BIT_LCD_DSTB_RISE_FLAG0                  = 11,
            =1         BIT_LCD_SYNC_MISS_FALL_FLAG0     = 10,
            =1         BIT_LCD_SYNC_MISS_RISE_FLAG0     = 9,
            =1         BIT_LCD_ARAM_RDY_FLAG0                   = 8,
            =1         BIT_LCD_FRAME_END_FLAG0                  = 7,
            =1         BIT_LCD_TCH_DET_FLAG0                    = 6,
            =1         BIT_LCD_VSTART_FLAG0                     = 5,
            =1         BIT_LCD_VMID_FLAG0                               = 4,
            =1         BIT_LCD_VEND_FLAG0                               = 3,
            =1         BIT_LCD_VBLANK_FLAG0                     = 2,
            =1         BIT_LCD_RUN_FALL_FLAG0                   = 1,
            =1         BIT_LCD_RUN_RISE_FLAG0                   = 0,              
            =1 } ENUM_BIT_ASM_INT_FLAG0;
            =1 
            =1 /* ASM_INT_FLAG1 bitÐÅÏ¢RO      0x01*/
            =1 typedef enum
            =1 {                       
            =1         
            =1         BIT_LCD_STB_TICK_FLAG1                   = 11,
            =1         BIT_LCD_ODD_EVEN_FALL_FLAG1      = 10,
            =1         BIT_LCD_ODD_EVEN_RISE_FLAG1      = 9,
            =1         BIT_LCD_VDO_MODE_FALL_FLAG1      = 8,
            =1         BIT_LCD_VDO_MODE_RISE_FLAG1      = 7,  
            =1         BIT_LCD_IDLE_MODE_FALL_FLAG1     = 6,  
            =1         BIT_LCD_IDLE_MODE_RISE_FLAG1     = 5,
            =1         BIT_LCD_3D_MODE_FALL_FLAG1               = 4,
            =1         BIT_LCD_3D_MODE_RISE_FLAG1               = 3,
            =1         BIT_LCD_RUN_FLAG1                                = 2,
            =1         BIT_LCD_DSTB_FLAG1                               = 1,
            =1 } ENUM_BIT_ASM_INT_FLAG1;
            =1 
            =1 /* ASM_INT_CLR0 bitÐÅÏ¢WO 0x02*/
            =1 typedef enum
            =1 {
            =1         BIT_LCD_BUSY_FALL_CLR0                  = 15,
            =1         BIT_LCD_BUSY_RISE_CLR0                  = 14,
            =1         BIT_LCD_PANEL_CONFLICT_CLR0     = 13,
            =1         BIT_LCD_DSTB_FAIL_CLR0                  = 12,
            =1         BIT_LCD_DSTB_RISE_CLR0                  = 11,
            =1         BIT_LCD_SYNC_MISS_FALL_CLR0     = 10,
            =1         BIT_LCD_SYNC_MISS_RISE_CLR0     = 9,
            =1         BIT_LCD_ARAM_RDY_CLR0                   = 8,
            =1         BIT_LCD_FRAME_END_CLR0                  = 7,
            =1         BIT_LCD_TCH_DET_CLR0                    = 6,
            =1         BIT_LCD_VSTART_CLR0                     = 5,
            =1         BIT_LCD_VMID_CLR0                               = 4,
            =1         BIT_LCD_VEND_CLR0                               = 3,
            =1         BIT_LCD_VBLANK_CLR0                     = 2,
            =1         BIT_LCD_RUN_FALL_CLR0                   = 1,
            =1         BIT_LCD_RUN_RISE_CLR0                   = 0,            
            =1 } ENUM_BIT_ASM_INT_CLR0;
            =1 
            =1 /* ASM_INT_CLR1 bitÐÅÏ¢WO 0x03*/
            =1 typedef enum
            =1 {       
            =1         BIT_HW_MON_TIMEOUT_CLR1                 = 14,
            =1         BIT_LPF_MODE_EN_FALL_CLR1               = 13,
            =1         BIT_LPF_MODE_EN_RISE_CLR1               = 12,
            =1         BIT_LCD_STB_TICK_CLR1                   = 11,    
            =1         BIT_LCD_ODD_EVEN_FALL_CLR1              = 10,
            =1         BIT_LCD_ODD_EVEN_RISE_CLR1              = 9,
            =1         BIT_LCD_VDO_MODE_FALL_CLR1              = 8,
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 134 

            =1         BIT_LCD_VDO_MODE_RISE_CLR1              = 7,  
            =1         BIT_LCD_IDLE_MODE_FALL_CLR1     = 6,  
            =1         BIT_LCD_IDLE_MODE_RISE_CLR1     = 5,
            =1         BIT_LCD_3D_MODE_FALL_CLR1               = 4,
            =1         BIT_LCD_3D_MODE_RISE_CLR1               = 3,
            =1         BIT_LCD_RUN_CLR1                                = 2,
            =1         BIT_LCD_DSTB_CLR1                               = 1,   
            =1 } ENUM_BIT_ASM_INT_CLR1;
            =1 
            =1 /* ASM_INT_EN0 bitÐÅÏ¢0x04 */
            =1 typedef enum
            =1 {
            =1         BIT_LCD_BUSY_FALL_EN0              = 15,
            =1         BIT_LCD_BUSY_RISE_EN0              = 14,
            =1         BIT_LCD_PANEL_CONFLICT_EN0         = 13,
            =1         BIT_LCD_DSTB_FAIL_EN0              = 12,
            =1         BIT_LCD_DSTB_RISE_EN0              = 11,
            =1         BIT_LCD_SYNC_MISS_FALL_EN0         = 10,
            =1         BIT_LCD_SYNC_MISS_RISE_EN0         = 9,
            =1         BIT_LCD_ARAM_RDY_EN0               = 8,
            =1         BIT_LCD_FRAME_END_EN0              = 7,
            =1         BIT_LCD_TCH_DET_EN0                = 6,
            =1         BIT_LCD_VSTART_EN0                         = 5,
            =1         BIT_LCD_VMID_EN0                           = 4,
            =1         BIT_LCD_VEND_EN0                           = 3,
            =1         BIT_LCD_VBLANK_EN0                         = 2,
            =1         BIT_LCD_RUN_FALL_EN0               = 1,
            =1         BIT_LCD_RUN_RISE_EN0               = 0,            
            =1 } ENUM_BIT_ASM_INT_EN0;
            =1 
            =1 /* ASM_INT_EN1 bitÐÅÏ¢0x05 */
            =1 typedef enum
            =1 {
            =1         BIT_HW_MON_TIMEOUT_EN1             = 14,
            =1         BIT_LCD_LPF_MODE_EN_FALL_EN1   = 13,
            =1         BIT_LCD_LPF_MODE_EN_RISE_EN1   = 12,
            =1         BIT_LCD_STB_TICK_EN1               = 11,   
            =1         BIT_LCD_ODD_EVEN_FALL_EN1          = 10,
            =1         BIT_LCD_ODD_EVEN_RISE_EN1          = 9,
            =1         BIT_LCD_VDO_MODE_FALL_EN1          = 8,
            =1         BIT_LCD_VDO_MODE_RISE_EN1          = 7,  
            =1         BIT_LCD_IDLE_MODE_FALL_EN1         = 6,  
            =1         BIT_LCD_IDLE_MODE_RISE_EN1         = 5,
            =1         BIT_LCD_3D_MODE_FALL_EN1           = 4,
            =1         BIT_LCD_3D_MODE_RISE_EN1           = 3,
            =1         BIT_LCD_RUN_EN1                            = 2,
            =1         BIT_LCD_DSTB_EN1                           = 1,
            =1    
            =1 } ENUM_BIT_ASM_INT_EN1;
            =1 
            =1 /* ASM_INT_WAKE_EN0 bitÐÅÏ¢  06 */
            =1 typedef enum
            =1 {
            =1         BIT_LCD_BUSY_FALL_WAKE_EN0                      = 15,
            =1         BIT_LCD_BUSY_RISE_WAKE_EN0                      = 14,
            =1         BIT_LCD_PANEL_CONFLICT_WAKE_EN0         = 13,
            =1         BIT_LCD_DSTB_FAIL_WAKE_EN0                      = 12,
            =1         BIT_LCD_DSTB_RISE_WAKE_EN0                      = 11,
            =1         BIT_LCD_SYNC_MISS_FALL_WAKE_EN0         = 10,
            =1         BIT_LCD_SYNC_MISS_RISE_WAKE_EN0         = 9,
            =1         BIT_LCD_ARAM_RDY_WAKE_EN0                       = 8,
            =1         BIT_LCD_FRAME_END_WAKE_EN0                      = 7,
            =1         BIT_LCD_TCH_DET_WAKE_EN0                        = 6,
            =1         BIT_LCD_VSTART_WAKE_EN0                         = 5,
            =1         BIT_LCD_VMID_WAKE_EN0                           = 4,
            =1         BIT_LCD_VEND_WAKE_EN0                           = 3,
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 135 

            =1         BIT_LCD_VBLANK_WAKE_EN0                         = 2,
            =1         BIT_LCD_RUN_FALL_WAKE_EN0                       = 1,
            =1         BIT_LCD_RUN_RISE_WAKE_EN0                       = 0,                      
            =1 } ENUM_BIT_ASM_WAKE_EN0 ;
            =1 
            =1 /* ASM_INT_WAKE_EN1 bitÐÅÏ¢  07 */
            =1 typedef enum
            =1 {
            =1         BIT_HW_MON_TIMEOUT_WAKE_EN1             = 14,
            =1         BIT_LCD_LPF_MODE_EN_FALL_WAKE_EN1       = 13,
            =1         BIT_LCD_LPF_MODE_EN_RISE_WAKE_EN1       = 12,
            =1         BIT_LCD_STB_TICK_WAKE_EN1                       = 11, 
            =1         BIT_LCD_ODD_EVEN_FALL_WAKE_EN1          = 10,
            =1         BIT_LCD_ODD_EVEN_RISE_WAKE_EN1          = 9,
            =1         BIT_LCD_VDO_MODE_FALL_WAKE_EN1          = 8,
            =1         BIT_LCD_VDO_MODE_RISE_WAKE_EN1          = 7,  
            =1         BIT_LCD_IDLE_MODE_FALL_WAKE_EN1         = 6,  
            =1         BIT_LCD_IDLE_MODE_RISE_WAKE_EN1         = 5,
            =1         BIT_LCD_3D_MODE_FALL_WAKE_EN1           = 4,
            =1         BIT_LCD_3D_MODE_RISE_WAKE_EN1           = 3,
            =1 } ENUM_BIT_ASM_WAKE_EN1;
            =1 
            =1 /* ASM_INT_STA0 bitÐÅÏ¢  RO  08 */
            =1 typedef enum
            =1 {
            =1         BIT_LCD_BUSY_STA                                = 15,
            =1         BIT_LCD_PANEL_CONFLICT_STA              = 14,
            =1         BIT_LCD_DSTB_STA                                = 13,
            =1         BIT_LCD_SYNC_MISS_STA                   = 12,
            =1         BIT_LCD_FRAME_END_STA                   = 11,
            =1         BIT_LCD_TCH_DET_STA                     = 10,
            =1         BIT_LCD_STB_TICK_STA                    = 9,
            =1         BIT_LCD_VSTART_STA                              = 8,
            =1         BIT_LCD_VMID_STA                                = 7,
            =1         BIT_LCD_VEND_STA                                = 6,
            =1         BIT_LCD_VBLANK_STA                              = 5,
            =1         BIT_LCD_ODD_EVEN_STA                    = 4,
            =1         BIT_LCD_VDO_MODE_STA                    = 3,
            =1         BIT_LCD_IDLE_MODE_STA                   = 2,
            =1         BIT_LCD_3D_MODE_STA                     = 1,
            =1         BIT_LCD_RUN_STA                                 = 0,
            =1 } ENUM_BIT_ASM_INT_STA0;
            =1 
            =1 /*******************************************************************************
            =1 * 4.Global variable extern declarations
            =1 *******************************************************************************/
            =1 extern ST_AsmRegisters * XRAM pAsmRegs;
            =1 /*******************************************************************************
            =1 * 5.Global function prototypes
            =1 ********************************************************************************/
            =1 void Afe_120Hz_Run(void);
            =1 void DrvAsmInterEnable0(UINT16 usInterMode);
            =1 void DrvAsmAramAvail(void);
            =1 void DrvAsmScanStart(void);
            =1 void DrvAsmInterEnable1(UINT16 usInterMode);
            =1 
            =1 #endif
  284       =1 
   27          
   28          #if _TEST_CAL_EN
   29          /*******************************************************************************
   30           * 2.Private constant and macro definitions using #define
   31           *******************************************************************************/
   32          ST_FrameData  g_stFrmData _at_ 0x1000;// Frame Data
   33          volatile ST_Spi0DmaRegisters *XRAM pSpi0_DmaRegs = (ST_Spi0DmaRegisters *)SPI0_REG_BASE_ADDR;
   34          #define CAL_TEST_A0  (UINT16)(g_stFrmData.CalBaseAddr)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 136 

   35          #define CAL_TEST_A1  (CAL_TEST_A0+(TX_LOCAL_NUM*RX_LOCAL_NUM)*2)
   36          #define CAL_TEST_A2  (CAL_TEST_A1+(TX_LOCAL_NUM*RX_LOCAL_NUM)*2)
   37          
   38          #define CAL_TEST_PKS (UINT16)(g_stFrmData.ScDiff)
   39          
   40          #define MIN_AVG(a,b)      (((a)<0)?(0):(((a)<(b))?(a):(b)))//Èôa<0,MIN = 0;Èôa>0,ÔòMINÎª(a)Óë(b)ÖÐµÄ×îÐ¡Ö
             -µ,(b)Ó¦¸ÃÌîÈëÎÞ·ûºÅÊý
   41          
   42          #define ERROR_HOLD        {DelayMs(100);while(1);}
   43          #define ARAM_CAL_TEST     0
   44          
   45          #define DELAY             //DelayUs(10)
   46          #define WATI_CAL_SUSPEND          while(((pCalRegs->rCmd&CAL_CMD_SUSPEND) != CAL_CMD_SUSPEND)&&(((pCalRegs->r
             -Int&CAL_CMD_INT) != CAL_CMD_INT))) 
   47          #define WAIT_AMOVE_SUSPEND    while((((pCalRegs->rInt&CAL_CMD_AMOV_SUSPEND) != CAL_CMD_AMOV_SUSPEND))&&((
             -(pCalRegs->rInt&CAL_CMD_AMOV_INT) != CAL_CMD_AMOV_INT))) 
   48          /*******************************************************************************
   49           * 3.Private enumerations, structures and unions using typedef
   50           *******************************************************************************/
   51          
   52          /************************************************** *****************************
   53           * 4.Static variables
   54           *******************************************************************************/
   55          
   56          /*******************************************************************************
   57           * 5.Global variable or extern global variabls/functions
   58           *******************************************************************************/
   59          SINT16 * XRAM T_tempbuf1;
   60          SINT16 * XRAM T_tempbuf2;
   61          SINT16 * XRAM T_tempbuf3;
   62          SINT16 * XRAM T_tempOut;
   63          SINT16 * XRAM g_pAfeAram = (volatile SINT16*)ARAM_DATA_BASE_ADDR;
   64          UINT32 g_I2cCnt =0;
   65          UINT8 g_ucCalFlag = 0;
   66          
   67          
   68          /*******************************************************************************
   69           * 6.Static function prototypes
   70           *******************************************************************************/
   71          
   72          #if TEST_CAL_ADD_EN
   73          /*******************************************************************************
   74           *   Name: Test_CAL_MaxtixAdd
   75           *  Brief: ²âÊÔ¼Ó·¨ÔËËã
   76           *  Input:
   77           * Output:
   78           * Return:
   79           *******************************************************************************/
   80          BOOLEAN Test_CAL_MaxtixAdd()
   81          {
   82   1          UINT8 i,j;
   83   1          UINT8 shift;
   84   1          BOOLEAN flag;
   85   1          SINT32 temp;
   86   1          ST_CalMcMatrixParam XRAM CalParam;
   87   1          static UINT8 counter = 0;
   88   1      
   89   1          DBG_CAL("\n\nTest: Matrix add");
   90   1      
   91   1          if(counter == 4)
   92   1              counter = 0;
   93   1          
   94   1          shift = counter;
   95   1          counter ++;
   96   1          //for (shift = 0; shift < 4; shift++)
   97   1          {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 137 

   98   2              DBG_CAL("\nShift=%d",shift);
   99   2              for (i = 0; i < TX_LOCAL_NUM; i++)
  100   2              {
  101   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
  102   3                  {
  103   4                      *(T_tempbuf1 + i*RX_LOCAL_NUM + j) =  rand()>>1;
  104   4                      *(T_tempbuf2 + i*RX_LOCAL_NUM + j) =  rand()>>1;
  105   4                      //g_pAfeAram[i*RX_LOCAL_NUM + j]     = rand()>>1;
  106   4                  }
  107   3              }
  108   2              DBG_CAL("\n\rMem-Mem:");
  109   2              CalParam.usSrc1Addr = CAL_TEST_A0;
  110   2              CalParam.usSrc2Addr = CAL_TEST_A1;
  111   2              CalParam.usDstAddr  = CAL_TEST_A2;
  112   2              CalParam.ucTxLen    = CAL_TEST_TX;
  113   2              CalParam.ucRxLen    = CAL_TEST_RX;
  114   2              CalParam.ucShift    = shift;
  115   2              CalParam.usCalCmd   = OP_ADD;
  116   2              CalParam.ucCfg      = SIGN_MOD_0;
  117   2      
  118   2              DrvCal_MatrixProc(&CalParam);
  119   2              g_ucCalFlag = 0;
  120   2              for (i = 0; i < CAL_TEST_TX; i++)
  121   2              {
  122   3                  for (j = 0; j < CAL_TEST_RX; j++)
  123   3                  {
  124   4                      temp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) + *(T_tempbuf2 + i*RX_LOCAL_NUM + j)) >> shift
             -;
  125   4                      if (temp > 0x7FFF)
  126   4                      {   
  127   5                          temp = 0x7FFF;
  128   5                      }
  129   4                      else if (temp < -32768)
  130   4                      {
  131   5                          temp = 0x8000;
  132   5                      }
  133   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)temp)
  134   4                      {
  135   5                          g_ucCalFlag = 1;
  136   5                          DBG_ERROR("\n\r%03derror%04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),(SINT16)temp);
  137   5                      }
  138   4                      else
  139   4                      {
  140   5                          //DBG_CAL("\n\r%03dok   %04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),(SINT16)temp);
  141   5                      }
  142   4                  }
  143   3              }
  144   2              if (g_ucCalFlag)
  145   2              {
  146   3                  DBG_CAL("\n\rCal Add test is Error");
  147   3      
  148   3                  DBG_CAL("\n");
  149   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
  150   3                  {
  151   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
  152   4                      {
  153   5                          DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
  154   5                      }
  155   4                      DBG_CAL("\n");
  156   4                  }
  157   3      
  158   3                  DBG_CAL("\n");
  159   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
  160   3                  {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 138 

  161   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
  162   4                      {
  163   5                          DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
  164   5                      }
  165   4                      DBG_CAL("\n");
  166   4                  }       
  167   3      
  168   3                  ERROR_HOLD;
  169   3              }
  170   2              else
  171   2              {
  172   3                  DBG_CAL("\n\rCal Add test is OK!");
  173   3              }
  174   2      
  175   2      #if 0        
                       DBG_CAL("\nAram-Mem:");
               
                       for (i = 0; i < TX_ARAM_NUM; i++)
                       {
                           for (j = 0; j < RX_ARAM_NUM; j++)
                           {
                               *(T_tempbuf1 + i*RX_ARAM_NUM + j) =  rand()>>1;
                               g_pAfeAram[i*RX_ARAM_NUM + j]     = rand()>>1;
                           }
                       }
                       
                       CalParam.usSrc1Addr = CAL_TEST_A0;
                       CalParam.usSrc2Addr = ARAM_DATA_BASE_ADDR;
                       CalParam.usDstAddr  = CAL_TEST_A2;
                       CalParam.ucTxLen    = CAL_ARAM_TX;
                       CalParam.ucRxLen    = CAL_ARAM_RX;
                       CalParam.ucShift    = shift;
                       CalParam.usCalCmd   = OP_ADD;
                       CalParam.ucCfg      = SIGN_MOD_0;
               
                       DrvCal_MatrixProc(&CalParam);
                       flag = 0;
                       
                       for (i=0; i<CAL_ARAM_TX; i++)
                       {
                           for (j=0; j<CAL_ARAM_RX; j++)
                           {
                               temp = (*(T_tempbuf1 + i*RX_ARAM_NUM + j) + *(g_pAfeAram + i*RX_ARAM_NUM + j)) >> shift; 
             -             
                               if (temp > 0x7FFF)
                               {   
                                   temp = 0x7FFF;
                               }
                               else if (temp < -32768)
                               {
                                   temp = 0x8000;
                               }
               
                               if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)temp)
                               {
                                   g_ucCalFlag = 1;
                                   DBG_ERROR("\n\r%03derror%04X,%04x",(i*RX_ARAM_NUM + j),*(T_tempOut + i*RX_ARAM_NUM + 
             -j),(SINT16)temp);
                               }
                               else
                               {
                                   //DBG_CAL("\n\r%03dok   %04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempbuf2 + i*RX_LOCAL_NUM
             - + j),(SINT16)temp);
                               }
                           }
                       }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 139 

                       if (g_ucCalFlag)
                       {
                           DBG_CAL("\nCal Add test is Error");
               
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
                               {
                                   DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }
               
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
                               {
                                   DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }   
                           
                           ERROR_HOLD;
                       }
                       else
                       {
                           DBG_CAL("\nCal Add test is OK");
                       }
               #endif        
  255   2          }
  256   1      
  257   1          return g_ucCalFlag;
  258   1      }
*** WARNING C47 IN LINE 84 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
  259          #else
               #define Test_CAL_MaxtixAdd   /##/
               #endif
  262          
  263          #if TEST_CAL_SUB_EN
  264          /*******************************************************************************
  265           *   Name: Test_CAL_MaxtixSub
  266           *  Brief: ²âÊÔ¼õ·¨ÔËËã
  267           *  Input:
  268           * Output:
  269           * Return:
  270           *******************************************************************************/
  271          BOOLEAN Test_CAL_MaxtixSub()
  272          {
  273   1          UINT8 i,j;
  274   1          UINT8 shift;
  275   1          UINT16 usSubMax;
  276   1          SINT16 temp;
  277   1          BOOLEAN flag;
  278   1          ST_CalMcMatrixParam XRAM CalParam;
  279   1          static UINT8 counter = 0;
  280   1          DBG_CAL("\n\nTest: Matrix sub");
  281   1      
  282   1          if(counter == 4)
  283   1              counter = 0;
  284   1      
  285   1          shift = counter;
  286   1          counter ++;
  287   1      
  288   1          //for (shift = 0; shift < 4; shift++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 140 

  289   1          {
  290   2              DBG_CAL("\nShift=%d",shift);
  291   2              for (i=0; i<TX_LOCAL_NUM; i++)
  292   2              {
  293   3                  for (j=0; j<RX_LOCAL_NUM; j++)
  294   3                  {
  295   4                      T_tempbuf1[i*RX_LOCAL_NUM + j] = rand()>>1;//30000;
  296   4                      T_tempbuf2[i*RX_LOCAL_NUM + j] = rand()>>1;//;-30000;
  297   4                      //g_pAfeAram[i*RX_LOCAL_NUM + j] = rand()>>1;
  298   4                  }
  299   3              }
  300   2      
  301   2              DBG_CAL("\nMem-Mem:");
  302   2              CalParam.usSrc1Addr = CAL_TEST_A0;
  303   2              CalParam.usSrc2Addr = CAL_TEST_A1;
  304   2              CalParam.usDstAddr  = CAL_TEST_A2;
  305   2              CalParam.ucTxLen    = CAL_TEST_TX;
  306   2              CalParam.ucRxLen    = CAL_TEST_RX;
  307   2              CalParam.ucShift    = shift;
  308   2              CalParam.usCalCmd   = OP_SUB;
  309   2              CalParam.ucCfg      = SIGN_MOD_0;
  310   2      
  311   2              DrvCal_MatrixProc(&CalParam);
  312   2              g_ucCalFlag = 0;
  313   2              usSubMax = 0;
  314   2              for (i = 0; i < CAL_TEST_TX; i++)
  315   2              {
  316   3                  for (j = 0; j < CAL_TEST_RX; j++)
  317   3                  {
  318   4                      temp = ((SINT16)*(T_tempbuf1 + i*RX_LOCAL_NUM + j) - (SINT16)*(T_tempbuf2 + i*RX_LOCAL_NU
             -M + j)) >> shift;
  319   4                      if (temp > 32767)
  320   4                      {   
  321   5                          temp = 32767;
  322   5                      }
  323   4                      else if (temp < -32768)
  324   4                      {
  325   5                          temp = -32768;
*** WARNING C188 IN LINE 325 OF ..\..\src\source\task\Test_CAL.c: 'constant': value truncated
  326   5                      }
  327   4                      if (abs((SINT16)temp) > usSubMax)
  328   4                      {
  329   5                          usSubMax = abs((SINT16)temp);
  330   5                      }
  331   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)temp)
  332   4                      {
  333   5                          g_ucCalFlag = 1;
  334   5                          DBG_ERROR("\n\r%03derror%04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),(SINT16)temp);
  335   5                      }
  336   4                      else
  337   4                      {
  338   5                          //DBG_CAL("\n\r%03dok   %04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),(SINT16)temp);
  339   5                      }
  340   4                  }
  341   3              }
  342   2              if (g_ucCalFlag)
  343   2              {
  344   3                  DBG_CAL("\nCal SUB test is ERROR!");
  345   3                  DBG_CAL("\n");
  346   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
  347   3                  {
  348   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
  349   4                      {
  350   5                          DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 141 

  351   5                      }
  352   4                      DBG_CAL("\n");
  353   4                  }
  354   3                  
  355   3                  DBG_CAL("\n");
  356   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
  357   3                  {
  358   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
  359   4                      {
  360   5                          DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
  361   5                      }
  362   4                      DBG_CAL("\n");
  363   4                  } 
  364   3      
  365   3                  
  366   3                  ERROR_HOLD;
  367   3              }
  368   2              else
  369   2              {
  370   3                  DBG_CAL("\n\rCal SUB test is OK!");
  371   3              }
  372   2      
  373   2      
  374   2              for (i=0; i<TX_ARAM_NUM; i++)
  375   2              {
  376   3                  for (j=0; j<RX_ARAM_NUM; j++)
  377   3                  {
  378   4                      T_tempbuf1[i*RX_ARAM_NUM + j] = rand()>>1;//30000;
  379   4                      //T_tempbuf2[i*RX_ARAM_NUM + j] = rand()>>1//;-30000;
  380   4                      g_pAfeAram[i*RX_ARAM_NUM + j] = rand()>>1;
  381   4                  }
  382   3              }
  383   2      
  384   2      #if ARAM_CAL_TEST
                       DBG_CAL("\n\rAram-Mem:");
                       CalParam.usSrc1Addr = CAL_TEST_A0;
                       CalParam.usSrc2Addr = ARAM_DATA_BASE_ADDR;
                       CalParam.usDstAddr  = CAL_TEST_A2;
                       CalParam.ucTxLen    = CAL_ARAM_TX;
                       CalParam.ucRxLen    = CAL_ARAM_RX;
                       CalParam.ucShift    = shift;
                       CalParam.usCalCmd   = OP_SUB;
                       CalParam.ucCfg      = SIGN_MOD_0;
               
                       DrvCal_MatrixProc(&CalParam);
                       CALCKEN = 1;
                       g_ucCalFlag = 0;
                       usSubMax = 0;
                       for (i = 0; i < CAL_ARAM_TX; i++)
                       {
                           for (j = 0; j < CAL_ARAM_RX; j++)
                           {
                               temp = ((SINT32)*(T_tempbuf1 + i*RX_ARAM_NUM + j) - (SINT16)*(g_pAfeAram + i*RX_ARAM_NUM 
             -+ j)) >> shift;
                               if (temp > 32767)
                               {   
                                   temp = 32767;
                               }
                               else if (temp < -32768)
                               {
                                   temp = -32768;
                               }
                               if (abs((SINT16)temp) > usSubMax)
                               {
                                   usSubMax = abs((SINT16)temp);
                               }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 142 

                               if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)temp)
                               {
                                   g_ucCalFlag = 1;
                                   DBG_ERROR("\n\r%03derror%04X,%04x",(i*RX_ARAM_NUM + j),*(T_tempOut + i*RX_ARAM_NUM + 
             -j),(SINT16)temp);
                               }
                               else
                               {
                                   //DBG_CAL("\n\r%03dok   %04X,%04x",(i*RX_LOCAL_NUM + j),*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),(SINT16)temp);
                               }
                           }
                       }
                             
                       if(usSubMax != pCalRegs->rSubabsMax)
                       {
                           DBG_CAL("\n\rSubMax is Error:%04X,%04x",usSubMax,pCalRegs->rSubabsMax);           
                       }
                       else
                       {
                           DBG_CAL("\n\rSubMax is  %04X =%04x",usSubMax,pCalRegs->rSubabsMax);    
                       }
                       CALCKEN = 0;
                       if (g_ucCalFlag)
                       {
                           DBG_CAL("\nCal SUB test is Error!");
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
                               {
                                   DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }
               
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
                               {
                                   DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }             
                           ERROR_HOLD;
                       }
                       else
                       {
                           DBG_CAL("\nCal SUB test is OK!");
                       }
               #endif          
  466   2          }
  467   1          return g_ucCalFlag;
  468   1      }
*** WARNING C47 IN LINE 277 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
  469          #else
               #define Test_CAL_MaxtixSub    /##/
               #endif
  472          
  473          #if TEST_CAL_AMP_EN
  474          /*******************************************************************************
  475           *   Name: Test_CAL_MaxtixAmp
  476           *  Brief: ²âÊÔ³Ë·¨ÔËËã
  477           *  Input:
  478           * Output:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 143 

  479           * Return:
  480           *******************************************************************************/
  481          BOOLEAN Test_CAL_MaxtixAmp()
  482          {
  483   1          UINT8 i,j;
  484   1          BOOLEAN flag;
  485   1          UINT8 shift;
  486   1          SINT16 mul;
  487   1          SINT32 temp;
  488   1          //   SINT16 tmp2;
  489   1          ST_CalMcMatrixParam XRAM CalParam;
  490   1          static UINT8 counter = 0;
  491   1          DBG_CAL("\n\nTest: Matrix amp");
  492   1      
  493   1          if(counter == 16)
  494   1              counter = 0;
  495   1          
  496   1          shift = counter;
  497   1          counter ++;   
  498   1          
  499   1          //for (shift = 0; shift < 16; shift++)
  500   1          {
  501   2              DBG_CAL("\n\rshift:%02d",shift);
  502   2              for (mul = -100; mul < 100; mul++)
  503   2              {         
  504   3                  //DBG_CAL_DATA("\n\Mul:%03d,shift:%02d",mul,shift);
  505   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
  506   3                  {
  507   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
  508   4                      {
  509   5                          *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand() >> 4;//400;
  510   5                          //g_pAfeAram[i*RX_LOCAL_NUM + j]  = (SINT16)rand() >> 4;
  511   5                      }
  512   4                  }
  513   3      
  514   3                  CalParam.usSrc1Addr = CAL_TEST_A0;
  515   3                  CalParam.usDstAddr  = CAL_TEST_A1;
  516   3                  CalParam.ucTxLen    = CAL_TEST_TX;
  517   3                  CalParam.ucRxLen    = CAL_TEST_RX;
  518   3                  CalParam.ucShift    = shift;
  519   3                  CalParam.usCalCmd   = OP_AMP;
  520   3      
  521   3                  DrvCal_MatrixAmp(&CalParam,mul);
  522   3                  g_ucCalFlag = 0;
  523   3                  for (i = 0; i < CAL_TEST_TX; i++)
  524   3                  {
  525   4                      for (j = 0; j < CAL_TEST_RX; j++)
  526   4                      {
  527   5                          temp = (SINT16)(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) * mul;
  528   5                          temp >>= shift;
  529   5                          if (temp > 32767)
  530   5                          {   
  531   6                              temp = 32767;
  532   6                          }
  533   5                          else if (temp < -32768)
  534   5                          {
  535   6                              temp = -32768;
  536   6                          }
  537   5                          if (*(T_tempbuf2 + i*RX_LOCAL_NUM + j) != (SINT16)temp )
  538   5                          {
  539   6                              g_ucCalFlag = 1;
  540   6                              DBG_ERROR("\nerror=%04x,%04x,%04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j),(SINT16)tem
             -p,*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
  541   6                          }
  542   5                          else
  543   5                          {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 144 

  544   6                              //DBG_CAL_DATA("\nok=%04x,%04x,%04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j),(SINT16)t
             -emp,*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
  545   6                          }
  546   5                      }    
  547   4                  }
  548   3                  if (g_ucCalFlag)
  549   3                  {
  550   4                      DBG_CAL("\n\r\Mul:%03d,shift:%02d",mul,shift);
  551   4                      DBG_CAL("\n\rError");
  552   4                      DBG_CAL("\n");
  553   4                      for (i = 0; i < TX_LOCAL_NUM; i++)
  554   4                      {
  555   5                          for (j = 0; j < RX_LOCAL_NUM; j++)
  556   5                          {
  557   6                              DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
  558   6                          }
  559   5                          DBG_CAL("\n");
  560   5                      }
  561   4                      
  562   4                      DBG_CAL("\n");
  563   4                      ERROR_HOLD;
  564   4                  }
  565   3      
  566   3      #if ARAM_CAL_TEST
                            for (i = 0; i < TX_ARAM_NUM; i++)
                           {
                               for (j = 0; j < RX_ARAM_NUM; j++)
                               {
                                   g_pAfeAram[i*RX_ARAM_NUM + j] = (SINT16)rand() >> 4;
                               }
                           }           
               
                           CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                           CalParam.usDstAddr  = CAL_TEST_A1;
                           CalParam.ucTxLen    = CAL_ARAM_TX;
                           CalParam.ucRxLen    = CAL_ARAM_RX;
                           CalParam.ucShift    = shift;
                           CalParam.usCalCmd   = OP_AMP;
               
                           DrvCal_MatrixAmp(&CalParam,mul);
                           g_ucCalFlag = 0;
                           for (i = 0; i < CAL_ARAM_TX; i++)
                           {
                               for (j = 0; j < CAL_ARAM_RX; j++)
                               {
                                   temp = (SINT16)g_pAfeAram[i*RX_ARAM_NUM + j] * mul;
                                   temp >>= shift;
                                   if (temp > 32767)
                                   {   
                                       temp = 32767;
                                   }
                                   else if (temp < -32768)
                                   {
                                       temp = -32768;
                                   }
                                   if (*(T_tempbuf2 + i*RX_ARAM_NUM + j) != (SINT16)temp )
                                   {
                                       g_ucCalFlag = 1;
                                       DBG_ERROR("\n\rerror>>%04x,%04x,%04x",*(T_tempbuf2 + i*RX_ARAM_NUM + j),(SINT16)t
             -emp,*(g_pAfeAram + i*RX_ARAM_NUM + j));
                                   }
                                   else
                                   {
                                       //DBG_CAL_DATA("\n\rok>>   %04x,%04x,%04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j),(SI
             -NT16)temp,*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                                   }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 145 

                               }
                           }
                           if (g_ucCalFlag)
                           {
                               DBG_CAL("\n\Mul:%03d,shift:%02d",mul,shift);
                               DBG_CAL("\nError");
               
                               
                               DBG_CAL("\n");
                               for (i = 0; i < TX_LOCAL_NUM; i++)
                               {
                                   for (j = 0; j < RX_LOCAL_NUM; j++)
                                   {
                                       DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                                   }
                                   DBG_CAL("\n");
                               }             
                               
                               ERROR_HOLD;
                           }
                                       
               #endif  
  629   3      
  630   3              }  
  631   2              DBG_CAL("\nCal AMP test is OK!");
  632   2                      
  633   2          }
  634   1      
  635   1      
  636   1          return g_ucCalFlag;
  637   1      }
*** WARNING C47 IN LINE 484 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
  638          #else
               #define Test_CAL_MaxtixAmp    /##/
               #endif
  641          
  642          #if TEST_CAL_DIV_EN
  643          #define TEST_DIV  25 //³ý·¨ÏµÊý:0~255
  644          /*******************************************************************************
  645           *   Name: Test_CAL_MaxtixDiv
  646           *  Brief: ²âÊÔ³ý·¨ÔËËã
  647           *  Input:
  648           * Output:
  649           * Return:
  650           *******************************************************************************/
  651          BOOLEAN Test_CAL_MaxtixDiv()
  652          {
  653   1          UINT8 i,j;
  654   1          BOOLEAN flag;
  655   1          UINT8 Div;
  656   1      
  657   1          ST_CalMcMatrixParam XRAM CalParam;
  658   1      
  659   1          DBG_CAL("\n\nTest: Matrix div");
  660   1      
  661   1          for (i = 0; i < TX_LOCAL_NUM; i++)
  662   1          {
  663   2              for (j = 0; j < RX_LOCAL_NUM; j++)
  664   2              {
  665   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();//0x555;
  666   3              }
  667   2          }
  668   1      
  669   1          Div = TEST_DIV;
  670   1          CalParam.usSrc1Addr = CAL_TEST_A0;
  671   1          CalParam.usDstAddr  = CAL_TEST_A1;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 146 

  672   1          CalParam.ucTxLen    = CAL_TEST_TX;
  673   1          CalParam.ucRxLen    = CAL_TEST_RX;
  674   1          CalParam.usCalCmd   = OP_DIV;//OP_AMP;
  675   1      
  676   1          DrvCal_MatrixDiv(&CalParam,Div);
  677   1          g_ucCalFlag = 0;
  678   1          for (i = 0; i < CAL_TEST_TX; i++)
  679   1          {
  680   2              for (j = 0; j < CAL_TEST_RX; j++)
  681   2              {
  682   3                  if (*(T_tempbuf2 + i*RX_LOCAL_NUM + j) != (*(T_tempbuf1 + i*RX_LOCAL_NUM + j))/Div )
  683   3                  {
  684   4                      g_ucCalFlag = 1;
  685   4                      DBG_ERROR("\n\r%03dERROR->Soft:%04X,Cal:%04x ",i*RX_LOCAL_NUM+j,(*(T_tempbuf1 + i*RX_LOCA
             -L_NUM + j))/Div,*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
  686   4                  }
  687   3                  else
  688   3                  {
  689   4                     // DBG_CAL_DATA("\n\r%03dOK->   Soft:%04X,Cal:%04x ",i*RX_LOCAL_NUM+j,(*(T_tempbuf1 + i*RX
             -_LOCAL_NUM + j))/Div,*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
  690   4                  }
  691   3              }
  692   2          }
  693   1          if (g_ucCalFlag)
  694   1          {
  695   2              DBG_CAL("\nCal DIV test mem is Error!");
  696   2              DBG_CAL("\n");
  697   2              for (i = 0; i < TX_LOCAL_NUM; i++)
  698   2              {
  699   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
  700   3                  {
  701   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
  702   4                  }
  703   3                  DBG_CAL("\n");
  704   3              }
  705   2              
  706   2              DBG_CAL("\n");
  707   2              
  708   2              ERROR_HOLD;
  709   2          }
  710   1          else
  711   1          {
  712   2              DBG_CAL("\nCal DIV test mem is OK!");
  713   2          }
  714   1              
  715   1      #if 0//ARAM_CAL_TEST
               
                   for (i = 0; i < TX_ARAM_NUM; i++)
                   {
                       for (j = 0; j < RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT16)rand();//0x555;
                       }
                   }
               
               
                   Div = TEST_DIV;
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A1;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;
                   CalParam.usCalCmd   = OP_DIV;//OP_AMP;
               
                   DrvCal_MatrixDiv(&CalParam,Div);
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 147 

                   {
                       for (j = 0; j < CAL_ARAM_RX; j++)
                       {
                           if (*(T_tempbuf2 + i*RX_ARAM_NUM + j) != (*(g_pAfeAram + i*RX_ARAM_NUM + j))/Div )
                           {
                               g_ucCalFlag = 1;
                               DBG_ERROR("\n\r%03dERROR->Soft:%04X,Cal:%04x ",i*RX_LOCAL_NUM+j,(*(g_pAfeAram + i*RX_LOCA
             -L_NUM + j))/Div,*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\r%03dOK->   Soft:%04X,Cal:%04x ",i*RX_LOCAL_NUM+j,(*(T_tempbuf1 + i*RX
             -_LOCAL_NUM + j))/Div,*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
                           }
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\nCal DIV test aram is Error!");
                       
                       DBG_CAL("\n");
                       for (i = 0; i < TX_LOCAL_NUM; i++)
                       {
                           for (j = 0; j < RX_LOCAL_NUM; j++)
                           {
                               DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                           }
                           DBG_CAL("\n");
                       }             
                       
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\nCal DIV test aram is OK!");
                   }
               
               #endif    
  772   1          return g_ucCalFlag;
  773   1      }
*** WARNING C47 IN LINE 654 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
  774          #else
               #define Test_CAL_MaxtixDiv    /##/
               #endif
  777          
  778          #if TEST_CAL_MOV_EN
  779          /*******************************************************************************
  780           *   Name: Test_CAL_MaxtixMov
  781           *  Brief: ²âÊÔ¾ØÕó°áÒÆÔËËã
  782           *  Input:
  783           * Output:
  784           * Return:
  785           *******************************************************************************/
  786          BOOLEAN Test_CAL_MaxtixMov()
  787          {
  788   1          UINT8 i,j;
  789   1          BOOLEAN flag = 0;
  790   1              
  791   1      #if TEST_CAL_MOV_INT_EN 
                   UINT16 DelayValue;
               #endif
  794   1              
  795   1          ST_CalMcMatrixParam XRAM CalParam;
  796   1      
  797   1          DBG_CAL("\n\nTest: Matrix mov");
  798   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 148 

  799   1          for (i = 0; i < TX_LOCAL_NUM; i++)
  800   1          {
  801   2              for (j = 0; j < RX_LOCAL_NUM; j++)
  802   2              {
  803   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
  804   3                  //*(g_pAfeAram + i*RX_LOCAL_NUM + j) = rand();
  805   3              }
  806   2          }
  807   1      
  808   1          DBG_CAL("\nMem to Mem");
  809   1          CalParam.usSrc1Addr = CAL_TEST_A0;
  810   1          CalParam.usDstAddr  = CAL_TEST_A1;
  811   1          CalParam.ucTxLen    = CAL_TEST_TX;
  812   1          CalParam.ucRxLen    = CAL_TEST_RX;
  813   1          CalParam.usCalCmd   = OP_MOV;
  814   1          CalParam.ucCfg      = MOV_CFG_0;    /* 0: ²»×ªÖÃ£¬1: ×ªÖÃ */
  815   1      
  816   1          DrvCal_MatrixProc(&CalParam);
  817   1          g_ucCalFlag = 0;
  818   1          for (i = 0; i < CAL_TEST_TX; i++)
  819   1          {
  820   2              for (j = 0; j < CAL_TEST_RX; j++)
  821   2              {
  822   3                  if (*(T_tempbuf2 + i*RX_LOCAL_NUM + j) != *(T_tempbuf1 + i*RX_LOCAL_NUM + j))
  823   3                  {
  824   4                      g_ucCalFlag = 1;
  825   4                      DBG_ERROR("\n\rERROR->%04x,%04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j),*(T_tempbuf1 + i*RX_L
             -OCAL_NUM + j));
  826   4                  }
  827   3                  else
  828   3                  {
  829   4                      //DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j),*(T_tempbuf1 + i
             -*RX_LOCAL_NUM + j));
  830   4                  }
  831   3              }
  832   2          }
  833   1      
  834   1          if (g_ucCalFlag)
  835   1          {
  836   2              DBG_CAL("\nCal MOV test is Error");
  837   2              ERROR_HOLD;
  838   2          }
  839   1          else
  840   1          {
  841   2              DBG_CAL("\nCal MOV test is OK!");
  842   2          }
  843   1      #if ARAM_CAL_TEST
               
                   for (i = 0; i < TX_ARAM_NUM; i++)
                   {
                       for (j = 0; j < RX_ARAM_NUM; j++)
                       {
                           //*(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = rand();
                       }
                   }
               
               
                   DBG_CAL("\n\rAram to Mem");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;//CAL_TEST_A0;
                   CalParam.usDstAddr  = CAL_TEST_A1;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;
                   CalParam.usCalCmd   = OP_MOV;
                   CalParam.ucCfg      = MOV_CFG_0;    /* 0: ²»×ªÖÃ£¬1: ×ªÖÃ */
               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 149 

                   DrvCal_MatrixProc(&CalParam);
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       for (j = 0; j < CAL_ARAM_RX; j++)
                       {
                           if (g_pAfeAram[i*RX_ARAM_NUM + j] != *(T_tempbuf2 + i*RX_ARAM_NUM + j))
                           {
                               g_ucCalFlag = 1;
                               DBG_ERROR("\n\rERROR->%04x,%04x",*(g_pAfeAram + i*RX_ARAM_NUM + j),*(T_tempbuf2 + i*RX_AR
             -AM_NUM + j));
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j),*(T_tempbuf2 + i
             -*RX_LOCAL_NUM + j));
                           }
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\nCal MOV test is Error!");
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\nCal MOV test is OK!");
                   }
               #endif
  891   1          return g_ucCalFlag;
  892   1      }
  893          #else
               #define Test_CAL_MaxtixMov      /##/
               #endif
  896          
  897          #if TEST_CAL_MOV2_EN
  898          /*******************************************************************************
  899           *   Name: Test_CAL_MaxtixMov2
  900           *  Brief: ²âÊÔ¾ØÕó×ªÖÃ°áÒÆÔËËã:¾ØÕó×ªÖÃ°áÒÆÊ±×îºÃTxNum,RxNumÓëTxLen,RxLenÏàµÈ
  901           *  Input:
  902           * Output:
  903           * Return:
  904           *******************************************************************************/
  905          BOOLEAN Test_CAL_MaxtixMov2()
  906          {
  907   1          UINT8 i,j;
  908   1          BOOLEAN flag = 0;
  909   1          ST_CalMcMatrixParam XRAM CalParam;
  910   1      
  911   1          DBG_CAL("\n\nTest: Matrix mov2");
  912   1          for (i = 0; i < TX_LOCAL_NUM; i++)
  913   1          {
  914   2              for (j = 0; j < RX_LOCAL_NUM; j++)
  915   2              {
  916   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
  917   3              }
  918   2          }
  919   1      
  920   1          DBG_CAL("\n\rMem to Mem");
  921   1          CalParam.usSrc1Addr = CAL_TEST_A0;
  922   1          CalParam.usDstAddr  = CAL_TEST_A1;
  923   1          CalParam.ucTxLen    = CAL_TEST_TX;
  924   1          CalParam.ucRxLen    = CAL_TEST_RX;
  925   1          CalParam.usCalCmd   = OP_MOV;
  926   1          CalParam.ucCfg      = MOV_CFG_1;    /* 0: ²»×ªÖÃ£¬1: ×ªÖÃ */
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 150 

  927   1      
  928   1          DrvCal_MatrixProc(&CalParam);
  929   1      
  930   1          for (i = 0; i < CAL_TEST_RX; i++)
  931   1          {
  932   2              for (j = 0; j < CAL_TEST_TX; j++)
  933   2              {
  934   3                  *(T_tempOut+ i*TX_LOCAL_NUM + j) = *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
  935   3              }
  936   2          }
  937   1          g_ucCalFlag = 0;
  938   1      
  939   1          for (i = 0; i < CAL_TEST_RX; i++)
  940   1          {
  941   2              for (j = 0; j < CAL_TEST_TX; j++)
  942   2              {
  943   3                  if (*(T_tempbuf2 + i*TX_LOCAL_NUM + j) != *(T_tempOut + i*TX_LOCAL_NUM + j))
  944   3                  {
  945   4                      g_ucCalFlag = 1;
  946   4                      DBG_ERROR("\n\rERROR->%04x,%04x",*(T_tempbuf2 + i*TX_LOCAL_NUM + j),*(T_tempOut + i*TX_LO
             -CAL_NUM + j));
  947   4                  }
  948   3                  else
  949   3                  {
  950   4                     // DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(T_tempbuf2 + i*TX_LOCAL_NUM + j),*(T_tempOut + i*
             -TX_LOCAL_NUM + j));
  951   4                  }
  952   3              }
  953   2          }
  954   1          if (g_ucCalFlag)
  955   1          {
  956   2              DBG_CAL("\nCal MOV2 test is Error");
  957   2              ERROR_HOLD;
  958   2          }
  959   1          else
  960   1          {
  961   2              DBG_CAL("\nCal MOV2 test is OK!");
  962   2          }
  963   1      
  964   1      #if ARAM_CAL_TEST
               
                   for (i = 0; i < TX_ARAM_NUM; i++)
                   {
                       for (j = 0; j < RX_ARAM_NUM; j++)
                       {
                           //*(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = 11;//rand();
                       }
                   }
               
                   DBG_CAL("\nMem-Aram:");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A1;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;
                   CalParam.usCalCmd   = OP_MOV;
                   CalParam.ucCfg      = MOV_CFG_1;
               
                   DrvCal_MatrixProc(&CalParam);
               
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       for (j = 0; j < CAL_ARAM_TX; j++)
                       {
                           *(T_tempOut+ i*TX_ARAM_NUM + j) = *(g_pAfeAram + j*RX_ARAM_NUM + i);
                       }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 151 

                   }
                   
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       for (j = 0; j < CAL_ARAM_TX; j++)
                       {
                           if (*(T_tempbuf2 + i*TX_ARAM_NUM + j) != *(T_tempOut + i*TX_ARAM_NUM + j))
                           {
                               g_ucCalFlag = 1;
                               DBG_ERROR("\n\rERROR->%04x,%04x",*(T_tempbuf2 + i*TX_ARAM_NUM + j),*(T_tempOut + i*TX_ARA
             -M_NUM + j));
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(g_pAfeAram + i*TX_ARAM_NUM + j),*(T_tempOut + i*T
             -X_ARAM_NUM + j));
                           }
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\nCal MOV2 test is Error!");
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\nCal MOV2 test is OK!");
                   }
               #endif
 1020   1          return g_ucCalFlag;
 1021   1      }
 1022          #else
               #define Test_CAL_MaxtixMov2      /##/
               #endif
 1025          
 1026          #if TEST_CAL_MUL2_1_EN
 1027          /*******************************************************************************
 1028           *   Name: Test_CAL_MaxtixMul_PtoP
 1029           *  Brief: M1 : M*N
 1030           *         M2 : 1*N
 1031           *         OUT: M*N
 1032           *         Out[i][j] = M2[1][j]*M1[i][j];
 1033           *  Input: ST_CalMcMatrixParam *pMcMP =>
 1034           * Output: None
 1035           * Return: None
 1036           *******************************************************************************/
 1037          BOOLEAN Test_CAL_MaxtixMul_PtoP1()
 1038          {
 1039   1          UINT8 i,j;
 1040   1          UINT8 ucShift;
 1041   1          SINT16 tmp;
 1042   1          BOOLEAN flag;
 1043   1          ST_CalMcMatrixParam XRAM CalParam;
 1044   1          static UINT8 counter = 0;
 1045   1          
 1046   1          DBG_CAL("\n\nTest: Matrix MUL2_1");
 1047   1      
 1048   1      
 1049   1          if(counter == 16)
 1050   1              counter = 0;
 1051   1          
 1052   1          ucShift = counter;
 1053   1          counter ++;    
 1054   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 152 

 1055   1          DBG_CAL("\nmem-mem");
 1056   1      
 1057   1          for (i=0; i<RX_LOCAL_NUM; i++)
 1058   1          {
 1059   2              *(T_tempbuf1 + i) = (SINT8)rand()>>2;//-200
 1060   2              //DBG_CAL_DATA("\n\r%04x",*(T_tempbuf1 + i));
 1061   2          }
 1062   1          for (i=0; i<TX_LOCAL_NUM; i++)
 1063   1          {
 1064   2              for (j=0; j<RX_LOCAL_NUM; j++)
 1065   2              {
 1066   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = (SINT8)rand()>>2;//200
 1067   3              }
 1068   2              //DBG_CAL_DATA("\n\r%04x",*(T_tempbuf2 + i*TX_LOCAL_NUM + j));
 1069   2          }
 1070   1      
 1071   1          //for (ucShift = 0; ucShift < 16; ucShift++)
 1072   1          {
 1073   2              CalParam.usSrc1Addr = CAL_TEST_A0;
 1074   2              CalParam.usSrc2Addr = CAL_TEST_A1;
 1075   2              CalParam.usDstAddr  = CAL_TEST_A2;
 1076   2              CalParam.ucTxLen    = CAL_TEST_TX;
 1077   2              CalParam.ucRxLen    = CAL_TEST_RX;
 1078   2              CalParam.usCalCmd   = OP_MUL2;
 1079   2              CalParam.ucShift    = ucShift;
 1080   2              CalParam.ucCfg      = MUL2_CFG_0;
 1081   2      
 1082   2              DrvCal_MatrixMul2(&CalParam,MUL2_MODE_0);
 1083   2              //DrvCal_MatrixMul_PtoP1(&CalParam);
 1084   2      
 1085   2              g_ucCalFlag = 0;
 1086   2              for (i = 0; i < CAL_TEST_TX; i++)
 1087   2              {
 1088   3                  for (j = 0; j < CAL_TEST_RX; j++)
 1089   3                  {
 1090   4                      tmp = (((SINT16)*(T_tempbuf1 + j)) * ((SINT16)*(T_tempbuf2 + i*RX_LOCAL_NUM + j)));
 1091   4                      tmp >>= ucShift;
 1092   4                      if (tmp > 32767)
 1093   4                      {
 1094   5                          tmp = 32767;
 1095   5                      }
 1096   4                      else if (tmp < -32768)
 1097   4                      {
 1098   5                          tmp = -32768;
*** WARNING C188 IN LINE 1098 OF ..\..\src\source\task\Test_CAL.c: 'constant': value truncated
 1099   5                      }
 1100   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)tmp )
 1101   4                      {
 1102   5                          DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -tmp,i,j);
 1103   5                          g_ucCalFlag = 1;
 1104   5                      }
 1105   4                      else
 1106   4                      {
 1107   5                          //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)t
             -mp,i,j);
 1108   5                      }
 1109   4                  }
 1110   3              }
 1111   2      
 1112   2              if (g_ucCalFlag)
 1113   2              {
 1114   3                  DBG_CAL("\n\rCal MUL2 Rx test %02d is Error!",ucShift);
 1115   3                  DBG_CAL("\n");
 1116   3                  for (i = 0; i < 1; i++)
 1117   3                  {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 153 

 1118   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
 1119   4                      {
 1120   5                          DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1121   5                      }
 1122   4                      DBG_CAL("\n");
 1123   4                  }
 1124   3      
 1125   3                  DBG_CAL("\n");
 1126   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
 1127   3                  {
 1128   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
 1129   4                      {
 1130   5                          DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1131   5                      }
 1132   4                      DBG_CAL("\n");
 1133   4                  }             
 1134   3                  
 1135   3                  ERROR_HOLD;
 1136   3              }
 1137   2              else
 1138   2              {
 1139   3                  DBG_CAL("\n\rCal MUL2 Rx test %02d is OK!",ucShift);
 1140   3              }
 1141   2          }
 1142   1          
 1143   1      #if 1 //Ã¿ÁÐ¸÷µã³ËÒÔ³ËÒÔ²»Í¬µÄÊý
 1144   1          for (i=0; i<TX_LOCAL_NUM; i++)
 1145   1          {
 1146   2              *(T_tempbuf1 + i) = (SINT8)rand()>>2;
 1147   2              //DBG_CAL_DATA("\n%04x",*(T_tempbuf1 + i));
 1148   2          }
 1149   1          
 1150   1          //for (ucShift = 0; ucShift < 16; ucShift++)
 1151   1          {
 1152   2              CalParam.usSrc1Addr = CAL_TEST_A0;
 1153   2              CalParam.usSrc2Addr = CAL_TEST_A1;
 1154   2              CalParam.usDstAddr  = CAL_TEST_A2;
 1155   2              CalParam.ucTxLen    = CAL_TEST_TX;
 1156   2              CalParam.ucRxLen    = CAL_TEST_RX;
 1157   2              CalParam.usCalCmd   = OP_MUL2;
 1158   2              CalParam.ucShift    = ucShift;
 1159   2              CalParam.ucCfg      = MUL2_CFG_1;
 1160   2              
 1161   2              DrvCal_MatrixMul2(&CalParam,MUL2_MODE_0);        
 1162   2              //DrvCal_MatrixMul_PtoP1(&CalParam);
 1163   2      
 1164   2              g_ucCalFlag = 0;
 1165   2              for (i = 0; i < CAL_TEST_TX; i++)
 1166   2              {
 1167   3                  for (j = 0; j < CAL_TEST_RX; j++)
 1168   3                  {
 1169   4                      tmp = (((SINT16)*(T_tempbuf1 + i)) * ((SINT16)*(T_tempbuf2 + i*RX_LOCAL_NUM + j)));
 1170   4                      tmp >>= ucShift;
 1171   4                      if (tmp > 32767)
 1172   4                      {
 1173   5                          tmp = 32767;
 1174   5                      }
 1175   4                      else if (tmp < -32768)
 1176   4                      {
 1177   5                          tmp = -32768;
*** WARNING C188 IN LINE 1177 OF ..\..\src\source\task\Test_CAL.c: 'constant': value truncated
 1178   5                      }
 1179   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)tmp )
 1180   4                      {
 1181   5                          DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -tmp,i,j);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 154 

 1182   5                          g_ucCalFlag = 1;
 1183   5                      }
 1184   4                      else
 1185   4                      {
 1186   5                          //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)t
             -mp,i,j);
 1187   5                      }
 1188   4                  }
 1189   3              }
 1190   2              if (g_ucCalFlag)
 1191   2              {
 1192   3                  DBG_CAL("\n\rCal MUL2 Tx test %02d is Error!",ucShift);
 1193   3                  DBG_CAL("\n");
 1194   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
 1195   3                  {
 1196   4                      for (j = 0; j < 1; j++)
 1197   4                      {
 1198   5                          DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1199   5                      }
 1200   4                      DBG_CAL("\n");
 1201   4                  }
 1202   3      
 1203   3                  DBG_CAL("\n");
 1204   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
 1205   3                  {
 1206   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
 1207   4                      {
 1208   5                          DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1209   5                      }
 1210   4                      DBG_CAL("\n");
 1211   4                  }             
 1212   3                  
 1213   3                  ERROR_HOLD;
 1214   3              }
 1215   2              else
 1216   2              {
 1217   3                  DBG_CAL("\n\rCal MUL2 Tx test %02d is OK!",ucShift);
 1218   3              }
 1219   2          }
 1220   1      #endif
 1221   1      #if ARAM_CAL_TEST
               
                      DBG_CAL("\naram-mem");
                   
                       for (i=0; i<RX_ARAM_NUM; i++)
                       {
                           *(T_tempbuf1 + i) = (SINT8)rand()>>2;
                           //DBG_CAL_DATA("\n\r%04x",*(T_tempbuf1 + i));
                       }
                       for (i=0; i<TX_ARAM_NUM; i++)
                       {
                           for (j=0; j<RX_ARAM_NUM; j++)
                           {
                               *(T_tempbuf2 + i*RX_ARAM_NUM + j) = (SINT8)rand()>>2;
                               *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand()>>2;                    
                           }
                           //DBG_CAL_DATA("\n\r%04x",*(T_tempbuf2 + i*TX_LOCAL_NUM + j));
                       }
                   
                       //for (ucShift = 0; ucShift < 16; ucShift++)
                       {
                           CalParam.usSrc1Addr = CAL_TEST_A0;
                           CalParam.usSrc2Addr = ARAM_DATA_BASE_ADDR;
                           CalParam.usDstAddr  = CAL_TEST_A2;
                           CalParam.ucTxLen    = CAL_ARAM_TX;
                           CalParam.ucRxLen    = CAL_ARAM_RX;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 155 

                           CalParam.usCalCmd   = OP_MUL2;
                           CalParam.ucShift    = ucShift;
                           CalParam.ucCfg      = MUL2_CFG_0;
                           
                           DrvCal_MatrixMul2(&CalParam,MUL2_MODE_0);    
                           //DrvCal_MatrixMul_PtoP1(&CalParam);
                   
                           g_ucCalFlag = 0;
                           for (i = 0; i < CAL_ARAM_TX; i++)
                           {
                               for (j = 0; j < CAL_ARAM_RX; j++)
                               {
                                   tmp = (((SINT16)*(T_tempbuf1 + j)) * ((SINT16)*(g_pAfeAram + i*RX_ARAM_NUM + j)));
                                   tmp >>= ucShift;
                                   if (tmp > 32767)
                                   {
                                       tmp = 32767;
                                   }
                                   else if (tmp < -32768)
                                   {
                                       tmp = -32768;
                                   }
                                   if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)tmp )
                                   {
                                       DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_ARAM_NUM + j),(SINT
             -16)tmp,i,j);
                                       g_ucCalFlag = 1;
                                   }
                                   else
                                   {
                                       //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT
             -16)tmp,i,j);
                                   }
                               }
                           }
                   
                           if (g_ucCalFlag)
                           {
                               DBG_CAL("\n\rCal MUL2 Rx test %02d is Error!",ucShift);
                               DBG_CAL("\n");
                               for (i = 0; i < 1; i++)
                               {
                                   for (j = 0; j < RX_LOCAL_NUM; j++)
                                   {
                                       DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
                                   }
                                   DBG_CAL("\n");
                               }
                               
                               DBG_CAL("\n");
                               for (i = 0; i < TX_LOCAL_NUM; i++)
                               {
                                   for (j = 0; j < RX_LOCAL_NUM; j++)
                                   {
                                       DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                                   }
                                   DBG_CAL("\n");
                               }             
                               
                               ERROR_HOLD;
                           }
                           else
                           {
                               DBG_CAL("\n\rCal MUL2 Rx test %02d is OK!",ucShift);
                           }
                       }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 156 

                       
               #if 1 //Ã¿ÁÐ¸÷µã³ËÒÔ³ËÒÔ²»Í¬µÄÊý
                       for (i=0; i<TX_ARAM_NUM; i++)
                       {
                           *(g_pAfeAram + i) = (SINT8)rand()>>2;
                           //DBG_CAL_DATA("\n%04x",*(T_tempbuf1 + i));
                       }
                       
                       //for (ucShift = 0; ucShift < 16; ucShift++)
                       {
                           CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                           CalParam.usSrc2Addr = CAL_TEST_A1;
                           CalParam.usDstAddr  = CAL_TEST_A2;
                           CalParam.ucTxLen    = CAL_ARAM_TX;
                           CalParam.ucRxLen    = CAL_ARAM_RX;
                           CalParam.usCalCmd   = OP_MUL2;
                           CalParam.ucShift    = ucShift;
                           CalParam.ucCfg      = MUL2_CFG_1;
               
                           DrvCal_MatrixMul2(&CalParam,MUL2_MODE_0);            
                   
                           g_ucCalFlag = 0;
                           for (i = 0; i < CAL_ARAM_TX; i++)
                           {
                               for (j = 0; j < CAL_ARAM_RX; j++)
                               {
                                   tmp = (((SINT16)*(g_pAfeAram + i)) * ((SINT16)*(T_tempbuf2 + i*RX_ARAM_NUM + j)));
                                   tmp >>= ucShift;
                                   if (tmp > 32767)
                                   {
                                       tmp = 32767;
                                   }
                                   else if (tmp < -32768)
                                   {
                                       tmp = -32768;
                                   }
                                   if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)tmp )
                                   {
                                       DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_ARAM_NUM + j),(SINT
             -16)tmp,i,j);
                                       g_ucCalFlag = 1;
                                   }
                                   else
                                   {
                                       //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT
             -16)tmp,i,j);
                                   }
                               }
                           }
                           if (g_ucCalFlag)
                           {
                               DBG_CAL("\n\rCal MUL2 Tx test %02d is Error!",ucShift);
                               DBG_CAL("\n");
                               for (i = 0; i < TX_LOCAL_NUM; i++)
                               {
                                   for (j = 0; j < 1; j++)
                                   {
                                       DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
                                   }
                                   DBG_CAL("\n");
                               }
                               
                               DBG_CAL("\n");
                               for (i = 0; i < TX_LOCAL_NUM; i++)
                               {
                                   for (j = 0; j < RX_LOCAL_NUM; j++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 157 

                                   {
                                       DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                                   }
                                   DBG_CAL("\n");
                               }             
                               
                               ERROR_HOLD;
                           }
                           else
                           {
                               DBG_CAL("\n\rCal MUL2 Tx test %02d is OK!",ucShift);
                           }
                       }
               #endif
               
               #endif
 1391   1      
 1392   1          return g_ucCalFlag;
 1393   1      }
*** WARNING C47 IN LINE 1042 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 1394          #else
               #define Test_CAL_MaxtixMul_PtoP1()  /##/
               #endif
 1397          
 1398          #if TEST_CAL_MUL2_2_EN
 1399          /*******************************************************************************
 1400           *   Name: Test_CAL_MaxtixMul_PtoP
 1401           *  Brief: M1 : M*N
 1402           *         M2 : M*N
 1403           *         OUT: M*N
 1404           *         Out[i][j] = M1[i][j]*M2[i][j];
 1405           *  Input: ST_CalMcMatrixParam *pMcMP =>
 1406           * Output: None
 1407           * Return: None
 1408           *******************************************************************************/
 1409          BOOLEAN Test_CAL_MaxtixMul_PtoP2()
 1410          {
 1411   1          UINT8 i,j;
 1412   1          UINT8 ucShift;
 1413   1          SINT16 tmp;
 1414   1          BOOLEAN flag;
 1415   1          ST_CalMcMatrixParam XRAM CalParam;
 1416   1          static UINT8 counter = 0;
 1417   1          
 1418   1          DBG_CAL("\n\n\rTest: Matrix MUL2");
 1419   1      
 1420   1      
 1421   1          if(counter == 16)
 1422   1              counter = 0;
 1423   1          
 1424   1          ucShift = counter;
 1425   1          counter ++;  
 1426   1      
 1427   1      
 1428   1      
 1429   1          DBG_CAL("\nmem-men");
 1430   1          for (i=0; i<TX_LOCAL_NUM; i++)
 1431   1          {
 1432   2              for (j=0; j<RX_LOCAL_NUM; j++)
 1433   2              {
 1434   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT8)rand()>>2;//-200;
 1435   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = (SINT8)rand()>>2;//200
 1436   3              }
 1437   2      //      DBG_CAL_DATA("\n\r%04x,%04x",*(T_tempbuf1 + i*CAL_TEST_RX + j),*(T_tempbuf2 + i*CAL_TEST_RX + j))
             -;
 1438   2          }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 158 

 1439   1          
 1440   1          //for (ucShift = 0; ucShift < 16; ucShift++)
 1441   1          {
 1442   2              CalParam.usSrc1Addr = CAL_TEST_A0;
 1443   2              CalParam.usSrc2Addr = CAL_TEST_A1;
 1444   2              CalParam.usDstAddr  = CAL_TEST_A2;
 1445   2              CalParam.ucTxLen    = CAL_TEST_TX;
 1446   2              CalParam.ucRxLen    = CAL_TEST_RX;
 1447   2              CalParam.usCalCmd   = OP_MUL2;
 1448   2              CalParam.ucShift    = ucShift;
 1449   2              
 1450   2              DrvCal_MatrixMul2(&CalParam,MUL2_MODE_1);
 1451   2              //DrvCal_MatrixMul_PtoP2(&CalParam);
 1452   2      
 1453   2              g_ucCalFlag = 0;
 1454   2              for (i=0; i<CAL_TEST_TX; i++)
 1455   2              {
 1456   3                  for (j=0; j<CAL_TEST_RX; j++)
 1457   3                  {
 1458   4                      tmp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j)* (((SINT16)*(T_tempbuf2 + i*RX_LOCAL_NUM + j)))
             -);
 1459   4                      tmp >>= ucShift;
 1460   4                      if (tmp > 32767)
 1461   4                      {
 1462   5                          tmp = 32767;
 1463   5                      }
 1464   4                      else if (tmp < -32768)
 1465   4                      {
 1466   5                          tmp = -32768;
*** WARNING C188 IN LINE 1466 OF ..\..\src\source\task\Test_CAL.c: 'constant': value truncated
 1467   5                      }
 1468   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)tmp )
 1469   4                      {
 1470   5                          DBG_ERROR("\n\rERROR->%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),tmp);
 1471   5                          g_ucCalFlag = 1;
 1472   5                      }
 1473   4                      else
 1474   4                      {
 1475   5                          //DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),tmp);
 1476   5                      }
 1477   4                  }
 1478   3              }
 1479   2              if (g_ucCalFlag)
 1480   2              {
 1481   3                  DBG_CAL("\n\rCal MUL2 test %d is Error!",ucShift);
 1482   3                  DBG_CAL("\n");
 1483   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
 1484   3                  {
 1485   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
 1486   4                      {
 1487   5                          DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1488   5                      }
 1489   4                      DBG_CAL("\n");
 1490   4                  }
 1491   3      
 1492   3                  DBG_CAL("\n");
 1493   3                  for (i = 0; i < TX_LOCAL_NUM; i++)
 1494   3                  {
 1495   4                      for (j = 0; j < RX_LOCAL_NUM; j++)
 1496   4                      {
 1497   5                          DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1498   5                      }
 1499   4                      DBG_CAL("\n");
 1500   4                  }             
 1501   3                  
 1502   3                  ERROR_HOLD;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 159 

 1503   3              }
 1504   2              else
 1505   2              {
 1506   3                  DBG_CAL("\n\rCal MUL2 test %d is OK!",ucShift);
 1507   3              }     
 1508   2          }
 1509   1      
 1510   1      #if ARAM_CAL_TEST
               
                   DBG_CAL("\n aram-men");
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand()>>2;
                           *(T_tempbuf2 + i*RX_ARAM_NUM + j) = (SINT8)rand()>>2;
                       }
               //      DBG_CAL_DATA("\n\r%04x,%04x",*(T_tempbuf1 + i*CAL_TEST_RX + j),*(T_tempbuf2 + i*CAL_TEST_RX + j))
             -;
                   }
                   //for (ucShift = 0; ucShift < 16; ucShift++)
                   {
                       CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                       CalParam.usSrc2Addr = CAL_TEST_A1;
                       CalParam.usDstAddr  = CAL_TEST_A2;
                       CalParam.ucTxLen    = CAL_ARAM_TX;
                       CalParam.ucRxLen    = CAL_ARAM_RX;
                       CalParam.usCalCmd   = OP_MUL2;
                       CalParam.ucShift    = ucShift;
               
                       DrvCal_MatrixMul2(&CalParam,MUL2_MODE_1);
                       //DrvCal_MatrixMul_PtoP2(&CalParam);
               
                       g_ucCalFlag = 0;
                       for (i=0; i<CAL_ARAM_TX; i++)
                       {
                           for (j=0; j<CAL_ARAM_RX; j++)
                           {
                               tmp = (*(g_pAfeAram + i*RX_ARAM_NUM + j)* (((SINT16)*(T_tempbuf2 + i*RX_ARAM_NUM + j))));
                               tmp >>= ucShift;
                               if (tmp > 32767)
                               {
                                   tmp = 32767;
                               }
                               else if (tmp < -32768)
                               {
                                   tmp = -32768;
                               }
                               if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)tmp )
                               {
                                   DBG_ERROR("\n\rERROR->%04x,%04x",*(T_tempOut + i*RX_ARAM_NUM + j),tmp);
                                   g_ucCalFlag = 1;
                               }
                               else
                               {
                                   //DBG_CAL_DATA("\n\rOK->   %04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),tmp);
                               }
                           }
                       }
                       if (g_ucCalFlag)
                       {
                           DBG_CAL("\n\rCal MUL2 test %d is Error!",ucShift);
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 160 

                               {
                                   DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }
               
                           DBG_CAL("\n");
                           for (i = 0; i < TX_LOCAL_NUM; i++)
                           {
                               for (j = 0; j < RX_LOCAL_NUM; j++)
                               {
                                   DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                               }
                               DBG_CAL("\n");
                           }    
               
                           
                           ERROR_HOLD;
                       }
                       else
                       {
                           DBG_CAL("\n\rCal MUL2 test %d is OK!",ucShift);
                       }     
                   }
               #endif    
 1593   1          return g_ucCalFlag;
 1594   1      }
*** WARNING C47 IN LINE 1414 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 1595          #else
               #define Test_CAL_MaxtixMul_PtoP2()  /##/
               #endif
 1598          
 1599          
 1600          #if TEST_CAL_COM_1_EN
 1601          /*******************************************************************************
 1602           *   Name: Test_CAL_MaxtixCom_1
 1603           *  Brief: ¾ÉµÄBase²¹³¥ÔËËã
 1604           *  Input: ST_CalMcMatrixParam *pMcMP =>
 1605           * Output: None
 1606           * Return: None
 1607           *******************************************************************************/
 1608          BOOLEAN Test_CAL_MaxtixCom_1()
 1609          {
 1610   1          UINT8 i,j;
 1611   1          BOOLEAN flag;
 1612   1          UINT8 step = 50;
 1613   1          UINT8 Threshlod = 100;
 1614   1          ST_CalMcMatrixParam XRAM CalParam;
 1615   1      
 1616   1          DBG_CAL("\n\nTest: Matrix Compensation_1");
 1617   1      
 1618   1          for (i=0; i<TX_LOCAL_NUM; i++)
 1619   1          {
 1620   2              for (j=0; j<RX_LOCAL_NUM; j++)
 1621   2              {
 1622   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand()>>1;
 1623   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = rand()>>8;//0x100;
 1624   3              }
 1625   2              //DBG_CAL_DATA("\n\r%04x ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 1626   2          }
 1627   1      
 1628   1          CalParam.usSrc1Addr = CAL_TEST_A0;    // diff
 1629   1          CalParam.usSrc2Addr = CAL_TEST_A1;    // base
 1630   1          CalParam.usDstAddr  = CAL_TEST_A2;    // out
 1631   1          CalParam.ucTxLen    = CAL_TEST_TX;
 1632   1          CalParam.ucRxLen    = CAL_TEST_RX;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 161 

 1633   1          CalParam.usCalCmd   = OP_COM;
 1634   1          CalParam.ucCfg      = COM_CFG_0;
 1635   1      
 1636   1          DrvCal_MatrixCompensation(&CalParam,Threshlod,step);
 1637   1      
 1638   1          g_ucCalFlag = 0;
 1639   1          for (i=0; i<CAL_TEST_TX; i++)
 1640   1          {
 1641   2              for (j=0; j<CAL_TEST_RX; j++)
 1642   2              {
 1643   3      
 1644   3      #if COMPENSATION_MODE
                           if (   (i >= NO_COMPENSATION_TX_START) && (i <= (NO_COMPENSATION_TX_START+ NO_COMPENSATION_TX
             -_LENGTH)) 
                                   &&(j >= NO_COMPENSATION_RX_START) && (j <= (NO_COMPENSATION_RX_START+ NO_COMPENSATION
             -_RX_LENGTH)) )
                           {
                           }
                           else
               #endif   
 1651   3                  {
 1652   4      
 1653   4                      if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) > Threshlod)
 1654   4                      {
 1655   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf2 + i*RX_LOCAL_NUM + j) + step )
 1656   5                          {
 1657   6                              g_ucCalFlag = 1;
 1658   6                              DBG_ERROR("\n\rERROR->out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1659   6                          }
 1660   5                          else
 1661   5                          {
 1662   6                              //DBG_CAL_DATA("\n\rOK>->  out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL
             -_NUM + j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1663   6                          }
 1664   5                      }
 1665   4                      else if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) < -Threshlod)
 1666   4                      {
 1667   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf2 + i*RX_LOCAL_NUM + j) - step )
 1668   5                          {
 1669   6                              g_ucCalFlag = 1;
 1670   6                              DBG_ERROR("\n\rERROR->out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1671   6                          }
 1672   5                          else
 1673   5                          {
 1674   6                              //DBG_CAL_DATA("\n\rOK<->  out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL
             -_NUM + j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1675   6                          }
 1676   5                      }
 1677   4                      else
 1678   4                      {
 1679   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf2 + i*RX_LOCAL_NUM + j))
 1680   5                          {
 1681   6                              g_ucCalFlag = 1;
 1682   6                              DBG_ERROR("\n\rERROR->out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL_NUM 
             -+ j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1683   6                          }
 1684   5                          else
 1685   5                          {
 1686   6                              //DBG_CAL_DATA("\n\rOK=->  out=%04x,base=%04x,step=%04x",*(T_tempOut + i*RX_LOCAL
             -_NUM + j),*(T_tempbuf2 + i*RX_LOCAL_NUM + j),step);
 1687   6                          }
 1688   5                      }
 1689   4                  }
 1690   3              }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 162 

 1691   2          }
 1692   1      
 1693   1          if (g_ucCalFlag)
 1694   1          {
 1695   2              DBG_CAL("\n\rCal COM_1 test is Error!");
 1696   2              
 1697   2              DBG_CAL("\n");
 1698   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1699   2              {
 1700   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1701   3                  {
 1702   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1703   4                  }
 1704   3                  DBG_CAL("\n");
 1705   3              }
 1706   2              
 1707   2              DBG_CAL("\n");
 1708   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1709   2              {
 1710   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1711   3                  {
 1712   4                      DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1713   4                  }
 1714   3                  DBG_CAL("\n");
 1715   3              }    
 1716   2      
 1717   2              
 1718   2              ERROR_HOLD;
 1719   2          }
 1720   1          else
 1721   1          {
 1722   2              DBG_CAL("\n\rCal COM_1 test is OK!");
 1723   2          }
 1724   1      
 1725   1          return g_ucCalFlag;
 1726   1      }
*** WARNING C47 IN LINE 1611 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 1727          
 1728          #else
               #define Test_CAL_MaxtixCom_1      /##/
               #endif
 1731          
 1732          #if TEST_CAL_COM_2_EN
 1733          /*******************************************************************************
 1734           *   Name: Test_CAL_MaxtixCom_2
 1735           *  Brief: ÐÂµÄBase²¹³¥ÔËËã
 1736           *  Input: ST_CalMcMatrixParam *pMcMP =>
 1737           * Output: None
 1738           * Return: None
 1739           *******************************************************************************/
 1740          BOOLEAN Test_CAL_MaxtixCom_2()
 1741          {
 1742   1          UINT8 i,j;
 1743   1          BOOLEAN flag;
 1744   1          UINT8 mode;
 1745   1          UINT8 step = 50;
 1746   1          UINT8 Threshlod = 100;
 1747   1          ST_CalMcMatrixParam XRAM CalParam;
 1748   1      
 1749   1          DBG_CAL("\n\nTest Matrix Compensation_2 TX");
 1750   1          for (i = 0; i < TX_LOCAL_NUM; i++)
 1751   1          {
 1752   2              for (j = 0; j < RX_LOCAL_NUM; j++)
 1753   2              {
 1754   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand()>>1;
 1755   3              }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 163 

 1756   2          }
 1757   1          for (i = 0; i < TX_LOCAL_NUM; i++)
 1758   1          {
 1759   2              *(T_tempbuf2 + i) = rand()>>8;//i+20;
 1760   2          }
 1761   1          mode = 0;
 1762   1          CalParam.usSrc1Addr = CAL_TEST_A0;    // diff
 1763   1          CalParam.usSrc2Addr = CAL_TEST_A1;    // base
 1764   1          CalParam.usDstAddr  = CAL_TEST_A2;    // out
 1765   1          CalParam.ucTxLen    = CAL_TEST_TX;
 1766   1          CalParam.ucRxLen    = CAL_TEST_RX;
 1767   1          CalParam.usCalCmd   = OP_COM;
 1768   1          CalParam.ucCfg      = COM_CFG_1;
 1769   1      
 1770   1          DrvCal_MatrixCompensation(&CalParam,Threshlod,mode);
 1771   1      
 1772   1          g_ucCalFlag = 0;
 1773   1          for (i=0; i<CAL_TEST_TX; i++)
 1774   1          {
 1775   2              for (j=0; j<CAL_TEST_RX; j++)
 1776   2              {
 1777   3      #if COMPENSATION_MODE
                           if (   (i >= NO_COMPENSATION_TX_START) && (i <= (NO_COMPENSATION_TX_START+ NO_COMPENSATION_TX
             -_LENGTH)) 
                                   &&(j >= NO_COMPENSATION_RX_START) && (j <= (NO_COMPENSATION_RX_START+ NO_COMPENSATION
             -_RX_LENGTH)) )
                           {
                           }
                           else
               #endif   
 1784   3                  {
 1785   4                      //DBG_CAL_DATA("\n\rBefor->out=%04x,%04x----",*(T_tempOut + i*RX_LOCAL_NUM + j),Threshlod
             -);
 1786   4                      if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) > Threshlod)
 1787   4                      {
 1788   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf1 + i*RX_LOCAL_NUM + j) - (T_temp
             -buf2[i]))
 1789   5                          {
 1790   6                              g_ucCalFlag = 1;
 1791   6                              DBG_ERROR("\n\rERROR>->out=%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_
             -tempbuf1+ i*RX_LOCAL_NUM + j) - T_tempbuf2[i],i);
 1792   6                          }
 1793   5                      }
 1794   4                      else if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) < -Threshlod)
 1795   4                      {
 1796   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf1 + i*RX_LOCAL_NUM + j) + T_tempb
             -uf2[i])
 1797   5                          {
 1798   6                              g_ucCalFlag = 1;
 1799   6                              DBG_ERROR("\n\rERROR<->out=%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_
             -tempbuf1+ i*RX_LOCAL_NUM + j) - T_tempbuf2[i],i);
 1800   6                          }
 1801   5                          else
 1802   5                          {
 1803   6                              //DBG_CAL("\n\rOK<->   out=%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_
             -tempbuf1+ i*RX_LOCAL_NUM + j) - T_tempbuf2[i],i);
 1804   6                          }
 1805   5                      }
 1806   4                      else
 1807   4                      {
 1808   5                          //DBG_CAL_DATA("\n\rKeep");
 1809   5                          if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf1 + i*RX_LOCAL_NUM + j))
 1810   5                          {
 1811   6                              g_ucCalFlag = 1;
 1812   6                              DBG_ERROR("\n\rERROR=->out=%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_
             -tempbuf1+ i*RX_LOCAL_NUM + j) - T_tempbuf2[i],i);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 164 

 1813   6                          }
 1814   5                          else
 1815   5                          {
 1816   6                              //DBG_CAL("\n\rOK=->   out=%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_
             -tempbuf1+ i*RX_LOCAL_NUM + j) - T_tempbuf2[i],i);
 1817   6                          }
 1818   5                      }
 1819   4                  }
 1820   3              }
 1821   2          }
 1822   1      
 1823   1          if (g_ucCalFlag)
 1824   1          {
 1825   2              DBG_CAL("\nCal COM_2 Tx test is Error!");
 1826   2      
 1827   2              DBG_CAL("\n");
 1828   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1829   2              {
 1830   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1831   3                  {
 1832   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1833   4                  }
 1834   3                  DBG_CAL("\n");
 1835   3              }
 1836   2              
 1837   2              DBG_CAL("\n");
 1838   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1839   2              {
 1840   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1841   3                  {
 1842   4                      DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1843   4                  }
 1844   3                  DBG_CAL("\n");
 1845   3              }    
 1846   2              
 1847   2              ERROR_HOLD;
 1848   2          }
 1849   1          else
 1850   1          {
 1851   2              DBG_CAL("\nCal COM_2 Tx test is OK!");
 1852   2          }
 1853   1      
 1854   1      
 1855   1          DBG_CAL("\n\nTest  Matrix Compensation_2 Rx");
 1856   1          for (i = 0; i < TX_LOCAL_NUM; i++)
 1857   1          {
 1858   2              for (j = 0; j < RX_LOCAL_NUM; j++)
 1859   2              {
 1860   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand()>>1;
 1861   3              }
 1862   2          }
 1863   1          for (i = 0; i < RX_LOCAL_NUM; i++)
 1864   1          {
 1865   2              *(T_tempbuf2 + i) = i+20;
 1866   2          }
 1867   1      
 1868   1          CalParam.usSrc1Addr = CAL_TEST_A0;    // diff
 1869   1          CalParam.usSrc2Addr = CAL_TEST_A1;    // base
 1870   1          CalParam.usDstAddr  = CAL_TEST_A2;    // out
 1871   1          CalParam.ucTxLen    = CAL_TEST_TX;
 1872   1          CalParam.ucRxLen    = CAL_TEST_RX;
 1873   1          CalParam.usCalCmd   = OP_COM;
 1874   1          CalParam.ucCfg      = COM_CFG_1;
 1875   1          mode = 1;
 1876   1          DrvCal_MatrixCompensation(&CalParam,Threshlod,mode);
 1877   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 165 

 1878   1          g_ucCalFlag = 0;
 1879   1          for (i=0; i<CAL_TEST_RX; i++)
 1880   1          {
 1881   2              for (j=0; j<CAL_TEST_TX; j++)
 1882   2              {
 1883   3      #if COMPENSATION_MODE
                           if (   (j >= NO_COMPENSATION_TX_START) && (j <= (NO_COMPENSATION_TX_START+ NO_COMPENSATION_TX
             -_LENGTH)) 
                                   &&(i >= NO_COMPENSATION_RX_START) && (i <= (NO_COMPENSATION_RX_START+ NO_COMPENSATION
             -_RX_LENGTH)) )
                           {
                           }
                           else
               #endif   
 1890   3                  {
 1891   4                      if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) > Threshlod)
 1892   4                      {
 1893   5                          if (*(T_tempOut + j*RX_LOCAL_NUM + i) != *(T_tempbuf1 + j*RX_LOCAL_NUM + i) - T_tempb
             -uf2[i])
 1894   5                          {
 1895   6                              g_ucCalFlag = 1;
 1896   6                              DBG_ERROR("\n\rERROR->out=%04x,%04x,%04x",*(T_tempOut + j*RX_LOCAL_NUM + i),*(T_t
             -empbuf1+ j*RX_LOCAL_NUM + i) - T_tempbuf2[i],i);
 1897   6                          }
 1898   5                          else
 1899   5                          {
 1900   6                              //DBG_CAL("\n\rOK->   out=%04x,%04x,%04x",*(T_tempOut + j*TX_LOCAL_NUM + i),*(T_t
             -empbuf1+ j*TX_LOCAL_NUM + i) - T_tempbuf2[i],i);
 1901   6                          }
 1902   5                      }
 1903   4                      else if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) < -Threshlod)
 1904   4                      {
 1905   5                          if (*(T_tempOut + j*RX_LOCAL_NUM + i) != *(T_tempbuf1 + j*RX_LOCAL_NUM + i) + T_tempb
             -uf2[i])
 1906   5                          {
 1907   6                              g_ucCalFlag = 1;
 1908   6                              DBG_ERROR("\n\rERROR->out=%04x,%04x,%04x",*(T_tempOut + j*TX_LOCAL_NUM + i),*(T_t
             -empbuf1+ j*TX_LOCAL_NUM + i) - T_tempbuf2[i],i);
 1909   6                          }
 1910   5                      }
 1911   4                      else
 1912   4                      {
 1913   5                          if (*(T_tempOut + j*RX_LOCAL_NUM + i) != *(T_tempbuf1 + j*RX_LOCAL_NUM + i))
 1914   5                          {
 1915   6                              g_ucCalFlag = 1;
 1916   6                              DBG_ERROR("\n\rERROR->out=%04x,%04x,%04x",*(T_tempOut + j*RX_LOCAL_NUM + i),*(T_t
             -empbuf1+ j*RX_LOCAL_NUM + i) - T_tempbuf2[i],i);
 1917   6                          }
 1918   5      
 1919   5                      }
 1920   4                  }
 1921   3              }
 1922   2          }
 1923   1      
 1924   1          if (g_ucCalFlag)
 1925   1          {
 1926   2              DBG_CAL("\nCal COM_2 Rx test is Error!");
 1927   2      
 1928   2              DBG_CAL("\n");
 1929   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1930   2              {
 1931   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1932   3                  {
 1933   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 1934   4                  }
 1935   3                  DBG_CAL("\n");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 166 

 1936   3              }
 1937   2              
 1938   2              DBG_CAL("\n");
 1939   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 1940   2              {
 1941   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 1942   3                  {
 1943   4                      DBG_CAL(" %04x",*(T_tempbuf2 + i*RX_LOCAL_NUM + j)); 
 1944   4                  }
 1945   3                  DBG_CAL("\n");
 1946   3              }    
 1947   2              
 1948   2              ERROR_HOLD;
 1949   2          }
 1950   1          else
 1951   1          {
 1952   2              DBG_CAL("\nCal COM_2 Rx test is OK!");
 1953   2          }
 1954   1          return g_ucCalFlag;
 1955   1      }
*** WARNING C47 IN LINE 1743 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 1956          #else
               #define Test_CAL_MaxtixCom_2      /##/
               #endif
 1959          
 1960          #if TEST_CAL_LDS_EN
 1961          /*******************************************************************************
 1962           *   Name:
 1963           *  Brief: ÓÃÓÚ²úÉúÁ½×é×ù±ê¼äµÄ¾àÀë
 1964           *         resule[n] = sqrt((S1.xn-S2.xn)^2+(S1.yn-S2.yn)^2)
 1965           *  Input:
 1966           * Output:
 1967           * Return:
 1968           *******************************************************************************/
 1969          BOOLEAN Test_CAL_LDS()
 1970          {
 1971   1          UINT8 i,j;
 1972   1          UINT16 x0,x1,y0,y1;
 1973   1          BOOLEAN flag;
 1974   1      
 1975   1          UINT16 DisSoft;
 1976   1          UINT16 DisCal;
 1977   1      
 1978   1          ST_CalMcMatrixParam XRAM CalParam;
 1979   1      
 1980   1         // x0 = 100;
 1981   1         // x1 = 56;
 1982   1      
 1983   1          DBG_CAL("\n\nTest: LDS %d*%d",CAL_TEST_TX,CAL_TEST_RX);
 1984   1          for (i=0; i<TX_LOCAL_NUM/2; i++)
 1985   1          {
 1986   2              for (j=0; j<RX_LOCAL_NUM*2; j++)
 1987   2              {
 1988   3                  *(T_tempbuf1 + i*2*RX_LOCAL_NUM + j) = (UINT8)rand();
 1989   3                  *(T_tempbuf2 + i*2*RX_LOCAL_NUM + j) = (UINT8)rand();
 1990   3              }
 1991   2          }
 1992   1      
 1993   1          //DisSoft = (x0-x1)*(x0-x1)*2;
 1994   1          //DisSoft = sqrt(DisSoft);
 1995   1      
 1996   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 1997   1          CalParam.usSrc2Addr = CAL_TEST_A1;
 1998   1          CalParam.usDstAddr  = CAL_TEST_A2;
 1999   1          CalParam.ucTxLen    = CAL_TEST_TX/2;
 2000   1          CalParam.ucRxLen    = CAL_TEST_RX;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 167 

 2001   1          CalParam.usCalCmd   = OP_LDS;
 2002   1      
 2003   1          DrvCal_LDS(&CalParam);
 2004   1      
 2005   1      
 2006   1          DBG_CAL("\n\nAfter LDS");
 2007   1          for (i=0; i<CAL_TEST_TX/2; i++)
 2008   1          {
 2009   2              for (j=0; j<CAL_TEST_RX; j++)
 2010   2              {
 2011   3                  x0 = *(T_tempbuf1 + i*2*RX_LOCAL_NUM + 2*j);
 2012   3                  y0 = *(T_tempbuf1 + i*2*RX_LOCAL_NUM + 2*j+1);
 2013   3                  x1 = *(T_tempbuf2 + i*2*RX_LOCAL_NUM + 2*j);
 2014   3                  y1 = *(T_tempbuf2 + i*2*RX_LOCAL_NUM + 2*j+1); 
 2015   3                  
 2016   3                  DisSoft = sqrt(((UINT32)x0-x1)*((UINT32)x0-x1)+((UINT32)y0-y1)*((UINT32)y0-y1));
 2017   3                  DisCal = *(T_tempOut + i*RX_LOCAL_NUM + j);
 2018   3                  
 2019   3                  if (DisSoft != DisCal)
 2020   3                  {
 2021   4                      g_ucCalFlag = 1;
 2022   4                      DBG_ERROR("\nLDS error soft:%d,cal:%d",DisSoft,DisCal);
 2023   4                      DBG_ERROR("\nx0=%d,x1=%d,y1=%d,y2=%d",x0,x1,y0,y1);
 2024   4                  }
 2025   3              }
 2026   2          }
 2027   1      
 2028   1          if(g_ucCalFlag)
 2029   1          {
 2030   2              DBG_CAL("\nLDS ERROR"); 
 2031   2      
 2032   2              DBG_CAL("\n");
 2033   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 2034   2              {
 2035   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 2036   3                  {
 2037   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 2038   4                  }
 2039   3                  DBG_CAL("\n");
 2040   3              }
 2041   2              
 2042   2              DBG_CAL("\n");
 2043   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 2044   2              {
 2045   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 2046   3                  {
 2047   4                      DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
 2048   4                  }
 2049   3                  DBG_CAL("\n");
 2050   3              }    
 2051   2              
 2052   2              ERROR_HOLD;
 2053   2          }
 2054   1          else
 2055   1          {
 2056   2              DBG_CAL("\nLDS OK");
 2057   2          }
 2058   1          return 0;   
 2059   1      }
*** WARNING C47 IN LINE 1973 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 2060          #else
               #define Test_CAL_LDS      /##/
               #endif
 2063          
 2064          #if TEST_CAL_MDS_EN
 2065          /*******************************************************************************
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 168 

 2066           *   Name:
 2067           *  Brief: ÓÃÓÚ²úÉúÁ½ÁÐ×ù±ê¼äµÄ¾àÀëpoint to point
 2068           *         resule[M*N] = sqrt((S1.x0-S2.x0)^2+(S1.y0-S2.y0)^2)+...+ sqrt((S1.xn-S2.xn)^2+(S1.yn-S2.yn)^2)
 2069           *        ÊäÈë¿í¶ÈÎª2*TxÓë2*RxµÄ ×ø±êÊý×é£¬Éú²úTx*Rx¾àÀë¾ØÕó£¬CALÄ£¿éÊä³ö¹Ì¶¨ÎªMax = 11£¬¼´11*11¾ØÕó
 2070           *        ²âÊÔ´úÂë¹Ì¶¨ÓÃ11*11À´²â
 2071           *  Input: 
 2072           * Output:
 2073           * Return:
 2074           *******************************************************************************/
 2075          #define MDS_TX_LEN 11
 2076          #define MDS_RX_LEN 11
 2077          
 2078          BOOLEAN Test_CAL_MDS()
 2079          {
 2080   1      #if 0
                   UINT8 i,j;
                   UINT8 tx_len = 11;
                   UINT8 rx_len = 11;
                   UINT16 buf0[CAL_MDS_TX_POINT*2];
                   UINT16 buf1[CAL_MDS_RX_POINT*2];
                   UINT16 buf2[CAL_MDS_TX_POINT*CAL_MDS_RX_POINT];
                   UINT16 temp;
                   BOOLEAN g_ucCalFlag = 0;
               //    UINT16 DisSoft;
               //    UINT16 DisCal;
                   ST_CalMcMatrixParam XRAM CalParam;
               
               
                   for (i = 0; i< 22 ;i++)
                   {
                       buf0[i] = i*2;
                       buf1[i] = i*4;
                   }
                   
                   //CalÔËËãÊý¾Ý³õÊ¼»¯
                   DBG_CAL("\n\nTest: MDS %d*%d\n",tx_len,rx_len);
               
                   for (i = 0; i<tx_len*2; i++)
                   {
               
                           *(T_tempbuf1 + i) = buf0[i];
                   }
                   for (i = 0; i<rx_len*2; i++)
                   {
               
                           *(T_tempbuf2 + i) = buf1[i];
                   }
               
               //soft 
                   for(i = 0;i < rx_len;i++)
                       for(j = 0;j<tx_len;j++)
                       {
                           temp = (buf0[i*2] - buf1[j*2])*(buf0[i*2] - buf1[j*2]);
                           temp += (buf0[i*2+1] - buf1[j*2+1])*(buf0[i*2+1] - buf1[j*2+1]);
                           buf2[i*rx_len+j] = sqrt(temp);
                       }
               
                   CalParam.usSrc1Addr = CAL_TEST_A0;
                   CalParam.usSrc2Addr = CAL_TEST_A1;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxNum    = tx_len;
                   CalParam.ucRxNum    = rx_len;
                   CalParam.ucTxLen    = tx_len;
                   CalParam.ucRxLen    = rx_len;
                   CalParam.usCalCmd   = OP_MDS;
               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 169 

                   DrvCal_MDS(&CalParam);
               
                   for (i=0; i<tx_len; i++)
                   {
                       for (j=0; j<rx_len; j++)
                       {
               //            DBG_CAL("\nsoft data %x,%x :%x ",i,j,buf2[i*CAL_TEST_RX+j]);
               //            DBG_CAL("Cal :%x",*(T_tempOut+i*CAL_TEST_RX+j));
                           if(buf2[i*rx_len+j] != *(T_tempOut+i*rx_len+j))
                           {
                               flag = 1;
                           }
                       }
                   }
                   if(flag)
                   {
                       DBG_CAL("\nMDS ERROR");
                   }
                   else
                   {
                       DBG_CAL("\nMDS OK");
                   }
                   return 0;
               #else
 2156   1          UINT8 i,j;
 2157   1          UINT16 x0,x1,y0,y1;
 2158   1          BOOLEAN flag;
 2159   1      
 2160   1          UINT16 DisSoft;
 2161   1          UINT16 DisCal;
 2162   1      
 2163   1          ST_CalMcMatrixParam XRAM CalParam;
 2164   1      
 2165   1         // x0 = 120;
 2166   1         // x1 = 111;
 2167   1      
 2168   1          DBG_CAL("\n\rTest: MDS %d*%d",CAL_TEST_TX,CAL_TEST_RX);
 2169   1      
 2170   1          for (i=0; i<MDS_TX_LEN*2; i++)
 2171   1          {
 2172   2              *(T_tempbuf1 + i) = (UINT8)rand();//x0;
 2173   2          }
 2174   1      
 2175   1          for (i=0; i<MDS_RX_LEN*2; i++)
 2176   1          {
 2177   2              *(T_tempbuf2 + i) = (UINT8)rand();//x0;
 2178   2          }
 2179   1      
 2180   1          //DisSoft = (x0-x1)*(x0-x1)*2;
 2181   1          //DisSoft = sqrt(DisSoft);
 2182   1      
 2183   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 2184   1          CalParam.usSrc2Addr = CAL_TEST_A1;
 2185   1          CalParam.usDstAddr  = CAL_TEST_A2;
 2186   1          //CalParam.ucTxNum    = 11;
 2187   1          //CalParam.ucRxNum    = 11;
 2188   1          CalParam.ucTxLen    = MDS_TX_LEN;
 2189   1          CalParam.ucRxLen    = MDS_RX_LEN;
 2190   1          CalParam.usCalCmd   = OP_MDS;
 2191   1      
 2192   1          DrvCal_MDS(&CalParam);
 2193   1      
 2194   1          DBG_CAL("\n\nAfter MDS\n");
 2195   1          for (i=0; i<MDS_TX_LEN; i++)
 2196   1          {
 2197   2              for (j=0; j<MDS_RX_LEN; j++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 170 

 2198   2              {
 2199   3      
 2200   3                  x0 = *(T_tempbuf1 + 2*j);
 2201   3                  y0 = *(T_tempbuf1 + 2*j+1);
 2202   3                  x1 = *(T_tempbuf2 + 2*i);
 2203   3                  y1 = *(T_tempbuf2 + 2*i+1); 
 2204   3                  
 2205   3                  DisSoft = sqrt(((UINT32)x0-x1)*((UINT32)x0-x1)+((UINT32)y0-y1)*((UINT32)y0-y1));       
 2206   3                  DisCal = *(T_tempOut + j*11 + i);
 2207   3                  if (DisSoft != DisCal)
 2208   3                  {
 2209   4                      g_ucCalFlag = 1;
 2210   4                      DBG_ERROR("\n\rMDS ERROR->out:%04x,soft=%04x",DisCal,DisSoft);
 2211   4                      ERROR_HOLD;
 2212   4                      return 1;
 2213   4                  } 
 2214   3                  else
 2215   3                  {
 2216   4                      //DBG_CAL("\n\rMDS OK   ->out:%04x,soft=%04x",DisCal,DisSoft);
 2217   4                  }
 2218   3              }
 2219   2          }
 2220   1          DBG_CAL("\nMDS OK");
 2221   1          return 0;
 2222   1      #endif    
 2223   1      }
*** WARNING C47 IN LINE 2158 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 2224          #else
               #define Test_CAL_MDS      /##/
               #endif
 2227          
 2228          #if TEST_CAL_CHK_EN
 2229          /*******************************************************************************
 2230           *   Name: Test_CAL_CHK
 2231           *  Brief: ¾ùÔÈ¶È¼ì²é
 2232           *         1.Ò»ÁÐÊý¾Ý ²îÖµ = ×î´óÖµ - ×îÐ¡Öµ
 2233           *         2.ËùÓÐÁÐµÄ²îÖµÖÐÇó×î´óÖµ max = max(²îÖµ)
 2234           *  Input: UINT16 usSrc1Addr
 2235           *         UINT8  Tx
 2236           *         UINT8  Rx
 2237           * Output: None
 2238           * Return: Get Max of value,which is sub value of max-min in the same column
 2239           *******************************************************************************/
 2240          BOOLEAN Test_CAL_CHK()
 2241          {
 2242   1          BOOLEAN flag = 0;
 2243   1          UINT8 i,j;
 2244   1          UINT16 check;
 2245   1      
 2246   1          UINT16 max;
 2247   1          UINT16 min;
 2248   1          UINT16 max_all;
 2249   1          UINT16 XRAM RxMax[CAL_TEST_RX];
 2250   1          DBG_CAL("\n");
 2251   1          for (i=0; i<TX_LOCAL_NUM; i++)
 2252   1          {
 2253   2              for (j=0; j<RX_LOCAL_NUM; j++)
 2254   2              {
 2255   3                  T_tempbuf1[i*RX_LOCAL_NUM + j] = (SINT16)rand()>>1;//0x100 + i;
 2256   3              }
 2257   2              //DBG_CAL_DATA("%04x ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 2258   2          }
 2259   1      
 2260   1          DBG_CAL("\n\nTest: CHK");
 2261   1          DBG_CAL("\nmen");
 2262   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 171 

 2263   1          max_all = 0;
 2264   1          for (i = 0; i < CAL_TEST_RX; i++)
 2265   1          {
 2266   2              min = 0x7FFF;
 2267   2              max = 0;
 2268   2              for (j = 0; j < CAL_TEST_TX; j++)
 2269   2              {
 2270   3                  if (T_tempbuf1[j*RX_LOCAL_NUM + i] > max)
 2271   3                  {
 2272   4                      max = T_tempbuf1[j*RX_LOCAL_NUM + i];
 2273   4                  }
 2274   3                  if (T_tempbuf1[j*RX_LOCAL_NUM + i] < min)
 2275   3                  {
 2276   4                      min = T_tempbuf1[j*RX_LOCAL_NUM + i];
 2277   4                  }
 2278   3              }
 2279   2              RxMax[i] = max - min;
 2280   2              if (RxMax[i] > max_all)
 2281   2              {
 2282   3                  max_all = RxMax[i];
 2283   3              }
 2284   2          }
 2285   1      
 2286   1          check = DrvCal_Noise(CAL_TEST_A0,CAL_TEST_TX,CAL_TEST_RX);
 2287   1      
 2288   1          if (max_all != check)
 2289   1          {
 2290   2              g_ucCalFlag = 1;
 2291   2          }
 2292   1      
 2293   1          DBG_CAL("\nCHK = 0x%x,soft:0x%x",check,max_all);
 2294   1      
 2295   1          if (g_ucCalFlag)
 2296   1          {
 2297   2              DBG_CAL("\nError");
 2298   2              DBG_CAL("\n");
 2299   2              for (i = 0; i < TX_LOCAL_NUM; i++)
 2300   2              {
 2301   3                  for (j = 0; j < RX_LOCAL_NUM; j++)
 2302   3                  {
 2303   4                      DBG_CAL(" %04x",*(T_tempbuf1 + i*RX_LOCAL_NUM + j)); 
 2304   4                  }
 2305   3                  DBG_CAL("\n");
 2306   3              }
 2307   2                      
 2308   2              ERROR_HOLD;
 2309   2          }
 2310   1          else
 2311   1          {
 2312   2              DBG_CAL("\nOK!");
 2313   2          }
 2314   1      
 2315   1      #if ARAM_CAL_TEST
               
                   #if 1
                   DBG_CAL("\naram");
               
                    for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           g_pAfeAram[i*RX_ARAM_NUM + j] = (SINT16)rand()>>1;//0x100 + i;
                       }
                       //DBG_CAL_DATA("%04x ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
                   }   
                   
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 172 

                    max_all = 0;
                    for (i = 0; i < CAL_ARAM_RX; i++)
                    {
                        min = 0x7FFF;
                        max = 0;
                        for (j = 0; j < CAL_ARAM_TX; j++)
                        {
                            if (g_pAfeAram[j*RX_ARAM_NUM + i] > max)
                            {
                                max = g_pAfeAram[j*RX_ARAM_NUM + i];
                            }
                            if (g_pAfeAram[j*RX_ARAM_NUM + i] < min)
                            {
                                min = g_pAfeAram[j*RX_ARAM_NUM + i];
                            }
                        }
                        RxMax[i] = max - min;
                        if (RxMax[i] > max_all)
                        {
                            max_all = RxMax[i];
                        }
                    }
                   
                    check = DrvCal_Noise(ARAM_DATA_BASE_ADDR,CAL_ARAM_TX,CAL_ARAM_RX);
                   
                    if (max_all != check)
                    {
                        g_ucCalFlag = 1;
                    }
                   
                    DBG_CAL("\nCHK = 0x%x,soft:0x%x",check,max_all);
                   
                    if (g_ucCalFlag)
                    {
                        DBG_CAL("\nError");
               
                       DBG_CAL("\n");
                       for (i = 0; i < TX_LOCAL_NUM; i++)
                       {
                           for (j = 0; j < RX_LOCAL_NUM; j++)
                           {
                               DBG_CAL(" %04x",*(g_pAfeAram + i*RX_LOCAL_NUM + j)); 
                           }
                           DBG_CAL("\n");
                       }         
                        ERROR_HOLD;
                    }
                    else
                    {
                        DBG_CAL("\nOK!");
                    }
                   #endif
               #endif  
 2382   1          return g_ucCalFlag;
 2383   1      }
 2384          
 2385          #else
               #define Test_CAL_CHK      /##/
               #endif
 2388          
 2389          #if TEST_CAL_CRC_EN
 2390          #define AL2_FCS_COEF                ((1 << 15) + (1 << 10) + (1 << 3))     //((1 << 7) + (1 << 6) + (1 <<
             - 5))
 2391          /*******************************************************************************
 2392           *   Name: GetCrc16
 2393           *  Brief:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 173 

 2394           *  Input:
 2395           * Output:
 2396           * Return:
 2397           *******************************************************************************/
 2398          UINT16 GetCrc16(UINT32 addr,UINT16 length,UINT8 bPram)
 2399          {
 2400   1          UINT16 cFcs = 0;
 2401   1          UINT32 i, j;
 2402   1       
 2403   1          for ( i = 0; i < length; i++ )
 2404   1          {
 2405   2              if ((bPram == CRC_SRC_FE_ZONE)||(bPram == CRC_SRC_FF_ZONE))
 2406   2              {
 2407   3                  #if 0
                           if(((UINT32)addr + (i<<1)) < 0x1800)
                           {
                                cFcs ^= PRAM_ADDR16((addr+i*2));               
                           }
                           else
                           {          
                               j = addr - 0x1800 + (i<<1);           
                               cFcs ^= PRAM1_ADDR16(j);     
                           }
                           #else
 2418   3                  
 2419   3                  cFcs ^= PRAM_ADDR16(addr+i*2);
 2420   3                  #endif
 2421   3              }
 2422   2              else if(bPram == CRC_SRC_DRAM)
 2423   2              {
 2424   3                  cFcs ^= DRAM_ADDR16((addr+i*2));
 2425   3              }
 2426   2              else if(bPram == CRC_SRC_FD_ZONE)
 2427   2              {
 2428   3                  cFcs ^= PROM_ADDR16((addr+i*2));
 2429   3              }           
 2430   2              
 2431   2              for (j = 0; j < 16; j ++)
 2432   2              {
 2433   3                  if (cFcs & 1)
 2434   3                  {
 2435   4                      cFcs = (UINT16)((cFcs >> 1) ^ AL2_FCS_COEF);
 2436   4                  }
 2437   3                  else
 2438   3                  {
 2439   4                      cFcs >>= 1;
 2440   4                  }
 2441   3              }
 2442   2          }
 2443   1          return cFcs;
 2444   1      }
 2445          /*******************************************************************************
 2446           *   Name: Test_CAL_CRC
 2447           *  Brief:
 2448           *  Input:
 2449           * Output:
 2450           * Return:
 2451           *******************************************************************************/
 2452          BOOLEAN Test_CAL_CRC()
 2453          {
 2454   1          BOOLEAN flag = 0;
 2455   1      
 2456   1          UINT16 ResultCal;
 2457   1          UINT16 ResultSoft;
 2458   1      
 2459   1          DBG_CAL("\n\nTest: CRC");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 174 

 2460   1      
 2461   1          //--------------------------------------------------------------------------
 2462   1      #if 0
                   DBG_CAL("\nDram:");
                   for (i=0; i<CAL_TEST_TX; i++)
                   {
                       for (j=0; j<CAL_TEST_RX; j++)
                       {
                           *(T_tempbuf1 + i*CAL_TEST_RX + j) = rand(); //0x43;
                           //DBG_CAL("\n j = %d, dt = %x",j,*(T_tempbuf1 + i*CAL_TEST_RX + j));
                       }
                   }
               
                   // ÐèÒªÉèÖÃ CRC_TYPE 0
                   ResultCal = DrvCal_CRC16((UINT16)T_tempbuf1,CAL_TEST_TX*CAL_TEST_RX,CRC_SRC_DRAM,CRC_MOD_CRC,0);
                   DBG_CAL("\nCal CRC = %x",ResultCal);
               
               
                   ResultSoft = GetCrc16((UINT16)T_tempbuf1,CAL_TEST_TX*CAL_TEST_RX,0);
                   DBG_CAL("\nSoft CRC = %x",ResultSoft);
               
                   if (ResultCal != ResultSoft)
                   {
                       g_ucCalFlag = 1;
                       DBG_CAL("\nError");
                       return 1;
                   }
                   else
                   {
                       DBG_CAL("\nOK");
                   }
               #endif
 2492   1      
 2493   1          //--------------------------------------------------------------------------
 2494   1      #if 1
 2495   1          DBG_CAL("\n\rPram:");
 2496   1      
 2497   1          // ÐèÒªÉèÖÃ CRC_TYPE 0
 2498   1          ResultCal = DrvCal_CRC16(0xE800,35*1024,CRC_SRC_FE_ZONE,CRC_MOD_CRC);
 2499   1      
 2500   1          DBG_CAL("\n\rCal CRC = %x",ResultCal);
 2501   1              
 2502   1          ResultSoft = GetCrc16(0x0000,35*1024,CRC_SRC_FE_ZONE);
 2503   1      
 2504   1          DBG_CAL("\n\rSoft CRC = %x",ResultSoft);
 2505   1      
 2506   1          if (ResultCal != ResultSoft)
 2507   1          {
 2508   2              g_ucCalFlag = 1;
 2509   2              DBG_CAL("\n\rError");
 2510   2              ERROR_HOLD;
 2511   2              return 1;
 2512   2          }
 2513   1          else
 2514   1          {
 2515   2              DBG_CAL("\n\rOK");
 2516   2          }
 2517   1      #endif
 2518   1      
 2519   1      #if 1
 2520   1          DBG_CAL("\n\rProm:");
 2521   1      
 2522   1          // ÐèÒªÉèÖÃ CRC_TYPE 0
 2523   1          ResultCal = DrvCal_CRC16(0x00,2*1024,CRC_SRC_FD_ZONE,CRC_MOD_CRC);
 2524   1          DBG_CAL("\n\rCal CRC = %x",ResultCal);
 2525   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 175 

 2526   1      
 2527   1          ResultSoft = GetCrc16(0x00,2*1024,CRC_SRC_FD_ZONE);
 2528   1          DBG_CAL("\n\rSoft CRC = %x",ResultSoft);
 2529   1      
 2530   1          if (ResultCal != ResultSoft)
 2531   1          {
 2532   2              g_ucCalFlag = 1;
 2533   2              DBG_CAL("\n\rError");
 2534   2              ERROR_HOLD;
 2535   2              return 1;
 2536   2          }
 2537   1          else
 2538   1          {
 2539   2              DBG_CAL("\n\rOK");
 2540   2          }    
 2541   1      #endif
 2542   1          return g_ucCalFlag;
 2543   1      }
 2544          
 2545          #else
               #define Test_CAL_CRC      /##/
               #endif
 2548          
 2549          #if TEST_CAL_XORSUM_EN
 2550          /*******************************************************************************
 2551           *   Name: GetCrc16
 2552           *  Brief:
 2553           *  Input:
 2554           * Output:
 2555           * Return:
 2556           *******************************************************************************/
 2557          UINT16 GetXorSum(UINT32 addr,UINT16 length,UINT8 bPram)
 2558          {
 2559   1          UINT16 cFcs = 0;
 2560   1          UINT32 i,j;
 2561   1          for ( i = 0; i < length; i++ )
 2562   1           {
 2563   2               if ((bPram == CRC_SRC_FF_ZONE)||(bPram == CRC_SRC_FE_ZONE))
 2564   2               {
 2565   3               #if 0
                            if((addr + (i<<1)) < 0x1800)
                            {
                                 cFcs ^= PRAM_ADDR16((addr+i*2));               
                            }
                            else
                            {          
                                j = addr - 0x1800 + (i<<1);           
                                cFcs ^= PRAM1_ADDR16(j);     
                            }
                        #else
 2576   3                   
 2577   3                   cFcs ^= PRAM_ADDR16(addr+i*2);
 2578   3               #endif
 2579   3               }
 2580   2               else if(bPram == CRC_SRC_DRAM)
 2581   2               {
 2582   3                   cFcs ^= DRAM_ADDR16((addr+i*2));
 2583   3               }
 2584   2               else if(bPram == CRC_SRC_FD_ZONE)
 2585   2               {
 2586   3                   cFcs ^= PROM_ADDR16((addr+i*2));
 2587   3               }           
 2588   2               
 2589   2           }
 2590   1      
 2591   1          return cFcs;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 176 

 2592   1      }
*** WARNING C47 IN LINE 2560 OF ..\..\src\source\task\Test_CAL.c: 'j': unreferenced local variable
 2593          
 2594          /*******************************************************************************
 2595           *   Name: Test_CAL_XORSUM
 2596           *  Brief:
 2597           *  Input:
 2598           * Output:
 2599           * Return:
 2600           *******************************************************************************/
 2601          BOOLEAN Test_CAL_XORSUM()
 2602          {
 2603   1          UINT8 i,j;
 2604   1          BOOLEAN flag = 0;
 2605   1          UINT16 ResultCal;
 2606   1          UINT16 ResultSoft;
 2607   1      
 2608   1          DBG_CAL("\n\nTest: XORSUM");
 2609   1      
 2610   1          //--------------------------------------------------------------------------
 2611   1          DBG_CAL("\nDram:");
 2612   1          for (i=0; i<CAL_TEST_TX; i++)
 2613   1          {
 2614   2              for (j=0; j<CAL_TEST_RX; j++)
 2615   2              {
 2616   3                  *(T_tempbuf1 + i*CAL_TEST_RX + j) = rand();
 2617   3              }
 2618   2          }
 2619   1          // ÐèÒªÉèÖÃ CRC_TYPE 1    
 2620   1          ResultCal = DrvCal_CRC16((UINT16)T_tempbuf1,CAL_TEST_TX*CAL_TEST_RX*2,CRC_SRC_DRAM,CRC_MOD_XOR);
 2621   1          DBG_CAL("\nCal Xorsum = %x",ResultCal);
 2622   1      
 2623   1          ResultSoft = GetXorSum((UINT16)T_tempbuf1,CAL_TEST_TX*CAL_TEST_RX*2,0);
 2624   1          DBG_CAL("\n\rSoft Xorsum = %x",ResultSoft);
 2625   1      
 2626   1          if (ResultCal != ResultSoft)
 2627   1          {
 2628   2              g_ucCalFlag = 1;
 2629   2              DBG_CAL("\nError");
 2630   2              ERROR_HOLD;
 2631   2          }
 2632   1          else
 2633   1          {
 2634   2              DBG_CAL("\nOK");
 2635   2          }
 2636   1              
 2637   1      #if 1
 2638   1          //--------------------------------------------------------------------------
 2639   1          DBG_CAL("\n\rPram:");
 2640   1      
 2641   1          // ÐèÒªÉèÖÃ CRC_TYPE 1  
 2642   1          ResultCal = DrvCal_CRC16(0xE800,35*1024,CRC_SRC_FE_ZONE,CRC_MOD_XOR);
 2643   1          DBG_CAL("\n\rCal Xorsum = %x",ResultCal);
 2644   1      
 2645   1          ResultSoft = GetXorSum(0x0000,35*1024,CRC_SRC_FE_ZONE);
 2646   1          DBG_CAL("\n\rSoft Xorsum = %x",ResultSoft);
 2647   1      
 2648   1          if (ResultCal != ResultSoft)
 2649   1          {
 2650   2              g_ucCalFlag = 1;
 2651   2              DBG_CAL("\n\rError");
 2652   2              ERROR_HOLD;
 2653   2          }
 2654   1          else
 2655   1          {
 2656   2              DBG_CAL("\n\rOK");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 177 

 2657   2          }
 2658   1      #endif
 2659   1      
 2660   1      
 2661   1      #if 1
 2662   1              //--------------------------------------------------------------------------
 2663   1              DBG_CAL("\n\rProm:");
 2664   1          
 2665   1              // ÐèÒªÉèÖÃ CRC_TYPE 1  
 2666   1              ResultCal = DrvCal_CRC16(0x00,2*1024,CRC_SRC_FD_ZONE,CRC_MOD_XOR);
 2667   1              DBG_CAL("\n\rCal Xorsum = %x",ResultCal);
 2668   1          
 2669   1              ResultSoft = GetXorSum(0x0000,2*1024,CRC_SRC_FD_ZONE);
 2670   1              DBG_CAL("\n\rSoft Xorsum = %x",ResultSoft);
 2671   1          
 2672   1              if (ResultCal != ResultSoft)
 2673   1              {
 2674   2                  g_ucCalFlag = 1;
 2675   2                  DBG_CAL("\n\rError");
 2676   2                  ERROR_HOLD;
 2677   2              }
 2678   1              else
 2679   1              {
 2680   2                  DBG_CAL("\n\rOK");
 2681   2              }
 2682   1      #endif
 2683   1      
 2684   1          return g_ucCalFlag;
 2685   1      }
 2686          
 2687          #else
               #define Test_CAL_XORSUM      /##/
               #endif
 2690          
 2691          
 2692          #if TEST_CAL_MAC_1_EN
 2693          #define MAC_NOISE_THD   0
 2694          /*******************************************************************************
 2695           *   Name: Test_CAL_MAC_1
 2696           *  Brief: ×ÓÇøÓòÄ£Ê½MACËã·¨
 2697           *  Input:
 2698           * Output:
 2699           * Return:
 2700           *******************************************************************************/
 2701          
 2702          void Test_CAL_MAC_1()
 2703          {
 2704   1          UINT8 i,j;
 2705   1          SINT32 ulSum_c  = 0;
 2706   1          SINT32 ulSum_tx = 0;
 2707   1          SINT32 ulSum_rx = 0;
 2708   1          ST_CalMcMacParam XRAM CalParam;
 2709   1      
 2710   1          DBG_CAL("\n\nCal Mac test start\n");
 2711   1      
 2712   1          for (i=0; i<TX_LOCAL_NUM; i++)
 2713   1          {
 2714   2              for (j=0; j<RX_LOCAL_NUM; j++)
 2715   2              {
 2716   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
 2717   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = 0x00;
 2718   3              }
 2719   2          }
 2720   1      
 2721   1          #if 0
                   T_tempbuf1[2*RX_LOCAL_NUM + 2] = rand();
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 178 

                   T_tempbuf1[2*RX_LOCAL_NUM + 3] = rand();
                   T_tempbuf1[2*RX_LOCAL_NUM + 4] = rand();
               
                   T_tempbuf1[3*RX_LOCAL_NUM + 2] = rand();
                   T_tempbuf1[3*RX_LOCAL_NUM + 3] = rand();
                   T_tempbuf1[3*RX_LOCAL_NUM + 4] = rand();
               
                   T_tempbuf1[4*RX_LOCAL_NUM + 2] = rand();
                   T_tempbuf1[4*RX_LOCAL_NUM + 3] = rand();
                   T_tempbuf1[4*RX_LOCAL_NUM + 4] = rand();
                   #endif
 2734   1          
 2735   1      
 2736   1          CalParam.usDiffAddr    = CAL_TEST_A0 + (MAC_TX_START*RX_LOCAL_NUM + MAC_RX_START)*2;  // ×ÓÇøÓòÄ£Ê½
 2737   1          CalParam.usCalOutAddr  = CAL_TEST_A1;    
 2738   1          CalParam.ucTxStart     = MAC_TX_START;
 2739   1          CalParam.ucRxStart     = MAC_RX_START;
 2740   1          CalParam.ucTxLen       = MAC_TX_LEN;
 2741   1          CalParam.ucRxLen       = MAC_RX_LEN;
 2742   1          //CalParam.ucTxNum       = TX_LOCAL_NUM;
 2743   1          //CalParam.ucRxNum       = RX_LOCAL_NUM;    
 2744   1          CalParam.ucMode        = (MAC_CFG_0<<1) + MAC_MOD_0;
 2745   1          CalParam.ucNoise       = MAC_NOISE_THD;
 2746   1      
 2747   1          DrvCal_Mac(&CalParam);
 2748   1      
 2749   1          for (i = MAC_TX_START; i<(MAC_TX_START+MAC_TX_LEN); i++)
 2750   1          {
 2751   2              for (j = MAC_RX_START; j<(MAC_RX_START+MAC_RX_LEN); j++)
 2752   2              {
 2753   3      #if 1   // MAC_MOD_0 ¸ºÖµ¶ªÆúÄ£Ê½    
 2754   3                  if ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD) >= 0)
 2755   3                  {
 2756   4                      ulSum_c  += T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD;
 2757   4                      ulSum_tx += ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*i);
 2758   4                      ulSum_rx += ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*j);
 2759   4                  }
 2760   3      #else   // MAC_MOD_1 ¾ø¶ÔÖµ>0²»¶ªÆúÄ£Ê½  
                           if ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD) >= 0)
                           {   
                               ulSum_c  += (T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD);
                               ulSum_tx += ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*i);
                               ulSum_rx += ((T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*j);
                           }
                           else if ((0-T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD) >= 0)
                           {
                               ulSum_c  += (0-T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD);
                               ulSum_tx += ((0-T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*i);
                               ulSum_rx += ((0-T_tempbuf1[i*RX_LOCAL_NUM + j] - MAC_NOISE_THD)*j);
                           }
               #endif
 2774   3              }
 2775   2          }
 2776   1        
 2777   1          DBG_CAL("\n\r%08lx %08lx %08lx",ulSum_c,ulSum_tx,ulSum_rx);
 2778   1      
 2779   1          DBG_CAL("\n");
 2780   1          for (i=0; i<6; i++)
 2781   1          {
 2782   2              DBG_CAL("%04x ",*(T_tempbuf2 + i));
 2783   2          }
 2784   1          if(((SINT16)(ulSum_c>>16)==T_tempbuf2[0])&&((SINT16)(ulSum_c&0xFFFF) == T_tempbuf2[1])\
 2785   1            &&((SINT16)(ulSum_tx>>16)==T_tempbuf2[2])&&((SINT16)(ulSum_tx&0xFFFF) == T_tempbuf2[3])\
 2786   1            &&((SINT16)(ulSum_rx>>16)==T_tempbuf2[4])&&((SINT16)(ulSum_rx&0xFFFF) == T_tempbuf2[5]))
 2787   1      
 2788   1          {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 179 

 2789   2              DBG_CAL("\nMAC_1 OK");
 2790   2          }
 2791   1          else
 2792   1          {
 2793   2               DBG_CAL("\nMAC_1 ERROR");
 2794   2               ERROR_HOLD;
 2795   2          }
 2796   1      
 2797   1          
 2798   1      }
 2799          #else
               #define Test_CAL_MAC_1      /##/
               #endif
 2802          
 2803          #if TEST_CAL_MAC_2_EN
 2804          #define MAC_NOISE_THD   0
 2805          /*******************************************************************************
 2806           *   Name: Test_CAL_MAC_2
 2807           *  Brief: ÖØ¹¹Ä£Ê½MACËã·¨
 2808           *  Input:
 2809           * Output:
 2810           * Return:
 2811           *******************************************************************************/
 2812          void Test_CAL_MAC_2()
 2813          {
 2814   1          UINT8 i,j;
 2815   1          SINT32 ulSum_c  = 0;
 2816   1          SINT32 ulSum_tx = 0;
 2817   1          SINT32 ulSum_rx = 0;
 2818   1          ST_CalMcMacParam XRAM CalParam;
 2819   1      
 2820   1          DBG_CAL("\n\nCal Mac test start\n");
 2821   1      
 2822   1          #if 1
 2823   1          for (i=0; i<TX_LOCAL_NUM; i++)
 2824   1          {
 2825   2              for (j=0; j<RX_LOCAL_NUM; j++)
 2826   2              {
 2827   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();
 2828   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = 0x00;
 2829   3              }
 2830   2          }
 2831   1          #else
                   T_tempbuf1[0] = 0x200;
                   T_tempbuf1[1] = 0x200;
                   T_tempbuf1[2] = 0x100;
               
                   T_tempbuf1[3] = 0x100;
                   T_tempbuf1[4] = 0x100;
                   T_tempbuf1[5] = 0x200;
               
                   T_tempbuf1[6] = 0x100;
                   T_tempbuf1[7] = 0x200;
                   T_tempbuf1[8] = 0x100;
                   #endif
 2844   1          CalParam.usDiffAddr    = CAL_TEST_A0;
 2845   1          CalParam.usCalOutAddr  = CAL_TEST_A1;
 2846   1          CalParam.ucTxStart     = 0;
 2847   1          CalParam.ucRxStart     = 0;
 2848   1          CalParam.ucTxLen       = MAC_TX_LEN;
 2849   1          CalParam.ucRxLen       = MAC_RX_LEN;
 2850   1          CalParam.ucMode        = (MAC_CFG_1<<1) + MAC_MOD_1;
 2851   1          CalParam.ucNoise       = MAC_NOISE_THD;
 2852   1      
 2853   1          DrvCal_Mac(&CalParam);
 2854   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 180 

 2855   1          for (i = 0; i<MAC_TX_LEN; i++)
 2856   1          {
 2857   2              for (j = 0; j<MAC_RX_LEN; j++)
 2858   2              {
 2859   3      #if 0   // MAC_MOD_0 ¸ºÖµ¶ªÆúÄ£Ê½    
                           if ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD) >= 0)
                           {
                               ulSum_c  += T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD;
                               ulSum_tx += ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*i);
                               ulSum_rx += ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*j);
                           }
               #else   // MAC_MOD_1 ¾ø¶ÔÖµ>0²»¶ªÆúÄ£Ê½  
 2867   3                  if ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD) >= 0)
 2868   3                  {
 2869   4                      ulSum_c  += (T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD);
 2870   4                      ulSum_tx += ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*i);
 2871   4                      ulSum_rx += ((T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*j);
 2872   4                  }
 2873   3                  else if ((0-T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD) >= 0)
 2874   3                  {
 2875   4                      ulSum_c  += (0-T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD);
 2876   4                      ulSum_tx += ((0-T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*i);
 2877   4                      ulSum_rx += ((0-T_tempbuf1[i*MAC_RX_LEN + j] - MAC_NOISE_THD)*j);
 2878   4                  }
 2879   3      #endif
 2880   3      
 2881   3              }
 2882   2          }
 2883   1          DBG_CAL("\n%08lx %08lx %08lx",ulSum_c,ulSum_tx,ulSum_rx);
 2884   1      
 2885   1          DBG_CAL("\n");
 2886   1          for (i=0; i<6; i++)
 2887   1          {
 2888   2              DBG_CAL("%04x ",*(T_tempbuf2 + i));
 2889   2          }
 2890   1      
 2891   1      
 2892   1      if(((SINT16)(ulSum_c>>16)==T_tempbuf2[0])&&((SINT16)(ulSum_c&0xFFFF) == T_tempbuf2[1])\
 2893   1        &&((SINT16)(ulSum_tx>>16)==T_tempbuf2[2])&&((SINT16)(ulSum_tx&0xFFFF) == T_tempbuf2[3])\
 2894   1        &&((SINT16)(ulSum_rx>>16)==T_tempbuf2[4])&&((SINT16)(ulSum_rx&0xFFFF) == T_tempbuf2[5]))    
 2895   1          {
 2896   2              DBG_CAL("\nMAC_2 OK");
 2897   2          }
 2898   1          else
 2899   1          {
 2900   2               DBG_CAL("\nMAC_2 ERROR");
 2901   2               ERROR_HOLD;
 2902   2          }
 2903   1      
 2904   1      }
 2905          #else
               #define Test_CAL_MAC_2      /##/
               #endif
 2908          
 2909          #if TEST_CAL_ID_EN
 2910          /*******************************************************************************
 2911           *   Name: Test_CAL_ID
 2912           *  Brief:
 2913           *  Input:
 2914           * Output:
 2915           * Return:
 2916           *******************************************************************************/
 2917          void Test_CAL_ID()
 2918          {
 2919   1          UINT8 i;
 2920   1          UINT8 ucLastNum = 4;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 181 

 2921   1          UINT8 ucCurrNum = 8;
 2922   1          UINT8 ucMaxNum  = 10;
 2923   1          ST_CalKmIdParam XRAM stKmIDp;
 2924   1      
 2925   1          DBG_CAL("\n\nCal ID test start");
 2926   1      
 2927   1          /* ½«ÉÏÒ»Ö¡ËùÓÐµãµÄÔ­Ê¼×ø±êÐÅÏ¢¿½±´µ½LastIDPosÖÐ£¬×¼±¸CAL¼ÆËãÊäÈëÊý¾Ý */
 2928   1          for (i = 0; i < (ucMaxNum << 1); i++ )
 2929   1          {
 2930   2              g_stFrmData.CurrIdPos[i] = 0x7FFF;
 2931   2              g_stFrmData.LastIdPos[i] = 0x7FFF;
 2932   2          }
 2933   1      
 2934   1          for (i = 0; i < ucLastNum; i++)
 2935   1          {
 2936   2              g_stFrmData.LastIdPos[2*i]   = i*10;
 2937   2              g_stFrmData.LastIdPos[2*i+1] = i*10;
 2938   2          }
 2939   1      
 2940   1          for (i = 0; i < ucCurrNum; i++)
 2941   1          {
 2942   2              g_stFrmData.CurrIdPos[2*i]   = (ucCurrNum-i)*10 + 1;
 2943   2              g_stFrmData.CurrIdPos[2*i+1] = (ucCurrNum-i)*10 + 1;
 2944   2          }
 2945   1      
 2946   1          stKmIDp.usLastIdPosAddr = (UINT16)g_stFrmData.LastIdPos;
 2947   1          stKmIDp.usCurrIdPosAddr = (UINT16)g_stFrmData.CurrIdPos;
 2948   1          stKmIDp.usCalOut   = (UINT16)T_tempOut;
 2949   1          stKmIDp.ucLastPoint = ucLastNum;
 2950   1          stKmIDp.ucCurrPoint = ucCurrNum;
 2951   1      
 2952   1          DBG_CAL("\n\rFirst ID:L=%d,N=%d",ucLastNum,ucCurrNum);
 2953   1          DrvCal_KmID(&stKmIDp);
 2954   1      
 2955   1          for (i = 0; i < ucMaxNum; i++)
 2956   1          {
 2957   2              UINT8 id;
 2958   2              id = *(UINT16*)(T_tempOut + i);
 2959   2      
 2960   2              if (id == 0x0F)
 2961   2              {
 2962   3                  DBG_CAL("\n\rID%x:  %2d--  %4d--XXXX",i,id + 1, g_stFrmData.LastIdPos[i*2]);
 2963   3              }
 2964   2              else
 2965   2              {
 2966   3                  DBG_CAL("\n\rID%x:  %2d--  %4d--  %4d",i,id + 1, g_stFrmData.LastIdPos[i*2], g_stFrmData.Curr
             -IdPos[id*2]);
 2967   3              }
 2968   2          }
 2969   1      
 2970   1          if((*(UINT16*)(T_tempOut ) != 7)||(*(UINT16*)(T_tempOut + 1) != 6)||(*(UINT16*)(T_tempOut + 2) != 5)|
             -|(*(UINT16*)(T_tempOut + 3) != 4))
 2971   1          {
 2972   2              DBG_CAL("\nERROR");
 2973   2              ERROR_HOLD;
 2974   2          }
 2975   1      
 2976   1          ucLastNum = 8;
 2977   1          ucCurrNum = 4;
 2978   1          stKmIDp.ucLastPoint = ucLastNum;
 2979   1          stKmIDp.ucCurrPoint = ucCurrNum;
 2980   1      
 2981   1          DBG_CAL("\n\nSecond ID:L=%d,N=%d",ucLastNum,ucCurrNum);
 2982   1      
 2983   1          for (i = 0; i < (ucMaxNum << 1); i++ )
 2984   1          {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 182 

 2985   2              g_stFrmData.CurrIdPos[i] = 0x7FFF;
 2986   2              g_stFrmData.LastIdPos[i] = 0x7FFF;
 2987   2          }
 2988   1      
 2989   1          for (i = 0; i < ucLastNum; i++)
 2990   1          {
 2991   2              g_stFrmData.LastIdPos[2*i]   = i*10;
 2992   2              g_stFrmData.LastIdPos[2*i+1] = i*10;
 2993   2          }
 2994   1      
 2995   1          for (i = 0; i < ucCurrNum; i++)
 2996   1          {
 2997   2              g_stFrmData.CurrIdPos[2*i]   = i*10 + 1;
 2998   2              g_stFrmData.CurrIdPos[2*i+1] = i*10 + 1;
 2999   2          }
 3000   1      
 3001   1          DrvCal_KmID(&stKmIDp);
 3002   1      
 3003   1          for (i = 0; i < ucMaxNum; i++)
 3004   1          {
 3005   2              UINT8 id;
 3006   2              id = *(UINT16*)(T_tempOut + i);
 3007   2              if (id == 0x0F)
 3008   2              {
 3009   3                  DBG_CAL("\n\rID%x:%2d--%4d--XXXX",i,id + 1, g_stFrmData.LastIdPos[i*2]);
 3010   3              }
 3011   2              else
 3012   2              {
 3013   3                  DBG_CAL("\n\rID%x:%2d--%4d--%4d",i,id + 1, g_stFrmData.LastIdPos[i*2], g_stFrmData.CurrIdPos[
             -id*2]);
 3014   3              }
 3015   2          }
 3016   1          
 3017   1          if((*(UINT16*)(T_tempOut ) != 0)||(*(UINT16*)(T_tempOut + 1) != 1)||(*(UINT16*)(T_tempOut + 2) != 2)|
             -|(*(UINT16*)(T_tempOut + 3) != 3))
 3018   1          {
 3019   2              DBG_CAL("\nERROR");
 3020   2              ERROR_HOLD;
 3021   2          }
 3022   1      
 3023   1          
 3024   1      }
 3025          #else
               #define Test_CAL_ID      /##/
               #endif
 3028          
 3029          #if TEST_CAL_PKS_EN
 3030          /*******************************************************************************
 3031           *   Name: Test_CAL_SearchPeak
 3032           *  Brief:
 3033           *  Input:
 3034           * Output:
 3035           * Return:
 3036           *******************************************************************************/
 3037          void Test_CAL_SearchPeak()
 3038          {
 3039   1          UINT8 i,j;
 3040   1          UINT8 ucPeakValidGroup;
 3041   1          UINT8 ucPeakValidPos;
 3042   1          UINT16 XRAM ausNegPeaks[MAX_PEAK + 1];
 3043   1          UINT16 *pNegPeakBuf;
 3044   1          ST_CalMcPeakDetectParam XRAM stMcPDP;
 3045   1          ST_CalMcPeakInfo XRAM stMcPI;
 3046   1          ST_PeakData  XRAM  g_stPeakData;
 3047   1      
 3048   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 183 

 3049   1          for (i=0; i<TX_LOCAL_NUM; i++)
 3050   1          {
 3051   2              for (j=0; j<RX_LOCAL_NUM; j++)
 3052   2              {
 3053   3                  T_tempbuf3[i*RX_LOCAL_NUM + j] = 0;
 3054   3              }
 3055   2          }
 3056   1          DBG_CAL("\n\nCal Search Peak test start\n");
 3057   1      
 3058   1      
 3059   1          T_tempbuf3[2*RX_LOCAL_NUM + 7] = -400;
 3060   1          T_tempbuf3[2*RX_LOCAL_NUM + 8] = 100;
 3061   1          T_tempbuf3[2*RX_LOCAL_NUM + 9] = 100;
 3062   1      
 3063   1          T_tempbuf3[3*RX_LOCAL_NUM + 7] = -250;
 3064   1          T_tempbuf3[3*RX_LOCAL_NUM + 8] = 800;
 3065   1          T_tempbuf3[3*RX_LOCAL_NUM + 9] = -200;
 3066   1      
 3067   1          T_tempbuf3[4*RX_LOCAL_NUM + 7] = -200;
 3068   1          T_tempbuf3[4*RX_LOCAL_NUM + 8] = -200;
 3069   1          T_tempbuf3[4*RX_LOCAL_NUM + 9] = 100;
 3070   1      
 3071   1          T_tempbuf3[8*RX_LOCAL_NUM + 8] = -1200;
 3072   1          T_tempbuf3[5*RX_LOCAL_NUM + 9] = 8100;
 3073   1      
 3074   1          for (i=0; i<CAL_TEST_TX; i++)
 3075   1          {
 3076   2              for (j=0; j<CAL_TEST_RX; j++)
 3077   2              {
 3078   3                  DBG_CAL_DATA("%04d ",T_tempbuf3[i*RX_LOCAL_NUM + j]);
 3079   3              }
 3080   2              DBG_CAL_DATA("\n");
 3081   2          }
 3082   1      
 3083   1          //±ØÐëÅ¼Êý
 3084   1          pNegPeakBuf = (UINT16 *)((UINT16)(ausNegPeaks+1)& 0xFFFE);
 3085   1      
 3086   1          /* step2: DrvCal_McPeak ²ÎÊýÉèÖÃ */
 3087   1          stMcPDP.usDiffAddr = CAL_TEST_PKS;
 3088   1          stMcPDP.usNegOutAddr = (UINT16)pNegPeakBuf;
 3089   1          stMcPDP.usCalOutAddr = CAL_TEST_A2;
 3090   1      
 3091   1          stMcPDP.ucTxLen = CAL_TEST_TX;
 3092   1          stMcPDP.ucRxLen = CAL_TEST_RX;
 3093   1          stMcPDP.usPosThd     = 200;
 3094   1          stMcPDP.usNegThd     = -200;
 3095   1          stMcPDP.usAreaThd    = 50;
 3096   1          stMcPDP.usNegAreaThd = -50;
 3097   1      
 3098   1          stMcPDP.ucMaxPeakNum = MAX_PEAK - 1;//0±íÊ¾MaxPeakNumÎª1£¬MAX_PEAK-1±íÊ¾MaxPeakNumÎªMAX_PEAK
 3099   1          stMcPDP.ucSearchMod  = 0;//0:Ê®×Ö;1Ã××Ö 
 3100   1      
 3101   1          /* step3: DrvCal_McPeak */
 3102   1          DrvCal_McPeak(&stMcPDP, &stMcPI);
 3103   1      
 3104   1          /* step4: È¡³öDrvCalMCPeak ½á¹û */
 3105   1          g_stPeakData.ucMcPosPeakNum = stMcPI.ucMcPosPeakNum;
 3106   1          g_stPeakData.ucMcNegPeakNum = stMcPI.ucMcNegPeakNum;
 3107   1          g_stPeakData.ucMcPosAreaChNum = stMcPI.ucMcPosAreaChNum;
 3108   1          g_stPeakData.ucMcNegAreaChNum = stMcPI.ucMcNegAreaChNum;
 3109   1      
 3110   1          //Õýpeak
 3111   1          for (i = 0; i < g_stPeakData.ucMcPosPeakNum; i++)
 3112   1          {
 3113   2              ucPeakValidGroup = i >> 3;
 3114   2              ucPeakValidPos = VALID << (i & 0x7);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 184 

 3115   2              g_stPeakData.aucMcPeakValid[ucPeakValidGroup] |= ucPeakValidPos;
 3116   2      
 3117   2              g_stPeakData.aucMcPosPeak[i][0] = T_tempOut[i] >> 8;  //TX Î»ÖÃ
 3118   2              g_stPeakData.aucMcPosPeak[i][1] = T_tempOut[i] %256;  //RX Î»ÖÃ
 3119   2          }
 3120   1          //¸ºpeak
 3121   1          for (i = 0; i < g_stPeakData.ucMcNegPeakNum; i++)
 3122   1          {
 3123   2              g_stPeakData.aucMcNegPeak[i][0] = pNegPeakBuf[i] >> 8;   //TX Î»ÖÃ
 3124   2              g_stPeakData.aucMcNegPeak[i][1] = pNegPeakBuf[i] %256;   //RX Î»ÖÃ
 3125   2          }
 3126   1      
 3127   1          if (g_stPeakData.ucMcPosPeakNum > 0)
 3128   1          {
 3129   2              DBG_CAL("\npeak pos:%x--%x",2,g_stPeakData.ucMcPosPeakNum);
 3130   2              DBG_CAL("\npeak neg:%x--%x",2,g_stPeakData.ucMcNegPeakNum);
 3131   2              DBG_CAL("\nArea pos:%x--%x",2,g_stPeakData.ucMcPosAreaChNum);
 3132   2              DBG_CAL("\nArea Neg:%x--%x",2,g_stPeakData.ucMcNegAreaChNum);
 3133   2      
 3134   2              for (i = 0; i < g_stPeakData.ucMcPosPeakNum; i++)
 3135   2              {
 3136   3                  DBG_CAL("\npos%x:%x-%x",i,g_stPeakData.aucMcPosPeak[i][0],g_stPeakData.aucMcPosPeak[i][1]);
 3137   3              }
 3138   2      
 3139   2              for (i = 0; i < g_stPeakData.ucMcNegPeakNum; i++)
 3140   2              {
 3141   3                  DBG_CAL("\nNeg%x:%x-%x",i,g_stPeakData.aucMcNegPeak[i][0],g_stPeakData.aucMcNegPeak[i][1]);
 3142   3              }
 3143   2          }
 3144   1      
 3145   1          if((g_stPeakData.ucMcPosPeakNum != 2)||(g_stPeakData.ucMcNegPeakNum != 4)||(g_stPeakData.ucMcPosAreaC
             -hNum != 5)||(g_stPeakData.ucMcNegAreaChNum != 6))
 3146   1          {
 3147   2              DBG_CAL("\n Search Peak ERROR");
 3148   2              ERROR_HOLD;
 3149   2          }
 3150   1      }
 3151          #else
               #define Test_CAL_SearchPeak      /##/
               #endif
 3154          
 3155          #if TEST_CAL_AMOV_EN
               /*******************************************************************************
                *   Name: Test_CAL_AMov
                *  Brief: AMOV°áÒÆ
                *  Input:
                * Output:
                * Return: none
                *******************************************************************************/
               void Test_CAL_AMov(void)
               {
                   UINT8 i,j;
                   BOOLEAN flag;
                   ST_CalMatrixAMov CalParam;
                 
               
                   DBG_CAL("\n\nTest CAL Amov");
                   for (i=0; i<TX_LOCAL_NUM; i++)
                   {
                       for (j=0; j<RX_LOCAL_NUM; j++)
                       {
                           *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = rand();//i*RX_LOCAL_NUM + j;
                           *(g_pAfeAram + i*RX_LOCAL_NUM + j) = rand();//0x2000+i*RX_LOCAL_NUM + j;//rand();
                       }
                   }
                   DBG_CAL("\n\rTest Amov MEM to MEM");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 185 

               
                   CalParam.usSrc1Addr = CAL_TEST_A0;//ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   //CalParam.ucS1TxNum  = TX_LOCAL_NUM;
                   //CalParam.ucS1RxNum  = RX_LOCAL_NUM;
                   CalParam.ucS1TxLen  = CAL_TEST_TX;
                   CalParam.ucS1RxLen  = CAL_TEST_RX;
                   CalParam.usDmaMask  = 0x0000;
               
                   DrvCal_MatrixAMov(&CalParam);
               
                   #if 0
                   DBG_CAL("\n");
                   for (i=0; i<TX_LOCAL_NUM; i++)
                   {
                       for (j=0; j<RX_LOCAL_NUM; j++)
                       {
                           DBG_CAL("%04x ",*(T_tempOut + i*RX_LOCAL_NUM + j));
                       }
                       DBG_CAL("\n");
                   }
                   #endif
                   g_ucCalFlag = 0;
                   for (i=0; i<CAL_TEST_TX; i++)
                   {
                       for (j=0; j<CAL_TEST_RX; j++)
                       {
                           if (*(T_tempOut + i*RX_LOCAL_NUM + j) != *(T_tempbuf1 + i*RX_LOCAL_NUM + j))
                           {
                               g_ucCalFlag = 1;
                               DBG_ERROR("\n\rERROR->out=%04x,vl=%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_tempbuf1 + 
             -i*RX_LOCAL_NUM + j));
                           }
                           else
                           {
                               //DBG_CAL("\n\rOK->   out=%04x,vl=%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(T_tempbuf1 + 
             -i*RX_LOCAL_NUM + j));
                           }
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rAmov Mem to Mem ERROR");
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rAmov Mem to Mem OK");
                   }
               
                   DBG_CAL("\n\rTest Amov ARAM to MEM");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   //CalParam.ucS1TxNum  = TX_ARAM_NUM;
                   //CalParam.ucS1RxNum  = RX_ARAM_NUM;
                   CalParam.ucS1TxLen  = CAL_ARAM_TX;
                   CalParam.ucS1RxLen  = CAL_ARAM_RX;
               
                   DrvCal_MatrixAMov(&CalParam);
                   g_ucCalFlag = 0;
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (*(T_tempOut + i*RX_ARAM_NUM + j) != *(g_pAfeAram + i*RX_ARAM_NUM + j))
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 186 

                           {
                               g_ucCalFlag = 1;
                               DBG_ERROR("\n\rERROR->out=%04x,vl=%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(g_pAfeAram + 
             -i*RX_LOCAL_NUM + j));
                           }
                           else
                           {
                               //DBG_CAL("\n\rOK->   out=%04x,vl=%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),*(g_pAfeAram + 
             -i*RX_LOCAL_NUM + j));
                           }
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rAmov Aram to Mem ERROR");
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rAmov Aram to Mem OK");
                   }   
               }
               #else
 3266          #define Test_CAL_AMov()         /##/
 3267          #endif
 3268          
 3269          #if TEST_CAL_AVG_TX_EN 
 3270          /*******************************************************************************
 3271           *   Name: Test_CAL_AVG_TX
 3272           *  Brief: ÐÐ¾ùÖµËã·¨
 3273           *  Input:
 3274           * Output:
 3275           * Return: none
 3276           *******************************************************************************/
 3277          void Test_CAL_AVG_TX(void)
 3278          {
 3279   1          UINT8 usAvgMode;
 3280   1          UINT8 i,j;
 3281   1          UINT8 flag;
 3282   1          SINT32 slSumDiff = 0;
 3283   1          SINT16 ssAvgBuf[CAL_TEST_TX];
 3284   1      
 3285   1          ST_CalMcMatrixParam CalParam;
 3286   1      
 3287   1          DBG_CAL("\n\nCAL ORG AVG Tx Test");
 3288   1          for (i=0; i<TX_LOCAL_NUM; i++)
 3289   1          {
 3290   2              for (j=0; j<RX_LOCAL_NUM; j++)
 3291   2              {
 3292   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
 3293   3              }          
 3294   2          }
 3295   1      
 3296   1          for(i = 0;i<TX_LOCAL_NUM;i++)
 3297   1          {
 3298   2              *(T_tempbuf2 + i) = (UINT16)rand();//200;                //ÕýãÐÖµ
 3299   2              *(T_tempbuf2 + TX_LOCAL_NUM + i) = ((SINT16)rand()>>1)|0x8000;//-100;//¸ºãÐÖµ
 3300   2          }
 3301   1      
 3302   1          
 3303   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3304   1          CalParam.usSrc2Addr    = CAL_TEST_A1;    
 3305   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3306   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3307   1          CalParam.ucRxLen       = CAL_TEST_RX;  
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 187 

 3308   1          CalParam.usCalCmd      = EX_OP_AVG;
 3309   1          CalParam.ucCfg         = SIGN_MOD_0;
 3310   1          CalParam.ucDataType    = EX_CFG_ORG;
 3311   1          CalParam.ucLineCfg     = EX_MOD_TX;
 3312   1      
 3313   1          usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3314   1      
 3315   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3316   1      
 3317   1          for (i=0; i<CAL_TEST_TX; i++)
 3318   1          {
 3319   2              slSumDiff = 0; 
 3320   2              for (j=0; j<CAL_TEST_RX; j++)
 3321   2              {
 3322   3                  if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) > *(T_tempbuf2 + i))
 3323   3                  {
 3324   4                      slSumDiff += *(T_tempbuf2 + i);
 3325   4                  }
 3326   3                  else if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) < *(T_tempbuf2 + TX_LOCAL_NUM + i))
 3327   3                  {
 3328   4                      slSumDiff += *(T_tempbuf2 + TX_LOCAL_NUM + i);
 3329   4                  }
 3330   3                  else
 3331   3                  {
 3332   4                      slSumDiff += *(T_tempbuf1 + i*RX_LOCAL_NUM + j);
 3333   4                  }   
 3334   3              }
 3335   2      
 3336   2              
 3337   2              ssAvgBuf[i] = (slSumDiff/CAL_TEST_RX);   
 3338   2          }
 3339   1      
 3340   1          g_ucCalFlag = 0;
 3341   1          for (i = 0; i < CAL_TEST_TX; i++)
 3342   1          {
 3343   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 3344   2              {
 3345   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3346   3                  g_ucCalFlag = 1;
 3347   3              }
 3348   2              else
 3349   2              {
 3350   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3351   3              }
 3352   2          }
 3353   1      
 3354   1          if (g_ucCalFlag)
 3355   1          {
 3356   2              DBG_CAL("\n\rTest CAL ORG AVG Tx is ERROR!");
 3357   2      
 3358   2              DBG_CAL("\n");  
 3359   2              for (i=0; i<TX_LOCAL_NUM; i++)
 3360   2              {
 3361   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 3362   3                  {
 3363   4                     
 3364   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3365   4                  }
 3366   3                      DBG_CAL("\n");  
 3367   3              }
 3368   2      
 3369   2              for(i = 0;i<TX_LOCAL_NUM;i++)
 3370   2              {
 3371   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 3372   3                  DBG_CAL("%04d ",*(T_tempbuf2 + TX_LOCAL_NUM + i));
 3373   3                  
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 188 

 3374   3              }  
 3375   2      
 3376   2              
 3377   2              ERROR_HOLD;
 3378   2          }
 3379   1          else
 3380   1          {
 3381   2              DBG_CAL("\n\rTest CAL ORG AVG Tx is OK!");
 3382   2          }
 3383   1      
 3384   1      
 3385   1          for(i = 0;i<TX_LOCAL_NUM;i++)//absµÄÏÂÏÞÓ¦¸Ã´óÓÚµÈÓÚ0
 3386   1          {
 3387   2              *(T_tempbuf2 + TX_LOCAL_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
 3388   2          }
 3389   1      
 3390   1         
 3391   1          DBG_CAL("\n\rCAL ABS AVG Tx Test");
 3392   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3393   1          CalParam.usSrc2Addr    = CAL_TEST_A1;    
 3394   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3395   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3396   1          CalParam.ucRxLen       = CAL_TEST_RX;  
 3397   1          CalParam.usCalCmd      = EX_OP_AVG;
 3398   1          CalParam.ucCfg         = SIGN_MOD_0;
 3399   1          CalParam.ucDataType    = EX_CFG_ABS;
 3400   1          CalParam.ucLineCfg     = EX_MOD_TX;
 3401   1          usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3402   1          
 3403   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3404   1          for (i=0; i<CAL_TEST_TX; i++)
 3405   1          {
 3406   2              slSumDiff = 0; 
 3407   2              for (j=0; j<CAL_TEST_RX; j++)
 3408   2              {
 3409   3                  if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) > *(T_tempbuf2 + i))
 3410   3                  {
 3411   4                      slSumDiff += *(T_tempbuf2 + i);
 3412   4                  }
 3413   3                  else if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) < *(T_tempbuf2 + TX_LOCAL_NUM + i))
 3414   3                  {
 3415   4                      slSumDiff += *(T_tempbuf2 + TX_LOCAL_NUM + i);
 3416   4                  }
 3417   3                  else
 3418   3                  {
 3419   4                      slSumDiff += abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3420   4                  }
 3421   3                
 3422   3              }
 3423   2              ssAvgBuf[i] = slSumDiff/CAL_TEST_RX;   
 3424   2          }
 3425   1      
 3426   1          g_ucCalFlag = 0;
 3427   1          for (i = 0; i < CAL_TEST_TX; i++)
 3428   1          {
 3429   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 3430   2              {
 3431   3                  DBG_CAL_DATA("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3432   3                  g_ucCalFlag = 1;
 3433   3              }
 3434   2              else
 3435   2              {
 3436   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3437   3              }
 3438   2          }
 3439   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 189 

 3440   1          if (g_ucCalFlag)
 3441   1          {
 3442   2              DBG_ERROR("\n\rTest CAL ABS AVG Tx is ERROR!");
 3443   2              DBG_CAL("\n");  
 3444   2              for (i=0; i<TX_LOCAL_NUM; i++)
 3445   2              {
 3446   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 3447   3                  {
 3448   4                     
 3449   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3450   4                  }
 3451   3                      DBG_CAL("\n");  
 3452   3              }
 3453   2      
 3454   2              for(i = 0;i<TX_LOCAL_NUM;i++)
 3455   2              {
 3456   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 3457   3                  DBG_CAL("%04d ",*(T_tempbuf2 + TX_LOCAL_NUM + i));
 3458   3                  
 3459   3              }  
 3460   2      
 3461   2              
 3462   2              ERROR_HOLD;
 3463   2          }
 3464   1          else
 3465   1          {
 3466   2              DBG_CAL("\n\rTest CAL ABS AVG Tx is OK!");
 3467   2          }
 3468   1      
 3469   1      }
*** WARNING C47 IN LINE 3281 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 3470          #else
               #define Test_CAL_AVG_TX()   /##/
               #endif
 3473          
 3474          
 3475          #if TEST_CAL_AVG_RX_EN
 3476          /*******************************************************************************
 3477           *   Name: Test_CAL_AVG_TX
 3478           *  Brief: ÐÐ¾ùÖµËã·¨
 3479           *  Input:
 3480           * Output:
 3481           * Return: none
 3482           *******************************************************************************/
 3483          void Test_CAL_AVG_RX(void)
 3484          {
 3485   1          UINT8 usAvgMode;
 3486   1          UINT8 i,j;
 3487   1          UINT8 flag;
 3488   1          SINT32 slSumDiff = 0;
 3489   1          SINT16 ssAvgBuf[CAL_TEST_RX];
 3490   1      
 3491   1          ST_CalMcMatrixParam CalParam;
 3492   1      
 3493   1          DBG_CAL("\n\nCAL ORG AVG Rx Test");
 3494   1          //DBG_CAL("\n");    
 3495   1          for (i=0; i<TX_LOCAL_NUM; i++)
 3496   1          {
 3497   2              for (j=0; j<RX_LOCAL_NUM; j++)
 3498   2              {
 3499   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
 3500   3                  //DBG_CAL("%04d  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3501   3              }
 3502   2                  //DBG_CAL("\n");  
 3503   2          }
 3504   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 190 

 3505   1          for(i = 0;i<RX_LOCAL_NUM;i++)
 3506   1          {
 3507   2              *(T_tempbuf2 + i) = (UINT16)rand();               //ÕýãÐÖµ
 3508   2              *(T_tempbuf2 + RX_LOCAL_NUM + i) = ((SINT16)rand()>>1)|0x8000;//-100;//¸ºãÐÖµ//MIN_AVG(T_tempbuf2
             -[i]-1000,(UINT8)rand());
 3509   2          }
 3510   1      
 3511   1          
 3512   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3513   1          CalParam.usSrc2Addr    = CAL_TEST_A1;    
 3514   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3515   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3516   1          CalParam.ucRxLen       = CAL_TEST_RX;  
 3517   1          CalParam.usCalCmd      = EX_OP_AVG;
 3518   1          CalParam.ucCfg         = SIGN_MOD_0;//SIGN_MOD_1
 3519   1          CalParam.ucDataType    = EX_CFG_ORG;
 3520   1          CalParam.ucLineCfg     = EX_MOD_RX;
 3521   1      
 3522   1          usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3523   1      
 3524   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3525   1      
 3526   1          for (i=0; i<CAL_TEST_RX; i++)
 3527   1          {
 3528   2              slSumDiff = 0; 
 3529   2              for (j=0; j<CAL_TEST_TX; j++)
 3530   2              {
 3531   3                  if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) > *(T_tempbuf2 + i))
 3532   3                  {
 3533   4                      slSumDiff += *(T_tempbuf2 + i);
 3534   4                  }
 3535   3                  else if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
 3536   3                  {
 3537   4                      slSumDiff += *(T_tempbuf2 + RX_LOCAL_NUM + i);
 3538   4                  }
 3539   3                  else
 3540   3                  {
 3541   4                      slSumDiff += *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
 3542   4                  }   
 3543   3              }
 3544   2      
 3545   2              
 3546   2              ssAvgBuf[i] = (slSumDiff/CAL_TEST_TX);   
 3547   2          }
 3548   1      
 3549   1      
 3550   1          g_ucCalFlag = 0;
 3551   1          for (i = 0; i < CAL_TEST_RX; i++)
 3552   1          {
 3553   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 3554   2              {
 3555   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3556   3                  g_ucCalFlag = 1;
 3557   3              }
 3558   2              else
 3559   2              {
 3560   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3561   3              }
 3562   2          }
 3563   1      
 3564   1          if (g_ucCalFlag)
 3565   1          {
 3566   2              DBG_CAL("\n\rTest CAL ORG AVG Rx is ERROR!");
 3567   2      
 3568   2              DBG_CAL("\n");  
 3569   2              for (i=0; i<TX_LOCAL_NUM; i++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 191 

 3570   2              {
 3571   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 3572   3                  {
 3573   4                     
 3574   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3575   4                  }
 3576   3                      DBG_CAL("\n");  
 3577   3              }
 3578   2      
 3579   2              for(i = 0;i<RX_LOCAL_NUM;i++)
 3580   2              {
 3581   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 3582   3                  DBG_CAL("%04d ",*(T_tempbuf2 + RX_LOCAL_NUM + i));
 3583   3                  
 3584   3              }  
 3585   2              
 3586   2              ERROR_HOLD;
 3587   2          }
 3588   1          else
 3589   1          {
 3590   2              DBG_CAL("\n\rTest CAL ORG AVG Rx is OK!");
 3591   2          }
 3592   1      
 3593   1      
 3594   1          for(i = 0;i<RX_LOCAL_NUM;i++)//absµÄÏÂÏÞÓ¦¸Ã´óÓÚµÈÓÚ0
 3595   1          {
 3596   2              *(T_tempbuf2 + RX_LOCAL_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
 3597   2          }
 3598   1      
 3599   1         
 3600   1          DBG_CAL("\n\rCAL ABS AVG Rx Test");
 3601   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3602   1          CalParam.usSrc2Addr    = CAL_TEST_A1;    
 3603   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3604   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3605   1          CalParam.ucRxLen       = CAL_TEST_RX;  
 3606   1          CalParam.usCalCmd      = EX_OP_AVG;
 3607   1          CalParam.ucCfg         = SIGN_MOD_0;
 3608   1          CalParam.ucDataType    = EX_CFG_ABS;
 3609   1          CalParam.ucLineCfg     = EX_MOD_RX;
 3610   1          usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3611   1          
 3612   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3613   1          for (i=0; i<CAL_TEST_RX; i++)
 3614   1          {
 3615   2              slSumDiff = 0; 
 3616   2              for (j=0; j<CAL_TEST_TX; j++)
 3617   2              {
 3618   3                  if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) > *(T_tempbuf2 + i))
 3619   3                  {
 3620   4                      slSumDiff += *(T_tempbuf2 + i);
 3621   4                  }
 3622   3                  else if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
 3623   3                  {
 3624   4                      slSumDiff += *(T_tempbuf2 + RX_LOCAL_NUM + i);
 3625   4                  }
 3626   3                  else
 3627   3                  {
 3628   4                      slSumDiff += abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i));
 3629   4                  }
 3630   3                
 3631   3              }
 3632   2              ssAvgBuf[i] = slSumDiff/CAL_TEST_TX;   
 3633   2          }
 3634   1      
 3635   1          g_ucCalFlag = 0;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 192 

 3636   1          for (i = 0; i < CAL_TEST_RX; i++)
 3637   1          {
 3638   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 3639   2              {
 3640   3                  DBG_CAL_DATA("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3641   3                  g_ucCalFlag = 1;
 3642   3              }
 3643   2              else
 3644   2              {
 3645   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3646   3              }
 3647   2          }
 3648   1      
 3649   1          if (g_ucCalFlag)
 3650   1          {
 3651   2              DBG_CAL("\n");  
 3652   2              for (i=0; i<TX_LOCAL_NUM; i++)
 3653   2              {
 3654   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 3655   3                  {
 3656   4                     
 3657   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3658   4                  }
 3659   3                      DBG_CAL("\n");  
 3660   3              }
 3661   2      
 3662   2              for(i = 0;i<RX_LOCAL_NUM;i++)
 3663   2              {
 3664   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 3665   3                  DBG_CAL("%04d ",*(T_tempbuf2 + RX_LOCAL_NUM + i));
 3666   3                  
 3667   3              }        
 3668   2              DBG_ERROR("\n\rTest CAL ABS AVG Rx is ERROR!");
 3669   2              ERROR_HOLD;
 3670   2          }
 3671   1          else
 3672   1          {
 3673   2              DBG_CAL("\n\rTest CAL ABS AVG Rx is OK!");
 3674   2          }
 3675   1      
 3676   1      }
*** WARNING C47 IN LINE 3487 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 3677          #else
               #define Test_CAL_AVG_RX()   /##/
               #endif
 3680          
 3681          #if 0
               #if TEST_CAL_AVG_RX_EN 
               /*******************************************************************************
                *   Name: Test_CAL_AVG_RX
                *  Brief: ÁÐ¾ùÖµËã·¨
                *  Input:
                * Output:
                * Return: none
                *******************************************************************************/
               void Test_CAL_AVG_RX(void)
               {
                   UINT8 usAvgMode;
                   UINT8 i,j;
                   UINT8 flag;
                   SINT32 slSumDiff = 0;
                   SINT16 ssAvgBuf[CAL_TEST_RX];
                   SINT16 temp0;
                   int    temp1,temp2;
               
                   ST_CalMcMatrixParam CalParam;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 193 

               
                   DBG_CAL("\n\nCAL ORG AVG Rx Test");
                   for (i=0; i<TX_LOCAL_NUM; i++)
                   {
                       for (j=0; j<RX_LOCAL_NUM; j++)
                       {
                           *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
                       }          
                   }
               
                   for(i = 0;i<RX_LOCAL_NUM;i++)
                   {
                       *(T_tempbuf2 + i) = (UINT16)rand()>>1;//200;                //ÕýãÐÖµ
                       *(T_tempbuf2 + RX_LOCAL_NUM + i) = ((SINT16)rand()>>1)|0x8000;//-100;//¸ºãÐÖµ
                   }
               
                   CalParam.usSrc1Addr = CAL_TEST_A0;
                   CalParam.usDstAddr  = CAL_TEST_A1;   
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_TEST_TX;
                   CalParam.ucRxLen    = CAL_TEST_RX;  
                   CalParam.usCalCmd   = EX_OP_AVG;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ORG;
                   CalParam.ucLineCfg  = EX_MOD_RX;
                   usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
               
                   DrvCal_MatrixAvg(&CalParam,usAvgMode);
                   for (i=0; i<CAL_TEST_RX; i++)
                   {
                       slSumDiff = 0; 
                       for (j=0; j<CAL_TEST_TX; j++)
                       {
                           if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) >  *(T_tempbuf2 + i))
                           {
                               slSumDiff +=  *(T_tempbuf2 + i);
                           }
                           else if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
                           {
                               slSumDiff += *(T_tempbuf2 + RX_LOCAL_NUM + i);
                           }
                           else
                           {
                               slSumDiff += *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
                           }
                       }          
                       ssAvgBuf[i] = slSumDiff/CAL_TEST_TX;   
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_TEST_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssAvgBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ORG AVG Rx is ERROR!");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 194 

                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG AVG Rx is OK!");
                   }
               
                   for(i = 0;i<RX_LOCAL_NUM;i++)//absµÄÏÂÏÞÓ¦¸Ã´óÓÚµÈÓÚ0
                   {
                       *(T_tempbuf2 + RX_LOCAL_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
                   }    
               
               
               #if 1
               
                   DBG_CAL("\n\rCAL ABS AVG Rx Test");
                   CalParam.usSrc1Addr = CAL_TEST_A0;
                   CalParam.usDstAddr  = CAL_TEST_A1;   
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_TEST_TX;
                   CalParam.ucRxLen    = CAL_TEST_RX; 
                   CalParam.usCalCmd   = EX_OP_AVG;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ABS;
                   CalParam.ucLineCfg  = EX_MOD_RX;
                   usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
               
                   DrvCal_MatrixAvg(&CalParam,usAvgMode);
                   for (i=0; i<CAL_TEST_RX; i++)
                   {
                       slSumDiff = 0; 
                       for (j=0; j<CAL_TEST_TX; j++)
                       {
                           if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) > *(T_tempbuf2 + i))
                           {
                               slSumDiff += *(T_tempbuf2 + i);
                           }
                           else if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
                           {
                               slSumDiff += *(T_tempbuf2 + RX_LOCAL_NUM + i);
                           }
                           else
                           {
                               slSumDiff += abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i));
                           }
                       }          
                       ssAvgBuf[i] = (SINT16)(slSumDiff/CAL_TEST_TX);   
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_TEST_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssAvgBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ABS AVG Rx is ERROR!");
                   }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 195 

                   else
                   {
                       DBG_CAL("\n\rTest CAL ABS AVG Rx is OK!");
                   }
                   #endif
               }
               #else
               #define Test_CAL_AVG_RX()   /##/
               #endif
               #endif
 3843          
 3844          #if TEST_CAL_AVG2_TX_EN 
 3845          /*******************************************************************************
 3846           *   Name: Test_CAL_AVG2_TX
 3847           *  Brief: È¥³ý´óÓÚ»òÕßÐ¡ÓÚÃÅÏÞÖµºóÐÐ¾ùÖµËã·¨
 3848           *  Input:
 3849           * Output:
 3850           * Return: none
 3851           *******************************************************************************/
 3852          void Test_CAL_AVG2_TX(void)
 3853          {
 3854   1          UINT8 usAvgMode;
 3855   1          UINT8 i,j;
 3856   1          UINT8 flag;
 3857   1          UINT8 removalData;
 3858   1          SINT32 slSumDiff = 0;
 3859   1          SINT16 ssAvgBuf[CAL_TEST_TX];
 3860   1      
 3861   1          ST_CalMcMatrixParam CalParam;
 3862   1      
 3863   1          DBG_CAL("\n\nCAL ORG AVG2 Tx Test");
 3864   1          for (i=0; i<TX_LOCAL_NUM; i++)
 3865   1          {
 3866   2              for (j=0; j<RX_LOCAL_NUM; j++)
 3867   2              {
 3868   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
 3869   3              }          
 3870   2          }
 3871   1      
 3872   1          for(i = 0;i<TX_LOCAL_NUM;i++)
 3873   1          {
 3874   2              *(T_tempbuf2 + i) = (UINT16)rand();//200;                //ÕýãÐÖµ
 3875   2              *(T_tempbuf2 + TX_LOCAL_NUM + i) = ((SINT16)rand())|0x8000;//-100;//¸ºãÐÖµ
 3876   2          }
 3877   1          
 3878   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3879   1          CalParam.usSrc2Addr    = CAL_TEST_A1;    
 3880   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3881   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3882   1          CalParam.ucRxLen       = CAL_TEST_RX;  
 3883   1          CalParam.usCalCmd      = EX_OP_AVG;
 3884   1          CalParam.ucCfg         = SIGN_MOD_0;
 3885   1          CalParam.ucDataType    = EX_CFG_ORG;
 3886   1          CalParam.ucLineCfg     = EX_MOD_TX;
 3887   1          usAvgMode = AVG_MODE_1;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3888   1      
 3889   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3890   1      
 3891   1          for (i=0; i<CAL_TEST_TX; i++)
 3892   1          {
 3893   2              slSumDiff = 0; 
 3894   2              removalData = 0;
 3895   2              for (j=0; j<CAL_TEST_RX; j++)
 3896   2              {
 3897   3                  if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) > *(T_tempbuf2 + i))
 3898   3                  {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 196 

 3899   4                      removalData++;
 3900   4                      continue;
 3901   4                  }
 3902   3                  else if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) < *(T_tempbuf2 + TX_LOCAL_NUM + i))
 3903   3                  {
 3904   4                      removalData++;
 3905   4                      continue;
 3906   4                  }
 3907   3                  else
 3908   3                  {
 3909   4                      slSumDiff += *(T_tempbuf1 + i*RX_LOCAL_NUM + j);
 3910   4                  }
 3911   3              }
 3912   2              if(removalData == CAL_TEST_RX)
 3913   2                  ssAvgBuf[i] = 0x7fff;
 3914   2              else
 3915   2                  ssAvgBuf[i] = (slSumDiff/(CAL_TEST_RX-removalData));   
 3916   2          }
 3917   1      
 3918   1          g_ucCalFlag = 0;
 3919   1          for (i = 0; i < CAL_TEST_TX; i++)
 3920   1          {
 3921   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 3922   2              {
 3923   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3924   3                  g_ucCalFlag = 1;
 3925   3              }
 3926   2              else
 3927   2              {
 3928   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 3929   3              }
 3930   2          }
 3931   1      
 3932   1          if (g_ucCalFlag)
 3933   1          {
 3934   2              DBG_CAL("\n\rTest CAL ORG AVG2 Tx is ERROR!");
 3935   2              DBG_CAL("\n");  
 3936   2              for (i=0; i<TX_LOCAL_NUM; i++)
 3937   2              {
 3938   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 3939   3                  {
 3940   4                     
 3941   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3942   4                  }
 3943   3                      DBG_CAL("\n");  
 3944   3              }
 3945   2      
 3946   2              for(i = 0;i<TX_LOCAL_NUM;i++)
 3947   2              {
 3948   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 3949   3                  DBG_CAL("%04d ",*(T_tempbuf2 + TX_LOCAL_NUM + i));
 3950   3                  
 3951   3              }  
 3952   2      
 3953   2              
 3954   2              ERROR_HOLD;
 3955   2          }
 3956   1          else
 3957   1          {
 3958   2              DBG_CAL("\n\rTest CAL ORG AVG2 Tx is OK!");
 3959   2          }
 3960   1      
 3961   1          for(i = 0;i<TX_LOCAL_NUM;i++)//absµÄÏÂÏÞÓ¦¸Ã´óÓÚµÈÓÚ0
 3962   1          {
 3963   2              *(T_tempbuf2 + TX_LOCAL_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
 3964   2          }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 197 

 3965   1      
 3966   1      
 3967   1          DBG_CAL("\n\rCAL ABS AVG2 Tx Test");
 3968   1          CalParam.usSrc1Addr    = CAL_TEST_A0;
 3969   1          CalParam.usSrc2Addr    = CAL_TEST_A1; 
 3970   1          CalParam.usDstAddr     = CAL_TEST_A2;
 3971   1          CalParam.ucTxLen       = CAL_TEST_TX;
 3972   1          CalParam.ucRxLen       = CAL_TEST_RX; 
 3973   1          CalParam.usCalCmd      = EX_OP_AVG;
 3974   1          CalParam.ucCfg         = SIGN_MOD_0;
 3975   1          CalParam.ucDataType    = EX_CFG_ABS;
 3976   1          CalParam.ucLineCfg     = EX_MOD_TX;
 3977   1      
 3978   1          usAvgMode = AVG_MODE_1;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 3979   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 3980   1          for (i=0; i<CAL_TEST_TX; i++)
 3981   1          {
 3982   2              slSumDiff = 0;
 3983   2              removalData = 0;
 3984   2              for (j=0; j<CAL_TEST_RX; j++)
 3985   2              {
 3986   3                  if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) > *(T_tempbuf2 + i))
 3987   3                  {
 3988   4                      removalData++;
 3989   4                      continue;
 3990   4                  }
 3991   3                  else if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) < *(T_tempbuf2 + TX_LOCAL_NUM + i))
 3992   3                  {
 3993   4                      removalData++;
 3994   4                      continue;
 3995   4                  }
 3996   3                  else
 3997   3                  {
 3998   4                      slSumDiff += abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 3999   4                  }
 4000   3              }
 4001   2              if(removalData == CAL_TEST_RX)
 4002   2                  ssAvgBuf[i] = 0x7fff;
 4003   2              else
 4004   2                  ssAvgBuf[i] = (slSumDiff/(CAL_TEST_RX-removalData));   
 4005   2          }
 4006   1      
 4007   1          g_ucCalFlag = 0;
 4008   1          for (i = 0; i < CAL_TEST_TX; i++)
 4009   1          {
 4010   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 4011   2              {
 4012   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 4013   3                  g_ucCalFlag = 1;
 4014   3              }
 4015   2              else
 4016   2              {
 4017   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 4018   3              }
 4019   2          }
 4020   1      
 4021   1          if (g_ucCalFlag)
 4022   1          {
 4023   2              DBG_CAL("\n\rTest CAL ABS AVG2 Tx is ERROR!");
 4024   2              DBG_CAL("\n");  
 4025   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4026   2              {
 4027   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4028   3                  {
 4029   4                     
 4030   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 198 

 4031   4                  }
 4032   3                      DBG_CAL("\n");  
 4033   3              }
 4034   2      
 4035   2              for(i = 0;i<TX_LOCAL_NUM;i++)
 4036   2              {
 4037   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 4038   3                  DBG_CAL("%04d ",*(T_tempbuf2 + TX_LOCAL_NUM + i));
 4039   3                  
 4040   3              }  
 4041   2      
 4042   2              
 4043   2              ERROR_HOLD;
 4044   2          }
 4045   1          else
 4046   1          {
 4047   2              DBG_CAL("\n\rTest CAL ABS AVG2 Tx is OK!");
 4048   2          }
 4049   1      }
*** WARNING C47 IN LINE 3856 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 4050          #else
               #define Test_CAL_AVG2_TX()   /##/
               #endif
 4053          
 4054          #if TEST_CAL_AVG2_RX_EN 
 4055          /*******************************************************************************
 4056           *   Name: Test_CAL_AVG2_RX
 4057           *  Brief: ÁÐ¾ùÖµËã·¨
 4058           *  Input:
 4059           * Output:
 4060           * Return: none
 4061           *******************************************************************************/
 4062          void Test_CAL_AVG2_RX(void)
 4063          {
 4064   1          UINT8 usAvgMode;
 4065   1          UINT8 i,j;
 4066   1          UINT8 flag;
 4067   1          UINT8 removalData;
 4068   1          SINT32 slSumDiff = 0;
 4069   1          SINT16 ssAvgBuf[CAL_TEST_RX];
 4070   1      
 4071   1          ST_CalMcMatrixParam CalParam;
 4072   1      
 4073   1          DBG_CAL("\n\nCAL ORG AVG2 Rx Test");
 4074   1          for (i=0; i<TX_LOCAL_NUM; i++)
 4075   1          {
 4076   2              for (j=0; j<RX_LOCAL_NUM; j++)
 4077   2              {
 4078   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
 4079   3              }          
 4080   2          }
 4081   1      
 4082   1          for(i = 0;i<RX_LOCAL_NUM;i++)
 4083   1          {
 4084   2              *(T_tempbuf2 + i) = (UINT16)rand();//200;                //ÕýãÐÖµ
 4085   2              *(T_tempbuf2 + RX_LOCAL_NUM + i) = ((SINT16)rand())|0x8000;//-100;//¸ºãÐÖµ
 4086   2          }    
 4087   1      
 4088   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4089   1          CalParam.usSrc2Addr = CAL_TEST_A1;    
 4090   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4091   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4092   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 4093   1          CalParam.usCalCmd   = EX_OP_AVG;
 4094   1          CalParam.ucCfg      = SIGN_MOD_0;
 4095   1          CalParam.ucDataType = EX_CFG_ORG;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 199 

 4096   1          CalParam.ucLineCfg  = EX_MOD_RX;
 4097   1      
 4098   1          usAvgMode = AVG_MODE_1;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 4099   1      
 4100   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 4101   1          for (i=0; i<CAL_TEST_RX; i++)
 4102   1          {
 4103   2              slSumDiff = 0;
 4104   2              removalData = 0;
 4105   2              for (j=0; j<CAL_TEST_TX; j++)
 4106   2              {
 4107   3                  if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) > *(T_tempbuf2 + i))
 4108   3                  {
 4109   4                      removalData++;
 4110   4                      continue;
 4111   4                  }
 4112   3                  else if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
 4113   3                  {
 4114   4                      removalData++;
 4115   4                      continue;
 4116   4                  }
 4117   3                  else
 4118   3                  {
 4119   4                      slSumDiff += *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
 4120   4                  }
 4121   3              }
 4122   2              if(removalData < CAL_TEST_TX)
 4123   2                  ssAvgBuf[i] = (slSumDiff/(CAL_TEST_TX-removalData));   
 4124   2              else
 4125   2                  ssAvgBuf[i]= 0x7fff;           
 4126   2          }
 4127   1      
 4128   1          g_ucCalFlag = 0;
 4129   1          for (i = 0; i < CAL_TEST_RX; i++)
 4130   1          {
 4131   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 4132   2              {
 4133   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 4134   3                  g_ucCalFlag = 1;
 4135   3              }
 4136   2              else
 4137   2              {
 4138   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 4139   3              }
 4140   2          }
 4141   1      
 4142   1          if (g_ucCalFlag)
 4143   1          {
 4144   2              DBG_CAL("\n\rTest CAL ORG AVG2 Rx is ERROR!");
 4145   2              DBG_CAL("\n");  
 4146   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4147   2              {
 4148   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4149   3                  {
 4150   4                     
 4151   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4152   4                  }
 4153   3                      DBG_CAL("\n");  
 4154   3              }
 4155   2      
 4156   2              for(i = 0;i<RX_LOCAL_NUM;i++)
 4157   2              {
 4158   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 4159   3                  DBG_CAL("%04d ",*(T_tempbuf2 + RX_LOCAL_NUM + i));
 4160   3                  
 4161   3              }  
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 200 

 4162   2             
 4163   2              ERROR_HOLD;
 4164   2          }
 4165   1          else
 4166   1          {
 4167   2              DBG_CAL("\n\rTest CAL ORG AVG2 Rx is OK!");
 4168   2          }
 4169   1      
 4170   1          for(i = 0;i<RX_LOCAL_NUM;i++)//absµÄÏÂÏÞÓ¦¸Ã´óÓÚµÈÓÚ0
 4171   1          {
 4172   2              *(T_tempbuf2 + RX_LOCAL_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
 4173   2          }
 4174   1      
 4175   1      
 4176   1      
 4177   1          DBG_CAL("\n\rCAL ABS AVG2 Rx Test");
 4178   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4179   1          CalParam.usSrc2Addr = CAL_TEST_A1;   
 4180   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4181   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4182   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 4183   1          CalParam.usCalCmd   = EX_OP_AVG;
 4184   1          CalParam.ucCfg      = SIGN_MOD_0;
 4185   1          CalParam.ucDataType = EX_CFG_ABS;
 4186   1          CalParam.ucLineCfg  = EX_MOD_RX;
 4187   1      
 4188   1          usAvgMode = AVG_MODE_1;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
 4189   1      
 4190   1          DrvCal_MatrixAvg(&CalParam,usAvgMode);
 4191   1          for (i=0; i<CAL_TEST_RX; i++)
 4192   1          {
 4193   2              slSumDiff = 0; 
 4194   2              removalData = 0;
 4195   2              for (j=0; j<CAL_TEST_TX; j++)
 4196   2              {
 4197   3                  if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) > *(T_tempbuf2 + i))
 4198   3                  {
 4199   4                      removalData++;
 4200   4                      continue;
 4201   4                  }
 4202   3                  else if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) < *(T_tempbuf2 + RX_LOCAL_NUM + i))
 4203   3                  {
 4204   4                      removalData++;
 4205   4                      continue;
 4206   4                  }
 4207   3                  else
 4208   3                  {
 4209   4                      slSumDiff += abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i));
 4210   4                  }
 4211   3              }          
 4212   2              if(removalData < CAL_TEST_TX)
 4213   2              {
 4214   3                  ssAvgBuf[i] = (SINT16)(slSumDiff/(CAL_TEST_TX-removalData));  
 4215   3              }
 4216   2              else
 4217   2              {
 4218   3                  ssAvgBuf[i]= 0x7fff;
 4219   3              }
 4220   2          }
 4221   1      
 4222   1          g_ucCalFlag = 0;
 4223   1          for (i = 0; i < CAL_TEST_RX; i++)
 4224   1          {
 4225   2              if (*(T_tempOut + i) != ssAvgBuf[i])
 4226   2              {
 4227   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 201 

 4228   3                  g_ucCalFlag = 1;
 4229   3              }
 4230   2              else
 4231   2              {
 4232   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
 4233   3              }
 4234   2          }
 4235   1      
 4236   1          if (g_ucCalFlag)
 4237   1          {
 4238   2              DBG_CAL("\n\rTest CAL ABS AVG2 Rx is ERROR!");
 4239   2      
 4240   2              DBG_CAL("\n");  
 4241   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4242   2              {
 4243   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4244   3                  {
 4245   4                     
 4246   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4247   4                  }
 4248   3                      DBG_CAL("\n");  
 4249   3              }
 4250   2      
 4251   2              for(i = 0;i<RX_LOCAL_NUM;i++)
 4252   2              {
 4253   3                  DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
 4254   3                  DBG_CAL("%04d ",*(T_tempbuf2 + RX_LOCAL_NUM + i));
 4255   3                  
 4256   3              }          
 4257   2              ERROR_HOLD;
 4258   2          }
 4259   1          else
 4260   1          {
 4261   2              DBG_CAL("\n\rTest CAL ABS AVG2 Rx is OK!");
 4262   2          }
 4263   1      }
*** WARNING C47 IN LINE 4066 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 4264          #else
               #define Test_CAL_AVG2_RX()   /##/
               #endif
 4267          
 4268          #if TEST_CAL_AVG_ARAM_EN
               /*******************************************************************************
                *   Name: Test_CAL_AVG_ARAM
                *  Brief: Aram ÇóÆ½¾ùËã·¨
                *  Input:
                * Output:
                * Return: none
                *******************************************************************************/
               void Test_CAL_AVG_ARAM(void)
               {
                   UINT8 usAvgMode;
                   UINT8 i,j;
                   UINT8 flag;
                   UINT8 removalData;    
                   SINT32 slSumDiff = 0;
                   SINT16 ssAvgBuf[40];
               
               
                   ST_CalMcMatrixParam CalParam;
               
                   DBG_CAL("\n\nCAL ORG AVG Rx Aram Test");
                
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 202 

                       {
                           *(g_pAfeAram + i*RX_LOCAL_NUM + j) = (UINT16)rand();
                       }
                   }
               
                   for(i = 0;i<RX_ARAM_NUM;i++)
                   {
                       *(T_tempbuf2 + i) = (UINT16)rand();               //ÕýãÐÖµ
                       *(T_tempbuf2 + RX_ARAM_NUM + i) = MIN_AVG(T_tempbuf2[i]-1000,(UINT8)rand());
                   }
               
                   
                   CalParam.usSrc1Addr    = ARAM_DATA_BASE_ADDR;
                   CalParam.usSrc2Addr    = CAL_TEST_A1;    
                   CalParam.usDstAddr     = CAL_TEST_A2;
                   CalParam.ucTxLen       = CAL_ARAM_TX;
                   CalParam.ucRxLen       = CAL_ARAM_RX;  
                   CalParam.usCalCmd      = EX_OP_AVG;
                   CalParam.ucCfg         = SIGN_MOD_1;//SIGN_MOD_1
                   CalParam.ucDataType    = EX_CFG_ORG;
                   CalParam.ucLineCfg     = EX_MOD_RX;
               
                   usAvgMode = AVG_MODE_0;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
               
                   DrvCal_MatrixAvg(&CalParam,usAvgMode);
               
                   for (i=0; i<CAL_ARAM_RX; i++)
                   {
                       slSumDiff = 0; 
                       for (j=0; j<CAL_ARAM_TX; j++)
                       {
                           if (*(UINT16 *)(g_pAfeAram + j*RX_ARAM_NUM + i) > *(UINT16 *)(T_tempbuf2 + i))
                           {
                               slSumDiff += *(T_tempbuf2 + i);
                           }
                           else if (*(UINT16 *)(g_pAfeAram + j*RX_ARAM_NUM + i) < *(UINT16 *)(T_tempbuf2 + RX_ARAM_NUM +
             - i))
                           {
                               slSumDiff += *(UINT16 *)(T_tempbuf2 + RX_ARAM_NUM + i);
                           }
                           else
                           {
                               slSumDiff += *(UINT16 *)(g_pAfeAram + j*RX_ARAM_NUM + i);
                           }   
                       }
               
                       
                       ssAvgBuf[i] = (slSumDiff/CAL_ARAM_TX);   
                   }
               
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       if (*(UINT16 *)(T_tempOut + i) != ssAvgBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(UINT16 *)(T_tempOut + i),ssAvgBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(UINT16 *)(T_tempOut + i),ssAvgBuf[i]);
                       }
                   }
               
                   if (g_ucCalFlag)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 203 

                   {
                       DBG_CAL("\n\rTest CAL ORG AVG Rx Aram is ERROR!");
               
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
               
                       for(i = 0;i<RX_LOCAL_NUM;i++)
                       {
                           DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
                           DBG_CAL("%04d ",*(T_tempbuf2 + RX_LOCAL_NUM + i));
                           
                       }          
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG AVG Rx Aram is OK!");
                   }
               
                   DBG_CAL("\n\nCAL ORG AVG2 Tx Aram Test");
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT16)rand();
                       }          
                   }
               
                   for(i = 0;i<TX_ARAM_NUM;i++)
                   {
                       *(T_tempbuf2 + i) = (UINT16)rand();//200;                //ÕýãÐÖµ
                       *(T_tempbuf2 + TX_ARAM_NUM + i) = ((SINT16)rand())|0x8000;//-100;//¸ºãÐÖµ
                   }
               
                   CalParam.usSrc1Addr    = ARAM_DATA_BASE_ADDR;
                   CalParam.usSrc2Addr    = CAL_TEST_A1;    
                   CalParam.usDstAddr     = CAL_TEST_A2;
                   CalParam.ucTxLen       = CAL_ARAM_TX;
                   CalParam.ucRxLen       = CAL_ARAM_RX;  
                   CalParam.usCalCmd      = EX_OP_AVG;
                   CalParam.ucCfg         = SIGN_MOD_0;
                   CalParam.ucDataType    = EX_CFG_ORG;
                   CalParam.ucLineCfg     = EX_MOD_TX;
                   usAvgMode = AVG_MODE_1;//³¬¹ý·§ÖµÓÃ·§ÖµÀ´´úÌæ
               
                   DrvCal_MatrixAvg(&CalParam,usAvgMode);
               
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       slSumDiff = 0; 
                       removalData = 0;
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (*(g_pAfeAram + i*RX_ARAM_NUM + j) > *(T_tempbuf2 + i))
                           {
                               removalData++;
                               continue;
                           }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 204 

                           else if (*(g_pAfeAram + i*RX_ARAM_NUM + j) < *(T_tempbuf2 + TX_ARAM_NUM + i))
                           {
                               removalData++;
                               continue;
                           }
                           else
                           {
                               slSumDiff += *(g_pAfeAram + i*RX_ARAM_NUM + j);
                           }
                       }
                       if(removalData == CAL_ARAM_RX)
                           ssAvgBuf[i] = 0x7fff;
                       else
                           ssAvgBuf[i] = (slSumDiff/(CAL_ARAM_RX-removalData));   
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       if (*(T_tempOut + i) != ssAvgBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,soft:%04x",i,*(T_tempOut + i),ssAvgBuf[i]);
                       }
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ORG AVG2 Tx is ERROR!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
               
                       for(i = 0;i<TX_LOCAL_NUM;i++)
                       {
                           DBG_CAL("\n%04d ",*(T_tempbuf2 + i));
                           DBG_CAL("%04d ",*(T_tempbuf2 + TX_LOCAL_NUM + i));
                           
                       }  
               
                       
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG AVG2 Tx is OK!");
                   }
               
                   
               }
               #else
 4486          #define Test_CAL_AVG_ARAM() /##/
 4487          #endif
 4488          
 4489          #if TEST_CAL_MIN_TX_EN 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 205 

 4490          /*******************************************************************************
 4491           *   Name: Test_CAL_MIN_TX
 4492           *  Brief: ÐÐ×îÐ¡ÖµËã·¨
 4493           *  Input:
 4494           * Output:
 4495           * Return: none
 4496           *******************************************************************************/
 4497          void Test_CAL_MIN_TX(void)
 4498          {
 4499   1          UINT8 i,j;
 4500   1          UINT8 flag;
 4501   1          SINT16 slTemp;
 4502   1          SINT16 ssMinBuf[CAL_TEST_TX];
 4503   1      
 4504   1          ST_CalMcMatrixParam CalParam;
 4505   1      
 4506   1          DBG_CAL("\n\nCAL ORG MIN Tx Test");
 4507   1      
 4508   1          DBG_CAL("\n mem");
 4509   1          for (i=0; i<TX_LOCAL_NUM; i++)
 4510   1          {
 4511   2              for (j=0; j<RX_LOCAL_NUM; j++)
 4512   2              {
 4513   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT8)rand();
 4514   3              }          
 4515   2          }
 4516   1      
 4517   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4518   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4519   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4520   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 4521   1          CalParam.usCalCmd   = EX_OP_MIN;
 4522   1          CalParam.ucCfg      = SIGN_MOD_0;
 4523   1          CalParam.ucDataType = EX_CFG_ORG;
 4524   1          CalParam.ucLineCfg  = EX_MOD_TX;
 4525   1      
 4526   1          DrvCal_MatrixMaxMin(&CalParam);
 4527   1      
 4528   1          for (i=0; i<CAL_TEST_TX; i++)
 4529   1          {
 4530   2              ssMinBuf[i] = *(T_tempbuf1 + i*RX_LOCAL_NUM + 0); 
 4531   2              for (j=0; j<CAL_TEST_RX; j++)
 4532   2              {
 4533   3                  if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) < ssMinBuf[i])
 4534   3                  {
 4535   4                      ssMinBuf[i] = *(T_tempbuf1 + i*RX_LOCAL_NUM + j);
 4536   4                  }
 4537   3              }          
 4538   2          }
 4539   1      
 4540   1          g_ucCalFlag = 0;
 4541   1          for (i = 0; i < CAL_TEST_TX; i++)
 4542   1          {
 4543   2              if (*(T_tempOut + i) != ssMinBuf[i])
 4544   2              {
 4545   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
 4546   3                  g_ucCalFlag = 1;
 4547   3              }
 4548   2              else
 4549   2              {
 4550   3                  //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
 4551   3              }
 4552   2          }
 4553   1          if (g_ucCalFlag)
 4554   1          {
 4555   2              DBG_CAL("\n\rTest CAL ORG Min Tx is Error!");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 206 

 4556   2              DBG_CAL("\n");  
 4557   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4558   2              {
 4559   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4560   3                  {
 4561   4                     
 4562   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4563   4                  }
 4564   3                      DBG_CAL("\n");  
 4565   3              }
 4566   2              
 4567   2              ERROR_HOLD;
 4568   2          }
 4569   1          else
 4570   1          {
 4571   2              DBG_CAL("\n\rTest CAL ORG Min Tx is OK!");
 4572   2          }
 4573   1      
 4574   1          DBG_CAL("\n\rCAL ABS MIN Tx Test");
 4575   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4576   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4577   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4578   1          CalParam.ucRxLen    = CAL_TEST_RX;   
 4579   1          CalParam.usCalCmd   = EX_OP_MIN;
 4580   1          CalParam.ucCfg      = SIGN_MOD_0;
 4581   1          CalParam.ucDataType = EX_CFG_ABS;
 4582   1          CalParam.ucLineCfg  = EX_MOD_TX;
 4583   1      
 4584   1          DrvCal_MatrixMaxMin(&CalParam);
 4585   1      
 4586   1          for (i=0; i<CAL_TEST_TX; i++)
 4587   1          {
 4588   2              slTemp = abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + 0)); 
 4589   2              for (j=0; j<CAL_TEST_RX; j++)
 4590   2              {
 4591   3                  if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) < slTemp)
 4592   3                  {
 4593   4                      slTemp = abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4594   4                  }
 4595   3              }
 4596   2              if (slTemp > 0x7FFF)
 4597   2              {
 4598   3                  ssMinBuf[i] = 0x7FFF;
 4599   3              }
 4600   2              else
 4601   2              {
 4602   3                  ssMinBuf[i] = slTemp;
 4603   3              }
 4604   2          }
 4605   1      
 4606   1          g_ucCalFlag = 0;
 4607   1          for (i = 0; i < CAL_TEST_TX; i++)
 4608   1          {
 4609   2              if (*(T_tempOut + i) != ssMinBuf[i])
 4610   2              {
 4611   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
 4612   3                  g_ucCalFlag = 1;
 4613   3              }
 4614   2              else
 4615   2              {
 4616   3                  //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
 4617   3              }
 4618   2          }
 4619   1          if (g_ucCalFlag)
 4620   1          {
 4621   2              DBG_CAL("\n\rTest CAL ABS Min Tx is Error!");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 207 

 4622   2              DBG_CAL("\n");  
 4623   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4624   2              {
 4625   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4626   3                  {
 4627   4                     
 4628   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4629   4                  }
 4630   3                      DBG_CAL("\n");  
 4631   3              }
 4632   2                     
 4633   2              ERROR_HOLD;
 4634   2          }
 4635   1          else
 4636   1          {
 4637   2              DBG_CAL("\n\rTest CAL ABS Min Tx is OK!");
 4638   2          }
 4639   1      
 4640   1          DBG_CAL("\naram");
 4641   1          for (i=0; i<TX_ARAM_NUM; i++)
 4642   1          {
 4643   2              for (j=0; j<RX_ARAM_NUM; j++)
 4644   2              {
 4645   3                  *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand();
 4646   3              }          
 4647   2          }
 4648   1      #if ARAM_CAL_TEST
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;  
                   CalParam.usCalCmd   = EX_OP_MIN;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ORG;
                   CalParam.ucLineCfg  = EX_MOD_TX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       ssMinBuf[i] = *(g_pAfeAram + i*RX_ARAM_NUM + 0); 
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (*(g_pAfeAram + i*RX_ARAM_NUM + j) < ssMinBuf[i])
                           {
                               ssMinBuf[i] = *(g_pAfeAram + i*RX_ARAM_NUM + j);
                           }
                       }          
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       if (*(T_tempOut + i) != ssMinBuf[i])
                       {
                           DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 208 

                       DBG_CAL("\n\rTest CAL ORG Min Tx is Error!");
               
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                               
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG Min Tx is OK!");
                   }
               
                   DBG_CAL("\n\rCAL ABS MIN Tx Test");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                  // CalParam.ucTxNum    = TX_ARAM_NUM;
                  // CalParam.ucRxNum    = RX_ARAM_NUM;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;   
                   CalParam.usCalCmd   = EX_OP_MIN;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ABS;
                   CalParam.ucLineCfg  = EX_MOD_TX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       slTemp = abs(*(g_pAfeAram + i*RX_ARAM_NUM + 0)); 
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (abs(*(g_pAfeAram + i*RX_ARAM_NUM + j)) < slTemp)
                           {
                               slTemp = abs(*(g_pAfeAram + i*RX_ARAM_NUM + j));
                           }
                       }
                       if (slTemp > 0x7FFF)
                       {
                           ssMinBuf[i] = 0x7FFF;
                       }
                       else
                       {
                           ssMinBuf[i] = slTemp;
                       }
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       if (*(T_tempOut + i) != ssMinBuf[i])
                       {
                           DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                       }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 209 

                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ABS Min Tx is Error!");
               
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                               
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ABS Min Tx is OK!");
                   } 
               #endif
 4777   1      
 4778   1      }
*** WARNING C47 IN LINE 4500 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 4779          #else
               #define Test_CAL_MIN_TX()   /##/
               #endif
 4782          
 4783          #if TEST_CAL_MIN_RX_EN 
 4784          /*******************************************************************************
 4785           *   Name: Test_CAL_MIN_RX
 4786           *  Brief: ÁÐ×îÐ¡ÖµËã·¨
 4787           *  Input:
 4788           * Output:
 4789           * Return: none
 4790           *******************************************************************************/
 4791          void Test_CAL_MIN_RX(void)
 4792          {
 4793   1          UINT8 i,j;
 4794   1          UINT8 flag;
 4795   1          SINT32 slTemp;
 4796   1          SINT16 ssMinBuf[CAL_TEST_RX];
 4797   1      
 4798   1          ST_CalMcMatrixParam CalParam;
 4799   1      
 4800   1          
 4801   1          DBG_CAL("\n\nCAL ORG MIN Rx Test");
 4802   1      
 4803   1          DBG_CAL("\nmem");
 4804   1          for (i=0; i<TX_LOCAL_NUM; i++)
 4805   1          {
 4806   2              for (j=0; j<RX_LOCAL_NUM; j++)
 4807   2              {
 4808   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT8)rand();
 4809   3              }          
 4810   2          }
 4811   1      
 4812   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4813   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4814   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4815   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 4816   1          CalParam.usCalCmd   = EX_OP_MIN;
 4817   1          CalParam.ucCfg      = SIGN_MOD_0;
 4818   1          CalParam.ucDataType = EX_CFG_ORG;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 210 

 4819   1          CalParam.ucLineCfg  = EX_MOD_RX;
 4820   1      
 4821   1          DrvCal_MatrixMaxMin(&CalParam);
 4822   1      
 4823   1          for (i=0; i<CAL_TEST_RX; i++)
 4824   1          {
 4825   2              ssMinBuf[i] = *(T_tempbuf1 + i); 
 4826   2              for (j=0; j<CAL_TEST_TX; j++)
 4827   2              {
 4828   3                  if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) < ssMinBuf[i])
 4829   3                  {
 4830   4                      ssMinBuf[i] = *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
 4831   4                  }
 4832   3              }          
 4833   2          }
 4834   1      
 4835   1          g_ucCalFlag = 0;
 4836   1          for (i = 0; i < CAL_TEST_RX; i++)
 4837   1          {
 4838   2              if (*(T_tempOut + i) != ssMinBuf[i])
 4839   2              {
 4840   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
 4841   3                  g_ucCalFlag = 1;
 4842   3              }
 4843   2              else
 4844   2              {
 4845   3                  //DBG_CAL_DATA("\n\r%02dOK->   Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
 4846   3              }
 4847   2          }
 4848   1          if (g_ucCalFlag)
 4849   1          {
 4850   2              DBG_CAL("\n\rTest CAL ORG Min Rx is Error!");
 4851   2              DBG_CAL("\n");  
 4852   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4853   2              {
 4854   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4855   3                  {
 4856   4                     
 4857   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4858   4                  }
 4859   3                      DBG_CAL("\n");  
 4860   3              }
 4861   2              
 4862   2              ERROR_HOLD;
 4863   2          }
 4864   1          else
 4865   1          {
 4866   2              DBG_CAL("\n\rTest CAL ORG Min Rx is OK!");
 4867   2          }
 4868   1      
 4869   1          DBG_CAL("\n\rCAL ABS MIN Rx Test");
 4870   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 4871   1          CalParam.usDstAddr  = CAL_TEST_A2;
 4872   1          CalParam.ucTxLen    = CAL_TEST_TX;
 4873   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 4874   1          CalParam.usCalCmd   = EX_OP_MIN;
 4875   1          CalParam.ucCfg      = SIGN_MOD_0;
 4876   1          CalParam.ucDataType = EX_CFG_ABS;
 4877   1          CalParam.ucLineCfg  = EX_MOD_RX;
 4878   1      
 4879   1          DrvCal_MatrixMaxMin(&CalParam);
 4880   1      
 4881   1          for (i=0; i<CAL_TEST_RX; i++)
 4882   1          {
 4883   2              slTemp = abs(*(T_tempbuf1 + i)); 
 4884   2              for (j=0; j<CAL_TEST_TX; j++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 211 

 4885   2              {
 4886   3                  if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) < slTemp)
 4887   3                  {
 4888   4                      slTemp = abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i));
 4889   4                  }
 4890   3              }
 4891   2              if (slTemp > 0x7FFF)
 4892   2              {
 4893   3                  ssMinBuf[i] = 0x7FFF;
 4894   3              }
 4895   2              else
 4896   2              {
 4897   3                  ssMinBuf[i] = slTemp;
 4898   3              }
 4899   2          }
 4900   1      
 4901   1          g_ucCalFlag = 0;
 4902   1          for (i = 0; i < CAL_TEST_RX; i++)
 4903   1          {
 4904   2              if (*(T_tempOut + i) != ssMinBuf[i])
 4905   2              {
 4906   3                  DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
 4907   3                  g_ucCalFlag = 1;
 4908   3              }
 4909   2              else
 4910   2              {
 4911   3                  //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
 4912   3              }
 4913   2          }
 4914   1          if (g_ucCalFlag)
 4915   1          {
 4916   2              DBG_CAL("\n\rTest CAL ABS Min Rx is Error!");
 4917   2      
 4918   2              DBG_CAL("\n");  
 4919   2              for (i=0; i<TX_LOCAL_NUM; i++)
 4920   2              {
 4921   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 4922   3                  {
 4923   4                     
 4924   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 4925   4                  }
 4926   3                      DBG_CAL("\n");  
 4927   3              }        
 4928   2              ERROR_HOLD;
 4929   2          }
 4930   1          else
 4931   1          {
 4932   2              DBG_CAL("\n\rTest CAL ABS Min Rx is OK!");
 4933   2          }
 4934   1      
 4935   1      #if ARAM_CAL_TEST
               
               
                  DBG_CAL("\naram");
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand();
                       }          
                   }
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX; 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 212 

                   CalParam.usCalCmd   = EX_OP_MIN;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ORG;
                   CalParam.ucLineCfg  = EX_MOD_RX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_RX; i++)
                   {
                       ssMinBuf[i] = *(g_pAfeAram + i); 
                       for (j=0; j<CAL_ARAM_TX; j++)
                       {
                           if (*(g_pAfeAram + j*RX_ARAM_NUM + i) < ssMinBuf[i])
                           {
                               ssMinBuf[i] = *(g_pAfeAram + j*RX_ARAM_NUM + i);
                           }
                       }          
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssMinBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK->   Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ORG Min Rx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG Min Rx is OK!");
                   }
               
                   DBG_CAL("\n\rCAL ABS MIN Rx Test");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX; 
                   CalParam.usCalCmd   = EX_OP_MIN;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ABS;
                   CalParam.ucLineCfg  = EX_MOD_RX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_RX; i++)
                   {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 213 

                       slTemp = abs(*(g_pAfeAram + i)); 
                       for (j=0; j<CAL_ARAM_TX; j++)
                       {
                           if (abs(*(g_pAfeAram + j*RX_ARAM_NUM + i)) < slTemp)
                           {
                               slTemp = abs(*(g_pAfeAram + j*RX_ARAM_NUM + i));
                           }
                       }
                       if (slTemp > 0x7FFF)
                       {
                           ssMinBuf[i] = 0x7FFF;
                       }
                       else
                       {
                           ssMinBuf[i] = slTemp;
                       }
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssMinBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ABS Min Rx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ABS Min Rx is OK!");
                   } 
               #endif  
 5068   1      }
*** WARNING C47 IN LINE 4794 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 5069          #else
               #define Test_CAL_MIN_RX()   /##/
               #endif
 5072          
 5073          
 5074          #if TEST_CAL_MAX_TX_EN 
 5075          /*******************************************************************************
 5076           *   Name: Test_CAL_MAX_TX
 5077           *  Brief: ÐÐ×î´óÖµËã·¨
 5078           *  Input:
 5079           * Output:
 5080           * Return: none
 5081           *******************************************************************************/
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 214 

 5082          void Test_CAL_MAX_TX(void)
 5083          {
 5084   1          UINT8 i,j;
 5085   1          UINT8 flag;
 5086   1          SINT32 slTemp;
 5087   1          SINT16 ssMaxBuf[CAL_TEST_TX];
 5088   1      
 5089   1          ST_CalMcMatrixParam CalParam;
 5090   1      
 5091   1          DBG_CAL("\n\nCAL ORG Max Tx Test");
 5092   1      
 5093   1          DBG_CAL("\n mem");
 5094   1          for (i=0; i<TX_LOCAL_NUM; i++)
 5095   1          {
 5096   2              for (j=0; j<RX_LOCAL_NUM; j++)
 5097   2              {
 5098   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT8)rand();
 5099   3              }          
 5100   2          }
 5101   1      
 5102   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5103   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5104   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5105   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 5106   1          CalParam.usCalCmd   = EX_OP_MAX;
 5107   1          CalParam.ucCfg      = SIGN_MOD_0;
 5108   1          CalParam.ucDataType = EX_CFG_ORG;
 5109   1          CalParam.ucLineCfg  = EX_MOD_TX;
 5110   1      
 5111   1          DrvCal_MatrixMaxMin(&CalParam);
 5112   1      
 5113   1          for (i=0; i<CAL_TEST_TX; i++)
 5114   1          {
 5115   2              ssMaxBuf[i] = *(T_tempbuf1 + i*RX_LOCAL_NUM + 0); 
 5116   2              for (j=0; j<CAL_TEST_RX; j++)
 5117   2              {
 5118   3                  if (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) > ssMaxBuf[i])
 5119   3                  {
 5120   4                      ssMaxBuf[i] = *(T_tempbuf1 + i*RX_LOCAL_NUM + j);
 5121   4                  }
 5122   3              }          
 5123   2          }
 5124   1      
 5125   1          g_ucCalFlag = 0;
 5126   1          for (i = 0; i < CAL_TEST_TX; i++)
 5127   1          {
 5128   2              if (*(T_tempOut + i) != ssMaxBuf[i])
 5129   2              {
 5130   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5131   3                  g_ucCalFlag = 1;
 5132   3              }
 5133   2              else
 5134   2              {
 5135   3                  //DBG_CAL_DATA("\n\rOK->   Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5136   3              }
 5137   2      
 5138   2          }
 5139   1          if (g_ucCalFlag)
 5140   1          {
 5141   2              DBG_CAL("\n\rTest CAL ORG Max Tx is Error!");
 5142   2      
 5143   2              DBG_CAL("\n");  
 5144   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5145   2              {
 5146   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5147   3                  {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 215 

 5148   4                     
 5149   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 5150   4                  }
 5151   3                      DBG_CAL("\n");  
 5152   3              }        
 5153   2              ERROR_HOLD;
 5154   2          }
 5155   1          else
 5156   1          {
 5157   2              DBG_CAL("\n\rTest CAL ORG Max Tx is OK!");
 5158   2          }
 5159   1      
 5160   1          DBG_CAL("\n\rCAL ABS Max Tx Test");
 5161   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5162   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5163   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5164   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 5165   1          CalParam.usCalCmd   = EX_OP_MAX;
 5166   1          CalParam.ucCfg      = SIGN_MOD_0;
 5167   1          CalParam.ucDataType = EX_CFG_ABS;
 5168   1          CalParam.ucLineCfg  = EX_MOD_TX;
 5169   1      
 5170   1          DrvCal_MatrixMaxMin(&CalParam);
 5171   1      
 5172   1          for (i=0; i<CAL_TEST_TX; i++)
 5173   1          {        
 5174   2              slTemp = abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + 0)); 
 5175   2              for (j=0; j<CAL_TEST_RX; j++)
 5176   2              {
 5177   3                  if (abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) > slTemp)
 5178   3                  {
 5179   4                      slTemp = abs(*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 5180   4                  }
 5181   3              }
 5182   2              if (slTemp > 0x7FFF)
 5183   2              {
 5184   3                  ssMaxBuf[i] = 0x7FFF;
 5185   3              }
 5186   2              else
 5187   2              {
 5188   3                  ssMaxBuf[i] = slTemp;
 5189   3              }
 5190   2          }
 5191   1      
 5192   1          g_ucCalFlag = 0;
 5193   1          for (i = 0; i < CAL_TEST_TX; i++)
 5194   1          {
 5195   2              if (*(T_tempOut + i) != ssMaxBuf[i])
 5196   2              {
 5197   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5198   3                  g_ucCalFlag = 1;
 5199   3              }
 5200   2              else
 5201   2              {
 5202   3                  //DBG_ERROR("\n\rOK->   Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5203   3              }
 5204   2          }
 5205   1          if (g_ucCalFlag)
 5206   1          {
 5207   2              DBG_CAL("\n\rTest CAL ABS Max Tx is Error!");
 5208   2              DBG_CAL("\n");  
 5209   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5210   2              {
 5211   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5212   3                  {
 5213   4                     
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 216 

 5214   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 5215   4                  }
 5216   3                      DBG_CAL("\n");  
 5217   3              }        
 5218   2              ERROR_HOLD;
 5219   2          }
 5220   1          else
 5221   1          {
 5222   2              DBG_CAL("\n\rTest CAL ABS Max Tx is OK!");
 5223   2          }
 5224   1      
 5225   1          DBG_CAL("\naram");
 5226   1          for (i=0; i<TX_ARAM_NUM; i++)
 5227   1          {
 5228   2              for (j=0; j<RX_ARAM_NUM; j++)
 5229   2              {
 5230   3                  *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand();
 5231   3              }          
 5232   2          }
 5233   1      
 5234   1      #if ARAM_CAL_TEST
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;  
                   CalParam.usCalCmd   = EX_OP_MAX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ORG;
                   CalParam.ucLineCfg  = EX_MOD_TX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       ssMaxBuf[i] = *(g_pAfeAram + i*RX_ARAM_NUM + 0); 
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (*(g_pAfeAram + i*RX_ARAM_NUM + j) > ssMaxBuf[i])
                           {
                               ssMaxBuf[i] = *(g_pAfeAram + i*RX_ARAM_NUM + j);
                           }
                       }          
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       if (*(T_tempOut + i) != ssMaxBuf[i])
                       {
                           DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ORG MAX Tx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 217 

                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG MAX Tx is OK!");
                   }
               
                   DBG_CAL("\n\rCAL ABS MAX Tx Test");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;   
                   CalParam.usCalCmd   = EX_OP_MAX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ABS;
                   CalParam.ucLineCfg  = EX_MOD_TX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       slTemp = abs(*(g_pAfeAram + i*RX_ARAM_NUM + 0)); 
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           if (abs(*(g_pAfeAram + i*RX_ARAM_NUM + j)) > slTemp)
                           {
                               slTemp = abs(*(g_pAfeAram + i*RX_ARAM_NUM + j));
                           }
                       }
                       if (slTemp > 0x7FFF)
                       {
                           ssMaxBuf[i] = 0x7FFF;
                       }
                       else
                       {
                           ssMaxBuf[i] = slTemp;
                       }
                   }
               
                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       if (*(T_tempOut + i) != ssMaxBuf[i])
                       {
                           DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ABS Max Tx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 218 

                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ABS Max Tx is OK!");
                   } 
               #endif  
 5357   1      }
*** WARNING C47 IN LINE 5085 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 5358          #else
               #define Test_CAL_MAX_TX()   /##/
               #endif
 5361          
 5362          #if TEST_CAL_MAX_RX_EN 
 5363          /*******************************************************************************
 5364          *   Name: Test_CAL_MAX_RX
 5365          *  Brief: ÁÐ×î´óÖµËã·¨
 5366          *  Input:
 5367          * Output:
 5368          * Return: none
 5369          *******************************************************************************/
 5370          void Test_CAL_MAX_RX(void)
 5371          {
 5372   1          UINT8 i,j;
 5373   1          UINT8 flag;
 5374   1          SINT32 slTemp;
 5375   1          SINT16 ssMaxBuf[CAL_TEST_RX];
 5376   1      
 5377   1          ST_CalMcMatrixParam CalParam;
 5378   1      
 5379   1          DBG_CAL("\n\nCAL ORG Max Rx Test");
 5380   1          for (i=0; i<TX_LOCAL_NUM; i++)
 5381   1          {
 5382   2              for (j=0; j<RX_LOCAL_NUM; j++)
 5383   2              {
 5384   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT8)rand();
 5385   3              }          
 5386   2          }
 5387   1      
 5388   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5389   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5390   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5391   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 5392   1          CalParam.usCalCmd   = EX_OP_MAX;
 5393   1          CalParam.ucCfg      = SIGN_MOD_0;
 5394   1          CalParam.ucDataType = EX_CFG_ORG;
 5395   1          CalParam.ucLineCfg  = EX_MOD_RX;
 5396   1      
 5397   1          DrvCal_MatrixMaxMin(&CalParam);
 5398   1      
 5399   1          for (i=0; i<CAL_TEST_RX; i++)
 5400   1          {
 5401   2              ssMaxBuf[i] = *(T_tempbuf1 + i); 
 5402   2              for (j=0; j<CAL_TEST_TX; j++)
 5403   2              {
 5404   3                  if (*(T_tempbuf1 + j*RX_LOCAL_NUM + i) > ssMaxBuf[i])
 5405   3                  {
 5406   4                      ssMaxBuf[i] = *(T_tempbuf1 + j*RX_LOCAL_NUM + i);
 5407   4                  }
 5408   3              }          
 5409   2          }
 5410   1      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 219 

 5411   1          g_ucCalFlag = 0;
 5412   1          for (i = 0; i < CAL_TEST_RX; i++)
 5413   1          {
 5414   2              if (*(T_tempOut + i) != ssMaxBuf[i])
 5415   2              {
 5416   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5417   3                  g_ucCalFlag = 1;
 5418   3              }
 5419   2              else
 5420   2              {
 5421   3                  //DBG_ERROR("\n\rOK->   Cal:%04x,Soft:%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5422   3              }
 5423   2          }
 5424   1          if (g_ucCalFlag)
 5425   1          {
 5426   2              DBG_CAL("\n\rTest CAL ORG Max Rx is Error!");
 5427   2              DBG_CAL("\n");  
 5428   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5429   2              {
 5430   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5431   3                  {
 5432   4                     
 5433   4                      DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 5434   4                  }
 5435   3                      DBG_CAL("\n");  
 5436   3              }        
 5437   2              ERROR_HOLD;
 5438   2          }
 5439   1          else
 5440   1          {
 5441   2              DBG_CAL("\n\rTest CAL ORG Max Rx is OK!");
 5442   2          }
 5443   1      
 5444   1          DBG_CAL("\n\rCAL ABS Max Rx Test");
 5445   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5446   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5447   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5448   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 5449   1          CalParam.usCalCmd   = EX_OP_MAX;
 5450   1          CalParam.ucCfg      = SIGN_MOD_0;
 5451   1          CalParam.ucDataType = EX_CFG_ABS;
 5452   1          CalParam.ucLineCfg  = EX_MOD_RX;
 5453   1      
 5454   1          DrvCal_MatrixMaxMin(&CalParam);
 5455   1      
 5456   1          for (i=0; i<CAL_TEST_RX; i++)
 5457   1          {
 5458   2              slTemp = abs(*(T_tempbuf1 + i)); 
 5459   2              for (j=0; j<CAL_TEST_TX; j++)
 5460   2              {
 5461   3                  if (abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i)) > slTemp)
 5462   3                  {
 5463   4                      slTemp = abs(*(T_tempbuf1 + j*RX_LOCAL_NUM + i));
 5464   4                  }
 5465   3              }
 5466   2              if (slTemp > 0x7FFF)
 5467   2              {
 5468   3                  ssMaxBuf[i] = 0x7FFF;
 5469   3              }
 5470   2              else
 5471   2              {
 5472   3                  ssMaxBuf[i] = slTemp;
 5473   3              }
 5474   2          }
 5475   1      
 5476   1          g_ucCalFlag = 0;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 220 

 5477   1          for (i = 0; i < CAL_TEST_RX; i++)
 5478   1          {
 5479   2              if (*(T_tempOut + i) != ssMaxBuf[i])
 5480   2              {
 5481   3                  DBG_ERROR("\n\rERROR->Cal:%04x,Soft%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5482   3                  g_ucCalFlag = 1;
 5483   3              }
 5484   2              else
 5485   2              {
 5486   3                  //DBG_CAL("\n\rOK->   Cal:%04x,Soft%04x",*(T_tempOut + i),ssMaxBuf[i]);
 5487   3              }
 5488   2          }
 5489   1          if (g_ucCalFlag)
 5490   1          {
 5491   2              DBG_CAL("\n\rTest CAL ABS Max Rx is Error!");
 5492   2              DBG_CAL("\n");  
 5493   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5494   2              {
 5495   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5496   3                  {
 5497   4                     
 5498   4                      DBG_CAL("%04x  ",*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 5499   4                  }
 5500   3                      DBG_CAL("\n");  
 5501   3              }        
 5502   2              ERROR_HOLD;
 5503   2          }
 5504   1          else
 5505   1          {
 5506   2              DBG_CAL("\n\rTest CAL ABS Max Rx is OK!");
 5507   2          }
 5508   1      
 5509   1      #if ARAM_CAL_TEST
               
                  DBG_CAL("\naram");
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand();
                       }          
                   }
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX; 
                   CalParam.usCalCmd   = EX_OP_MAX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ORG;
                   CalParam.ucLineCfg  = EX_MOD_RX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_RX; i++)
                   {
                       ssMaxBuf[i] = *(g_pAfeAram + i); 
                       for (j=0; j<CAL_ARAM_TX; j++)
                       {
                           if (*(g_pAfeAram + j*RX_ARAM_NUM + i) > ssMaxBuf[i])
                           {
                               ssMaxBuf[i] = *(g_pAfeAram + j*RX_ARAM_NUM + i);
                           }
                       }          
                   }
               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 221 

                   g_ucCalFlag = 0;
                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssMaxBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMaxBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK->   Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ORG Max Rx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ORG Max Rx is OK!");
                   }
               
                   DBG_CAL("\n\rCAL ABS MIN Rx Test");
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX; 
                   CalParam.usCalCmd   = EX_OP_MAX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   CalParam.ucDataType = EX_CFG_ABS;
                   CalParam.ucLineCfg  = EX_MOD_RX;
               
                   DrvCal_MatrixMaxMin(&CalParam);
               
                   for (i=0; i<CAL_ARAM_RX; i++)
                   {
                       slTemp = abs(*(g_pAfeAram + i)); 
                       for (j=0; j<CAL_ARAM_TX; j++)
                       {
                           if (abs(*(g_pAfeAram + j*RX_ARAM_NUM + i)) > slTemp)
                           {
                               slTemp = abs(*(g_pAfeAram + j*RX_ARAM_NUM + i));
                           }
                       }
                       if (slTemp > 0x7FFF)
                       {
                           ssMaxBuf[i] = 0x7FFF;
                       }
                       else
                       {
                           ssMaxBuf[i] = slTemp;
                       }
                   }
               
                   g_ucCalFlag = 0;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 222 

                   for (i = 0; i < CAL_ARAM_RX; i++)
                   {
                       if (*(T_tempOut + i) != ssMaxBuf[i])
                       {
                           DBG_ERROR("\n\r%02dERROR->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMaxBuf[i]);
                           g_ucCalFlag = 1;
                       }
                       else
                       {
                           //DBG_CAL_DATA("\n\r%02dOK   ->Cal:%04x,Soft:%04x",i,*(T_tempOut + i),ssMinBuf[i]);
                       }
                   }
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rTest CAL ABS Max Rx is Error!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rTest CAL ABS Max Rx is OK!");
                   } 
               #endif  
 5641   1      }
*** WARNING C47 IN LINE 5373 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 5642          #else
               #define Test_CAL_MAX_RX()   /##/
               #endif
 5645          
 5646          #if TEST_CAL_COUNT_EN 
 5647          /*******************************************************************************
 5648          *   Name: Test_CAL_Count
 5649          *  Brief: ¾ØÕó´¦ÓÚ·¶Î§[max , min]µÄ¸öÊý
 5650          *  Input:
 5651          * Output:
 5652          * Return: none
 5653          *******************************************************************************/
 5654          void Test_CAL_Count(void)
 5655          {
 5656   1          UINT8 i,j;
 5657   1          UINT8 flag;
 5658   1          SINT16 CountMax;
 5659   1          SINT16 CountMin;
 5660   1          UINT16 CalCountNum = 0;
 5661   1          UINT16 SofCountNum = 0;
 5662   1          ST_CalMcMatrixParam CalParam;
 5663   1      
 5664   1          DBG_CAL("\n\nTest Cal Count");
 5665   1          
 5666   1          DBG_CAL("\nmem");
 5667   1          for (i=0; i<TX_LOCAL_NUM; i++)
 5668   1          {
 5669   2              for (j=0; j<RX_LOCAL_NUM; j++)
 5670   2              {
 5671   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand();
 5672   3              }
 5673   2          }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 223 

 5674   1      
 5675   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5676   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5677   1          CalParam.ucRxLen    = CAL_TEST_RX; 
 5678   1          CalParam.usCalCmd   = EX_OP_COUNT;
 5679   1          
 5680   1          CountMax = 1000;
 5681   1          CountMin = -1000;
 5682   1      
 5683   1          CalCountNum = DrvCal_MatrixCount(&CalParam,CountMin,CountMax);
 5684   1          DBG_CAL("\n\rCalCountNum:%d",CalCountNum);
 5685   1         
 5686   1          g_ucCalFlag = 0;
 5687   1          for (i = 0; i < CAL_TEST_TX; i++)
 5688   1          {
 5689   2              for (j = 0; j < CAL_TEST_RX; j++)
 5690   2              {
 5691   3                  if((*(T_tempbuf1 + i*RX_LOCAL_NUM + j) >= CountMin)&&(*(T_tempbuf1 + i*RX_LOCAL_NUM + j) <= C
             -ountMax))
 5692   3                  {
 5693   4                      SofCountNum++;
 5694   4                  }
 5695   3              }
 5696   2          }
 5697   1          DBG_CAL("\n\rSofCountNum:%d",SofCountNum);
 5698   1          
 5699   1          if(CalCountNum != SofCountNum)
 5700   1          {
 5701   2               g_ucCalFlag = 1;
 5702   2          }
 5703   1      
 5704   1          if (g_ucCalFlag)
 5705   1          {
 5706   2              DBG_CAL("\n\rCal Test CAL Count is ERROR!");
 5707   2              DBG_CAL("\n");  
 5708   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5709   2              {
 5710   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5711   3                  {
 5712   4                     
 5713   4                      DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 5714   4                  }
 5715   3                      DBG_CAL("\n");  
 5716   3              }        
 5717   2              ERROR_HOLD;
 5718   2          }
 5719   1          else
 5720   1          {
 5721   2              DBG_CAL("\n\rCal Test CAL Count is OK!");
 5722   2          }
 5723   1      #if ARAM_CAL_TEST
               
                   DBG_CAL("\naram");
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_LOCAL_NUM + j) = (SINT16)rand();
                       }
                   }
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX; 
                   CalParam.usCalCmd   = EX_OP_COUNT;
                   
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 224 

                   CountMax = 1000;
                   CountMin = -1000;
               
                   CalCountNum = DrvCal_MatrixCount(&CalParam,CountMin,CountMax);
                   DBG_CAL("\n\rCalCountNum:%d",CalCountNum);
                  
                   g_ucCalFlag = 0;
                   SofCountNum = 0;
                   for (i = 0; i < CAL_ARAM_TX; i++)
                   {
                       for (j = 0; j < CAL_ARAM_RX; j++)
                       {
                           if((*(g_pAfeAram + i*RX_ARAM_NUM + j) >= CountMin)&&(*(g_pAfeAram + i*RX_ARAM_NUM + j) <= Cou
             -ntMax))
                           {
                               SofCountNum++;
                           }
                       }
                   }
                   DBG_CAL("\n\rSofCountNum:%d",SofCountNum);
                   
                   if(CalCountNum != SofCountNum)
                   {
                        g_ucCalFlag = 1;
                   }
               
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rCal Test CAL Count is ERROR!");
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram + i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rCal Test CAL Count is OK!");
                   } 
               #endif  
 5784   1      }
*** WARNING C47 IN LINE 5657 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 5785          #else
               #define Test_CAL_Count()   /##/
               #endif
 5788          
 5789          #if TEST_CAL_SUBCONST_EN 
 5790          /*******************************************************************************
 5791          *   Name: Test_CAL_SubConst
 5792          *  Brief: ¼ÆËãÃ¿ÐÐ(Tx)»òÕßÃ¿ÁÐ(Rx)µÄ¼õÈ¥Ò»¸ö³£Êý
 5793          *  Input:
 5794          * Output:
 5795          * Return: none
 5796          *******************************************************************************/
 5797          void Test_CAL_SubConst(void)
 5798          {
 5799   1          UINT8 i,j;
 5800   1          UINT8 flag;
 5801   1          SINT32 temp;
 5802   1          ST_CalMcMatrixParam CalParam;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 225 

 5803   1      
 5804   1      
 5805   1          DBG_CAL("\n\nmem");
 5806   1      
 5807   1          DBG_CAL("\nTest CAL SubConst Tx");
 5808   1      
 5809   1          for (i=0; i<TX_LOCAL_NUM; i++)
 5810   1          {
 5811   2              for (j=0; j<RX_LOCAL_NUM; j++)
 5812   2              {
 5813   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (UINT8)rand();
 5814   3              }
 5815   2          }
 5816   1      
 5817   1          for (i=0; i<TX_LOCAL_NUM; i++)
 5818   1          {
 5819   2              *(T_tempbuf2 + i) = (UINT8)rand();        
 5820   2          }
 5821   1      
 5822   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5823   1          CalParam.usSrc2Addr = CAL_TEST_A1;
 5824   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5825   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5826   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 5827   1          CalParam.usCalCmd   = EX_OP_SUBCONST;
 5828   1          CalParam.ucLineCfg  = EX_MOD_TX;
 5829   1          CalParam.ucCfg      = SIGN_MOD_1;
 5830   1          DrvCal_MatrixSubConst(&CalParam);
 5831   1      
 5832   1          g_ucCalFlag = 0;
 5833   1          for (i=0; i<CAL_TEST_TX; i++)
 5834   1          {
 5835   2              for (j=0; j<CAL_TEST_RX; j++)
 5836   2              {
 5837   3                  temp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) - *(T_tempbuf2 + i));
 5838   3                  if (temp > 32767)
 5839   3                  {   
 5840   4                      temp = 32767;
 5841   4                  }
 5842   3                  else if (temp < -32768)
 5843   3                  {
 5844   4                      temp = -32768;
 5845   4                  }
 5846   3                  if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (UINT16)temp)
 5847   3                  {
 5848   4                      DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)temp)
             -;
 5849   4                      g_ucCalFlag = 1;
 5850   4                  }
 5851   3                  else
 5852   3                  {
 5853   4                      //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(UINT16)
             -temp);
 5854   4                  }
 5855   3              }
 5856   2          }
 5857   1          
 5858   1          if (g_ucCalFlag)
 5859   1          {
 5860   2              DBG_CAL("\n\rCal Test SubConst Tx is ERROR!");
 5861   2      
 5862   2              DBG_CAL("\n");  
 5863   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5864   2              {
 5865   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5866   3                  {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 226 

 5867   4                     
 5868   4                      DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 5869   4                  }
 5870   3                      DBG_CAL("\n");  
 5871   3              }
 5872   2              DBG_CAL("\n"); 
 5873   2              for (i=0; i<TX_LOCAL_NUM; i++)
 5874   2              {
 5875   3                 DBG_CAL("%04x  ", *(T_tempbuf2 + i));     
 5876   3              }        
 5877   2              ERROR_HOLD;
 5878   2          }
 5879   1          else
 5880   1          {
 5881   2              DBG_CAL("\n\rCal Test SubConst Tx is OK!");
 5882   2          }
 5883   1      
 5884   1          DBG_CAL("\n\rTest CAL SubConst Rx");
 5885   1          for (i=0; i<RX_LOCAL_NUM; i++)
 5886   1          {
 5887   2              *(T_tempbuf2 + i) = (SINT8)rand();        
 5888   2          }
 5889   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 5890   1          CalParam.usSrc2Addr = CAL_TEST_A1;
 5891   1          CalParam.usDstAddr  = CAL_TEST_A2;
 5892   1          CalParam.ucTxLen    = CAL_TEST_TX;
 5893   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 5894   1          CalParam.usCalCmd   = EX_OP_SUBCONST;
 5895   1          CalParam.ucLineCfg  = EX_MOD_RX;
 5896   1          CalParam.ucCfg      = SIGN_MOD_0;
 5897   1          
 5898   1          DrvCal_MatrixSubConst(&CalParam);
 5899   1          
 5900   1          g_ucCalFlag = 0;
 5901   1          for (i=0; i<CAL_TEST_TX; i++)
 5902   1          {
 5903   2              for (j=0; j<CAL_TEST_RX; j++)
 5904   2              {
 5905   3                  temp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j) - *(T_tempbuf2 + j));
 5906   3                  if (temp > 32767)
 5907   3                  {   
 5908   4                      temp = 32767;
 5909   4                  }
 5910   3                  else if (temp < -32768)
 5911   3                  {
 5912   4                      temp = -32768;
 5913   4                  }
 5914   3                  if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)temp)
 5915   3                  {
 5916   4                      DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)temp)
             -;
 5917   4                      g_ucCalFlag = 1;
 5918   4                  }
 5919   3                  else
 5920   3                  {
 5921   4                      //DBG_CAL_DATA("\n\rOK->   Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -temp);
 5922   4                  }
 5923   3              }
 5924   2          }
 5925   1          
 5926   1          if (g_ucCalFlag)
 5927   1          {
 5928   2              DBG_CAL("\n\rCal Test SubConst Rx is ERROR!");
 5929   2              DBG_CAL("\n");  
 5930   2              for (i=0; i<TX_LOCAL_NUM; i++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 227 

 5931   2              {
 5932   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 5933   3                  {
 5934   4                     
 5935   4                      DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 5936   4                  }
 5937   3                      DBG_CAL("\n");  
 5938   3              }
 5939   2              DBG_CAL("\n"); 
 5940   2              for (i=0; i<RX_LOCAL_NUM; i++)
 5941   2              {
 5942   3                 DBG_CAL("%04x  ", *(T_tempbuf2 + i));     
 5943   3              }
 5944   2             
 5945   2              ERROR_HOLD;
 5946   2          }
 5947   1          else
 5948   1          {
 5949   2              DBG_CAL("\n\rCal Test SubConst Rx is OK!");
 5950   2          }
 5951   1      
 5952   1      #if ARAM_CAL_TEST
               
                   DBG_CAL("\naram");
                   DBG_CAL("\nTest CAL SubConst Tx");
                   
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = (SINT8)rand();
                       }
                   }
               
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       *(T_tempbuf2 + i) = (SINT8)rand();        
                   }
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usSrc2Addr = CAL_TEST_A1;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;  
                   CalParam.usCalCmd   = EX_OP_SUBCONST;
                   CalParam.ucLineCfg  = EX_MOD_TX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   DrvCal_MatrixSubConst(&CalParam);
               
                   g_ucCalFlag = 0;
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           temp = (*(g_pAfeAram + i*RX_ARAM_NUM + j) - *(T_tempbuf2 + i));
                           if (temp > 32767)
                           {   
                               temp = 32767;
                           }
                           else if (temp < -32768)
                           {
                               temp = -32768;
                           }
                           if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)temp)
                           {
                               DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_ARAM_NUM + j),(SINT16)temp);
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 228 

                               g_ucCalFlag = 1;
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -temp);
                           }
                       }
                   }
                   
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rCal Test SubConst Tx is ERROR!");
               
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                       DBG_CAL("\n"); 
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                          DBG_CAL("%04x  ", *(T_tempbuf2 + i));     
                       }        
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rCal Test SubConst Tx is OK!");
                   }
               
                   DBG_CAL("\n\rTest CAL SubConst Rx");
                   for (i=0; i<RX_ARAM_NUM; i++)
                   {
                       *(T_tempbuf2 + i) = (SINT8)rand();        
                   }
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usSrc2Addr = CAL_TEST_A1;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;  
                   CalParam.usCalCmd   = EX_OP_SUBCONST;
                   CalParam.ucLineCfg  = EX_MOD_RX;
                   CalParam.ucCfg      = SIGN_MOD_0;
                   
                   DrvCal_MatrixSubConst(&CalParam);
                   
                   g_ucCalFlag = 0;
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           temp = (*(g_pAfeAram + i*RX_ARAM_NUM + j) - *(T_tempbuf2 + j));
                           if (temp > 32767)
                           {   
                               temp = 32767;
                           }
                           else if (temp < -32768)
                           {
                               temp = -32768;
                           }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 229 

                           if (*(T_tempOut + i*RX_ARAM_NUM + j) != (SINT16)temp)
                           {
                               DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_ARAM_NUM + j),(SINT16)temp);
                               g_ucCalFlag = 1;
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\rOK->   Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -temp);
                           }
                       }
                   }
                   
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rCal Test SubConst Rx is ERROR!");
               
                       DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                       DBG_CAL("\n"); 
                       for (i=0; i<RX_LOCAL_NUM; i++)
                       {
                          DBG_CAL("%04x  ", *(T_tempbuf2 + i));     
                       }  
               
                       
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rCal Test SubConst Rx is OK!");
                   }  
               #endif  
 6102   1      }
*** WARNING C47 IN LINE 5800 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 6103          #else
               #define Test_CAL_SubConst()   /##/
               #endif
 6106          
 6107          #if TEST_CAL_CMP_EN 
 6108          /*******************************************************************************
 6109          *   Name: Test_CAL_SubConst
 6110          *  Brief: ½«²Ù×÷Êý¾ØÕó1Óë²Ù×÷Êý¾ØÕó2¶ÔÓ¦µÄÎ»ÖÃ½øÐÐ±È½Ï£¬È¡
 6111                       ×î´óÖµ»òÕß×îÐ¡ÖµÐ´Èë½á¹û¾ØÕó
 6112          *  Input:  M*N
 6113                         M*N
 6114          * Output:  M*N
 6115          * Return: none
 6116          *******************************************************************************/
 6117          void Test_CAL_CMP(void)
 6118          {
 6119   1          UINT8 i,j;
 6120   1          UINT8 flag;
 6121   1          SINT16 temp;
 6122   1          ST_CalMcMatrixParam CalParam;
 6123   1      
 6124   1          DBG_CAL("\n\nTest CAL CMP");
 6125   1          DBG_CAL("\n mem-mem");
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 230 

 6126   1          for (i=0; i<TX_LOCAL_NUM; i++)
 6127   1          {
 6128   2              for (j=0; j<RX_LOCAL_NUM; j++)
 6129   2              {
 6130   3                  *(T_tempbuf1 + i*RX_LOCAL_NUM + j) = (SINT16)rand()>>1;
 6131   3                  *(T_tempbuf2 + i*RX_LOCAL_NUM + j) = (SINT16)rand()>>1;            
 6132   3              }
 6133   2          }
 6134   1      
 6135   1          CalParam.usSrc1Addr = CAL_TEST_A0;
 6136   1          CalParam.usSrc2Addr = CAL_TEST_A1;
 6137   1          CalParam.usDstAddr  = CAL_TEST_A2;
 6138   1          CalParam.ucTxLen    = CAL_TEST_TX;
 6139   1          CalParam.ucRxLen    = CAL_TEST_RX;  
 6140   1          CalParam.usCalCmd   = EX_OP_CMP;
 6141   1          CalParam.ucDataType = CMP_CFG_1;//È¡×î´óÖµ
 6142   1          CalParam.ucCfg = SIGN_MOD_0;//ÓÐ·ûºÅÊý
 6143   1          
 6144   1          DrvCal_MatrixCMP(&CalParam);
 6145   1      
 6146   1          g_ucCalFlag = 0;
 6147   1          for (i=0; i<CAL_TEST_TX; i++)
 6148   1          {
 6149   2              for (j=0; j<CAL_TEST_RX; j++)
 6150   2              {
 6151   3                  #if 0//È¡×î´óÖµ
                           
                               if((*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) > (*(T_tempbuf2 + i*RX_LOCAL_NUM + j)))
                               {
                                   temp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
                               }
                               else
                               {
                                   temp = (*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
                               }
                               
                           #else//È¡×îÐ¡Öµ
 6163   3      
 6164   3                      if((*(T_tempbuf1 + i*RX_LOCAL_NUM + j)) < (*(T_tempbuf2 + i*RX_LOCAL_NUM + j)))
 6165   3                      {
 6166   4                          temp = (*(T_tempbuf1 + i*RX_LOCAL_NUM + j));
 6167   4                      }
 6168   3                      else
 6169   3                      {
 6170   4                          temp = (*(T_tempbuf2 + i*RX_LOCAL_NUM + j));
 6171   4                      }
 6172   3                      
 6173   3                  #endif
 6174   3                  
 6175   3                  if (*(T_tempOut + i*RX_LOCAL_NUM + j) != temp)
 6176   3                  {
 6177   4                      DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),temp);
 6178   4                      g_ucCalFlag = 1;
 6179   4                  }
 6180   3                  else
 6181   3                  {
 6182   4                      //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),temp);
 6183   4                  }
 6184   3              }
 6185   2          }
 6186   1          
 6187   1          if (g_ucCalFlag)
 6188   1          {
 6189   2              DBG_CAL("\n\rCal Test CMP is ERROR!");
 6190   2      
 6191   2      
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 231 

 6192   2              DBG_CAL("\n");  
 6193   2              for (i=0; i<TX_LOCAL_NUM; i++)
 6194   2              {
 6195   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 6196   3                  {
 6197   4                     
 6198   4                      DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 6199   4                  }
 6200   3                      DBG_CAL("\n");  
 6201   3              }
 6202   2              DBG_CAL("\n"); 
 6203   2              for (i=0; i<TX_LOCAL_NUM; i++)
 6204   2              {
 6205   3                  for (j=0; j<RX_LOCAL_NUM; j++)
 6206   3                  {
 6207   4                     
 6208   4                      DBG_CAL("%04x  ",*(T_tempbuf2+ i*RX_LOCAL_NUM + j));
 6209   4                  }
 6210   3                      DBG_CAL("\n");  
 6211   3              }     
 6212   2              ERROR_HOLD;
 6213   2          }
 6214   1          else
 6215   1          {
 6216   2              DBG_CAL("\n\rCal Test CMP is OK!");
 6217   2          }
 6218   1      
 6219   1          DBG_CAL("\nAram-mem");
 6220   1      
 6221   1          for (i=0; i<TX_ARAM_NUM; i++)
 6222   1          {
 6223   2              for (j=0; j<RX_ARAM_NUM; j++)
 6224   2              {
 6225   3                  *(g_pAfeAram + i*RX_ARAM_NUM + j) = (UINT16)rand()>>1;
 6226   3                  *(T_tempbuf2 + i*RX_ARAM_NUM + j) = (UINT16)rand()>>1;            
 6227   3              }
 6228   2          }
 6229   1      #if ARAM_CAL_TEST
               
                   CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                   CalParam.usSrc2Addr = CAL_TEST_A1;//(UINT16)T_tempbuf2;
                   CalParam.usDstAddr  = CAL_TEST_A2;
                   CalParam.ucTxLen    = CAL_ARAM_TX;
                   CalParam.ucRxLen    = CAL_ARAM_RX;  
                   CalParam.usCalCmd   = EX_OP_CMP;
                   CalParam.ucDataType = CMP_CFG_1;//È¡×î´óÖµ
                   CalParam.ucCfg = SIGN_MOD_1;//ÓÐ·ûºÅÊý
                   
                   DrvCal_MatrixCMP(&CalParam);
               
                   g_ucCalFlag = 0;
                   for (i=0; i<CAL_ARAM_TX; i++)
                   {
                       for (j=0; j<CAL_ARAM_RX; j++)
                       {
                           #if 0//È¡×î´óÖµ
                           
                               if((*(g_pAfeAram + i*RX_ARAM_NUM + j)) > (*(T_tempbuf2 + i*RX_ARAM_NUM + j)))
                               {
                                   temp = (*(g_pAfeAram + i*RX_ARAM_NUM + j));
                               }
                               else
                               {
                                   temp = (*(T_tempbuf2 + i*RX_ARAM_NUM + j));
                               }
                               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 232 

                           #else//È¡×îÐ¡Öµ
               
                               if((*(g_pAfeAram + i*RX_ARAM_NUM + j)) < (*(T_tempbuf2 + i*RX_ARAM_NUM + j)))
                               {
                                   temp = (*(g_pAfeAram + i*RX_ARAM_NUM + j));
                               }
                               else
                               {
                                   temp = (*(T_tempbuf2 + i*RX_ARAM_NUM + j));
                               }
                               
                           #endif
                           
                           if (*(T_tempOut + i*RX_ARAM_NUM + j) != temp)
                           {
               
                               DBG_ERROR("\n\rERROR->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_ARAM_NUM + j),temp);
                               g_ucCalFlag = 1;
                           }
                           else
                           {
                               //DBG_CAL_DATA("\n\rOK   ->Cal:%04x,Soft:%04x",*(T_tempOut + i*RX_ARAM_NUM + j),temp);
                           }
                       }
                   }
                   
                   if (g_ucCalFlag)
                   {
                       DBG_CAL("\n\rCal Test CMP is ERROR!");
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                       DBG_CAL("\n"); 
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(T_tempbuf2+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }          
                       ERROR_HOLD;
                   }
                   else
                   {
                       DBG_CAL("\n\rCal Test CMP is OK!");
                   } 
               #endif  
 6313   1      }
*** WARNING C47 IN LINE 6120 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 6314          #else
               #define Test_CAL_CMP()  /##/
               #endif
 6317          
 6318          #if TEST_CAL_MUL3_EN
 6319          /*******************************************************************************
 6320           *   Name: Test_CAL_MaxtixMul_PtoP
 6321           *  Brief: M1 : M*1
 6322           *         M2 :   N*1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 233 

 6323           *         OUT: M*N
 6324           *         Out[i][j] = M1[i][1]*M2[j][1];
 6325           *  Input: ST_CalMcMatrixParam *pMcMP =>
 6326           * Output: None
 6327           * Return: None
 6328           *******************************************************************************/
 6329          BOOLEAN Test_CAL_MaxtixMul_PtoP3()
 6330          {
 6331   1          UINT8 i,j;
 6332   1          UINT8 ucShift;
 6333   1          SINT32 tmp;
 6334   1          BOOLEAN flag;
 6335   1          ST_CalMcMatrixParam XRAM CalParam;
 6336   1          static UINT8 counter = 0;
 6337   1      
 6338   1          DBG_CAL("\n\nTest: Matrix MUL3");
 6339   1          DBG_CAL("\nmem-mem");
 6340   1      
 6341   1          for (i=0; i<TX_LOCAL_NUM; i++)
 6342   1          {
 6343   2              *(T_tempbuf1 + i) = (SINT8)rand()>>1;
 6344   2          }
 6345   1      
 6346   1          for(j = 0; j < RX_LOCAL_NUM; j++)
 6347   1          {
 6348   2              *(T_tempbuf2 +j) = (SINT8)rand()>>1;    
 6349   2          }
 6350   1      
 6351   1          for(i = 0; i<TX_ARAM_NUM;i++)
 6352   1           {
 6353   2              *(g_pAfeAram + i) = (SINT8)rand()>>1;
 6354   2          }       
 6355   1      
 6356   1          if(counter == 16)
 6357   1              counter = 0;
 6358   1          
 6359   1          ucShift = counter;
 6360   1          counter ++;  
 6361   1      
 6362   1      
 6363   1      
 6364   1          //for (ucShift = 0; ucShift < 16; ucShift++)
 6365   1          {
 6366   2              DBG_CAL("\nshift:%d",ucShift);
 6367   2              CalParam.usSrc1Addr = CAL_TEST_A0;
 6368   2              CalParam.usSrc2Addr = CAL_TEST_A1;
 6369   2              CalParam.usDstAddr  = CAL_TEST_A2;
 6370   2              CalParam.ucTxLen    = CAL_TEST_TX;
 6371   2              CalParam.ucRxLen    = CAL_TEST_RX;
 6372   2              CalParam.usCalCmd   = EX_OP_MUL3;
 6373   2              CalParam.ucShift    = ucShift;
 6374   2      
 6375   2              DrvCal_MatrixMul3(&CalParam);
 6376   2      
 6377   2              g_ucCalFlag = 0;
 6378   2             
 6379   2              for (i = 0; i < CAL_TEST_TX; i++)
 6380   2              {
 6381   3                  for (j = 0; j < CAL_TEST_RX; j++)
 6382   3                  {
 6383   4                      tmp = (*(T_tempbuf1 + i)) * (*(T_tempbuf2 + j));
 6384   4                      tmp >>= ucShift;
 6385   4                      if (tmp > 32767)
 6386   4                      {
 6387   5                          tmp = 32767;
 6388   5                      }
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 234 

 6389   4                      else if (tmp < -32768)
 6390   4                      {
 6391   5                          tmp = -32768;
 6392   5                      }
 6393   4                      if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)tmp )
 6394   4                      {
 6395   5                          DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -tmp,i,j);
 6396   5                          g_ucCalFlag = 1;
 6397   5                      }
 6398   4                      else
 6399   4                      {
 6400   5                          //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)t
             -mp,i,j);
 6401   5                      }
 6402   4                  }
 6403   3              }
 6404   2      
 6405   2              if (g_ucCalFlag)
 6406   2              {
 6407   3                  DBG_CAL("\n\rCal MUL3 test %02d is Error!",ucShift);
 6408   3                  DBG_CAL("\n");  
 6409   3                  for (i=0; i<TX_LOCAL_NUM; i++)
 6410   3                  {
 6411   4                      for (j=0; j<1; j++)
 6412   4                      {
 6413   5                         
 6414   5                          DBG_CAL("%04x  ",*(T_tempbuf1+ i*RX_LOCAL_NUM + j));
 6415   5                      }
 6416   4                          DBG_CAL("\n");  
 6417   4                  }
 6418   3                  DBG_CAL("\n"); 
 6419   3                  for (i=0; i<1; i++)
 6420   3                  {
 6421   4                      for (j=0; j<RX_LOCAL_NUM; j++)
 6422   4                      {
 6423   5                         
 6424   5                          DBG_CAL("%04x  ",*(T_tempbuf2+ i*RX_LOCAL_NUM + j));
 6425   5                      }
 6426   4                          DBG_CAL("\n");  
 6427   4                  }             
 6428   3                  ERROR_HOLD;
 6429   3              }
 6430   2              else
 6431   2              {
 6432   3                  DBG_CAL("\n\rCal MUL3  test %02d is OK!",ucShift);
 6433   3              }
 6434   2          }
 6435   1      #if ARAM_CAL_TEST
               
                   DBG_CAL("\nmem-aram");
               
                   //for (ucShift = 0; ucShift < 16; ucShift++)
                   {
                       CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
                       CalParam.usSrc2Addr = CAL_TEST_A1;
                       CalParam.usDstAddr  = CAL_TEST_A2;
                       CalParam.ucTxLen    = CAL_ARAM_TX;
                       CalParam.ucRxLen    = CAL_TEST_RX;
                       CalParam.usCalCmd   = EX_OP_MUL3;
                       CalParam.ucShift    = ucShift;
               
                       DrvCal_MatrixMul3(&CalParam);
               
                       g_ucCalFlag = 0;
                       for (i = 0; i < CAL_ARAM_TX; i++)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 235 

                       {
                           for (j = 0; j < CAL_TEST_RX; j++)
                           {
                               tmp = (*(g_pAfeAram + i)) * (*(T_tempbuf2 + j));
                               tmp >>= ucShift;
                               if (tmp > 32767)
                               {
                                   tmp = 32767;
                               }
                               else if (tmp < -32768)
                               {
                                   tmp = -32768;
                               }
                               if (*(T_tempOut + i*RX_LOCAL_NUM + j) != (SINT16)tmp )
                               {
                                   DBG_ERROR("\n\rERROR->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)
             -tmp,i,j);
                                   g_ucCalFlag = 1;
                               }
                               else
                               {
                                   //DBG_ERROR("\n\rOK->%04x,%04x,%04x,%04x",*(T_tempOut + i*RX_LOCAL_NUM + j),(SINT16)t
             -mp,i,j);
                               }
                           }
                       }
               
                       if (g_ucCalFlag)
                       {
                           DBG_CAL("\n\rCal MUL3 test %02d is Error!",ucShift);
               
                        DBG_CAL("\n");  
                       for (i=0; i<TX_LOCAL_NUM; i++)
                       {
                           for (j=0; j<1; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(g_pAfeAram+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }
                       DBG_CAL("\n"); 
                       for (i=0; i<1; i++)
                       {
                           for (j=0; j<RX_LOCAL_NUM; j++)
                           {
                              
                               DBG_CAL("%04x  ",*(T_tempbuf2+ i*RX_LOCAL_NUM + j));
                           }
                               DBG_CAL("\n");  
                       }            
                           ERROR_HOLD;
                       }
                       else
                       {
                           DBG_CAL("\n\rCal MUL3  test %02d is OK!",ucShift);
                       }
                   }  
               #endif  
 6510   1          return g_ucCalFlag;
 6511   1      }
*** WARNING C47 IN LINE 6334 OF ..\..\src\source\task\Test_CAL.c: 'flag': unreferenced local variable
 6512          #else
               #define Test_CAL_MaxtixMul_PtoP3()  /##/
               #endif
 6515          
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 236 

 6516          
 6517          /******************************************************************************
 6518          *
 6519          *   Name: DrvClearIICState
 6520          *  Brief: ÇåIICÏà¹Ø±êÖ¾
 6521          *  Input:
 6522          * Output:
 6523          * Return:
 6524          *******************************************************************************/
 6525          void DrvClearIICState(void)
 6526          {
 6527   1          /* ÇåI2CÏà¹Øflag */
 6528   1          I2CBUF = 0;
 6529   1          I2CRI  = 0;
 6530   1          I2CTI  = 0;
 6531   1      
 6532   1          /* ÇåI2C STOPÏà¹Øflag */
 6533   1          I2CSTP = 0;
 6534   1          I2C_STOP_IF = 0;
 6535   1          
 6536   1          //I2CWK_STOP = 0;
 6537   1      }
 6538          
 6539          UINT16 XRAM g_ucRawdata[CAL_ARAM_TX][CAL_ARAM_RX] _at_ (0x6000);
 6540          
 6541          /*******************************************************************************
 6542           *   Name: CalAmovAramToMem
 6543           *  Brief:
 6544           *  Input:
 6545           * Output:
 6546           * Return:
 6547           *******************************************************************************/
 6548          void CalAmovAramToMem(void)
 6549          {
 6550   1          UINT8 i,j;
 6551   1          static BOOLEAN flag = 0;
 6552   1          ST_CalMatrixAMov CalParam; 
 6553   1      
 6554   1      
 6555   1          #if 0
                   for (i=0; i<TX_ARAM_NUM; i++)
                   {
                       for (j=0; j<RX_ARAM_NUM; j++)
                       {
                           *(g_pAfeAram + i*RX_ARAM_NUM + j) = rand();
                       }
                   }
                   #endif
 6564   1          CalParam.usSrc1Addr = ARAM_DATA_BASE_ADDR;
 6565   1          CalParam.usDstAddr  = (UINT16)g_ucRawdata;//0x6000;
 6566   1          CalParam.ucS1TxLen  = CAL_ARAM_TX;
 6567   1          CalParam.ucS1RxLen  = CAL_ARAM_RX;
 6568   1      
 6569   1      
 6570   1          DrvCal_MatrixAMov(&CalParam);
 6571   1      
 6572   1          #if 1
 6573   1          //flag = 0;
 6574   1          for (i=0; i<CAL_ARAM_TX; i++)
 6575   1          {
 6576   2              for (j=0; j<CAL_ARAM_RX; j++)
 6577   2              {
 6578   3                  if(g_ucRawdata[i][j]  != *(g_pAfeAram + i*RX_ARAM_NUM + j))
 6579   3                  {
 6580   4                      flag = 1;
 6581   4                      //DBG_ERROR("\n\rERROR->out=%04x,vl=%04x",*((UINT16 *)g_ucRawdata + i*RX_ARAM_NUM + j),*(
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 237 

             -g_pAfeAram + i*RX_ARAM_NUM + j));
 6582   4                  }
 6583   3                  else
 6584   3                  {
 6585   4                      //DBG_CAL("\n\rOK->   out=%04x,vl=%04x",*(g_usRawdata + i*RX_LOCAL_NUM + j),*(g_pAfeAram 
             -+ i*RX_LOCAL_NUM + j));
 6586   4                  }
 6587   3              }
 6588   2          }
 6589   1      
 6590   1          if (flag)
 6591   1          {
 6592   2              DBG_CAL("\nInt Amov Aram to Mem ERROR");
 6593   2          }
 6594   1          else
 6595   1          {
 6596   2              DBG_CAL("\nInt Amov Aram to Mem OK");
 6597   2          }
 6598   1      
 6599   1              if(g_ucCalFlag)
 6600   1              {
 6601   2                      DBG_CAL("\nCAL ERROR");
 6602   2              }
 6603   1          #endif
 6604   1      }
 6605          
 6606          
 6607          /*******************************************************************************
 6608           *   Name: RtcInit
 6609           *  Brief:
 6610           *  Input:
 6611           * Output:
 6612           * Return:
 6613           *******************************************************************************/
 6614          void RtcInit(void)
 6615          {
 6616   1          // 32KÊ±ÖÓÊ¹ÄÜ
 6617   1          CLK_WP = 1;
 6618   1          EN_32K = 1;
 6619   1          RTC_32K_EN = 1;
 6620   1          
 6621   1          // rtc clk enable
 6622   1          RTCCKEN = 1;
 6623   1      
 6624   1          // clear rtc
 6625   1          RTC_WP  = 1;
 6626   1          RTC_CLR = 1;
 6627   1          //DelayMs(100);
 6628   1      
 6629   1          // ÉèÖÃRTC¼ÆÊýÊ±¼ä
 6630   1          RTCIVH  = 0;
 6631   1          RTCIVL  = 32;
 6632   1      
 6633   1          //Normal mode
 6634   1          RTC_AUTO_MODE = 0;
 6635   1          RTCCON1       = 1;
 6636   1      
 6637   1          RTC_INT_EN_CPU = 1;
 6638   1      
 6639   1          IT1   = 0;   
 6640   1          EX1   = 1;       
 6641   1      
 6642   1      }
 6643          
 6644          /*******************************************************************************
 6645           *   Name: RtcInit
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 238 

 6646           *  Brief:
 6647           *  Input:
 6648           * Output:
 6649           * Return:
 6650           *******************************************************************************/
 6651          void LcdIntInit(void)
 6652          {
 6653   1              DrvAsmInterEnable1(2);//lcd run
 6654   1          ES = 1;
 6655   1      }
 6656          
 6657          
 6658          /*******************************************************************************
 6659          *   Name:
 6660          *  Brief:
 6661          *  Input:
 6662          * Output:
 6663          * Return:
 6664          *******************************************************************************/
 6665          void I2cInit(void)
 6666          {
 6667   1          I2CCKEN = 1;
 6668   1      
 6669   1          I2CBUF = 0;
 6670   1          I2CRI  = 0;
 6671   1          I2CTI  = 0;
 6672   1      
 6673   1          /* ÉèÖÃÉè±¸µØÖ· */
 6674   1          I2CADDR = I2C_SLAVE_ADDR&0xFE;
 6675   1      
 6676   1          I2C_STOP_EI = 1;        //Set to enable Additional Interrupt 0
 6677   1          I2C_STOP_IF = 0;
 6678   1      
 6679   1          ET2 = 1;                 //I2C Interrupt Enable
 6680   1          I2C_STOP_EI = 1;         //I2C_STP
 6681   1      }
 6682          
 6683          
 6684          
 6685          
 6686          /*******************************************************************************
 6687          *   Name: DrvIntPriority
 6688          *  Brief:
 6689          *         1.ÖÐ¶ÏÔ´ÓÅÏÈ¼¶
 6690          *         2.×¢Òâ¸ßÓÅÏÈ¼¶ÖÐÓÐµ÷ÓÃcalÖÐ¶Ï£¬ÒªÉèÖÃ±ÈËûµÍµÄÖÐ¶Ï£¬²»ÄÜ´ò¶Ïcal,²»È»»áËÀËø¡£
 6691          *  Input: None
 6692          * Output: None
 6693          * Return: None
 6694          *******************************************************************************/
 6695          void DrvIntPriority(void)
 6696          {
 6697   1          /* ÓÅÏÈ¼¶--ÏÈÇå0 */
 6698   1          IPH0 = 0x00;
 6699   1          IPL0 = 0x00;
 6700   1          AIPH = 0x00;
 6701   1          AIPL = 0x00;
 6702   1      
 6703   1          /* Int0ÓÅÏÈ¼¶ÉèÖÃÎª3---»½ÐÑÒªÇó */
 6704   1          IPHX0 = 1;
 6705   1          IPLX0 = 1;
 6706   1      
 6707   1          /* Í¨ÐÅÓÅÏÈ ÉèÖÃÎª3 */
 6708   1          I2C_IPH = 1;
 6709   1          I2C_IPL = 1;
 6710   1      
 6711   1              SPI0_IPH = 1;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 239 

 6712   1              SPI0_IPL = 1;
 6713   1      
 6714   1          I2C_STOP_IPH = 1;
 6715   1          I2C_STOP_IPL = 1;
 6716   1      
 6717   1              LCD_IPH = 1;
 6718   1              LCD_IPL = 1;
 6719   1      
 6720   1          /* ASMÖÐ¶ÏµÄÓÅÏÈ¼¶µÚ¶þ */
 6721   1          ASM_IPH = 1;
 6722   1          ASM_IPL = 0;
 6723   1      
 6724   1          /* Cnt or Rtc ¼ÆÊýÆ÷ */
 6725   1          IPHX1 = 1;
 6726   1          IPLX1 = 0;
 6727   1      
 6728   1          /* Time0ÓÅÏÈ¼¶ÉèÖÃÎª */
 6729   1          IPHT0 = 0;
 6730   1          IPLT0 = 0;
 6731   1      
 6732   1          /* Time1 */
 6733   1          IPHT1 = 0;
 6734   1          IPLT1 = 0;
 6735   1      
 6736   1      #if _BLK_DBG_EN
 6737   1          /* uartÓÅÏÈ¼¶ÉèÖÃÎª2--µÍÓÅÏÈ¼¶ÖÐ¶ÏÖÐ²»ÄÜÊ¹ÓÃ´®¿Ú */
 6738   1          Uart_IPH = 1;
 6739   1          Uart_IPL = 1;
 6740   1      #endif
 6741   1      }
 6742          
 6743          
 6744          #define PRESCALE_24                       0       // 1:24¸öcycle¼ÆÊýÒ»´Î;0:384¸öcycle¼ÆÊýÒ»´Î
 6745          
 6746          //WDT ¶¨Ê±Êý 110ms¡¢400ms¡¢25.2S
 6747          #define CNT_WDT_MS  6000
 6748          
 6749          #if PRESCALE_24
               #define WDT_MS(n)  ((0x7FFC-(UINT32)(n)*1000/48)&0x00FF) > 0x0080?(((0x7FFC-(UINT32)(n)*1000/48)>>8)+1):(
             -(0x7FFC-(UINT32)(n)*1000/48)>>8)
               #else
 6752          #define WDT_MS(n)  ((0x7FFC-(UINT32)(n)*1000/768)&0x00FF) > 0x0080?(((0x7FFC-(UINT32)(n)*1000/768)>>8)+1)
             -:((0x7FFC-(UINT32)(n)*1000/768)>>8)
 6753          #endif
 6754          
 6755          /*******************************************************************************
 6756          * Name:WDT_Init
 6757          * Input:
 6758          * Output:
 6759          * function:
 6760          *  1.WTDÊ±ÖÓÄ¬ÈÏÎª fclk = 500KHZ¹Ì¶¨£¬Ò»¸öÊ±¼äÖÜÆÚÊÇ2us
 6761          *  2.Òç³öÊ±¼ä (0x7FFC - 0xXX00)*2*12*2us
 6762          *  3.×îÐ¡×î´óÖµ12.096ms(0xFC*2*12*2us)~25.2S(0x7FFC*2*12*2us*16)
 6763          ********************************************************************************/
 6764          void WDT_Init(void)
 6765          {
 6766   1          WDT_500K_EN = 1;    //wdt clk
 6767   1          WDTSTARTEN = 1;     //start en = 1
 6768   1      
 6769   1          /* Ê±ÖÓ¼ÆÊý: Ö»ÅäÖÃ¸ß7Î»£¬µÍ8Î»¹Ì¶¨Îª0 
 6770   1          wdtrel[7]  1: Ã¿384  ¸öcycle  ¼ÆÊýÒ»´Î
 6771   1                     0: Ã¿  24  ¸öcycle  ¼ÆÊýÒ»´Î*/
 6772   1      
 6773   1      #if 0   
                   //WDTREL = 0x5E;//0x77;
                   WDTREL = 0x60;//0x7E;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 240 

                   /* 16±¶·ÖÆµÆ÷Ê¹ÄÜ */
                   WDTREL |= 0x00;
               #else
 6779   1          WDTREL = WDT_MS(CNT_WDT_MS);
 6780   1      #if PRESCALE_24
                   WDTREL &= 0x7F;
               #else
 6783   1          WDTREL |= 0x80;
 6784   1      
 6785   1      #endif
 6786   1      
 6787   1      #endif
 6788   1          WDT  = 1;           //Ë¢ÐÂ¼ÆÊýÆ÷Öµ
 6789   1          SWDT = 1;           //Æô¶¯wdt¼ÆÊý
 6790   1      
 6791   1          WDT_INT_IF = 0;
 6792   1          WDT_INT_EI = 1;
 6793   1      
 6794   1      }
 6795          
 6796          
 6797          /********************************************************************************
 6798          * Name:WDT_Feed
 6799          * Input:
 6800          * Output:
 6801          * function:
 6802          ********************************************************************************/
 6803          void WDT_Feed(void)
 6804          {
 6805   1          WDT  = 1;  //Ë¢ÐÂ¼ÆÊýÆ÷Öµ
 6806   1          SWDT = 1;  //Æô¶¯wtd¼ÆÊý
 6807   1      }
 6808          
 6809          
 6810          /*******************************************************************************
 6811           *   Name: Test_CAL
 6812           *  Brief:
 6813           *  Input:
 6814           * Output:
 6815           * Return:
 6816           *******************************************************************************/
 6817          void Test_CAL(void)
 6818          {
 6819   1          BOOLEAN flag = TRUE;
 6820   1      
 6821   1          UINT16 CALMask =   0;//BITn(0);
 6822   1          UINT16 AmoveMask = 0;//BITn(0);
 6823   1          UINT16 i;
 6824   1      
 6825   1          AFEACKEN = 1;
 6826   1          ARAM_SEL = 1;
 6827   1      
 6828   1          T_tempbuf1 = CAL_TEST_A0;
 6829   1          T_tempbuf2 = CAL_TEST_A1;
 6830   1          T_tempOut  = CAL_TEST_A2;
 6831   1          
 6832   1          T_tempbuf3 = CAL_TEST_PKS;
 6833   1      
 6834   1          DBG_CAL("\n\rStart CalTest!\n\r");
 6835   1          DBG_CAL("\n\rCal-A0:%08lx",T_tempbuf1);
 6836   1          DBG_CAL("\n\rCal-A1:%08lx",T_tempbuf2);
 6837   1          DBG_CAL("\n\rCal-A2:%08lx",T_tempOut);
 6838   1          DBG_CAL("\n\rCal-A3:%08lx",CAL_TEST_PKS);
 6839   1          DBG_CAL("\n\rAram:%08lx",g_pAfeAram);
 6840   1          
 6841   1          DrvClearIICState();
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 241 

 6842   1      
 6843   1              DrvIntPriority();
 6844   1              IEN0 = 0;
 6845   1              AIE = 0;
 6846   1      
 6847   1      #if TEST_RTC_CAL_EN
 6848   1              CALMask |= BITn(2); 
 6849   1              //AmoveMask |=BITn(2);
 6850   1              RtcInit();
 6851   1      #endif
 6852   1      
 6853   1      #if TEST_LCD_CAL_EN
                       CALMask |= BITn(4);
                       AmoveMask |= BITn(4);
                       LcdIntInit();
               #endif
 6858   1      
 6859   1      #if TEST_IIC_CAL_EN
 6860   1              CALMask |= BITn(5);  //IIC
 6861   1              AmoveMask |= BITn(5);//IIC
 6862   1              CALMask |= BITn(8);  //IIC_STOP
 6863   1              AmoveMask |= BITn(8);//IIC_STOP
 6864   1              I2cInit();
 6865   1      #endif
 6866   1      
 6867   1      #if TEST_ASM_CAL_EN
 6868   1              CALMask |= BITn(9);
 6869   1              //AmoveMask |= BITn(9);
 6870   1              Afe_120Hz_Run();
 6871   1      #endif
 6872   1      
 6873   1      #if TEST_SPI0_CAL_INT_EN
                       CALMask |= BITn(11); 
                       AmoveMask |=BITn(11);
                   SPI0CKEN = 1;
                   SPI0CON5 = 0xff;
                   SPI0CON2 = 0x00;
                   SPI0CON3 = 0;
                   SPI0CON4 = 0X00;
                   /* IOÅäÖÃ: P05-->P02  MOSI MISO CLK CS */
                   P0MOD |= BITn(5) + BITn(4)+BITn(3) + BITn(2);
                   P0SEL |= BITn(5) + BITn(4)+BITn(3) + BITn(2);
                   
                   P0DIR |= BITn(4)+BITn(3) + BITn(2);
                   P0DIR &= ~ BITn(5);
                   
                   SPI0_EI = 1;
                   
                   //ÖÐ¶Ï±êÖ¾Ê¹ÄÜ
                   SPI0RI_EN = 1;
                   SPI0TI_EN = 0;
               
                   SPI0_IPH = 1;
                   SPI0_IPL = 1;
               
               #if TEST_SPI0_DMA_INT_EN
               
                   SPI0_32K_EN =1;
                   pSpi0_DmaRegs->dma_ctrl = 0;
                   pSpi0_DmaRegs->timeout_ctrl = 0;
                   pSpi0_DmaRegs->addr_h = (1<<14) + (0<<8) + (0);    //[15:14] dma ram sel.0:aram;1:dram;2:pram. [9:8]r
             -amÆðÊ¼µØÖ·[17:16]bit. [1:0] ram½áÊøµØÖ·[1:0] 
                   pSpi0_DmaRegs->start_addr_l = 0X9000;
                   pSpi0_DmaRegs->end_addr_l = 0x900F;
                   pSpi0_DmaRegs->dma_srcr = 0x000f;
               
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 242 

                   for(i = 0; i < 0x10; i++)
                   {
                       *(UINT8 *)(0x9000 + i) = i;
                   }
                   
               #endif
               #endif
 6914   1          DrvCal_Init(TX_LOCAL_NUM, RX_LOCAL_NUM, CALMask,AmoveMask);
 6915   1      
 6916   1          EA = 1; 
 6917   1      
 6918   1      
 6919   1              P0BUF = 0;
 6920   1              P1BUF = 0;
 6921   1          
 6922   1      while(1)
 6923   1      {
 6924   2      #if 1
 6925   2              P1_4 = !P1_4;
 6926   2      
 6927   2          Test_CAL_MaxtixAdd();
 6928   2              
 6929   2          Test_CAL_MaxtixSub();
 6930   2              
 6931   2          Test_CAL_MaxtixAmp();
 6932   2      
 6933   2          Test_CAL_MaxtixDiv();
 6934   2              
 6935   2          Test_CAL_MaxtixMov();
 6936   2              
 6937   2          Test_CAL_MaxtixMov2();
 6938   2              
 6939   2          Test_CAL_MaxtixCom_1();
 6940   2      
 6941   2          Test_CAL_MaxtixCom_2();
 6942   2              
 6943   2          Test_CAL_MaxtixMul_PtoP1();
 6944   2      
 6945   2          Test_CAL_MaxtixMul_PtoP2();
 6946   2      
 6947   2          Test_CAL_LDS();
 6948   2              
 6949   2          Test_CAL_MDS();
 6950   2              
 6951   2          Test_CAL_CHK();
 6952   2              
 6953   2          Test_CAL_ID();
 6954   2              
 6955   2          Test_CAL_MAC_1();
 6956   2              
 6957   2          Test_CAL_MAC_2();
 6958   2              
 6959   2          Test_CAL_CRC();
 6960   2      
 6961   2          Test_CAL_XORSUM();
 6962   2      
 6963   2          Test_CAL_SearchPeak();
 6964   2      
 6965   2          //À©Õ¹Ëã·¨
 6966   2          //Test_CAL_AMov();
 6967   2      
 6968   2          Test_CAL_AVG_TX();
 6969   2      
 6970   2          Test_CAL_AVG_RX();
 6971   2      
 6972   2          Test_CAL_AVG2_TX();
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 243 

 6973   2      
 6974   2          Test_CAL_AVG2_RX();
 6975   2          //Test_CAL_AVG_ARAM();
 6976   2       
 6977   2          Test_CAL_MIN_TX();
 6978   2              
 6979   2          Test_CAL_MIN_RX();
 6980   2      
 6981   2          Test_CAL_MAX_TX();
 6982   2      
 6983   2          Test_CAL_MAX_RX();
 6984   2      
 6985   2          Test_CAL_Count();
 6986   2      
 6987   2          Test_CAL_SubConst();
 6988   2      
 6989   2          Test_CAL_CMP();
 6990   2      
 6991   2          Test_CAL_MaxtixMul_PtoP3();
 6992   2      #endif  
 6993   2      } 
 6994   1      
 6995   1          AFEACKEN = 0;
 6996   1          ARAM_SEL = 0;
 6997   1          DBG_CAL("\n\r\n\rCAL test End");
 6998   1      
 6999   1          while (1);
 7000   1      }
*** WARNING C47 IN LINE 6823 OF ..\..\src\source\task\Test_CAL.c: 'i': unreferenced local variable
 7001          
 7002          
 7003          
 7004          /*******************************************************************************
 7005           *   Name:
 7006           *  Brief:
 7007           *  Input:
 7008           * Output:
 7009           * Return: INT0ÖÐ¶ÏÏìÓ¦º¯Êý
 7010           *******************************************************************************/
 7011          void Exint0_IRQHandler(void) interrupt 0
 7012          { 
 7013   1      
 7014   1      
 7015   1          #if 0
               
                   RTC_CNT_WKEN = 0;
                   #endif
 7019   1          
 7020   1          DBG_INT("\nint0");
 7021   1      
 7022   1      }
 7023          
 7024          
 7025          /*******************************************************************************
 7026          *   Name:
 7027          *  Brief:
 7028          *  Input:
 7029          * Output:
 7030          * Return: INT1ÖÐ¶ÏÏìÓ¦º¯Êý.
 7031          *******************************************************************************/
 7032          void Exint1_IRQHandler(void) interrupt 2
 7033          {   
 7034   1          //Èç¹ûÊÇÔÚAUTOÄ£Ê½£¬Ôò²»Çårtc£¬·ñÔòÒ»¶¨ÒªÇåRTC£¬²»È»»áÒ»Ö±ÔÚÖÐ¶ÏÖÐ³ö²»È¥
 7035   1              P0_6 = 1;       
 7036   1          while(RTC_START_STA == 0);
 7037   1      #if 0   
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 244 

                       DELAY;
                       if(g_ucCalStartFlag == 1)
                       {
                               WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                       }
               #endif  
 7044   1          RTC_WP  = 1;
 7045   1          RTC_CLR = 1;
 7046   1      
 7047   1              DBG_INT("\nRTC");
 7048   1      
 7049   1      
 7050   1      
 7051   1              RTCIVH = 0;
 7052   1              RTCIVL = (UINT8)rand();
 7053   1              P0_6 = 0;
 7054   1      
 7055   1              //RTC_WP = 1;
 7056   1              //RTC_START = 1;
 7057   1      
 7058   1      }
 7059          
 7060          /*******************************************************************************
 7061          *   Name: ISR_LcdRun
 7062          *  Brief: lcd run
 7063          *  Input: none
 7064          * Output: none
 7065          * Return: none
 7066          *******************************************************************************/
 7067          void ISR_LcdRun_IRQHandler(void) interrupt  4
 7068          {
 7069   1          UINT16 usAsmIntEn0,usAsmIntEn1;
 7070   1          UINT16 usAsmIntFlag0,usAsmIntFlag1;
 7071   1      
 7072   1          usAsmIntEn0   = pAsmRegs->usAsmIntEn0;
 7073   1          usAsmIntEn1   = pAsmRegs->usAsmIntEn1;
 7074   1      
 7075   1          usAsmIntFlag0 = pAsmRegs->usAsmIntFlag0;
 7076   1          usAsmIntFlag1 = pAsmRegs->usAsmIntFlag1;
 7077   1      
 7078   1          /* LCD RUN int */
 7079   1          if (usAsmIntEn1&LCD_RUN_INT1)
 7080   1          {
 7081   2              if (usAsmIntFlag1&LCD_RUN_INT1)
 7082   2              {
 7083   3                  /* lcd_run¼«ÐÔÉèÖÃ 1: ¼ì²â¸ß */
 7084   3                  if(pAsmRegs->usAsmScanCfg1&BITn(15)) 
 7085   3                  {
 7086   4                     pAsmRegs->usAsmScanCfg1&=~(1<<15);     // [15] LCD RUNÖÐ¶ÏµçÆ½Ñ¡Ôñ£¬                      
             -         
 7087   4                     DBG_FLOW("\nRun INTPHAS 1");
 7088   4                  }
 7089   3                  else
 7090   3                  {
 7091   4                     pAsmRegs->usAsmScanCfg1|=(1<<15);     // [15] LCD RUNÖÐ¶ÏµçÆ½Ñ¡Ôñ£¬                       
             -        
 7092   4                     DBG_FLOW("\nRun INTPHAS 2");
 7093   4                  }
 7094   3             
 7095   3                  pAsmRegs->usAsmIntClr1 |=LCD_RUN_INT1;
 7096   3                  //DBG_FLOW("\nLCD RUN int");
 7097   3              }
 7098   2          }
 7099   1      
 7100   1      }
 7101          
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 245 

 7102          /*******************************************************************************
 7103           *   Name:
 7104           *  Brief:
 7105           *  Input:
 7106           * Output:
 7107           * Return: I2CÖÐ¶ÏÏìÓ¦º¯Êý
 7108           *******************************************************************************/
 7109          void I2C_ISR(void) interrupt 5
 7110          {
 7111   1          UINT8 ch = 0;
 7112   1              P0_2 = 1;
 7113   1              P0_4 = 1;
 7114   1          //DBG_INT("\n I2C Init");
 7115   1      
 7116   1          if (RIFLAG)
 7117   1          {
 7118   2      #if 0    
                       DELAY;
                               if(g_ucAmoveStart == 1)
                               {
                                       WAIT_AMOVE_SUSPEND;
                               }       
                               else if(g_ucCalStartFlag == 1)
                               {
                                       WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                               }
               #endif          
 7129   2              RIFLAG = 0;
 7130   2              ch = DATABUFF;
 7131   2              g_I2cCnt++; 
 7132   2      
 7133   2          }
 7134   1          if (TIFLAG)
 7135   1          {
 7136   2      #if 0    
                       DELAY;  
                               if(g_ucAmoveStart == 1)
                               {
                                       WAIT_AMOVE_SUSPEND;
                               }       
                               else if(g_ucCalStartFlag == 1)
                               {
                                       WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                               }
               #endif          
 7147   2              TIFLAG = 0;
 7148   2      
 7149   2          }   
 7150   1              P0_4 = 0;
 7151   1              P0_2 = 0;
 7152   1      }
 7153          
 7154          /*******************************************************************************
 7155           *   Name:
 7156           *  Brief:
 7157           *  Input:
 7158           * Output:
 7159           * Return: I2C STOPÖÐ¶ÏÏìÓ¦º¯Êý
 7160           *******************************************************************************/
 7161          void I2C_STOP_ISR(void) interrupt 8
 7162          {
 7163   1              P0_3 = 1;
 7164   1              P0_5 = 1;
 7165   1      
 7166   1      #if 0   
                       DELAY;
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 246 

                       if(g_ucAmoveStart == 1)
                       {
                               WAIT_AMOVE_SUSPEND;
                       }       
                       else if(g_ucCalStartFlag == 1)
                       {
                               WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                       }
               #endif  
 7177   1          I2CSTP = 0;
 7178   1              P0_3 = 0;
 7179   1              P0_5 =0;
 7180   1      }
 7181          
 7182          /*******************************************************************************
 7183          *   Name: DrvScanCtrl_IRQHandler
 7184          *  Brief: 
 7185          *  Input: 
 7186          * Output: 
 7187          * Return: 
 7188          *******************************************************************************/
 7189          void DrvScanCtrl_IRQHandler(void) interrupt 9
 7190          {
 7191   1          UINT16 usAsmIntEn0,usAsmIntEn1;
 7192   1          UINT16 usAsmIntFlag0,usAsmIntFlag1;
 7193   1      
 7194   1              P1_1 = 1;
 7195   1          usAsmIntEn0   = pAsmRegs->usAsmIntEn0;
 7196   1          usAsmIntEn1   = pAsmRegs->usAsmIntEn1;
 7197   1      
 7198   1          usAsmIntFlag0 = pAsmRegs->usAsmIntFlag0;
 7199   1          usAsmIntFlag1 = pAsmRegs->usAsmIntFlag1;
 7200   1              
 7201   1      
 7202   1          /* aram ready int */
 7203   1          if (usAsmIntEn0&ARAM_READY_INT0)
 7204   1          {
 7205   2              if (usAsmIntFlag0&ARAM_READY_INT0)
 7206   2              {
 7207   3                      P1_3 = 1;
 7208   3      #if 0                   
                               DELAY;
                                       if(g_ucCalStartFlag == 1)
                                       {
                                               WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                                       }
               #endif                  
 7215   3                  pAsmRegs->usAsmIntClr0 |= ARAM_READY_INT0;
 7216   3                              //Test_CAL_AMov();
 7217   3      
 7218   3                              ARAM_SEL = 1;
 7219   3              
 7220   3                              CalAmovAramToMem();
 7221   3                  DrvAsmAramAvail(); // realse aram:  Asm¿ÉÒÔÍùAramÐ´ÏÂÒ»¸ötpÖ¡Êý¾Ý, ´¥·¢AramReadyÖÐ¶Ï
 7222   3                              ARAM_SEL = 0;
 7223   3                              
 7224   3                  DBG_INT("\nint Aram");
 7225   3                              P1_3 = 0;
 7226   3              }
 7227   2          }
 7228   1      
 7229   1        
 7230   1      
 7231   1          /* lcd vstart int */
 7232   1          if (usAsmIntEn0&LCD_VSTART_INT0)
 7233   1          {
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 247 

 7234   2              if (usAsmIntFlag0&LCD_VSTART_INT0)
 7235   2              {
 7236   3                      P1_2 = 1;
 7237   3      #if 0                   
                               DELAY;
                                       if(g_ucCalStartFlag == 1)
                                       {
                                               WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                                       }
               #endif                  
 7244   3                  pAsmRegs->usAsmIntClr0 |= LCD_VSTART_INT0;
 7245   3                  DBG_INT("\nint vstart");
 7246   3                  DrvAsmScanStart();  
 7247   3                              P1_2 = 0;
 7248   3              }
 7249   2          }
 7250   1              P1_1 = 0;
 7251   1      
 7252   1      }
 7253          
 7254          
 7255          
 7256          /*******************************************************************************
 7257          *   Name: SPI0_IRQHandler
 7258          *  Brief:
 7259          *  Input:
 7260          * Output:
 7261          * Return:
 7262          ******************************************************************************/
 7263          void SPI0_IRQHandler(void) interrupt 11
 7264          {
 7265   1          UINT8 ch = 0;  
 7266   1      
 7267   1          DBG_INT("\nSPI0 INT"); 
 7268   1          
 7269   1          if (SPI0RI)
 7270   1          {
 7271   2      #if 0   
                       DELAY;
                               if(g_ucAmoveStart == 1)
                               {
                                       WAIT_AMOVE_SUSPEND;
                               }       
                               else if(g_ucCalStartFlag == 1)
                               {
                                       WATI_CAL_SUSPEND;//µÈµ½suspendÆðÀ´
                               }
               #endif          
 7282   2              SPI0RI_CLR = 1;          //Çå³ýRI±êÖ¾
 7283   2              ch = SPI0BUF;  
 7284   2              
 7285   2              if(SPI0_START)
 7286   2              {        
 7287   3                  SPI0_START_CLR = 1; //Çå³ýSTART±êÖ¾
 7288   3              }
 7289   2      
 7290   2      #if TEST_SPI0_DMA_INT_EN
                       if(ch == 0x01)
                       {
                           pSpi0_DmaRegs->dma_ctrl = 1;//Æô¶¯dma 
                       }
               #endif
 7296   2      
 7297   2          }
 7298   1       
 7299   1          SPI0CON5 =0xff; 
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 248 

 7300   1      }
 7301          
 7302          #endif
 7303          
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 249 

ASSEMBLY LISTING OF GENERATED OBJECT CODE


;       FUNCTION Test_CAL_MaxtixAdd? (BEGIN)
                                                ; SOURCE LINE # 80
000000 CAD8           PUSH     R13
000002 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 81
                                                ; SOURCE LINE # 89
000004 7E140000    R  MOV      WR2,#WORD0 ?SC_4185
000008 7E040000    R  MOV      WR0,#WORD2 ?SC_4185
00000C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 91
000010 7EB30000    R  MOV      R11,counter      ; A=R11
000014 B40402      R  CJNE     A,#04H,$ + 5H    ; A=R11
000017 8003        R  SJMP     $ + 5H
000019 020000      R  LJMP     ?C0001
                                                ; SOURCE LINE # 92
00001C E4             CLR      A                ; A=R11
00001D 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C0001:
                                                ; SOURCE LINE # 94
000021 7EB30000    R  MOV      R11,counter      ; A=R11
000025 7CDB           MOV      R13,R11          ; A=R11
;---- Variable 'shift' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 95
000027 04             INC      A                ; A=R11
000028 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 98
00002C 0A3D           MOVZ     WR6,R13
00002E 7A370000    E  MOV      ?printf??BYTE-2,WR6
000032 7E140000    R  MOV      WR2,#WORD0 ?SC_4175
000036 7E040000    R  MOV      WR0,#WORD2 ?SC_4175
00003A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 99
00003E 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 101
               ?C0011:
000040 6CFF           XRL      R15,R15
               ?C0010:
                                                ; SOURCE LINE # 103
000042 9A000000    E  ECALL    rand??
000046 7D13           MOV      WR2,WR6
000048 0E14           SRA      WR2
00004A 7E7048         MOV      R7,#048H
00004D AC7E           MUL      R7,R14
00004F 7E1002         MOV      R1,#02H
000052 AC1F           MUL      R1,R15
000054 2D03           ADD      WR0,WR6
000056 7E1F0000    R  MOV      DR4,T_tempbuf1
00005A 2D30           ADD      WR6,WR0
00005C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 104
00005F 9A000000    E  ECALL    rand??
000063 7D13           MOV      WR2,WR6
000065 0E14           SRA      WR2
000067 7E7048         MOV      R7,#048H
00006A AC7E           MUL      R7,R14
00006C 7E1002         MOV      R1,#02H
00006F AC1F           MUL      R1,R15
000071 2D03           ADD      WR0,WR6
000073 7E1F0000    R  MOV      DR4,T_tempbuf2
000077 2D30           ADD      WR6,WR0
000079 1B1A10         MOV      @DR4,WR2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 250 

                                                ; SOURCE LINE # 106
00007C 0BF0           INC      R15,#01H
00007E BEF024         CMP      R15,#024H
000081 78BF           JNE      ?C0010
                                                ; SOURCE LINE # 107
000083 0BE0           INC      R14,#01H
000085 BEE012         CMP      R14,#012H
000088 78B6           JNE      ?C0011
                                                ; SOURCE LINE # 108
00008A 7E140000    R  MOV      WR2,#WORD0 ?SC_4164
00008E 7E040000    R  MOV      WR0,#WORD2 ?SC_4164
000092 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 109
000096 7E341000       MOV      WR6,#01000H
00009A 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 110
00009E 7E341510       MOV      WR6,#01510H
0000A2 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 111
0000A6 7E341A20       MOV      WR6,#01A20H
0000AA 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 112
0000AE 7412           MOV      A,#012H          ; A=R11
0000B0 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 113
0000B4 7424           MOV      A,#024H          ; A=R11
0000B6 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 114
0000BA 7AD30000    R  MOV      CalParam+2,R13
                                                ; SOURCE LINE # 115
0000BE 7E340010       MOV      WR6,#010H
0000C2 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 116
0000C6 E4             CLR      A                ; A=R11
0000C7 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 118
0000CB 7E000000    R  MOV      DR0,#WORD0 CalParam
0000CF 9A000000    E  ECALL    DrvCal_MatrixProc?
                                                ; SOURCE LINE # 119
0000D3 E4             CLR      A                ; A=R11
0000D4 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 120
0000D8 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 122
               ?C0021:
0000DA 6CFF           XRL      R15,R15
               ?C0020:
                                                ; SOURCE LINE # 124
0000DC 7E1048         MOV      R1,#048H
0000DF AC1E           MUL      R1,R14
0000E1 7E3002         MOV      R3,#02H
0000E4 AC3F           MUL      R3,R15
0000E6 2D10           ADD      WR2,WR0
0000E8 7E1F0000    R  MOV      DR4,T_tempbuf2
0000EC 2D31           ADD      WR6,WR2
0000EE 0B1A20         MOV      WR4,@DR4
0000F1 7E2F0000    R  MOV      DR8,T_tempbuf1
0000F5 2D51           ADD      WR10,WR2
0000F7 0B2A30         MOV      WR6,@DR8
0000FA 2D32           ADD      WR6,WR4
0000FC 7CBD           MOV      R11,R13          ; A=R11
0000FE 7003        R  JNZ      $ + 5H
000100 020000      R  LJMP     ?C2032
               ?C2031:
000103 0E34           SRA      WR6
000105 14             DEC      A                ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 251 

000106 78FB           JNE      ?C2031
               ?C2032:
000108 1A26           MOVS     WR4,R6
00010A 1A24           MOVS     WR4,R4
00010C 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 125
000110 BE187FFF       CMP      DR4,#07FFFH
000114 1803        R  JSG      $ + 5H
000116 020000      R  LJMP     ?C0022
                                                ; SOURCE LINE # 127
000119 7E187FFF       MOV      DR4,#07FFFH
                                                ; SOURCE LINE # 128
00011D 020000      R  LJMP     ?C2049
               ?C0022:
                                                ; SOURCE LINE # 129
000120 7E1F0000    R  MOV      DR4,temp
000124 BE1C8000       CMP      DR4,#0FFFF8000H
000128 4803        R  JSL      $ + 5H
00012A 020000      R  LJMP     ?C0023
                                                ; SOURCE LINE # 131
00012D 7E188000       MOV      DR4,#08000H
               ?C2049:
000131 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 132
               ?C0023:
                                                ; SOURCE LINE # 133
000135 7E1F0000    R  MOV      DR4,T_tempOut
000139 2D31           ADD      WR6,WR2
00013B 0B1A20         MOV      WR4,@DR4
00013E 7E0F0000    R  MOV      DR0,temp
000142 7D31           MOV      WR6,WR2
000144 BD23           CMP      WR4,WR6
000146 7803        R  JNE      $ + 5H
000148 020000      R  LJMP     ?C0017
                                                ; SOURCE LINE # 135
00014B 7401           MOV      A,#01H           ; A=R11
00014D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 136
000151 7E3024         MOV      R3,#024H
000154 AC3E           MUL      R3,R14
000156 0A0F           MOVZ     WR0,R15
000158 2D10           ADD      WR2,WR0
00015A 7A170000    E  MOV      ?printf??BYTE-2,WR2
00015E 7A270000    E  MOV      ?printf??BYTE-4,WR4
000162 7A370000    E  MOV      ?printf??BYTE-6,WR6
000166 7E140000    R  MOV      WR2,#WORD0 ?SC_4143
00016A 7E040000    R  MOV      WR0,#WORD2 ?SC_4143
00016E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 137
                                                ; SOURCE LINE # 141
                                                ; SOURCE LINE # 142
               ?C0017:
000172 0BF0           INC      R15,#01H
000174 BEF024         CMP      R15,#024H
000177 6803        R  JE       $ + 5H
000179 020000      R  LJMP     ?C0020
                                                ; SOURCE LINE # 143
00017C 0BE0           INC      R14,#01H
00017E BEE012         CMP      R14,#012H
000181 6803        R  JE       $ + 5H
000183 020000      R  LJMP     ?C0021
                                                ; SOURCE LINE # 144
000186 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00018A 7003        R  JNZ      $ + 5H
00018C 020000      R  LJMP     ?C0027
                                                ; SOURCE LINE # 146
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 252 

00018F 7E140000    R  MOV      WR2,#WORD0 ?SC_4119
000193 7E040000    R  MOV      WR0,#WORD2 ?SC_4119
000197 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 148
00019B 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00019F 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0001A3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 149
0001A7 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 151
               ?C0037:
0001A9 6CFF           XRL      R15,R15
               ?C0036:
                                                ; SOURCE LINE # 153
0001AB 7E1048         MOV      R1,#048H
0001AE AC1E           MUL      R1,R14
0001B0 7E3002         MOV      R3,#02H
0001B3 AC3F           MUL      R3,R15
0001B5 2D10           ADD      WR2,WR0
0001B7 7E1F0000    R  MOV      DR4,T_tempbuf1
0001BB 2D31           ADD      WR6,WR2
0001BD 0B1A30         MOV      WR6,@DR4
0001C0 7A370000    E  MOV      ?printf??BYTE-2,WR6
0001C4 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
0001C8 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
0001CC 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 154
0001D0 0BF0           INC      R15,#01H
0001D2 BEF024         CMP      R15,#024H
0001D5 78D4           JNE      ?C0036
                                                ; SOURCE LINE # 155
0001D7 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0001DB 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0001DF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 156
0001E3 0BE0           INC      R14,#01H
0001E5 BEE012         CMP      R14,#012H
0001E8 78BF           JNE      ?C0037
                                                ; SOURCE LINE # 158
0001EA 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0001EE 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0001F2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 159
0001F6 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 161
               ?C0047:
0001F8 6CFF           XRL      R15,R15
               ?C0046:
                                                ; SOURCE LINE # 163
0001FA 7E1048         MOV      R1,#048H
0001FD AC1E           MUL      R1,R14
0001FF 7E3002         MOV      R3,#02H
000202 AC3F           MUL      R3,R15
000204 2D10           ADD      WR2,WR0
000206 7E1F0000    R  MOV      DR4,T_tempbuf2
00020A 2D31           ADD      WR6,WR2
00020C 0B1A30         MOV      WR6,@DR4
00020F 7A370000    E  MOV      ?printf??BYTE-2,WR6
000213 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000217 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
00021B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 164
00021F 0BF0           INC      R15,#01H
000221 BEF024         CMP      R15,#024H
000224 78D4           JNE      ?C0046
                                                ; SOURCE LINE # 165
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 253 

000226 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00022A 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00022E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 166
000232 0BE0           INC      R14,#01H
000234 BEE012         CMP      R14,#012H
000237 78BF           JNE      ?C0047
                                                ; SOURCE LINE # 168
000239 7E340064       MOV      WR6,#064H
00023D 9A000000    E  ECALL    DelayMs?
               ?C0048:
000241 80FE           SJMP     ?C0048
               ?C0027:
                                                ; SOURCE LINE # 172
000243 7E140000    R  MOV      WR2,#WORD0 ?SC_4089
000247 7E040000    R  MOV      WR0,#WORD2 ?SC_4089
00024B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 173
                                                ; SOURCE LINE # 257
00024F 7E730000    R  MOV      R7,g_ucCalFlag
000253 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 258
000256 DA79           POP      WR14
000258 DAD8           POP      R13
00025A AA             ERET     
;       FUNCTION Test_CAL_MaxtixAdd? (END)

;       FUNCTION Test_CAL_MaxtixSub? (BEGIN)
                                                ; SOURCE LINE # 271
00025B CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 272
                                                ; SOURCE LINE # 280
00025D 7E140000    R  MOV      WR2,#WORD0 ?SC_4070
000261 7E040000    R  MOV      WR0,#WORD2 ?SC_4070
000265 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 282
000269 7EB30000    R  MOV      R11,counter      ; A=R11
00026D B40402      R  CJNE     A,#04H,$ + 5H    ; A=R11
000270 8003        R  SJMP     $ + 5H
000272 020000      R  LJMP     ?C0054
                                                ; SOURCE LINE # 283
000275 E4             CLR      A                ; A=R11
000276 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C0054:
                                                ; SOURCE LINE # 285
00027A 7EB30000    R  MOV      R11,counter      ; A=R11
00027E 7AB30000    R  MOV      shift,R11        ; A=R11
                                                ; SOURCE LINE # 286
000282 04             INC      A                ; A=R11
000283 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 290
000287 7E730000    R  MOV      R7,shift
00028B 0A37           MOVZ     WR6,R7
00028D 7A370000    E  MOV      ?printf??BYTE-2,WR6
000291 7E140000    R  MOV      WR2,#WORD0 ?SC_4175
000295 7E040000    R  MOV      WR0,#WORD2 ?SC_4175
000299 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 291
00029D 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 293
               ?C0064:
00029F 6CFF           XRL      R15,R15
               ?C0063:
                                                ; SOURCE LINE # 295
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 254 

0002A1 9A000000    E  ECALL    rand??
0002A5 7D13           MOV      WR2,WR6
0002A7 0E14           SRA      WR2
0002A9 7E1024         MOV      R1,#024H
0002AC AC1E           MUL      R1,R14
0002AE 0A3F           MOVZ     WR6,R15
0002B0 2D03           ADD      WR0,WR6
0002B2 3E04           SLL      WR0
0002B4 7E1F0000    R  MOV      DR4,T_tempbuf1
0002B8 2D30           ADD      WR6,WR0
0002BA 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 296
0002BD 9A000000    E  ECALL    rand??
0002C1 7D13           MOV      WR2,WR6
0002C3 0E14           SRA      WR2
0002C5 7E1024         MOV      R1,#024H
0002C8 AC1E           MUL      R1,R14
0002CA 0A3F           MOVZ     WR6,R15
0002CC 2D03           ADD      WR0,WR6
0002CE 3E04           SLL      WR0
0002D0 7E1F0000    R  MOV      DR4,T_tempbuf2
0002D4 2D30           ADD      WR6,WR0
0002D6 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 298
0002D9 0BF0           INC      R15,#01H
0002DB BEF024         CMP      R15,#024H
0002DE 78C1           JNE      ?C0063
                                                ; SOURCE LINE # 299
0002E0 0BE0           INC      R14,#01H
0002E2 BEE012         CMP      R14,#012H
0002E5 78B8           JNE      ?C0064
                                                ; SOURCE LINE # 301
0002E7 7E140000    R  MOV      WR2,#WORD0 ?SC_4060
0002EB 7E040000    R  MOV      WR0,#WORD2 ?SC_4060
0002EF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 302
0002F3 7E341000       MOV      WR6,#01000H
0002F7 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 303
0002FB 7E341510       MOV      WR6,#01510H
0002FF 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 304
000303 7E341A20       MOV      WR6,#01A20H
000307 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 305
00030B 7412           MOV      A,#012H          ; A=R11
00030D 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 306
000311 7424           MOV      A,#024H          ; A=R11
000313 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 307
000317 7E730000    R  MOV      R7,shift
00031B 7A730000    R  MOV      CalParam+2,R7
                                                ; SOURCE LINE # 308
00031F 6D33           XRL      WR6,WR6
000321 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 309
000325 E4             CLR      A                ; A=R11
000326 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 311
00032A 7E000000    R  MOV      DR0,#WORD0 CalParam
00032E 9A000000    E  ECALL    DrvCal_MatrixProc?
                                                ; SOURCE LINE # 312
000332 E4             CLR      A                ; A=R11
000333 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 313
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 255 

000337 6D66           XRL      WR12,WR12
;---- Variable 'usSubMax' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 314
000339 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 316
               ?C0074:
00033B 6CFF           XRL      R15,R15
               ?C0073:
                                                ; SOURCE LINE # 318
00033D 7E5048         MOV      R5,#048H
000340 AC5E           MUL      R5,R14
000342 7E7002         MOV      R7,#02H
000345 AC7F           MUL      R7,R15
000347 2D32           ADD      WR6,WR4
000349 7E0F0000    R  MOV      DR0,T_tempbuf2
00034D 2D13           ADD      WR2,WR6
00034F 0B0A20         MOV      WR4,@DR0
000352 7E0F0000    R  MOV      DR0,T_tempbuf1
000356 2D13           ADD      WR2,WR6
000358 0B0A30         MOV      WR6,@DR0
00035B 9D32           SUB      WR6,WR4
00035D 7EB30000    R  MOV      R11,shift        ; A=R11
000361 7003        R  JNZ      $ + 5H
000363 020000      R  LJMP     ?C2034
               ?C2033:
000366 0E34           SRA      WR6
000368 14             DEC      A                ; A=R11
000369 78FB           JNE      ?C2033
               ?C2034:
00036B 7A370000    R  MOV      temp,WR6
                                                ; SOURCE LINE # 319
00036F BE347FFF       CMP      WR6,#07FFFH
000373 1803        R  JSG      $ + 5H
000375 020000      R  LJMP     ?C0075
                                                ; SOURCE LINE # 321
000378 7E347FFF       MOV      WR6,#07FFFH
                                                ; SOURCE LINE # 322
00037C 020000      R  LJMP     ?C2050
               ?C0075:
                                                ; SOURCE LINE # 323
00037F 7E370000    R  MOV      WR6,temp
000383 1A26           MOVS     WR4,R6
000385 1A24           MOVS     WR4,R4
000387 BE1C8000       CMP      DR4,#0FFFF8000H
00038B 4803        R  JSL      $ + 5H
00038D 020000      R  LJMP     ?C0076
                                                ; SOURCE LINE # 325
000390 7E348000       MOV      WR6,#08000H
               ?C2050:
000394 7A370000    R  MOV      temp,WR6
                                                ; SOURCE LINE # 326
               ?C0076:
                                                ; SOURCE LINE # 327
000398 7E370000    R  MOV      WR6,temp
00039C 9A000000    E  ECALL    abs??
0003A0 BD36           CMP      WR6,WR12
0003A2 3803        R  JG       $ + 5H
0003A4 020000      R  LJMP     ?C0078
                                                ; SOURCE LINE # 329
0003A7 7E370000    R  MOV      WR6,temp
0003AB 9A000000    E  ECALL    abs??
0003AF 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 330
               ?C0078:
                                                ; SOURCE LINE # 331
0003B1 7E1048         MOV      R1,#048H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 256 

0003B4 AC1E           MUL      R1,R14
0003B6 7E3002         MOV      R3,#02H
0003B9 AC3F           MUL      R3,R15
0003BB 2D10           ADD      WR2,WR0
0003BD 7E1F0000    R  MOV      DR4,T_tempOut
0003C1 2D31           ADD      WR6,WR2
0003C3 0B1A30         MOV      WR6,@DR4
0003C6 BE370000    R  CMP      WR6,temp
0003CA 7803        R  JNE      $ + 5H
0003CC 020000      R  LJMP     ?C0070
                                                ; SOURCE LINE # 333
0003CF 7401           MOV      A,#01H           ; A=R11
0003D1 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 334
0003D5 7E5024         MOV      R5,#024H
0003D8 AC5E           MUL      R5,R14
0003DA 0A1F           MOVZ     WR2,R15
0003DC 2D21           ADD      WR4,WR2
0003DE 7A270000    E  MOV      ?printf??BYTE-2,WR4
0003E2 7A370000    E  MOV      ?printf??BYTE-4,WR6
0003E6 7E370000    R  MOV      WR6,temp
0003EA 7A370000    E  MOV      ?printf??BYTE-6,WR6
0003EE 7E140000    R  MOV      WR2,#WORD0 ?SC_4143
0003F2 7E040000    R  MOV      WR0,#WORD2 ?SC_4143
0003F6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 335
                                                ; SOURCE LINE # 339
                                                ; SOURCE LINE # 340
               ?C0070:
0003FA 0BF0           INC      R15,#01H
0003FC BEF024         CMP      R15,#024H
0003FF 6803        R  JE       $ + 5H
000401 020000      R  LJMP     ?C0073
                                                ; SOURCE LINE # 341
000404 0BE0           INC      R14,#01H
000406 BEE012         CMP      R14,#012H
000409 6803        R  JE       $ + 5H
00040B 020000      R  LJMP     ?C0074
                                                ; SOURCE LINE # 342
00040E 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
000412 7003        R  JNZ      $ + 5H
000414 020000      R  LJMP     ?C0081
                                                ; SOURCE LINE # 344
000417 7E140000    R  MOV      WR2,#WORD0 ?SC_4036
00041B 7E040000    R  MOV      WR0,#WORD2 ?SC_4036
00041F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 345
000423 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000427 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00042B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 346
00042F 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 348
               ?C0091:
000431 6CFF           XRL      R15,R15
               ?C0090:
                                                ; SOURCE LINE # 350
000433 7E1048         MOV      R1,#048H
000436 AC1E           MUL      R1,R14
000438 7E3002         MOV      R3,#02H
00043B AC3F           MUL      R3,R15
00043D 2D10           ADD      WR2,WR0
00043F 7E1F0000    R  MOV      DR4,T_tempbuf1
000443 2D31           ADD      WR6,WR2
000445 0B1A30         MOV      WR6,@DR4
000448 7A370000    E  MOV      ?printf??BYTE-2,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 257 

00044C 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000450 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
000454 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 351
000458 0BF0           INC      R15,#01H
00045A BEF024         CMP      R15,#024H
00045D 78D4           JNE      ?C0090
                                                ; SOURCE LINE # 352
00045F 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000463 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000467 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 353
00046B 0BE0           INC      R14,#01H
00046D BEE012         CMP      R14,#012H
000470 78BF           JNE      ?C0091
                                                ; SOURCE LINE # 355
000472 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000476 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00047A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 356
00047E 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 358
               ?C0101:
000480 6CFF           XRL      R15,R15
               ?C0100:
                                                ; SOURCE LINE # 360
000482 7E1048         MOV      R1,#048H
000485 AC1E           MUL      R1,R14
000487 7E3002         MOV      R3,#02H
00048A AC3F           MUL      R3,R15
00048C 2D10           ADD      WR2,WR0
00048E 7E1F0000    R  MOV      DR4,T_tempbuf2
000492 2D31           ADD      WR6,WR2
000494 0B1A30         MOV      WR6,@DR4
000497 7A370000    E  MOV      ?printf??BYTE-2,WR6
00049B 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
00049F 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
0004A3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 361
0004A7 0BF0           INC      R15,#01H
0004A9 BEF024         CMP      R15,#024H
0004AC 78D4           JNE      ?C0100
                                                ; SOURCE LINE # 362
0004AE 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0004B2 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0004B6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 363
0004BA 0BE0           INC      R14,#01H
0004BC BEE012         CMP      R14,#012H
0004BF 78BF           JNE      ?C0101
                                                ; SOURCE LINE # 366
0004C1 7E340064       MOV      WR6,#064H
0004C5 9A000000    E  ECALL    DelayMs?
               ?C0102:
0004C9 80FE           SJMP     ?C0102
               ?C0081:
                                                ; SOURCE LINE # 370
0004CB 7E140000    R  MOV      WR2,#WORD0 ?SC_4014
0004CF 7E040000    R  MOV      WR0,#WORD2 ?SC_4014
0004D3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 371
                                                ; SOURCE LINE # 374
0004D7 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 376
               ?C0116:
0004D9 6CFF           XRL      R15,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 258 

               ?C0115:
                                                ; SOURCE LINE # 378
0004DB 9A000000    E  ECALL    rand??
0004DF 7D13           MOV      WR2,WR6
0004E1 0E14           SRA      WR2
0004E3 7E1024         MOV      R1,#024H
0004E6 AC1E           MUL      R1,R14
0004E8 0A3F           MOVZ     WR6,R15
0004EA 2D03           ADD      WR0,WR6
0004EC 3E04           SLL      WR0
0004EE 7E1F0000    R  MOV      DR4,T_tempbuf1
0004F2 2D30           ADD      WR6,WR0
0004F4 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 380
0004F7 9A000000    E  ECALL    rand??
0004FB 7D13           MOV      WR2,WR6
0004FD 0E14           SRA      WR2
0004FF 7E1024         MOV      R1,#024H
000502 AC1E           MUL      R1,R14
000504 0A3F           MOVZ     WR6,R15
000506 2D03           ADD      WR0,WR6
000508 3E04           SLL      WR0
00050A 7E1F0000    R  MOV      DR4,g_pAfeAram
00050E 2D30           ADD      WR6,WR0
000510 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 381
000513 0BF0           INC      R15,#01H
000515 BEF024         CMP      R15,#024H
000518 78C1           JNE      ?C0115
                                                ; SOURCE LINE # 382
00051A 0BE0           INC      R14,#01H
00051C BEE012         CMP      R14,#012H
00051F 40B8           JC       ?C0116
                                                ; SOURCE LINE # 467
000521 7E730000    R  MOV      R7,g_ucCalFlag
000525 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 468
000528 DA3B           POP      DR12
00052A AA             ERET     
;       FUNCTION Test_CAL_MaxtixSub? (END)

;       FUNCTION Test_CAL_MaxtixAmp? (BEGIN)
                                                ; SOURCE LINE # 481
00052B CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 482
                                                ; SOURCE LINE # 491
00052D 7E140000    R  MOV      WR2,#WORD0 ?SC_3995
000531 7E040000    R  MOV      WR0,#WORD2 ?SC_3995
000535 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 493
000539 7EB30000    R  MOV      R11,counter      ; A=R11
00053D B41002      R  CJNE     A,#010H,$ + 5H   ; A=R11
000540 8003        R  SJMP     $ + 5H
000542 020000      R  LJMP     ?C0118
                                                ; SOURCE LINE # 494
000545 E4             CLR      A                ; A=R11
000546 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C0118:
                                                ; SOURCE LINE # 496
00054A 7EB30000    R  MOV      R11,counter      ; A=R11
00054E 7AB30000    R  MOV      shift,R11        ; A=R11
                                                ; SOURCE LINE # 497
000552 04             INC      A                ; A=R11
000553 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 501
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 259 

000557 7E730000    R  MOV      R7,shift
00055B 0A37           MOVZ     WR6,R7
00055D 7A370000    E  MOV      ?printf??BYTE-2,WR6
000561 7E140000    R  MOV      WR2,#WORD0 ?SC_3982
000565 7E040000    R  MOV      WR0,#WORD2 ?SC_3982
000569 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 502
00056D 7E64FF9C       MOV      WR12,#0FF9CH
;---- Variable 'mul' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 505
               ?C0128:
000571 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 507
               ?C0133:
000573 6CFF           XRL      R15,R15
               ?C0132:
                                                ; SOURCE LINE # 509
000575 9A000000    E  ECALL    rand??
000579 7D13           MOV      WR2,WR6
00057B 0E14           SRA      WR2
00057D 0E14           SRA      WR2
00057F 0E14           SRA      WR2
000581 0E14           SRA      WR2
000583 7E7048         MOV      R7,#048H
000586 AC7E           MUL      R7,R14
000588 7E1002         MOV      R1,#02H
00058B AC1F           MUL      R1,R15
00058D 2D03           ADD      WR0,WR6
00058F 7E1F0000    R  MOV      DR4,T_tempbuf1
000593 2D30           ADD      WR6,WR0
000595 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 511
000598 0BF0           INC      R15,#01H
00059A BEF024         CMP      R15,#024H
00059D 78D6           JNE      ?C0132
                                                ; SOURCE LINE # 512
00059F 0BE0           INC      R14,#01H
0005A1 BEE012         CMP      R14,#012H
0005A4 78CD           JNE      ?C0133
                                                ; SOURCE LINE # 514
0005A6 7E341000       MOV      WR6,#01000H
0005AA 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 515
0005AE 7E341510       MOV      WR6,#01510H
0005B2 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 516
0005B6 7412           MOV      A,#012H          ; A=R11
0005B8 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 517
0005BC 7424           MOV      A,#024H          ; A=R11
0005BE 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 518
0005C2 7E730000    R  MOV      R7,shift
0005C6 7A730000    R  MOV      CalParam+2,R7
                                                ; SOURCE LINE # 519
0005CA 7E340040       MOV      WR6,#040H
0005CE 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 521
0005D2 7E000000    R  MOV      DR0,#WORD0 CalParam
0005D6 7D36           MOV      WR6,WR12
0005D8 9A000000    E  ECALL    DrvCal_MatrixAmp?
                                                ; SOURCE LINE # 522
0005DC E4             CLR      A                ; A=R11
0005DD 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 523
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 260 

0005E1 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 525
               ?C0143:
0005E3 6CFF           XRL      R15,R15
               ?C0142:
                                                ; SOURCE LINE # 527
0005E5 7E7048         MOV      R7,#048H
0005E8 AC7E           MUL      R7,R14
0005EA 7E9002         MOV      R9,#02H
0005ED AC9F           MUL      R9,R15
0005EF 2D43           ADD      WR8,WR6
0005F1 7E7F0000    R  MOV      DR28,T_tempbuf1
0005F5 7F17           MOV      DR4,DR28
0005F7 2D34           ADD      WR6,WR8
0005F9 0B1A30         MOV      WR6,@DR4
0005FC 1A26           MOVS     WR4,R6
0005FE 1A24           MOVS     WR4,R4
000600 7D16           MOV      WR2,WR12
000602 1A02           MOVS     WR0,R2
000604 1A00           MOVS     WR0,R0
000606 9A000000    E  ECALL    ?C?LMUL?
00060A 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 528
00060E 7EB30000    R  MOV      R11,shift        ; A=R11
000612 7003        R  JNZ      $ + 5H
000614 020000      R  LJMP     ?C2036
               ?C2035:
000617 1E34           SRL      WR6
000619 0E24           SRA      WR4
00061B 5003           JNC      ?C2037
00061D 4E6080         ORL      R6,#080H
               ?C2037:
000620 14             DEC      A                ; A=R11
000621 78F4           JNE      ?C2035
               ?C2036:
000623 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 529
000627 BE187FFF       CMP      DR4,#07FFFH
00062B 1803        R  JSG      $ + 5H
00062D 020000      R  LJMP     ?C0144
                                                ; SOURCE LINE # 531
000630 7E087FFF       MOV      DR0,#07FFFH
000634 7A0F0000    R  MOV      temp,DR0
                                                ; SOURCE LINE # 532
000638 020000      R  LJMP     ?C0145
               ?C0144:
                                                ; SOURCE LINE # 533
00063B BE1C8000       CMP      DR4,#0FFFF8000H
00063F 4803        R  JSL      $ + 5H
000641 020000      R  LJMP     ?C0145
                                                ; SOURCE LINE # 535
000644 7E1C8000       MOV      DR4,#0FFFF8000H
000648 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 536
               ?C0145:
                                                ; SOURCE LINE # 537
00064C 7E1F0000    R  MOV      DR4,T_tempbuf2
000650 2D34           ADD      WR6,WR8
000652 0B1A20         MOV      WR4,@DR4
000655 7E0F0000    R  MOV      DR0,temp
000659 7D31           MOV      WR6,WR2
00065B BD23           CMP      WR4,WR6
00065D 7803        R  JNE      $ + 5H
00065F 020000      R  LJMP     ?C0139
                                                ; SOURCE LINE # 539
000662 7401           MOV      A,#01H           ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 261 

000664 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 540
000668 7A270000    E  MOV      ?printf??BYTE-2,WR4
00066C 7A370000    E  MOV      ?printf??BYTE-4,WR6
000670 7E5048         MOV      R5,#048H
000673 AC5E           MUL      R5,R14
000675 7E7002         MOV      R7,#02H
000678 AC7F           MUL      R7,R15
00067A 2D32           ADD      WR6,WR4
00067C 2D3F           ADD      WR6,WR30
00067E 7D2E           MOV      WR4,WR28
000680 0B1A30         MOV      WR6,@DR4
000683 7A370000    E  MOV      ?printf??BYTE-6,WR6
000687 7E140000    R  MOV      WR2,#WORD0 ?SC_3960
00068B 7E040000    R  MOV      WR0,#WORD2 ?SC_3960
00068F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 541
                                                ; SOURCE LINE # 545
                                                ; SOURCE LINE # 546
               ?C0139:
000693 0BF0           INC      R15,#01H
000695 BEF024         CMP      R15,#024H
000698 6803        R  JE       $ + 5H
00069A 020000      R  LJMP     ?C0142
                                                ; SOURCE LINE # 547
00069D 0BE0           INC      R14,#01H
00069F BEE012         CMP      R14,#012H
0006A2 6803        R  JE       $ + 5H
0006A4 020000      R  LJMP     ?C0143
                                                ; SOURCE LINE # 548
0006A7 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0006AB 7003        R  JNZ      $ + 5H
0006AD 020000      R  LJMP     ?C0119
                                                ; SOURCE LINE # 550
0006B0 7A670000    E  MOV      ?printf??BYTE-2,WR12
0006B4 7E730000    R  MOV      R7,shift
0006B8 0A37           MOVZ     WR6,R7
0006BA 7A370000    E  MOV      ?printf??BYTE-4,WR6
0006BE 7E140000    R  MOV      WR2,#WORD0 ?SC_3938
0006C2 7E040000    R  MOV      WR0,#WORD2 ?SC_3938
0006C6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 551
0006CA 7E140000    R  MOV      WR2,#WORD0 ?SC_3930
0006CE 7E040000    R  MOV      WR0,#WORD2 ?SC_3930
0006D2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 552
0006D6 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0006DA 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0006DE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 553
0006E2 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 555
               ?C0159:
0006E4 6CFF           XRL      R15,R15
               ?C0158:
                                                ; SOURCE LINE # 557
0006E6 7E1048         MOV      R1,#048H
0006E9 AC1E           MUL      R1,R14
0006EB 7E3002         MOV      R3,#02H
0006EE AC3F           MUL      R3,R15
0006F0 2D10           ADD      WR2,WR0
0006F2 7E1F0000    R  MOV      DR4,T_tempbuf1
0006F6 2D31           ADD      WR6,WR2
0006F8 0B1A30         MOV      WR6,@DR4
0006FB 7A370000    E  MOV      ?printf??BYTE-2,WR6
0006FF 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 262 

000703 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
000707 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 558
00070B 0BF0           INC      R15,#01H
00070D BEF024         CMP      R15,#024H
000710 78D4           JNE      ?C0158
                                                ; SOURCE LINE # 559
000712 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000716 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00071A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 560
00071E 0BE0           INC      R14,#01H
000720 BEE012         CMP      R14,#012H
000723 78BF           JNE      ?C0159
                                                ; SOURCE LINE # 562
000725 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000729 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00072D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 563
000731 7E340064       MOV      WR6,#064H
000735 9A000000    E  ECALL    DelayMs?
               ?C0160:
000739 80FE           SJMP     ?C0160
                                                ; SOURCE LINE # 564
               ?C0119:
00073B 0B64           INC      WR12,#01H
00073D BE640064       CMP      WR12,#064H
000741 5803        R  JSGE     $ + 5H
000743 020000      R  LJMP     ?C0128
                                                ; SOURCE LINE # 631
000746 7E140000    R  MOV      WR2,#WORD0 ?SC_3909
00074A 7E040000    R  MOV      WR0,#WORD2 ?SC_3909
00074E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 636
000752 7E730000    R  MOV      R7,g_ucCalFlag
000756 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 637
000759 DA3B           POP      DR12
00075B AA             ERET     
;       FUNCTION Test_CAL_MaxtixAmp? (END)

;       FUNCTION Test_CAL_MaxtixDiv? (BEGIN)
                                                ; SOURCE LINE # 651
00075C CAD8           PUSH     R13
00075E CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 652
                                                ; SOURCE LINE # 659
000760 7E140000    R  MOV      WR2,#WORD0 ?SC_3890
000764 7E040000    R  MOV      WR0,#WORD2 ?SC_3890
000768 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 661
00076C 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 663
               ?C0174:
00076E 6CFF           XRL      R15,R15
               ?C0173:
                                                ; SOURCE LINE # 665
000770 9A000000    E  ECALL    rand??
000774 7D13           MOV      WR2,WR6
000776 7E7048         MOV      R7,#048H
000779 AC7E           MUL      R7,R14
00077B 7E1002         MOV      R1,#02H
00077E AC1F           MUL      R1,R15
000780 2D03           ADD      WR0,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 263 

000782 7E1F0000    R  MOV      DR4,T_tempbuf1
000786 2D30           ADD      WR6,WR0
000788 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 666
00078B 0BF0           INC      R15,#01H
00078D BEF024         CMP      R15,#024H
000790 78DE           JNE      ?C0173
                                                ; SOURCE LINE # 667
000792 0BE0           INC      R14,#01H
000794 BEE012         CMP      R14,#012H
000797 78D5           JNE      ?C0174
                                                ; SOURCE LINE # 669
000799 7ED019         MOV      R13,#019H
;---- Variable 'Div' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 670
00079C 7E341000       MOV      WR6,#01000H
0007A0 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 671
0007A4 7E341510       MOV      WR6,#01510H
0007A8 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 672
0007AC 7412           MOV      A,#012H          ; A=R11
0007AE 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 673
0007B2 7424           MOV      A,#024H          ; A=R11
0007B4 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 674
0007B8 7E3400F0       MOV      WR6,#0F0H
0007BC 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 676
0007C0 7E000000    R  MOV      DR0,#WORD0 CalParam
0007C4 7419           MOV      A,#019H          ; A=R11
0007C6 9A000000    E  ECALL    DrvCal_MatrixDiv?
                                                ; SOURCE LINE # 677
0007CA E4             CLR      A                ; A=R11
0007CB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 678
0007CF 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 680
               ?C0184:
0007D1 6CFF           XRL      R15,R15
               ?C0183:
                                                ; SOURCE LINE # 682
0007D3 7E7048         MOV      R7,#048H
0007D6 AC7E           MUL      R7,R14
0007D8 7E9002         MOV      R9,#02H
0007DB AC9F           MUL      R9,R15
0007DD 2D43           ADD      WR8,WR6
0007DF 7E1F0000    R  MOV      DR4,T_tempbuf1
0007E3 2D34           ADD      WR6,WR8
0007E5 0B1A30         MOV      WR6,@DR4
0007E8 0A2D           MOVZ     WR4,R13
0007EA 9A000000    E  ECALL    ?C?SIDIV?
0007EE 7D23           MOV      WR4,WR6
0007F0 7E0F0000    R  MOV      DR0,T_tempbuf2
0007F4 2D14           ADD      WR2,WR8
0007F6 0B0A30         MOV      WR6,@DR0
0007F9 BD32           CMP      WR6,WR4
0007FB 7803        R  JNE      $ + 5H
0007FD 020000      R  LJMP     ?C0180
                                                ; SOURCE LINE # 684
000800 7401           MOV      A,#01H           ; A=R11
000802 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 685
000806 7E3024         MOV      R3,#024H
000809 AC3E           MUL      R3,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 264 

00080B 0A0F           MOVZ     WR0,R15
00080D 2D10           ADD      WR2,WR0
00080F 7A170000    E  MOV      ?printf??BYTE-2,WR2
000813 7A270000    E  MOV      ?printf??BYTE-4,WR4
000817 7A370000    E  MOV      ?printf??BYTE-6,WR6
00081B 7E140000    R  MOV      WR2,#WORD0 ?SC_3857
00081F 7E040000    R  MOV      WR0,#WORD2 ?SC_3857
000823 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 686
                                                ; SOURCE LINE # 690
                                                ; SOURCE LINE # 691
               ?C0180:
000827 0BF0           INC      R15,#01H
000829 BEF024         CMP      R15,#024H
00082C 78A5           JNE      ?C0183
                                                ; SOURCE LINE # 692
00082E 0BE0           INC      R14,#01H
000830 BEE012         CMP      R14,#012H
000833 789C           JNE      ?C0184
                                                ; SOURCE LINE # 693
000835 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
000839 7003        R  JNZ      $ + 5H
00083B 020000      R  LJMP     ?C0187
                                                ; SOURCE LINE # 695
00083E 7E140000    R  MOV      WR2,#WORD0 ?SC_3829
000842 7E040000    R  MOV      WR0,#WORD2 ?SC_3829
000846 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 696
00084A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00084E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000852 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 697
000856 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 699
               ?C0197:
000858 6CFF           XRL      R15,R15
               ?C0196:
                                                ; SOURCE LINE # 701
00085A 7E1048         MOV      R1,#048H
00085D AC1E           MUL      R1,R14
00085F 7E3002         MOV      R3,#02H
000862 AC3F           MUL      R3,R15
000864 2D10           ADD      WR2,WR0
000866 7E1F0000    R  MOV      DR4,T_tempbuf1
00086A 2D31           ADD      WR6,WR2
00086C 0B1A30         MOV      WR6,@DR4
00086F 7A370000    E  MOV      ?printf??BYTE-2,WR6
000873 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000877 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
00087B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 702
00087F 0BF0           INC      R15,#01H
000881 BEF024         CMP      R15,#024H
000884 78D4           JNE      ?C0196
                                                ; SOURCE LINE # 703
000886 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00088A 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00088E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 704
000892 0BE0           INC      R14,#01H
000894 BEE012         CMP      R14,#012H
000897 78BF           JNE      ?C0197
                                                ; SOURCE LINE # 706
000899 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00089D 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0008A1 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 265 

                                                ; SOURCE LINE # 708
0008A5 7E340064       MOV      WR6,#064H
0008A9 9A000000    E  ECALL    DelayMs?
               ?C0198:
0008AD 80FE           SJMP     ?C0198
               ?C0187:
                                                ; SOURCE LINE # 712
0008AF 7E140000    R  MOV      WR2,#WORD0 ?SC_3804
0008B3 7E040000    R  MOV      WR0,#WORD2 ?SC_3804
0008B7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 713
                                                ; SOURCE LINE # 772
0008BB 7E730000    R  MOV      R7,g_ucCalFlag
0008BF 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 773
0008C2 DA79           POP      WR14
0008C4 DAD8           POP      R13
0008C6 AA             ERET     
;       FUNCTION Test_CAL_MaxtixDiv? (END)

;       FUNCTION Test_CAL_MaxtixMov? (BEGIN)
                                                ; SOURCE LINE # 786
0008C7 CA79           PUSH     WR14
                                                ; SOURCE LINE # 787
                                                ; SOURCE LINE # 789
0008C9 C200        R  CLR      flag
                                                ; SOURCE LINE # 797
0008CB 7E140000    R  MOV      WR2,#WORD0 ?SC_3785
0008CF 7E040000    R  MOV      WR0,#WORD2 ?SC_3785
0008D3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 799
0008D7 6CFF           XRL      R15,R15
;---- Variable 'i' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 801
               ?C0213:
0008D9 6CEE           XRL      R14,R14
;---- Variable 'j' assigned to Register 'R14' ----
               ?C0212:
                                                ; SOURCE LINE # 803
0008DB 9A000000    E  ECALL    rand??
0008DF 7D13           MOV      WR2,WR6
0008E1 7E7048         MOV      R7,#048H
0008E4 AC7F           MUL      R7,R15
0008E6 7E1002         MOV      R1,#02H
0008E9 AC1E           MUL      R1,R14
0008EB 2D03           ADD      WR0,WR6
0008ED 7E1F0000    R  MOV      DR4,T_tempbuf1
0008F1 2D30           ADD      WR6,WR0
0008F3 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 805
0008F6 0BE0           INC      R14,#01H
0008F8 BEE024         CMP      R14,#024H
0008FB 78DE           JNE      ?C0212
                                                ; SOURCE LINE # 806
0008FD 0BF0           INC      R15,#01H
0008FF BEF012         CMP      R15,#012H
000902 78D5           JNE      ?C0213
                                                ; SOURCE LINE # 808
000904 7E140000    R  MOV      WR2,#WORD0 ?SC_3773
000908 7E040000    R  MOV      WR0,#WORD2 ?SC_3773
00090C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 809
000910 7E341000       MOV      WR6,#01000H
000914 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 810
000918 7E341510       MOV      WR6,#01510H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 266 

00091C 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 811
000920 7412           MOV      A,#012H          ; A=R11
000922 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 812
000926 7424           MOV      A,#024H          ; A=R11
000928 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 813
00092C 7E340020       MOV      WR6,#020H
000930 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 814
000934 E4             CLR      A                ; A=R11
000935 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 816
000939 7E000000    R  MOV      DR0,#WORD0 CalParam
00093D 9A000000    E  ECALL    DrvCal_MatrixProc?
                                                ; SOURCE LINE # 817
000941 E4             CLR      A                ; A=R11
000942 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 818
000946 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 820
               ?C0223:
000948 6CEE           XRL      R14,R14
               ?C0222:
                                                ; SOURCE LINE # 822
00094A 7E7048         MOV      R7,#048H
00094D AC7F           MUL      R7,R15
00094F 7E5002         MOV      R5,#02H
000952 AC5E           MUL      R5,R14
000954 2D23           ADD      WR4,WR6
000956 7E0F0000    R  MOV      DR0,T_tempbuf1
00095A 2D12           ADD      WR2,WR4
00095C 0B0A30         MOV      WR6,@DR0
00095F 7E0F0000    R  MOV      DR0,T_tempbuf2
000963 2D12           ADD      WR2,WR4
000965 0B0A20         MOV      WR4,@DR0
000968 BD23           CMP      WR4,WR6
00096A 7803        R  JNE      $ + 5H
00096C 020000      R  LJMP     ?C0219
                                                ; SOURCE LINE # 824
00096F 7401           MOV      A,#01H           ; A=R11
000971 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 825
000975 7A270000    E  MOV      ?printf??BYTE-2,WR4
000979 7A370000    E  MOV      ?printf??BYTE-4,WR6
00097D 7E140000    R  MOV      WR2,#WORD0 ?SC_3754
000981 7E040000    R  MOV      WR0,#WORD2 ?SC_3754
000985 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 826
                                                ; SOURCE LINE # 830
                                                ; SOURCE LINE # 831
               ?C0219:
000989 0BE0           INC      R14,#01H
00098B BEE024         CMP      R14,#024H
00098E 78BA           JNE      ?C0222
                                                ; SOURCE LINE # 832
000990 0BF0           INC      R15,#01H
000992 BEF012         CMP      R15,#012H
000995 78B1           JNE      ?C0223
                                                ; SOURCE LINE # 834
000997 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00099B 7003        R  JNZ      $ + 5H
00099D 020000      R  LJMP     ?C0226
                                                ; SOURCE LINE # 836
0009A0 7E140000    R  MOV      WR2,#WORD0 ?SC_3731
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 267 

0009A4 7E040000    R  MOV      WR0,#WORD2 ?SC_3731
0009A8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 837
0009AC 7E340064       MOV      WR6,#064H
0009B0 9A000000    E  ECALL    DelayMs?
               ?C0227:
0009B4 80FE           SJMP     ?C0227
               ?C0226:
                                                ; SOURCE LINE # 841
0009B6 7E140000    R  MOV      WR2,#WORD0 ?SC_3710
0009BA 7E040000    R  MOV      WR0,#WORD2 ?SC_3710
0009BE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 842
                                                ; SOURCE LINE # 891
0009C2 7E730000    R  MOV      R7,g_ucCalFlag
0009C6 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 892
0009C9 DA79           POP      WR14
0009CB AA             ERET     
;       FUNCTION Test_CAL_MaxtixMov? (END)

;       FUNCTION Test_CAL_MaxtixMov2? (BEGIN)
                                                ; SOURCE LINE # 905
0009CC CA79           PUSH     WR14
                                                ; SOURCE LINE # 906
                                                ; SOURCE LINE # 908
0009CE C200        R  CLR      flag
                                                ; SOURCE LINE # 911
0009D0 7E140000    R  MOV      WR2,#WORD0 ?SC_3690
0009D4 7E040000    R  MOV      WR0,#WORD2 ?SC_3690
0009D8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 912
0009DC 6CFF           XRL      R15,R15
;---- Variable 'i' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 914
               ?C0242:
0009DE 6CEE           XRL      R14,R14
;---- Variable 'j' assigned to Register 'R14' ----
               ?C0241:
                                                ; SOURCE LINE # 916
0009E0 9A000000    E  ECALL    rand??
0009E4 7D13           MOV      WR2,WR6
0009E6 7E7048         MOV      R7,#048H
0009E9 AC7F           MUL      R7,R15
0009EB 7E1002         MOV      R1,#02H
0009EE AC1E           MUL      R1,R14
0009F0 2D03           ADD      WR0,WR6
0009F2 7E1F0000    R  MOV      DR4,T_tempbuf1
0009F6 2D30           ADD      WR6,WR0
0009F8 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 917
0009FB 0BE0           INC      R14,#01H
0009FD BEE024         CMP      R14,#024H
000A00 78DE           JNE      ?C0241
                                                ; SOURCE LINE # 918
000A02 0BF0           INC      R15,#01H
000A04 BEF012         CMP      R15,#012H
000A07 78D5           JNE      ?C0242
                                                ; SOURCE LINE # 920
000A09 7E140000    R  MOV      WR2,#WORD0 ?SC_3677
000A0D 7E040000    R  MOV      WR0,#WORD2 ?SC_3677
000A11 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 921
000A15 7E341000       MOV      WR6,#01000H
000A19 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 922
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 268 

000A1D 7E341510       MOV      WR6,#01510H
000A21 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 923
000A25 7412           MOV      A,#012H          ; A=R11
000A27 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 924
000A2B 7424           MOV      A,#024H          ; A=R11
000A2D 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 925
000A31 7E340020       MOV      WR6,#020H
000A35 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 926
000A39 7401           MOV      A,#01H           ; A=R11
000A3B 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 928
000A3F 7E000000    R  MOV      DR0,#WORD0 CalParam
000A43 9A000000    E  ECALL    DrvCal_MatrixProc?
                                                ; SOURCE LINE # 930
000A47 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 932
               ?C0252:
000A49 6CEE           XRL      R14,R14
               ?C0251:
                                                ; SOURCE LINE # 934
000A4B 7E1048         MOV      R1,#048H
000A4E AC1E           MUL      R1,R14
000A50 7E3002         MOV      R3,#02H
000A53 AC3F           MUL      R3,R15
000A55 2D10           ADD      WR2,WR0
000A57 7E1F0000    R  MOV      DR4,T_tempbuf1
000A5B 2D31           ADD      WR6,WR2
000A5D 0B1A10         MOV      WR2,@DR4
000A60 7E7024         MOV      R7,#024H
000A63 AC7F           MUL      R7,R15
000A65 7E1002         MOV      R1,#02H
000A68 AC1E           MUL      R1,R14
000A6A 2D03           ADD      WR0,WR6
000A6C 7E1F0000    R  MOV      DR4,T_tempOut
000A70 2D30           ADD      WR6,WR0
000A72 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 935
000A75 0BE0           INC      R14,#01H
000A77 BEE012         CMP      R14,#012H
000A7A 78CF           JNE      ?C0251
                                                ; SOURCE LINE # 936
000A7C 0BF0           INC      R15,#01H
000A7E BEF024         CMP      R15,#024H
000A81 78C6           JNE      ?C0252
                                                ; SOURCE LINE # 937
000A83 E4             CLR      A                ; A=R11
000A84 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 939
000A88 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 941
               ?C0262:
000A8A 6CEE           XRL      R14,R14
               ?C0261:
                                                ; SOURCE LINE # 943
000A8C 7E7024         MOV      R7,#024H
000A8F AC7F           MUL      R7,R15
000A91 7E5002         MOV      R5,#02H
000A94 AC5E           MUL      R5,R14
000A96 2D23           ADD      WR4,WR6
000A98 7E0F0000    R  MOV      DR0,T_tempOut
000A9C 2D12           ADD      WR2,WR4
000A9E 0B0A30         MOV      WR6,@DR0
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 269 

000AA1 7E0F0000    R  MOV      DR0,T_tempbuf2
000AA5 2D12           ADD      WR2,WR4
000AA7 0B0A20         MOV      WR4,@DR0
000AAA BD23           CMP      WR4,WR6
000AAC 7803        R  JNE      $ + 5H
000AAE 020000      R  LJMP     ?C0258
                                                ; SOURCE LINE # 945
000AB1 7401           MOV      A,#01H           ; A=R11
000AB3 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 946
000AB7 7A270000    E  MOV      ?printf??BYTE-2,WR4
000ABB 7A370000    E  MOV      ?printf??BYTE-4,WR6
000ABF 7E140000    R  MOV      WR2,#WORD0 ?SC_3754
000AC3 7E040000    R  MOV      WR0,#WORD2 ?SC_3754
000AC7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 947
                                                ; SOURCE LINE # 951
                                                ; SOURCE LINE # 952
               ?C0258:
000ACB 0BE0           INC      R14,#01H
000ACD BEE012         CMP      R14,#012H
000AD0 78BA           JNE      ?C0261
                                                ; SOURCE LINE # 953
000AD2 0BF0           INC      R15,#01H
000AD4 BEF024         CMP      R15,#024H
000AD7 78B1           JNE      ?C0262
                                                ; SOURCE LINE # 954
000AD9 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
000ADD 7003        R  JNZ      $ + 5H
000ADF 020000      R  LJMP     ?C0265
                                                ; SOURCE LINE # 956
000AE2 7E140000    R  MOV      WR2,#WORD0 ?SC_3653
000AE6 7E040000    R  MOV      WR0,#WORD2 ?SC_3653
000AEA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 957
000AEE 7E340064       MOV      WR6,#064H
000AF2 9A000000    E  ECALL    DelayMs?
               ?C0266:
000AF6 80FE           SJMP     ?C0266
               ?C0265:
                                                ; SOURCE LINE # 961
000AF8 7E140000    R  MOV      WR2,#WORD0 ?SC_3631
000AFC 7E040000    R  MOV      WR0,#WORD2 ?SC_3631
000B00 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 962
                                                ; SOURCE LINE # 1020
000B04 7E730000    R  MOV      R7,g_ucCalFlag
000B08 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 1021
000B0B DA79           POP      WR14
000B0D AA             ERET     
;       FUNCTION Test_CAL_MaxtixMov2? (END)

;       FUNCTION Test_CAL_MaxtixMul_PtoP1? (BEGIN)
                                                ; SOURCE LINE # 1037
000B0E CA3B           PUSH     DR12
;---- Variable 'i' assigned to Register 'R15' ----
;---- Variable 'j' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 1038
                                                ; SOURCE LINE # 1046
000B10 7E140000    R  MOV      WR2,#WORD0 ?SC_3609
000B14 7E040000    R  MOV      WR0,#WORD2 ?SC_3609
000B18 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1049
000B1C 7EB30000    R  MOV      R11,counter      ; A=R11
000B20 B41002      R  CJNE     A,#010H,$ + 5H   ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 270 

000B23 8003        R  SJMP     $ + 5H
000B25 020000      R  LJMP     ?C0272
                                                ; SOURCE LINE # 1050
000B28 E4             CLR      A                ; A=R11
000B29 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C0272:
                                                ; SOURCE LINE # 1052
000B2D 7EB30000    R  MOV      R11,counter      ; A=R11
000B31 7AB30000    R  MOV      ucShift,R11      ; A=R11
                                                ; SOURCE LINE # 1053
000B35 04             INC      A                ; A=R11
000B36 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 1055
000B3A 7E140000    R  MOV      WR2,#WORD0 ?SC_3600
000B3E 7E040000    R  MOV      WR0,#WORD2 ?SC_3600
000B42 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1057
000B46 6CFF           XRL      R15,R15
               ?C0276:
                                                ; SOURCE LINE # 1059
000B48 9A000000    E  ECALL    rand??
000B4C 0E70           SRA      R7
000B4E 0E70           SRA      R7
000B50 1A17           MOVS     WR2,R7
000B52 7402           MOV      A,#02H           ; A=R11
000B54 ACBF           MUL      R11,R15          ; A=R11
000B56 7E1F0000    R  MOV      DR4,T_tempbuf1
000B5A 2D35           ADD      WR6,WR10
000B5C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1061
000B5F 0BF0           INC      R15,#01H
000B61 BEF024         CMP      R15,#024H
000B64 78E2           JNE      ?C0276
                                                ; SOURCE LINE # 1062
000B66 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1064
               ?C0287:
000B68 6CEE           XRL      R14,R14
               ?C0286:
                                                ; SOURCE LINE # 1066
000B6A 9A000000    E  ECALL    rand??
000B6E 0E70           SRA      R7
000B70 0E70           SRA      R7
000B72 1A17           MOVS     WR2,R7
000B74 7E7048         MOV      R7,#048H
000B77 AC7F           MUL      R7,R15
000B79 7E1002         MOV      R1,#02H
000B7C AC1E           MUL      R1,R14
000B7E 2D03           ADD      WR0,WR6
000B80 7E1F0000    R  MOV      DR4,T_tempbuf2
000B84 2D30           ADD      WR6,WR0
000B86 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1067
000B89 0BE0           INC      R14,#01H
000B8B BEE024         CMP      R14,#024H
000B8E 78DA           JNE      ?C0286
                                                ; SOURCE LINE # 1069
000B90 0BF0           INC      R15,#01H
000B92 BEF012         CMP      R15,#012H
000B95 78D1           JNE      ?C0287
                                                ; SOURCE LINE # 1073
000B97 7E341000       MOV      WR6,#01000H
000B9B 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1074
000B9F 7E341510       MOV      WR6,#01510H
000BA3 7A370000    R  MOV      CalParam+8,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 271 

                                                ; SOURCE LINE # 1075
000BA7 7E341A20       MOV      WR6,#01A20H
000BAB 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1076
000BAF 7412           MOV      A,#012H          ; A=R11
000BB1 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1077
000BB5 7424           MOV      A,#024H          ; A=R11
000BB7 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1078
000BBB 7E3400E0       MOV      WR6,#0E0H
000BBF 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1079
000BC3 7E730000    R  MOV      R7,ucShift
000BC7 7A730000    R  MOV      CalParam+2,R7
                                                ; SOURCE LINE # 1080
000BCB E4             CLR      A                ; A=R11
000BCC 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 1082
000BD0 C200        E  CLR      ?DrvCal_MatrixMul2??BIT
000BD2 7E000000    R  MOV      DR0,#WORD0 CalParam
000BD6 9A000000    E  ECALL    DrvCal_MatrixMul2?
                                                ; SOURCE LINE # 1085
000BDA E4             CLR      A                ; A=R11
000BDB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1086
000BDF 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1088
               ?C0297:
000BE1 6CEE           XRL      R14,R14
               ?C0296:
                                                ; SOURCE LINE # 1090
000BE3 7E3048         MOV      R3,#048H
000BE6 AC3F           MUL      R3,R15
000BE8 7E7002         MOV      R7,#02H
000BEB AC7E           MUL      R7,R14
000BED 2D13           ADD      WR2,WR6
000BEF 7E2F0000    R  MOV      DR8,T_tempbuf2
000BF3 2D51           ADD      WR10,WR2
000BF5 0B2A20         MOV      WR4,@DR8
000BF8 7E2F0000    R  MOV      DR8,T_tempbuf1
000BFC 2D53           ADD      WR10,WR6
000BFE 0B2A30         MOV      WR6,@DR8
000C01 AD32           MUL      WR6,WR4
000C03 7D63           MOV      WR12,WR6
;---- Variable 'tmp' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 1091
000C05 7EB30000    R  MOV      R11,ucShift      ; A=R11
000C09 7003        R  JNZ      $ + 5H
000C0B 020000      R  LJMP     ?C2039
               ?C2038:
000C0E 0E64           SRA      WR12
000C10 14             DEC      A                ; A=R11
000C11 78FB           JNE      ?C2038
               ?C2039:
                                                ; SOURCE LINE # 1092
000C13 BE647FFF       CMP      WR12,#07FFFH
000C17 1803        R  JSG      $ + 5H
000C19 020000      R  LJMP     ?C0298
                                                ; SOURCE LINE # 1094
000C1C 7E647FFF       MOV      WR12,#07FFFH
                                                ; SOURCE LINE # 1095
000C20 020000      R  LJMP     ?C0299
               ?C0298:
                                                ; SOURCE LINE # 1096
000C23 7D36           MOV      WR6,WR12
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 272 

000C25 1A26           MOVS     WR4,R6
000C27 1A24           MOVS     WR4,R4
000C29 BE1C8000       CMP      DR4,#0FFFF8000H
000C2D 4803        R  JSL      $ + 5H
000C2F 020000      R  LJMP     ?C0299
                                                ; SOURCE LINE # 1098
000C32 7E648000       MOV      WR12,#08000H
                                                ; SOURCE LINE # 1099
               ?C0299:
                                                ; SOURCE LINE # 1100
000C36 7E1F0000    R  MOV      DR4,T_tempOut
000C3A 2D31           ADD      WR6,WR2
000C3C 0B1A30         MOV      WR6,@DR4
000C3F BD36           CMP      WR6,WR12
000C41 7803        R  JNE      $ + 5H
000C43 020000      R  LJMP     ?C0293
                                                ; SOURCE LINE # 1102
000C46 7A370000    E  MOV      ?printf??BYTE-2,WR6
000C4A 7A670000    E  MOV      ?printf??BYTE-4,WR12
000C4E 0A3F           MOVZ     WR6,R15
000C50 7A370000    E  MOV      ?printf??BYTE-6,WR6
000C54 0A3E           MOVZ     WR6,R14
000C56 7A370000    E  MOV      ?printf??BYTE-8,WR6
000C5A 7E140000    R  MOV      WR2,#WORD0 ?SC_3571
000C5E 7E040000    R  MOV      WR0,#WORD2 ?SC_3571
000C62 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1103
000C66 7401           MOV      A,#01H           ; A=R11
000C68 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1104
                                                ; SOURCE LINE # 1108
                                                ; SOURCE LINE # 1109
               ?C0293:
000C6C 0BE0           INC      R14,#01H
000C6E BEE024         CMP      R14,#024H
000C71 6803        R  JE       $ + 5H
000C73 020000      R  LJMP     ?C0296
                                                ; SOURCE LINE # 1110
000C76 0BF0           INC      R15,#01H
000C78 BEF012         CMP      R15,#012H
000C7B 6803        R  JE       $ + 5H
000C7D 020000      R  LJMP     ?C0297
                                                ; SOURCE LINE # 1112
000C80 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
000C84 7003        R  JNZ      $ + 5H
000C86 020000      R  LJMP     ?C0303
                                                ; SOURCE LINE # 1114
000C89 7E730000    R  MOV      R7,ucShift
000C8D 0A37           MOVZ     WR6,R7
000C8F 7A370000    E  MOV      ?printf??BYTE-2,WR6
000C93 7E140000    R  MOV      WR2,#WORD0 ?SC_3537
000C97 7E040000    R  MOV      WR0,#WORD2 ?SC_3537
000C9B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1115
000C9F 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000CA3 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000CA7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1116
000CAB 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1118
000CAD 6CEE           XRL      R14,R14
               ?C0312:
                                                ; SOURCE LINE # 1120
000CAF 7E1048         MOV      R1,#048H
000CB2 AC1F           MUL      R1,R15
000CB4 7E3002         MOV      R3,#02H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 273 

000CB7 AC3E           MUL      R3,R14
000CB9 2D10           ADD      WR2,WR0
000CBB 7E1F0000    R  MOV      DR4,T_tempbuf1
000CBF 2D31           ADD      WR6,WR2
000CC1 0B1A30         MOV      WR6,@DR4
000CC4 7A370000    E  MOV      ?printf??BYTE-2,WR6
000CC8 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000CCC 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
000CD0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1121
000CD4 0BE0           INC      R14,#01H
000CD6 BEE024         CMP      R14,#024H
000CD9 78D4           JNE      ?C0312
                                                ; SOURCE LINE # 1122
000CDB 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000CDF 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000CE3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1123
                                                ; SOURCE LINE # 1125
000CE7 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000CEB 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000CEF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1126
000CF3 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1128
               ?C0323:
000CF5 6CEE           XRL      R14,R14
               ?C0322:
                                                ; SOURCE LINE # 1130
000CF7 7E1048         MOV      R1,#048H
000CFA AC1F           MUL      R1,R15
000CFC 7E3002         MOV      R3,#02H
000CFF AC3E           MUL      R3,R14
000D01 2D10           ADD      WR2,WR0
000D03 7E1F0000    R  MOV      DR4,T_tempbuf2
000D07 2D31           ADD      WR6,WR2
000D09 0B1A30         MOV      WR6,@DR4
000D0C 7A370000    E  MOV      ?printf??BYTE-2,WR6
000D10 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000D14 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
000D18 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1131
000D1C 0BE0           INC      R14,#01H
000D1E BEE024         CMP      R14,#024H
000D21 78D4           JNE      ?C0322
                                                ; SOURCE LINE # 1132
000D23 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000D27 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000D2B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1133
000D2F 0BF0           INC      R15,#01H
000D31 BEF012         CMP      R15,#012H
000D34 78BF           JNE      ?C0323
                                                ; SOURCE LINE # 1135
000D36 7E340064       MOV      WR6,#064H
000D3A 9A000000    E  ECALL    DelayMs?
               ?C0324:
000D3E 80FE           SJMP     ?C0324
               ?C0303:
                                                ; SOURCE LINE # 1139
000D40 7E730000    R  MOV      R7,ucShift
000D44 0A37           MOVZ     WR6,R7
000D46 7A370000    E  MOV      ?printf??BYTE-2,WR6
000D4A 7E140000    R  MOV      WR2,#WORD0 ?SC_3506
000D4E 7E040000    R  MOV      WR0,#WORD2 ?SC_3506
000D52 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 274 

                                                ; SOURCE LINE # 1140
                                                ; SOURCE LINE # 1144
000D56 6CFF           XRL      R15,R15
               ?C0332:
                                                ; SOURCE LINE # 1146
000D58 9A000000    E  ECALL    rand??
000D5C 0E70           SRA      R7
000D5E 0E70           SRA      R7
000D60 1A17           MOVS     WR2,R7
000D62 7402           MOV      A,#02H           ; A=R11
000D64 ACBF           MUL      R11,R15          ; A=R11
000D66 7E1F0000    R  MOV      DR4,T_tempbuf1
000D6A 2D35           ADD      WR6,WR10
000D6C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1148
000D6F 0BF0           INC      R15,#01H
000D71 BEF012         CMP      R15,#012H
000D74 78E2           JNE      ?C0332
                                                ; SOURCE LINE # 1152
000D76 7E341000       MOV      WR6,#01000H
000D7A 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1153
000D7E 7E341510       MOV      WR6,#01510H
000D82 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1154
000D86 7E341A20       MOV      WR6,#01A20H
000D8A 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1155
000D8E 7412           MOV      A,#012H          ; A=R11
000D90 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1156
000D94 7424           MOV      A,#024H          ; A=R11
000D96 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1157
000D9A 7E3400E0       MOV      WR6,#0E0H
000D9E 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1158
000DA2 7E730000    R  MOV      R7,ucShift
000DA6 7A730000    R  MOV      CalParam+2,R7
                                                ; SOURCE LINE # 1159
000DAA 7401           MOV      A,#01H           ; A=R11
000DAC 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 1161
000DB0 C200        E  CLR      ?DrvCal_MatrixMul2??BIT
000DB2 7E000000    R  MOV      DR0,#WORD0 CalParam
000DB6 9A000000    E  ECALL    DrvCal_MatrixMul2?
                                                ; SOURCE LINE # 1164
000DBA E4             CLR      A                ; A=R11
000DBB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1165
000DBF 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1167
               ?C0343:
000DC1 6CEE           XRL      R14,R14
               ?C0342:
                                                ; SOURCE LINE # 1169
000DC3 7E1048         MOV      R1,#048H
000DC6 AC1F           MUL      R1,R15
000DC8 7E3002         MOV      R3,#02H
000DCB AC3E           MUL      R3,R14
000DCD 2D10           ADD      WR2,WR0
000DCF 7E1F0000    R  MOV      DR4,T_tempbuf2
000DD3 2D31           ADD      WR6,WR2
000DD5 0B1A20         MOV      WR4,@DR4
000DD8 7E7002         MOV      R7,#02H
000DDB AC7F           MUL      R7,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 275 

000DDD 7E2F0000    R  MOV      DR8,T_tempbuf1
000DE1 2D53           ADD      WR10,WR6
000DE3 0B2A30         MOV      WR6,@DR8
000DE6 AD32           MUL      WR6,WR4
000DE8 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 1170
000DEA 7EB30000    R  MOV      R11,ucShift      ; A=R11
000DEE 7003        R  JNZ      $ + 5H
000DF0 020000      R  LJMP     ?C2041
               ?C2040:
000DF3 0E64           SRA      WR12
000DF5 14             DEC      A                ; A=R11
000DF6 78FB           JNE      ?C2040
               ?C2041:
                                                ; SOURCE LINE # 1171
000DF8 BE647FFF       CMP      WR12,#07FFFH
000DFC 1803        R  JSG      $ + 5H
000DFE 020000      R  LJMP     ?C0344
                                                ; SOURCE LINE # 1173
000E01 7E647FFF       MOV      WR12,#07FFFH
                                                ; SOURCE LINE # 1174
000E05 020000      R  LJMP     ?C0345
               ?C0344:
                                                ; SOURCE LINE # 1175
000E08 7D36           MOV      WR6,WR12
000E0A 1A26           MOVS     WR4,R6
000E0C 1A24           MOVS     WR4,R4
000E0E BE1C8000       CMP      DR4,#0FFFF8000H
000E12 4803        R  JSL      $ + 5H
000E14 020000      R  LJMP     ?C0345
                                                ; SOURCE LINE # 1177
000E17 7E648000       MOV      WR12,#08000H
                                                ; SOURCE LINE # 1178
               ?C0345:
                                                ; SOURCE LINE # 1179
000E1B 7E1F0000    R  MOV      DR4,T_tempOut
000E1F 2D31           ADD      WR6,WR2
000E21 0B1A30         MOV      WR6,@DR4
000E24 BD36           CMP      WR6,WR12
000E26 7803        R  JNE      $ + 5H
000E28 020000      R  LJMP     ?C0339
                                                ; SOURCE LINE # 1181
000E2B 7A370000    E  MOV      ?printf??BYTE-2,WR6
000E2F 7A670000    E  MOV      ?printf??BYTE-4,WR12
000E33 0A3F           MOVZ     WR6,R15
000E35 7A370000    E  MOV      ?printf??BYTE-6,WR6
000E39 0A3E           MOVZ     WR6,R14
000E3B 7A370000    E  MOV      ?printf??BYTE-8,WR6
000E3F 7E140000    R  MOV      WR2,#WORD0 ?SC_3571
000E43 7E040000    R  MOV      WR0,#WORD2 ?SC_3571
000E47 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1182
000E4B 7401           MOV      A,#01H           ; A=R11
000E4D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1183
                                                ; SOURCE LINE # 1187
                                                ; SOURCE LINE # 1188
               ?C0339:
000E51 0BE0           INC      R14,#01H
000E53 BEE024         CMP      R14,#024H
000E56 6803        R  JE       $ + 5H
000E58 020000      R  LJMP     ?C0342
                                                ; SOURCE LINE # 1189
000E5B 0BF0           INC      R15,#01H
000E5D BEF012         CMP      R15,#012H
000E60 6803        R  JE       $ + 5H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 276 

000E62 020000      R  LJMP     ?C0343
                                                ; SOURCE LINE # 1190
000E65 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
000E69 7003        R  JNZ      $ + 5H
000E6B 020000      R  LJMP     ?C0349
                                                ; SOURCE LINE # 1192
000E6E 7E730000    R  MOV      R7,ucShift
000E72 0A37           MOVZ     WR6,R7
000E74 7A370000    E  MOV      ?printf??BYTE-2,WR6
000E78 7E140000    R  MOV      WR2,#WORD0 ?SC_3472
000E7C 7E040000    R  MOV      WR0,#WORD2 ?SC_3472
000E80 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1193
000E84 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000E88 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000E8C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1194
000E90 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1196
               ?C0359:
000E92 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1198
000E94 7E1048         MOV      R1,#048H
000E97 AC1F           MUL      R1,R15
000E99 7E3002         MOV      R3,#02H
000E9C AC3E           MUL      R3,R14
000E9E 2D10           ADD      WR2,WR0
000EA0 7E1F0000    R  MOV      DR4,T_tempbuf1
000EA4 2D31           ADD      WR6,WR2
000EA6 0B1A30         MOV      WR6,@DR4
000EA9 7A370000    E  MOV      ?printf??BYTE-2,WR6
000EAD 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000EB1 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
000EB5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1199
000EB9 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 1200
000EBB 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000EBF 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000EC3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1201
000EC7 0BF0           INC      R15,#01H
000EC9 BEF012         CMP      R15,#012H
000ECC 78C4           JNE      ?C0359
                                                ; SOURCE LINE # 1203
000ECE 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000ED2 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000ED6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1204
000EDA 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 1206
               ?C0369:
000EDC 6CEE           XRL      R14,R14
               ?C0368:
                                                ; SOURCE LINE # 1208
000EDE 7E1048         MOV      R1,#048H
000EE1 AC1F           MUL      R1,R15
000EE3 7E3002         MOV      R3,#02H
000EE6 AC3E           MUL      R3,R14
000EE8 2D10           ADD      WR2,WR0
000EEA 7E1F0000    R  MOV      DR4,T_tempbuf2
000EEE 2D31           ADD      WR6,WR2
000EF0 0B1A30         MOV      WR6,@DR4
000EF3 7A370000    E  MOV      ?printf??BYTE-2,WR6
000EF7 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
000EFB 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 277 

000EFF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1209
000F03 0BE0           INC      R14,#01H
000F05 BEE024         CMP      R14,#024H
000F08 78D4           JNE      ?C0368
                                                ; SOURCE LINE # 1210
000F0A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
000F0E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
000F12 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1211
000F16 0BF0           INC      R15,#01H
000F18 BEF012         CMP      R15,#012H
000F1B 78BF           JNE      ?C0369
                                                ; SOURCE LINE # 1213
000F1D 7E340064       MOV      WR6,#064H
000F21 9A000000    E  ECALL    DelayMs?
               ?C0370:
000F25 80FE           SJMP     ?C0370
               ?C0349:
                                                ; SOURCE LINE # 1217
000F27 7E730000    R  MOV      R7,ucShift
000F2B 0A37           MOVZ     WR6,R7
000F2D 7A370000    E  MOV      ?printf??BYTE-2,WR6
000F31 7E140000    R  MOV      WR2,#WORD0 ?SC_3441
000F35 7E040000    R  MOV      WR0,#WORD2 ?SC_3441
000F39 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1218
                                                ; SOURCE LINE # 1392
000F3D 7E730000    R  MOV      R7,g_ucCalFlag
000F41 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 1393
000F44 DA3B           POP      DR12
000F46 AA             ERET     
;       FUNCTION Test_CAL_MaxtixMul_PtoP1? (END)

;       FUNCTION Test_CAL_MaxtixMul_PtoP2? (BEGIN)
                                                ; SOURCE LINE # 1409
000F47 CAD8           PUSH     R13
000F49 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'i' assigned to Register 'R14' ----
;---- Variable 'ucShift' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 1410
                                                ; SOURCE LINE # 1418
000F4B 7E140000    R  MOV      WR2,#WORD0 ?SC_3420
000F4F 7E040000    R  MOV      WR0,#WORD2 ?SC_3420
000F53 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1421
000F57 7EB30000    R  MOV      R11,counter      ; A=R11
000F5B B41002      R  CJNE     A,#010H,$ + 5H   ; A=R11
000F5E 8003        R  SJMP     $ + 5H
000F60 020000      R  LJMP     ?C0376
                                                ; SOURCE LINE # 1422
000F63 E4             CLR      A                ; A=R11
000F64 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C0376:
                                                ; SOURCE LINE # 1424
000F68 7EB30000    R  MOV      R11,counter      ; A=R11
000F6C 7CDB           MOV      R13,R11          ; A=R11
                                                ; SOURCE LINE # 1425
000F6E 04             INC      A                ; A=R11
000F6F 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 1429
000F73 7E140000    R  MOV      WR2,#WORD0 ?SC_3411
000F77 7E040000    R  MOV      WR0,#WORD2 ?SC_3411
000F7B 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 278 

                                                ; SOURCE LINE # 1430
000F7F 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1432
               ?C0386:
000F81 6CFF           XRL      R15,R15
               ?C0385:
                                                ; SOURCE LINE # 1434
000F83 9A000000    E  ECALL    rand??
000F87 0E70           SRA      R7
000F89 0E70           SRA      R7
000F8B 1A17           MOVS     WR2,R7
000F8D 7E7048         MOV      R7,#048H
000F90 AC7E           MUL      R7,R14
000F92 7E1002         MOV      R1,#02H
000F95 AC1F           MUL      R1,R15
000F97 2D03           ADD      WR0,WR6
000F99 7E1F0000    R  MOV      DR4,T_tempbuf1
000F9D 2D30           ADD      WR6,WR0
000F9F 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1435
000FA2 9A000000    E  ECALL    rand??
000FA6 0E70           SRA      R7
000FA8 0E70           SRA      R7
000FAA 1A17           MOVS     WR2,R7
000FAC 7E7048         MOV      R7,#048H
000FAF AC7E           MUL      R7,R14
000FB1 7E1002         MOV      R1,#02H
000FB4 AC1F           MUL      R1,R15
000FB6 2D03           ADD      WR0,WR6
000FB8 7E1F0000    R  MOV      DR4,T_tempbuf2
000FBC 2D30           ADD      WR6,WR0
000FBE 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1436
000FC1 0BF0           INC      R15,#01H
000FC3 BEF024         CMP      R15,#024H
000FC6 78BB           JNE      ?C0385
                                                ; SOURCE LINE # 1438
000FC8 0BE0           INC      R14,#01H
000FCA BEE012         CMP      R14,#012H
000FCD 78B2           JNE      ?C0386
                                                ; SOURCE LINE # 1442
000FCF 7E341000       MOV      WR6,#01000H
000FD3 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1443
000FD7 7E341510       MOV      WR6,#01510H
000FDB 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1444
000FDF 7E341A20       MOV      WR6,#01A20H
000FE3 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1445
000FE7 7412           MOV      A,#012H          ; A=R11
000FE9 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1446
000FED 7424           MOV      A,#024H          ; A=R11
000FEF 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1447
000FF3 7E3400E0       MOV      WR6,#0E0H
000FF7 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1448
000FFB 7AD30000    R  MOV      CalParam+2,R13
                                                ; SOURCE LINE # 1450
000FFF D200        E  SETB     ?DrvCal_MatrixMul2??BIT
001001 7E000000    R  MOV      DR0,#WORD0 CalParam
001005 9A000000    E  ECALL    DrvCal_MatrixMul2?
                                                ; SOURCE LINE # 1453
001009 E4             CLR      A                ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 279 

00100A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1454
00100E 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1456
               ?C0396:
001010 6CFF           XRL      R15,R15
               ?C0395:
                                                ; SOURCE LINE # 1458
001012 7E1048         MOV      R1,#048H
001015 AC1E           MUL      R1,R14
001017 7E3002         MOV      R3,#02H
00101A AC3F           MUL      R3,R15
00101C 2D10           ADD      WR2,WR0
00101E 7E1F0000    R  MOV      DR4,T_tempbuf2
001022 2D31           ADD      WR6,WR2
001024 0B1A20         MOV      WR4,@DR4
001027 7E2F0000    R  MOV      DR8,T_tempbuf1
00102B 2D51           ADD      WR10,WR2
00102D 0B2A30         MOV      WR6,@DR8
001030 AD32           MUL      WR6,WR4
001032 7A370000    R  MOV      tmp,WR6
                                                ; SOURCE LINE # 1459
001036 7CBD           MOV      R11,R13          ; A=R11
001038 7D03           MOV      WR0,WR6
00103A 7003        R  JNZ      $ + 5H
00103C 020000      R  LJMP     ?C2043
               ?C2042:
00103F 0E04           SRA      WR0
001041 14             DEC      A                ; A=R11
001042 78FB           JNE      ?C2042
               ?C2043:
001044 7A070000    R  MOV      tmp,WR0
                                                ; SOURCE LINE # 1460
001048 7E370000    R  MOV      WR6,tmp
00104C BE347FFF       CMP      WR6,#07FFFH
001050 1803        R  JSG      $ + 5H
001052 020000      R  LJMP     ?C0397
                                                ; SOURCE LINE # 1462
001055 7E247FFF       MOV      WR4,#07FFFH
001059 7A270000    R  MOV      tmp,WR4
                                                ; SOURCE LINE # 1463
00105D 020000      R  LJMP     ?C0398
               ?C0397:
                                                ; SOURCE LINE # 1464
001060 1A26           MOVS     WR4,R6
001062 1A24           MOVS     WR4,R4
001064 BE1C8000       CMP      DR4,#0FFFF8000H
001068 4803        R  JSL      $ + 5H
00106A 020000      R  LJMP     ?C0398
                                                ; SOURCE LINE # 1466
00106D 7E048000       MOV      WR0,#08000H
001071 7A070000    R  MOV      tmp,WR0
                                                ; SOURCE LINE # 1467
               ?C0398:
                                                ; SOURCE LINE # 1468
001075 7E1F0000    R  MOV      DR4,T_tempOut
001079 2D31           ADD      WR6,WR2
00107B 0B1A30         MOV      WR6,@DR4
00107E BE370000    R  CMP      WR6,tmp
001082 7803        R  JNE      $ + 5H
001084 020000      R  LJMP     ?C0392
                                                ; SOURCE LINE # 1470
001087 7A370000    E  MOV      ?printf??BYTE-2,WR6
00108B 7E370000    R  MOV      WR6,tmp
00108F 7A370000    E  MOV      ?printf??BYTE-4,WR6
001093 7E140000    R  MOV      WR2,#WORD0 ?SC_3754
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 280 

001097 7E040000    R  MOV      WR0,#WORD2 ?SC_3754
00109B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1471
00109F 7401           MOV      A,#01H           ; A=R11
0010A1 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1472
                                                ; SOURCE LINE # 1476
                                                ; SOURCE LINE # 1477
               ?C0392:
0010A5 0BF0           INC      R15,#01H
0010A7 BEF024         CMP      R15,#024H
0010AA 6803        R  JE       $ + 5H
0010AC 020000      R  LJMP     ?C0395
                                                ; SOURCE LINE # 1478
0010AF 0BE0           INC      R14,#01H
0010B1 BEE012         CMP      R14,#012H
0010B4 6803        R  JE       $ + 5H
0010B6 020000      R  LJMP     ?C0396
                                                ; SOURCE LINE # 1479
0010B9 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0010BD 7003        R  JNZ      $ + 5H
0010BF 020000      R  LJMP     ?C0402
                                                ; SOURCE LINE # 1481
0010C2 0A3D           MOVZ     WR6,R13
0010C4 7A370000    E  MOV      ?printf??BYTE-2,WR6
0010C8 7E140000    R  MOV      WR2,#WORD0 ?SC_3382
0010CC 7E040000    R  MOV      WR0,#WORD2 ?SC_3382
0010D0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1482
0010D4 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0010D8 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0010DC 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1483
0010E0 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1485
               ?C0412:
0010E2 6CFF           XRL      R15,R15
               ?C0411:
                                                ; SOURCE LINE # 1487
0010E4 7E1048         MOV      R1,#048H
0010E7 AC1E           MUL      R1,R14
0010E9 7E3002         MOV      R3,#02H
0010EC AC3F           MUL      R3,R15
0010EE 2D10           ADD      WR2,WR0
0010F0 7E1F0000    R  MOV      DR4,T_tempbuf1
0010F4 2D31           ADD      WR6,WR2
0010F6 0B1A30         MOV      WR6,@DR4
0010F9 7A370000    E  MOV      ?printf??BYTE-2,WR6
0010FD 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001101 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001105 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1488
001109 0BF0           INC      R15,#01H
00110B BEF024         CMP      R15,#024H
00110E 78D4           JNE      ?C0411
                                                ; SOURCE LINE # 1489
001110 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001114 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001118 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1490
00111C 0BE0           INC      R14,#01H
00111E BEE012         CMP      R14,#012H
001121 78BF           JNE      ?C0412
                                                ; SOURCE LINE # 1492
001123 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001127 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 281 

00112B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1493
00112F 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1495
               ?C0422:
001131 6CFF           XRL      R15,R15
               ?C0421:
                                                ; SOURCE LINE # 1497
001133 7E1048         MOV      R1,#048H
001136 AC1E           MUL      R1,R14
001138 7E3002         MOV      R3,#02H
00113B AC3F           MUL      R3,R15
00113D 2D10           ADD      WR2,WR0
00113F 7E1F0000    R  MOV      DR4,T_tempbuf2
001143 2D31           ADD      WR6,WR2
001145 0B1A30         MOV      WR6,@DR4
001148 7A370000    E  MOV      ?printf??BYTE-2,WR6
00114C 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001150 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001154 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1498
001158 0BF0           INC      R15,#01H
00115A BEF024         CMP      R15,#024H
00115D 78D4           JNE      ?C0421
                                                ; SOURCE LINE # 1499
00115F 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001163 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001167 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1500
00116B 0BE0           INC      R14,#01H
00116D BEE012         CMP      R14,#012H
001170 78BF           JNE      ?C0422
                                                ; SOURCE LINE # 1502
001172 7E340064       MOV      WR6,#064H
001176 9A000000    E  ECALL    DelayMs?
               ?C0423:
00117A 80FE           SJMP     ?C0423
               ?C0402:
                                                ; SOURCE LINE # 1506
00117C 0A3D           MOVZ     WR6,R13
00117E 7A370000    E  MOV      ?printf??BYTE-2,WR6
001182 7E140000    R  MOV      WR2,#WORD0 ?SC_3356
001186 7E040000    R  MOV      WR0,#WORD2 ?SC_3356
00118A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1507
                                                ; SOURCE LINE # 1593
00118E 7E730000    R  MOV      R7,g_ucCalFlag
001192 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 1594
001195 DA79           POP      WR14
001197 DAD8           POP      R13
001199 AA             ERET     
;       FUNCTION Test_CAL_MaxtixMul_PtoP2? (END)

;       FUNCTION Test_CAL_MaxtixCom_1? (BEGIN)
                                                ; SOURCE LINE # 1608
00119A CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 1609
                                                ; SOURCE LINE # 1612
00119C 7ED032         MOV      R13,#032H
;---- Variable 'step' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 1613
00119F 7EC064         MOV      R12,#064H
;---- Variable 'Threshlod' assigned to Register 'R12' ----
                                                ; SOURCE LINE # 1616
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 282 

0011A2 7E140000    R  MOV      WR2,#WORD0 ?SC_3326
0011A6 7E040000    R  MOV      WR0,#WORD2 ?SC_3326
0011AA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1618
0011AE 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 1620
               ?C0438:
0011B0 6CFF           XRL      R15,R15
               ?C0437:
                                                ; SOURCE LINE # 1622
0011B2 9A000000    E  ECALL    rand??
0011B6 7D13           MOV      WR2,WR6
0011B8 0E14           SRA      WR2
0011BA 7E7048         MOV      R7,#048H
0011BD AC7E           MUL      R7,R14
0011BF 7E1002         MOV      R1,#02H
0011C2 AC1F           MUL      R1,R15
0011C4 2D03           ADD      WR0,WR6
0011C6 7E1F0000    R  MOV      DR4,T_tempbuf1
0011CA 2D30           ADD      WR6,WR0
0011CC 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1623
0011CF 9A000000    E  ECALL    rand??
0011D3 1A16           MOVS     WR2,R6
0011D5 7E7048         MOV      R7,#048H
0011D8 AC7E           MUL      R7,R14
0011DA 7E1002         MOV      R1,#02H
0011DD AC1F           MUL      R1,R15
0011DF 2D03           ADD      WR0,WR6
0011E1 7E1F0000    R  MOV      DR4,T_tempbuf2
0011E5 2D30           ADD      WR6,WR0
0011E7 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1624
0011EA 0BF0           INC      R15,#01H
0011EC BEF024         CMP      R15,#024H
0011EF 78C1           JNE      ?C0437
                                                ; SOURCE LINE # 1626
0011F1 0BE0           INC      R14,#01H
0011F3 BEE012         CMP      R14,#012H
0011F6 78B8           JNE      ?C0438
                                                ; SOURCE LINE # 1628
0011F8 7E341000       MOV      WR6,#01000H
0011FC 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1629
001200 7E341510       MOV      WR6,#01510H
001204 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1630
001208 7E341A20       MOV      WR6,#01A20H
00120C 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1631
001210 7412           MOV      A,#012H          ; A=R11
001212 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1632
001216 7424           MOV      A,#024H          ; A=R11
001218 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1633
00121C 7E340030       MOV      WR6,#030H
001220 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1634
001224 E4             CLR      A                ; A=R11
001225 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 1636
001229 7E000000    R  MOV      DR0,#WORD0 CalParam
00122D 7CBC           MOV      R11,R12          ; A=R11
00122F 7C7D           MOV      R7,R13
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 283 

001231 9A000000    E  ECALL    DrvCal_MatrixCompensation?
                                                ; SOURCE LINE # 1638
001235 E4             CLR      A                ; A=R11
001236 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1639
00123A 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1641
               ?C0448:
00123C 6CFF           XRL      R15,R15
               ?C0447:
                                                ; SOURCE LINE # 1653
00123E 7E7048         MOV      R7,#048H
001241 AC7E           MUL      R7,R14
001243 7E5002         MOV      R5,#02H
001246 AC5F           MUL      R5,R15
001248 2D23           ADD      WR4,WR6
00124A 7E0F0000    R  MOV      DR0,T_tempbuf1
00124E 2D12           ADD      WR2,WR4
001250 0B0A10         MOV      WR2,@DR0
001253 0A3C           MOVZ     WR6,R12
001255 BD13           CMP      WR2,WR6
001257 1803        R  JSG      $ + 5H
001259 020000      R  LJMP     ?C0449
                                                ; SOURCE LINE # 1655
00125C 7E0F0000    R  MOV      DR0,T_tempbuf2
001260 2D12           ADD      WR2,WR4
001262 0B0A30         MOV      WR6,@DR0
001265 0A1D           MOVZ     WR2,R13
001267 2D13           ADD      WR2,WR6
001269 7E2F0000    R  MOV      DR8,T_tempOut
00126D 2D52           ADD      WR10,WR4
00126F 0B2A20         MOV      WR4,@DR8
001272 BD21           CMP      WR4,WR2
001274 7803        R  JNE      $ + 5H
001276 020000      R  LJMP     ?C0444
                                                ; SOURCE LINE # 1657
                                                ; SOURCE LINE # 1658
                                                ; SOURCE LINE # 1659
001279 020000      R  LJMP     ?C2052
                                                ; SOURCE LINE # 1663
                                                ; SOURCE LINE # 1664
               ?C0449:
                                                ; SOURCE LINE # 1665
00127C 7E1048         MOV      R1,#048H
00127F AC1E           MUL      R1,R14
001281 7E3002         MOV      R3,#02H
001284 AC3F           MUL      R3,R15
001286 2D10           ADD      WR2,WR0
001288 7E1F0000    R  MOV      DR4,T_tempbuf1
00128C 2D31           ADD      WR6,WR2
00128E 0B1A20         MOV      WR4,@DR4
001291 0A3C           MOVZ     WR6,R12
001293 6E34FFFF       XRL      WR6,#0FFFFH
001297 0B34           INC      WR6,#01H
001299 BD23           CMP      WR4,WR6
00129B 4803        R  JSL      $ + 5H
00129D 020000      R  LJMP     ?C0453
                                                ; SOURCE LINE # 1667
0012A0 7E1048         MOV      R1,#048H
0012A3 AC1E           MUL      R1,R14
0012A5 7E3002         MOV      R3,#02H
0012A8 AC3F           MUL      R3,R15
0012AA 2D10           ADD      WR2,WR0
0012AC 7E1F0000    R  MOV      DR4,T_tempbuf2
0012B0 2D31           ADD      WR6,WR2
0012B2 0B1A30         MOV      WR6,@DR4
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 284 

0012B5 0A2D           MOVZ     WR4,R13
0012B7 7D13           MOV      WR2,WR6
0012B9 9D12           SUB      WR2,WR4
0012BB 7E1048         MOV      R1,#048H
0012BE AC1E           MUL      R1,R14
0012C0 7E5002         MOV      R5,#02H
0012C3 AC5F           MUL      R5,R15
0012C5 2D20           ADD      WR4,WR0
0012C7 7E2F0000    R  MOV      DR8,T_tempOut
0012CB 2D52           ADD      WR10,WR4
0012CD 0B2A20         MOV      WR4,@DR8
0012D0 BD21           CMP      WR4,WR2
0012D2 7803        R  JNE      $ + 5H
0012D4 020000      R  LJMP     ?C0444
                                                ; SOURCE LINE # 1669
               ?C2051:
                                                ; SOURCE LINE # 1670
                                                ; SOURCE LINE # 1671
0012D7 020000      R  LJMP     ?C2052
                                                ; SOURCE LINE # 1675
                                                ; SOURCE LINE # 1676
               ?C0453:
                                                ; SOURCE LINE # 1679
0012DA 7E1048         MOV      R1,#048H
0012DD AC1E           MUL      R1,R14
0012DF 7E3002         MOV      R3,#02H
0012E2 AC3F           MUL      R3,R15
0012E4 2D10           ADD      WR2,WR0
0012E6 7E1F0000    R  MOV      DR4,T_tempbuf2
0012EA 2D31           ADD      WR6,WR2
0012EC 0B1A30         MOV      WR6,@DR4
0012EF 7E3048         MOV      R3,#048H
0012F2 AC3E           MUL      R3,R14
0012F4 7E5002         MOV      R5,#02H
0012F7 AC5F           MUL      R5,R15
0012F9 2D21           ADD      WR4,WR2
0012FB 7E0F0000    R  MOV      DR0,T_tempOut
0012FF 2D12           ADD      WR2,WR4
001301 0B0A20         MOV      WR4,@DR0
001304 BD23           CMP      WR4,WR6
001306 7803        R  JNE      $ + 5H
001308 020000      R  LJMP     ?C0444
                                                ; SOURCE LINE # 1681
               ?C2052:
00130B 7401           MOV      A,#01H           ; A=R11
00130D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1682
001311 7A270000    E  MOV      ?printf??BYTE-2,WR4
001315 7A370000    E  MOV      ?printf??BYTE-4,WR6
001319 0A3D           MOVZ     WR6,R13
00131B 7A370000    E  MOV      ?printf??BYTE-6,WR6
00131F 7E140000    R  MOV      WR2,#WORD0 ?SC_3288
001323 7E040000    R  MOV      WR0,#WORD2 ?SC_3288
001327 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1683
                                                ; SOURCE LINE # 1687
                                                ; SOURCE LINE # 1688
                                                ; SOURCE LINE # 1690
               ?C0444:
00132B 0BF0           INC      R15,#01H
00132D BEF024         CMP      R15,#024H
001330 6803        R  JE       $ + 5H
001332 020000      R  LJMP     ?C0447
                                                ; SOURCE LINE # 1691
001335 0BE0           INC      R14,#01H
001337 BEE012         CMP      R14,#012H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 285 

00133A 6803        R  JE       $ + 5H
00133C 020000      R  LJMP     ?C0448
                                                ; SOURCE LINE # 1693
00133F 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
001343 7003        R  JNZ      $ + 5H
001345 020000      R  LJMP     ?C0459
                                                ; SOURCE LINE # 1695
001348 7E140000    R  MOV      WR2,#WORD0 ?SC_3261
00134C 7E040000    R  MOV      WR0,#WORD2 ?SC_3261
001350 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1697
001354 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001358 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00135C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1698
001360 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1700
               ?C0469:
001362 6CFF           XRL      R15,R15
               ?C0468:
                                                ; SOURCE LINE # 1702
001364 7E1048         MOV      R1,#048H
001367 AC1E           MUL      R1,R14
001369 7E3002         MOV      R3,#02H
00136C AC3F           MUL      R3,R15
00136E 2D10           ADD      WR2,WR0
001370 7E1F0000    R  MOV      DR4,T_tempbuf1
001374 2D31           ADD      WR6,WR2
001376 0B1A30         MOV      WR6,@DR4
001379 7A370000    E  MOV      ?printf??BYTE-2,WR6
00137D 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001381 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001385 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1703
001389 0BF0           INC      R15,#01H
00138B BEF024         CMP      R15,#024H
00138E 78D4           JNE      ?C0468
                                                ; SOURCE LINE # 1704
001390 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001394 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001398 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1705
00139C 0BE0           INC      R14,#01H
00139E BEE012         CMP      R14,#012H
0013A1 78BF           JNE      ?C0469
                                                ; SOURCE LINE # 1707
0013A3 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0013A7 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0013AB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1708
0013AF 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1710
               ?C0479:
0013B1 6CFF           XRL      R15,R15
               ?C0478:
                                                ; SOURCE LINE # 1712
0013B3 7E1048         MOV      R1,#048H
0013B6 AC1E           MUL      R1,R14
0013B8 7E3002         MOV      R3,#02H
0013BB AC3F           MUL      R3,R15
0013BD 2D10           ADD      WR2,WR0
0013BF 7E1F0000    R  MOV      DR4,T_tempbuf2
0013C3 2D31           ADD      WR6,WR2
0013C5 0B1A30         MOV      WR6,@DR4
0013C8 7A370000    E  MOV      ?printf??BYTE-2,WR6
0013CC 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 286 

0013D0 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
0013D4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1713
0013D8 0BF0           INC      R15,#01H
0013DA BEF024         CMP      R15,#024H
0013DD 78D4           JNE      ?C0478
                                                ; SOURCE LINE # 1714
0013DF 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0013E3 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0013E7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1715
0013EB 0BE0           INC      R14,#01H
0013ED BEE012         CMP      R14,#012H
0013F0 78BF           JNE      ?C0479
                                                ; SOURCE LINE # 1718
0013F2 7E340064       MOV      WR6,#064H
0013F6 9A000000    E  ECALL    DelayMs?
               ?C0480:
0013FA 80FE           SJMP     ?C0480
               ?C0459:
                                                ; SOURCE LINE # 1722
0013FC 7E140000    R  MOV      WR2,#WORD0 ?SC_3237
001400 7E040000    R  MOV      WR0,#WORD2 ?SC_3237
001404 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1723
                                                ; SOURCE LINE # 1725
001408 7E730000    R  MOV      R7,g_ucCalFlag
00140C 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 1726
00140F DA3B           POP      DR12
001411 AA             ERET     
;       FUNCTION Test_CAL_MaxtixCom_1? (END)

;       FUNCTION Test_CAL_MaxtixCom_2? (BEGIN)
                                                ; SOURCE LINE # 1740
001412 CAD8           PUSH     R13
001414 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 1741
                                                ; SOURCE LINE # 1745
                                                ; SOURCE LINE # 1746
001416 7ED064         MOV      R13,#064H
;---- Variable 'Threshlod' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 1749
001419 7E140000    R  MOV      WR2,#WORD0 ?SC_3205
00141D 7E040000    R  MOV      WR0,#WORD2 ?SC_3205
001421 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1750
001425 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 1752
               ?C0495:
001427 6CFF           XRL      R15,R15
               ?C0494:
                                                ; SOURCE LINE # 1754
001429 9A000000    E  ECALL    rand??
00142D 7D13           MOV      WR2,WR6
00142F 0E14           SRA      WR2
001431 7E7048         MOV      R7,#048H
001434 AC7E           MUL      R7,R14
001436 7E1002         MOV      R1,#02H
001439 AC1F           MUL      R1,R15
00143B 2D03           ADD      WR0,WR6
00143D 7E1F0000    R  MOV      DR4,T_tempbuf1
001441 2D30           ADD      WR6,WR0
001443 1B1A10         MOV      @DR4,WR2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 287 

                                                ; SOURCE LINE # 1755
001446 0BF0           INC      R15,#01H
001448 BEF024         CMP      R15,#024H
00144B 78DC           JNE      ?C0494
                                                ; SOURCE LINE # 1756
00144D 0BE0           INC      R14,#01H
00144F BEE012         CMP      R14,#012H
001452 78D3           JNE      ?C0495
                                                ; SOURCE LINE # 1757
001454 6CEE           XRL      R14,R14
               ?C0499:
                                                ; SOURCE LINE # 1759
001456 9A000000    E  ECALL    rand??
00145A 1A16           MOVS     WR2,R6
00145C 7402           MOV      A,#02H           ; A=R11
00145E ACBE           MUL      R11,R14          ; A=R11
001460 7E1F0000    R  MOV      DR4,T_tempbuf2
001464 2D35           ADD      WR6,WR10
001466 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1760
001469 0BE0           INC      R14,#01H
00146B BEE012         CMP      R14,#012H
00146E 78E6           JNE      ?C0499
                                                ; SOURCE LINE # 1761
                                                ; SOURCE LINE # 1762
001470 7E341000       MOV      WR6,#01000H
001474 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1763
001478 7E341510       MOV      WR6,#01510H
00147C 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1764
001480 7E341A20       MOV      WR6,#01A20H
001484 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1765
001488 7412           MOV      A,#012H          ; A=R11
00148A 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1766
00148E 7424           MOV      A,#024H          ; A=R11
001490 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1767
001494 7E340030       MOV      WR6,#030H
001498 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1768
00149C 7401           MOV      A,#01H           ; A=R11
00149E 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 1770
0014A2 7E000000    R  MOV      DR0,#WORD0 CalParam
0014A6 7CBD           MOV      R11,R13          ; A=R11
0014A8 6C77           XRL      R7,R7
0014AA 9A000000    E  ECALL    DrvCal_MatrixCompensation?
                                                ; SOURCE LINE # 1772
0014AE E4             CLR      A                ; A=R11
0014AF 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1773
0014B3 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1775
               ?C0510:
0014B5 6CFF           XRL      R15,R15
               ?C0509:
                                                ; SOURCE LINE # 1786
0014B7 7E7048         MOV      R7,#048H
0014BA AC7E           MUL      R7,R14
0014BC 7E5002         MOV      R5,#02H
0014BF AC5F           MUL      R5,R15
0014C1 2D23           ADD      WR4,WR6
0014C3 7E0F0000    R  MOV      DR0,T_tempbuf1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 288 

0014C7 2D12           ADD      WR2,WR4
0014C9 0B0A30         MOV      WR6,@DR0
0014CC 0A1D           MOVZ     WR2,R13
0014CE BD31           CMP      WR6,WR2
0014D0 1803        R  JSG      $ + 5H
0014D2 020000      R  LJMP     ?C0511
                                                ; SOURCE LINE # 1788
0014D5 7402           MOV      A,#02H           ; A=R11
0014D7 ACBE           MUL      R11,R14          ; A=R11
0014D9 7E0F0000    R  MOV      DR0,T_tempbuf2
0014DD 2D15           ADD      WR2,WR10
0014DF 0B0A10         MOV      WR2,@DR0
0014E2 9D31           SUB      WR6,WR2
0014E4 7E0F0000    R  MOV      DR0,T_tempOut
0014E8 2D12           ADD      WR2,WR4
0014EA 0B0A20         MOV      WR4,@DR0
0014ED BD23           CMP      WR4,WR6
0014EF 7803        R  JNE      $ + 5H
0014F1 020000      R  LJMP     ?C0506
                                                ; SOURCE LINE # 1790
0014F4 7401           MOV      A,#01H           ; A=R11
0014F6 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1791
0014FA 7A270000    E  MOV      ?printf??BYTE-2,WR4
0014FE 7A370000    E  MOV      ?printf??BYTE-4,WR6
001502 0A3E           MOVZ     WR6,R14
001504 7A370000    E  MOV      ?printf??BYTE-6,WR6
001508 7E140000    R  MOV      WR2,#WORD0 ?SC_3176
00150C 7E040000    R  MOV      WR0,#WORD2 ?SC_3176
                                                ; SOURCE LINE # 1792
001510 020000      R  LJMP     ?C2054
               ?C0511:
                                                ; SOURCE LINE # 1794
001513 7E1048         MOV      R1,#048H
001516 AC1E           MUL      R1,R14
001518 7E3002         MOV      R3,#02H
00151B AC3F           MUL      R3,R15
00151D 2D10           ADD      WR2,WR0
00151F 7E1F0000    R  MOV      DR4,T_tempbuf1
001523 2D31           ADD      WR6,WR2
001525 0B1A20         MOV      WR4,@DR4
001528 0A3D           MOVZ     WR6,R13
00152A 6E34FFFF       XRL      WR6,#0FFFFH
00152E 0B34           INC      WR6,#01H
001530 BD23           CMP      WR4,WR6
001532 4803        R  JSL      $ + 5H
001534 020000      R  LJMP     ?C0514
                                                ; SOURCE LINE # 1796
001537 7E1048         MOV      R1,#048H
00153A AC1E           MUL      R1,R14
00153C 7E3002         MOV      R3,#02H
00153F AC3F           MUL      R3,R15
001541 2D10           ADD      WR2,WR0
001543 7E1F0000    R  MOV      DR4,T_tempbuf1
001547 2D31           ADD      WR6,WR2
001549 0B1A10         MOV      WR2,@DR4
00154C 7402           MOV      A,#02H           ; A=R11
00154E ACBE           MUL      R11,R14          ; A=R11
001550 7E1F0000    R  MOV      DR4,T_tempbuf2
001554 2D35           ADD      WR6,WR10
001556 0B1A20         MOV      WR4,@DR4
001559 2D12           ADD      WR2,WR4
00155B 7E1048         MOV      R1,#048H
00155E AC1E           MUL      R1,R14
001560 7E7002         MOV      R7,#02H
001563 AC7F           MUL      R7,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 289 

001565 2D30           ADD      WR6,WR0
001567 7E2F0000    R  MOV      DR8,T_tempOut
00156B 2D53           ADD      WR10,WR6
00156D 0B2A30         MOV      WR6,@DR8
001570 BD31           CMP      WR6,WR2
001572 7803        R  JNE      $ + 5H
001574 020000      R  LJMP     ?C0506
                                                ; SOURCE LINE # 1798
001577 7401           MOV      A,#01H           ; A=R11
001579 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1799
00157D 7A370000    E  MOV      ?printf??BYTE-2,WR6
001581 7E3048         MOV      R3,#048H
001584 AC3E           MUL      R3,R14
001586 7E7002         MOV      R7,#02H
001589 AC7F           MUL      R7,R15
00158B 2D31           ADD      WR6,WR2
00158D 7E0F0000    R  MOV      DR0,T_tempbuf1
001591 2D13           ADD      WR2,WR6
001593 0B0A30         MOV      WR6,@DR0
001596 9D32           SUB      WR6,WR4
001598 7A370000    E  MOV      ?printf??BYTE-4,WR6
00159C 0A3E           MOVZ     WR6,R14
00159E 7A370000    E  MOV      ?printf??BYTE-6,WR6
0015A2 7E140000    R  MOV      WR2,#WORD0 ?SC_3147
0015A6 7E040000    R  MOV      WR0,#WORD2 ?SC_3147
                                                ; SOURCE LINE # 1800
0015AA 020000      R  LJMP     ?C2054
                                                ; SOURCE LINE # 1804
                                                ; SOURCE LINE # 1805
               ?C0514:
                                                ; SOURCE LINE # 1809
0015AD 7E1048         MOV      R1,#048H
0015B0 AC1E           MUL      R1,R14
0015B2 7E3002         MOV      R3,#02H
0015B5 AC3F           MUL      R3,R15
0015B7 2D10           ADD      WR2,WR0
0015B9 7E1F0000    R  MOV      DR4,T_tempbuf1
0015BD 2D31           ADD      WR6,WR2
0015BF 0B1A20         MOV      WR4,@DR4
0015C2 7E3048         MOV      R3,#048H
0015C5 AC3E           MUL      R3,R14
0015C7 7E7002         MOV      R7,#02H
0015CA AC7F           MUL      R7,R15
0015CC 2D31           ADD      WR6,WR2
0015CE 7E0F0000    R  MOV      DR0,T_tempOut
0015D2 2D13           ADD      WR2,WR6
0015D4 0B0A30         MOV      WR6,@DR0
0015D7 BD32           CMP      WR6,WR4
0015D9 7803        R  JNE      $ + 5H
0015DB 020000      R  LJMP     ?C0506
                                                ; SOURCE LINE # 1811
0015DE 7401           MOV      A,#01H           ; A=R11
0015E0 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1812
0015E4 7A370000    E  MOV      ?printf??BYTE-2,WR6
0015E8 7E1048         MOV      R1,#048H
0015EB AC1E           MUL      R1,R14
0015ED 7E3002         MOV      R3,#02H
0015F0 AC3F           MUL      R3,R15
0015F2 2D10           ADD      WR2,WR0
0015F4 7E1F0000    R  MOV      DR4,T_tempbuf1
0015F8 2D31           ADD      WR6,WR2
0015FA 0B1A30         MOV      WR6,@DR4
0015FD 7402           MOV      A,#02H           ; A=R11
0015FF ACBE           MUL      R11,R14          ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 290 

001601 7E0F0000    R  MOV      DR0,T_tempbuf2
001605 2D15           ADD      WR2,WR10
001607 0B0A20         MOV      WR4,@DR0
00160A 9D32           SUB      WR6,WR4
00160C 7A370000    E  MOV      ?printf??BYTE-4,WR6
001610 0A3E           MOVZ     WR6,R14
001612 7A370000    E  MOV      ?printf??BYTE-6,WR6
001616 7E140000    R  MOV      WR2,#WORD0 ?SC_3118
00161A 7E040000    R  MOV      WR0,#WORD2 ?SC_3118
               ?C2054:
00161E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1813
                                                ; SOURCE LINE # 1817
                                                ; SOURCE LINE # 1818
                                                ; SOURCE LINE # 1820
               ?C0506:
001622 0BF0           INC      R15,#01H
001624 BEF024         CMP      R15,#024H
001627 6803        R  JE       $ + 5H
001629 020000      R  LJMP     ?C0509
                                                ; SOURCE LINE # 1821
00162C 0BE0           INC      R14,#01H
00162E BEE012         CMP      R14,#012H
001631 6803        R  JE       $ + 5H
001633 020000      R  LJMP     ?C0510
                                                ; SOURCE LINE # 1823
001636 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00163A 7003        R  JNZ      $ + 5H
00163C 020000      R  LJMP     ?C0520
                                                ; SOURCE LINE # 1825
00163F 7E140000    R  MOV      WR2,#WORD0 ?SC_3089
001643 7E040000    R  MOV      WR0,#WORD2 ?SC_3089
001647 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1827
00164B 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00164F 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001653 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1828
001657 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1830
               ?C0530:
001659 6CFF           XRL      R15,R15
               ?C0529:
                                                ; SOURCE LINE # 1832
00165B 7E1048         MOV      R1,#048H
00165E AC1E           MUL      R1,R14
001660 7E3002         MOV      R3,#02H
001663 AC3F           MUL      R3,R15
001665 2D10           ADD      WR2,WR0
001667 7E1F0000    R  MOV      DR4,T_tempbuf1
00166B 2D31           ADD      WR6,WR2
00166D 0B1A30         MOV      WR6,@DR4
001670 7A370000    E  MOV      ?printf??BYTE-2,WR6
001674 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001678 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
00167C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1833
001680 0BF0           INC      R15,#01H
001682 BEF024         CMP      R15,#024H
001685 78D4           JNE      ?C0529
                                                ; SOURCE LINE # 1834
001687 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00168B 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00168F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1835
001693 0BE0           INC      R14,#01H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 291 

001695 BEE012         CMP      R14,#012H
001698 78BF           JNE      ?C0530
                                                ; SOURCE LINE # 1837
00169A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00169E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0016A2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1838
0016A6 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1840
               ?C0540:
0016A8 6CFF           XRL      R15,R15
               ?C0539:
                                                ; SOURCE LINE # 1842
0016AA 7E1048         MOV      R1,#048H
0016AD AC1E           MUL      R1,R14
0016AF 7E3002         MOV      R3,#02H
0016B2 AC3F           MUL      R3,R15
0016B4 2D10           ADD      WR2,WR0
0016B6 7E1F0000    R  MOV      DR4,T_tempbuf2
0016BA 2D31           ADD      WR6,WR2
0016BC 0B1A30         MOV      WR6,@DR4
0016BF 7A370000    E  MOV      ?printf??BYTE-2,WR6
0016C3 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
0016C7 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
0016CB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1843
0016CF 0BF0           INC      R15,#01H
0016D1 BEF024         CMP      R15,#024H
0016D4 78D4           JNE      ?C0539
                                                ; SOURCE LINE # 1844
0016D6 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0016DA 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0016DE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1845
0016E2 0BE0           INC      R14,#01H
0016E4 BEE012         CMP      R14,#012H
0016E7 78BF           JNE      ?C0540
                                                ; SOURCE LINE # 1847
0016E9 7E340064       MOV      WR6,#064H
0016ED 9A000000    E  ECALL    DelayMs?
               ?C0541:
0016F1 80FE           SJMP     ?C0541
               ?C0520:
                                                ; SOURCE LINE # 1851
0016F3 7E140000    R  MOV      WR2,#WORD0 ?SC_3063
0016F7 7E040000    R  MOV      WR0,#WORD2 ?SC_3063
0016FB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1852
                                                ; SOURCE LINE # 1855
0016FF 7E140000    R  MOV      WR2,#WORD0 ?SC_3030
001703 7E040000    R  MOV      WR0,#WORD2 ?SC_3030
001707 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1856
00170B 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1858
               ?C0555:
00170D 6CFF           XRL      R15,R15
               ?C0554:
                                                ; SOURCE LINE # 1860
00170F 9A000000    E  ECALL    rand??
001713 7D13           MOV      WR2,WR6
001715 0E14           SRA      WR2
001717 7E7048         MOV      R7,#048H
00171A AC7E           MUL      R7,R14
00171C 7E1002         MOV      R1,#02H
00171F AC1F           MUL      R1,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 292 

001721 2D03           ADD      WR0,WR6
001723 7E1F0000    R  MOV      DR4,T_tempbuf1
001727 2D30           ADD      WR6,WR0
001729 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1861
00172C 0BF0           INC      R15,#01H
00172E BEF024         CMP      R15,#024H
001731 78DC           JNE      ?C0554
                                                ; SOURCE LINE # 1862
001733 0BE0           INC      R14,#01H
001735 BEE012         CMP      R14,#012H
001738 78D3           JNE      ?C0555
                                                ; SOURCE LINE # 1863
00173A 6CEE           XRL      R14,R14
               ?C0559:
                                                ; SOURCE LINE # 1865
00173C 0A1E           MOVZ     WR2,R14
00173E 2E140014       ADD      WR2,#014H
001742 7402           MOV      A,#02H           ; A=R11
001744 ACBE           MUL      R11,R14          ; A=R11
001746 7E1F0000    R  MOV      DR4,T_tempbuf2
00174A 2D35           ADD      WR6,WR10
00174C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1866
00174F 0BE0           INC      R14,#01H
001751 BEE024         CMP      R14,#024H
001754 78E6           JNE      ?C0559
                                                ; SOURCE LINE # 1868
001756 7E341000       MOV      WR6,#01000H
00175A 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1869
00175E 7E341510       MOV      WR6,#01510H
001762 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1870
001766 7E341A20       MOV      WR6,#01A20H
00176A 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1871
00176E 7412           MOV      A,#012H          ; A=R11
001770 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 1872
001774 7424           MOV      A,#024H          ; A=R11
001776 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 1873
00177A 7E340030       MOV      WR6,#030H
00177E 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 1874
001782 7401           MOV      A,#01H           ; A=R11
001784 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 1875
                                                ; SOURCE LINE # 1876
001788 7E000000    R  MOV      DR0,#WORD0 CalParam
00178C 7CBD           MOV      R11,R13          ; A=R11
00178E 7E7001         MOV      R7,#01H
001791 9A000000    E  ECALL    DrvCal_MatrixCompensation?
                                                ; SOURCE LINE # 1878
001795 E4             CLR      A                ; A=R11
001796 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1879
00179A 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1881
               ?C0570:
00179C 6CFF           XRL      R15,R15
               ?C0569:
                                                ; SOURCE LINE # 1891
00179E 7E7048         MOV      R7,#048H
0017A1 AC7F           MUL      R7,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 293 

0017A3 7E5002         MOV      R5,#02H
0017A6 AC5E           MUL      R5,R14
0017A8 2D23           ADD      WR4,WR6
0017AA 7E0F0000    R  MOV      DR0,T_tempbuf1
0017AE 2D12           ADD      WR2,WR4
0017B0 0B0A30         MOV      WR6,@DR0
0017B3 0A1D           MOVZ     WR2,R13
0017B5 BD31           CMP      WR6,WR2
0017B7 1803        R  JSG      $ + 5H
0017B9 020000      R  LJMP     ?C0571
                                                ; SOURCE LINE # 1893
0017BC 7402           MOV      A,#02H           ; A=R11
0017BE ACBE           MUL      R11,R14          ; A=R11
0017C0 7E0F0000    R  MOV      DR0,T_tempbuf2
0017C4 2D15           ADD      WR2,WR10
0017C6 0B0A10         MOV      WR2,@DR0
0017C9 9D31           SUB      WR6,WR2
0017CB 7E0F0000    R  MOV      DR0,T_tempOut
0017CF 2D12           ADD      WR2,WR4
0017D1 0B0A20         MOV      WR4,@DR0
0017D4 BD23           CMP      WR4,WR6
0017D6 7803        R  JNE      $ + 5H
0017D8 020000      R  LJMP     ?C0566
                                                ; SOURCE LINE # 1895
0017DB 7401           MOV      A,#01H           ; A=R11
0017DD 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1896
0017E1 7A270000    E  MOV      ?printf??BYTE-2,WR4
                                                ; SOURCE LINE # 1897
0017E5 020000      R  LJMP     ?C2056
                                                ; SOURCE LINE # 1901
                                                ; SOURCE LINE # 1902
               ?C0571:
                                                ; SOURCE LINE # 1903
0017E8 7E1048         MOV      R1,#048H
0017EB AC1F           MUL      R1,R15
0017ED 7E3002         MOV      R3,#02H
0017F0 AC3E           MUL      R3,R14
0017F2 2D10           ADD      WR2,WR0
0017F4 7E1F0000    R  MOV      DR4,T_tempbuf1
0017F8 2D31           ADD      WR6,WR2
0017FA 0B1A20         MOV      WR4,@DR4
0017FD 0A3D           MOVZ     WR6,R13
0017FF 6E34FFFF       XRL      WR6,#0FFFFH
001803 0B34           INC      WR6,#01H
001805 BD23           CMP      WR4,WR6
001807 4803        R  JSL      $ + 5H
001809 020000      R  LJMP     ?C0575
                                                ; SOURCE LINE # 1905
00180C 7E1048         MOV      R1,#048H
00180F AC1F           MUL      R1,R15
001811 7E3002         MOV      R3,#02H
001814 AC3E           MUL      R3,R14
001816 2D10           ADD      WR2,WR0
001818 7E1F0000    R  MOV      DR4,T_tempbuf1
00181C 2D31           ADD      WR6,WR2
00181E 0B1A40         MOV      WR8,@DR4
001821 7402           MOV      A,#02H           ; A=R11
001823 ACBE           MUL      R11,R14          ; A=R11
001825 7E1F0000    R  MOV      DR4,T_tempbuf2
001829 2D35           ADD      WR6,WR10
00182B 0B1A20         MOV      WR4,@DR4
00182E 2D42           ADD      WR8,WR4
001830 7E3048         MOV      R3,#048H
001833 AC3F           MUL      R3,R15
001835 7E7002         MOV      R7,#02H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 294 

001838 AC7E           MUL      R7,R14
00183A 2D31           ADD      WR6,WR2
00183C 7E0F0000    R  MOV      DR0,T_tempOut
001840 7F70           MOV      DR28,DR0
001842 2DF3           ADD      WR30,WR6
001844 0B7A30         MOV      WR6,@DR28
001847 BD34           CMP      WR6,WR8
001849 7803        R  JNE      $ + 5H
00184B 020000      R  LJMP     ?C0566
                                                ; SOURCE LINE # 1907
00184E 7401           MOV      A,#01H           ; A=R11
001850 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1908
001854 7E9024         MOV      R9,#024H
001857 AC9F           MUL      R9,R15
001859 7E7002         MOV      R7,#02H
00185C AC7E           MUL      R7,R14
00185E 2D34           ADD      WR6,WR8
001860 2D13           ADD      WR2,WR6
001862 0B0A10         MOV      WR2,@DR0
001865 7A170000    E  MOV      ?printf??BYTE-2,WR2
001869 7E0F0000    R  MOV      DR0,T_tempbuf1
00186D 2D13           ADD      WR2,WR6
00186F 0B0A30         MOV      WR6,@DR0
001872 9D32           SUB      WR6,WR4
                                                ; SOURCE LINE # 1909
001874 020000      R  LJMP     ?C2056
               ?C0575:
                                                ; SOURCE LINE # 1913
001877 7E1048         MOV      R1,#048H
00187A AC1F           MUL      R1,R15
00187C 7E3002         MOV      R3,#02H
00187F AC3E           MUL      R3,R14
001881 2D10           ADD      WR2,WR0
001883 7E1F0000    R  MOV      DR4,T_tempbuf1
001887 2D31           ADD      WR6,WR2
001889 0B1A20         MOV      WR4,@DR4
00188C 7E3048         MOV      R3,#048H
00188F AC3F           MUL      R3,R15
001891 7E7002         MOV      R7,#02H
001894 AC7E           MUL      R7,R14
001896 2D31           ADD      WR6,WR2
001898 7E0F0000    R  MOV      DR0,T_tempOut
00189C 2D13           ADD      WR2,WR6
00189E 0B0A30         MOV      WR6,@DR0
0018A1 BD32           CMP      WR6,WR4
0018A3 7803        R  JNE      $ + 5H
0018A5 020000      R  LJMP     ?C0566
                                                ; SOURCE LINE # 1915
0018A8 7401           MOV      A,#01H           ; A=R11
0018AA 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 1916
0018AE 7A370000    E  MOV      ?printf??BYTE-2,WR6
0018B2 7E1048         MOV      R1,#048H
0018B5 AC1F           MUL      R1,R15
0018B7 7E3002         MOV      R3,#02H
0018BA AC3E           MUL      R3,R14
0018BC 2D10           ADD      WR2,WR0
0018BE 7E1F0000    R  MOV      DR4,T_tempbuf1
0018C2 2D31           ADD      WR6,WR2
0018C4 0B1A30         MOV      WR6,@DR4
0018C7 7402           MOV      A,#02H           ; A=R11
0018C9 ACBE           MUL      R11,R14          ; A=R11
0018CB 7E0F0000    R  MOV      DR0,T_tempbuf2
0018CF 2D15           ADD      WR2,WR10
0018D1 0B0A20         MOV      WR4,@DR0
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 295 

0018D4 9D32           SUB      WR6,WR4
               ?C2056:
0018D6 7A370000    E  MOV      ?printf??BYTE-4,WR6
0018DA 0A3E           MOVZ     WR6,R14
0018DC 7A370000    E  MOV      ?printf??BYTE-6,WR6
0018E0 7E140000    R  MOV      WR2,#WORD0 ?SC_3002
0018E4 7E040000    R  MOV      WR0,#WORD2 ?SC_3002
0018E8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1917
                                                ; SOURCE LINE # 1921
               ?C0566:
0018EC 0BF0           INC      R15,#01H
0018EE BEF012         CMP      R15,#012H
0018F1 6803        R  JE       $ + 5H
0018F3 020000      R  LJMP     ?C0569
                                                ; SOURCE LINE # 1922
0018F6 0BE0           INC      R14,#01H
0018F8 BEE024         CMP      R14,#024H
0018FB 6803        R  JE       $ + 5H
0018FD 020000      R  LJMP     ?C0570
                                                ; SOURCE LINE # 1924
001900 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
001904 7003        R  JNZ      $ + 5H
001906 020000      R  LJMP     ?C0579
                                                ; SOURCE LINE # 1926
001909 7E140000    R  MOV      WR2,#WORD0 ?SC_2973
00190D 7E040000    R  MOV      WR0,#WORD2 ?SC_2973
001911 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1928
001915 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001919 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00191D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1929
001921 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1931
               ?C0589:
001923 6CFF           XRL      R15,R15
               ?C0588:
                                                ; SOURCE LINE # 1933
001925 7E1048         MOV      R1,#048H
001928 AC1E           MUL      R1,R14
00192A 7E3002         MOV      R3,#02H
00192D AC3F           MUL      R3,R15
00192F 2D10           ADD      WR2,WR0
001931 7E1F0000    R  MOV      DR4,T_tempbuf1
001935 2D31           ADD      WR6,WR2
001937 0B1A30         MOV      WR6,@DR4
00193A 7A370000    E  MOV      ?printf??BYTE-2,WR6
00193E 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001942 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001946 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1934
00194A 0BF0           INC      R15,#01H
00194C BEF024         CMP      R15,#024H
00194F 78D4           JNE      ?C0588
                                                ; SOURCE LINE # 1935
001951 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001955 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001959 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1936
00195D 0BE0           INC      R14,#01H
00195F BEE012         CMP      R14,#012H
001962 78BF           JNE      ?C0589
                                                ; SOURCE LINE # 1938
001964 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001968 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 296 

00196C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1939
001970 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 1941
               ?C0599:
001972 6CFF           XRL      R15,R15
               ?C0598:
                                                ; SOURCE LINE # 1943
001974 7E1048         MOV      R1,#048H
001977 AC1E           MUL      R1,R14
001979 7E3002         MOV      R3,#02H
00197C AC3F           MUL      R3,R15
00197E 2D10           ADD      WR2,WR0
001980 7E1F0000    R  MOV      DR4,T_tempbuf2
001984 2D31           ADD      WR6,WR2
001986 0B1A30         MOV      WR6,@DR4
001989 7A370000    E  MOV      ?printf??BYTE-2,WR6
00198D 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001991 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001995 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1944
001999 0BF0           INC      R15,#01H
00199B BEF024         CMP      R15,#024H
00199E 78D4           JNE      ?C0598
                                                ; SOURCE LINE # 1945
0019A0 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0019A4 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0019A8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1946
0019AC 0BE0           INC      R14,#01H
0019AE BEE012         CMP      R14,#012H
0019B1 78BF           JNE      ?C0599
                                                ; SOURCE LINE # 1948
0019B3 7E340064       MOV      WR6,#064H
0019B7 9A000000    E  ECALL    DelayMs?
               ?C0600:
0019BB 80FE           SJMP     ?C0600
               ?C0579:
                                                ; SOURCE LINE # 1952
0019BD 7E140000    R  MOV      WR2,#WORD0 ?SC_2947
0019C1 7E040000    R  MOV      WR0,#WORD2 ?SC_2947
0019C5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1953
                                                ; SOURCE LINE # 1954
0019C9 7E730000    R  MOV      R7,g_ucCalFlag
0019CD 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 1955
0019D0 DA79           POP      WR14
0019D2 DAD8           POP      R13
0019D4 AA             ERET     
;       FUNCTION Test_CAL_MaxtixCom_2? (END)

;       FUNCTION Test_CAL_LDS? (BEGIN)
                                                ; SOURCE LINE # 1969
0019D5 CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 1970
                                                ; SOURCE LINE # 1983
0019D7 7E340012       MOV      WR6,#012H
0019DB 7A370000    E  MOV      ?printf??BYTE-2,WR6
0019DF 7E340024       MOV      WR6,#024H
0019E3 7A370000    E  MOV      ?printf??BYTE-4,WR6
0019E7 7E140000    R  MOV      WR2,#WORD0 ?SC_2929
0019EB 7E040000    R  MOV      WR0,#WORD2 ?SC_2929
0019EF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 1984
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 297 

0019F3 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 1986
               ?C0615:
0019F5 6CFF           XRL      R15,R15
               ?C0614:
                                                ; SOURCE LINE # 1988
0019F7 9A000000    E  ECALL    rand??
0019FB 0A17           MOVZ     WR2,R7
0019FD 7E7090         MOV      R7,#090H
001A00 AC7E           MUL      R7,R14
001A02 7E1002         MOV      R1,#02H
001A05 AC1F           MUL      R1,R15
001A07 2D03           ADD      WR0,WR6
001A09 7E1F0000    R  MOV      DR4,T_tempbuf1
001A0D 2D30           ADD      WR6,WR0
001A0F 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1989
001A12 9A000000    E  ECALL    rand??
001A16 0A17           MOVZ     WR2,R7
001A18 7E7090         MOV      R7,#090H
001A1B AC7E           MUL      R7,R14
001A1D 7E1002         MOV      R1,#02H
001A20 AC1F           MUL      R1,R15
001A22 2D03           ADD      WR0,WR6
001A24 7E1F0000    R  MOV      DR4,T_tempbuf2
001A28 2D30           ADD      WR6,WR0
001A2A 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 1990
001A2D 0BF0           INC      R15,#01H
001A2F BEF048         CMP      R15,#048H
001A32 78C3           JNE      ?C0614
                                                ; SOURCE LINE # 1991
001A34 0BE0           INC      R14,#01H
001A36 BEE009         CMP      R14,#09H
001A39 78BA           JNE      ?C0615
                                                ; SOURCE LINE # 1996
001A3B 7E341000       MOV      WR6,#01000H
001A3F 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 1997
001A43 7E341510       MOV      WR6,#01510H
001A47 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 1998
001A4B 7E341A20       MOV      WR6,#01A20H
001A4F 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 1999
001A53 7409           MOV      A,#09H           ; A=R11
001A55 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 2000
001A59 7424           MOV      A,#024H          ; A=R11
001A5B 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 2001
001A5F 7E340070       MOV      WR6,#070H
001A63 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 2003
001A67 7E000000    R  MOV      DR0,#WORD0 CalParam
001A6B 9A000000    E  ECALL    DrvCal_LDS?
                                                ; SOURCE LINE # 2006
001A6F 7E140000    R  MOV      WR2,#WORD0 ?SC_2917
001A73 7E040000    R  MOV      WR0,#WORD2 ?SC_2917
001A77 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2007
001A7B 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 2009
               ?C0625:
001A7D 6CFF           XRL      R15,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 298 

               ?C0624:
                                                ; SOURCE LINE # 2011
001A7F 7E7002         MOV      R7,#02H
001A82 AC7F           MUL      R7,R15
001A84 3E34           SLL      WR6
001A86 7E5090         MOV      R5,#090H
001A89 AC5E           MUL      R5,R14
001A8B 2D23           ADD      WR4,WR6
001A8D 7E0F0000    R  MOV      DR0,T_tempbuf1
001A91 2D12           ADD      WR2,WR4
001A93 0B0A30         MOV      WR6,@DR0
001A96 7A370000    R  MOV      x0,WR6
                                                ; SOURCE LINE # 2012
001A9A 69300002       MOV      WR6,@DR0+0x2
001A9E 7A370000    R  MOV      y0,WR6
                                                ; SOURCE LINE # 2013
001AA2 7E0F0000    R  MOV      DR0,T_tempbuf2
001AA6 2D12           ADD      WR2,WR4
001AA8 0B0A20         MOV      WR4,@DR0
001AAB 7A270000    R  MOV      x1,WR4
                                                ; SOURCE LINE # 2014
001AAF 69600002       MOV      WR12,@DR0+0x2
;---- Variable 'y1' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 2016
001AB3 7D16           MOV      WR2,WR12
001AB5 6D00           XRL      WR0,WR0
001AB7 6D22           XRL      WR4,WR4
001AB9 9F10           SUB      DR4,DR0
001ABB 7F01           MOV      DR0,DR4
001ABD 9A000000    E  ECALL    ?C?LMUL?
001AC1 7F71           MOV      DR28,DR4
001AC3 7E170000    R  MOV      WR2,x1
001AC7 6D00           XRL      WR0,WR0
001AC9 7E370000    R  MOV      WR6,x0
001ACD 6D22           XRL      WR4,WR4
001ACF 9F10           SUB      DR4,DR0
001AD1 7F01           MOV      DR0,DR4
001AD3 9A000000    E  ECALL    ?C?LMUL?
001AD7 2F17           ADD      DR4,DR28
001AD9 E4             CLR      A                ; A=R11
001ADA 9A000000    E  ECALL    ?C?FCASTL?
001ADE 9A000000    E  ECALL    sqrt??
001AE2 9A000000    E  ECALL    ?C?CASTF?
001AE6 7A370000    R  MOV      DisSoft,WR6
                                                ; SOURCE LINE # 2017
001AEA 7E1048         MOV      R1,#048H
001AED AC1E           MUL      R1,R14
001AEF 7E3002         MOV      R3,#02H
001AF2 AC3F           MUL      R3,R15
001AF4 2D10           ADD      WR2,WR0
001AF6 7E1F0000    R  MOV      DR4,T_tempOut
001AFA 2D31           ADD      WR6,WR2
001AFC 0B1A30         MOV      WR6,@DR4
001AFF 7A370000    R  MOV      DisCal,WR6
                                                ; SOURCE LINE # 2019
001B03 BE370000    R  CMP      WR6,DisSoft
001B07 7803        R  JNE      $ + 5H
001B09 020000      R  LJMP     ?C0621
                                                ; SOURCE LINE # 2021
001B0C 7401           MOV      A,#01H           ; A=R11
001B0E 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2022
001B12 7E370000    R  MOV      WR6,DisSoft
001B16 7A370000    E  MOV      ?printf??BYTE-2,WR6
001B1A 7E370000    R  MOV      WR6,DisCal
001B1E 7A370000    E  MOV      ?printf??BYTE-4,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 299 

001B22 7E140000    R  MOV      WR2,#WORD0 ?SC_2891
001B26 7E040000    R  MOV      WR0,#WORD2 ?SC_2891
001B2A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2023
001B2E 7E370000    R  MOV      WR6,x0
001B32 7A370000    E  MOV      ?printf??BYTE-2,WR6
001B36 7E370000    R  MOV      WR6,x1
001B3A 7A370000    E  MOV      ?printf??BYTE-4,WR6
001B3E 7E370000    R  MOV      WR6,y0
001B42 7A370000    E  MOV      ?printf??BYTE-6,WR6
001B46 7A670000    E  MOV      ?printf??BYTE-8,WR12
001B4A 7E140000    R  MOV      WR2,#WORD0 ?SC_2866
001B4E 7E040000    R  MOV      WR0,#WORD2 ?SC_2866
001B52 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2024
               ?C0621:
001B56 0BF0           INC      R15,#01H
001B58 BEF024         CMP      R15,#024H
001B5B 6803        R  JE       $ + 5H
001B5D 020000      R  LJMP     ?C0624
                                                ; SOURCE LINE # 2026
001B60 0BE0           INC      R14,#01H
001B62 BEE009         CMP      R14,#09H
001B65 6803        R  JE       $ + 5H
001B67 020000      R  LJMP     ?C0625
                                                ; SOURCE LINE # 2028
001B6A 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
001B6E 7003        R  JNZ      $ + 5H
001B70 020000      R  LJMP     ?C0627
                                                ; SOURCE LINE # 2030
001B73 7E140000    R  MOV      WR2,#WORD0 ?SC_2855
001B77 7E040000    R  MOV      WR0,#WORD2 ?SC_2855
001B7B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2032
001B7F 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001B83 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001B87 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2033
001B8B 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 2035
               ?C0637:
001B8D 6CFF           XRL      R15,R15
               ?C0636:
                                                ; SOURCE LINE # 2037
001B8F 7E1048         MOV      R1,#048H
001B92 AC1E           MUL      R1,R14
001B94 7E3002         MOV      R3,#02H
001B97 AC3F           MUL      R3,R15
001B99 2D10           ADD      WR2,WR0
001B9B 7E1F0000    R  MOV      DR4,T_tempbuf1
001B9F 2D31           ADD      WR6,WR2
001BA1 0B1A30         MOV      WR6,@DR4
001BA4 7A370000    E  MOV      ?printf??BYTE-2,WR6
001BA8 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001BAC 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001BB0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2038
001BB4 0BF0           INC      R15,#01H
001BB6 BEF024         CMP      R15,#024H
001BB9 78D4           JNE      ?C0636
                                                ; SOURCE LINE # 2039
001BBB 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001BBF 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001BC3 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2040
001BC7 0BE0           INC      R14,#01H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 300 

001BC9 BEE012         CMP      R14,#012H
001BCC 78BF           JNE      ?C0637
                                                ; SOURCE LINE # 2042
001BCE 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001BD2 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001BD6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2043
001BDA 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 2045
               ?C0647:
001BDC 6CFF           XRL      R15,R15
               ?C0646:
                                                ; SOURCE LINE # 2047
001BDE 7E1048         MOV      R1,#048H
001BE1 AC1E           MUL      R1,R14
001BE3 7E3002         MOV      R3,#02H
001BE6 AC3F           MUL      R3,R15
001BE8 2D10           ADD      WR2,WR0
001BEA 7E1F0000    R  MOV      DR4,g_pAfeAram
001BEE 2D31           ADD      WR6,WR2
001BF0 0B1A30         MOV      WR6,@DR4
001BF3 7A370000    E  MOV      ?printf??BYTE-2,WR6
001BF7 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001BFB 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001BFF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2048
001C03 0BF0           INC      R15,#01H
001C05 BEF024         CMP      R15,#024H
001C08 78D4           JNE      ?C0646
                                                ; SOURCE LINE # 2049
001C0A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001C0E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001C12 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2050
001C16 0BE0           INC      R14,#01H
001C18 BEE012         CMP      R14,#012H
001C1B 78BF           JNE      ?C0647
                                                ; SOURCE LINE # 2052
001C1D 7E340064       MOV      WR6,#064H
001C21 9A000000    E  ECALL    DelayMs?
               ?C0648:
001C25 80FE           SJMP     ?C0648
               ?C0627:
                                                ; SOURCE LINE # 2056
001C27 7E140000    R  MOV      WR2,#WORD0 ?SC_2847
001C2B 7E040000    R  MOV      WR0,#WORD2 ?SC_2847
001C2F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2057
                                                ; SOURCE LINE # 2058
001C33 C3             CLR      C
                                                ; SOURCE LINE # 2059
001C34 DA3B           POP      DR12
001C36 AA             ERET     
;       FUNCTION Test_CAL_LDS? (END)

;       FUNCTION Test_CAL_MDS? (BEGIN)
                                                ; SOURCE LINE # 2078
001C37 CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2079
                                                ; SOURCE LINE # 2168
001C39 7E340012       MOV      WR6,#012H
001C3D 7A370000    E  MOV      ?printf??BYTE-2,WR6
001C41 7E340024       MOV      WR6,#024H
001C45 7A370000    E  MOV      ?printf??BYTE-4,WR6
001C49 7E140000    R  MOV      WR2,#WORD0 ?SC_2829
001C4D 7E040000    R  MOV      WR0,#WORD2 ?SC_2829
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 301 

001C51 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2170
001C55 6CFF           XRL      R15,R15
;---- Variable 'i' assigned to Register 'R15' ----
               ?C0657:
                                                ; SOURCE LINE # 2172
001C57 9A000000    E  ECALL    rand??
001C5B 0A17           MOVZ     WR2,R7
001C5D 7402           MOV      A,#02H           ; A=R11
001C5F ACBF           MUL      R11,R15          ; A=R11
001C61 7E1F0000    R  MOV      DR4,T_tempbuf1
001C65 2D35           ADD      WR6,WR10
001C67 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2173
001C6A 0BF0           INC      R15,#01H
001C6C BEF016         CMP      R15,#016H
001C6F 78E6           JNE      ?C0657
                                                ; SOURCE LINE # 2175
001C71 6CFF           XRL      R15,R15
               ?C0662:
                                                ; SOURCE LINE # 2177
001C73 9A000000    E  ECALL    rand??
001C77 0A17           MOVZ     WR2,R7
001C79 7402           MOV      A,#02H           ; A=R11
001C7B ACBF           MUL      R11,R15          ; A=R11
001C7D 7E1F0000    R  MOV      DR4,T_tempbuf2
001C81 2D35           ADD      WR6,WR10
001C83 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2178
001C86 0BF0           INC      R15,#01H
001C88 BEF016         CMP      R15,#016H
001C8B 78E6           JNE      ?C0662
                                                ; SOURCE LINE # 2183
001C8D 7E341000       MOV      WR6,#01000H
001C91 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 2184
001C95 7E341510       MOV      WR6,#01510H
001C99 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 2185
001C9D 7E341A20       MOV      WR6,#01A20H
001CA1 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 2188
001CA5 740B           MOV      A,#0BH           ; A=R11
001CA7 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 2189
001CAB 740B           MOV      A,#0BH           ; A=R11
001CAD 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 2190
001CB1 7E340060       MOV      WR6,#060H
001CB5 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 2192
001CB9 7E000000    R  MOV      DR0,#WORD0 CalParam
001CBD 9A000000    E  ECALL    DrvCal_MDS?
                                                ; SOURCE LINE # 2194
001CC1 7E140000    R  MOV      WR2,#WORD0 ?SC_2816
001CC5 7E040000    R  MOV      WR0,#WORD2 ?SC_2816
001CC9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2195
001CCD 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 2197
               ?C0673:
001CCF 6CEE           XRL      R14,R14
;---- Variable 'j' assigned to Register 'R14' ----
               ?C0672:
                                                ; SOURCE LINE # 2200
001CD1 7E3002         MOV      R3,#02H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 302 

001CD4 AC3E           MUL      R3,R14
001CD6 3E14           SLL      WR2
001CD8 7E1F0000    R  MOV      DR4,T_tempbuf1
001CDC 2D31           ADD      WR6,WR2
001CDE 0B1A40         MOV      WR8,@DR4
001CE1 7A470000    R  MOV      x0,WR8
                                                ; SOURCE LINE # 2201
001CE5 69310002       MOV      WR6,@DR4+0x2
001CE9 7A370000    R  MOV      y0,WR6
                                                ; SOURCE LINE # 2202
001CED 7E5002         MOV      R5,#02H
001CF0 AC5F           MUL      R5,R15
001CF2 3E24           SLL      WR4
001CF4 7E0F0000    R  MOV      DR0,T_tempbuf2
001CF8 2D12           ADD      WR2,WR4
001CFA 0B0AD0         MOV      WR26,@DR0
001CFD 7AD70000    R  MOV      x1,WR26
                                                ; SOURCE LINE # 2203
001D01 69100002       MOV      WR2,@DR0+0x2
001D05 7A170000    R  MOV      y1,WR2
                                                ; SOURCE LINE # 2205
001D09 6D00           XRL      WR0,WR0
001D0B 6D22           XRL      WR4,WR4
001D0D 9F10           SUB      DR4,DR0
001D0F 7F01           MOV      DR0,DR4
001D11 9A000000    E  ECALL    ?C?LMUL?
001D15 7F71           MOV      DR28,DR4
001D17 7D1D           MOV      WR2,WR26
001D19 6D00           XRL      WR0,WR0
001D1B 7D34           MOV      WR6,WR8
001D1D 6D22           XRL      WR4,WR4
001D1F 9F10           SUB      DR4,DR0
001D21 7F01           MOV      DR0,DR4
001D23 9A000000    E  ECALL    ?C?LMUL?
001D27 2F17           ADD      DR4,DR28
001D29 E4             CLR      A                ; A=R11
001D2A 9A000000    E  ECALL    ?C?FCASTL?
001D2E 9A000000    E  ECALL    sqrt??
001D32 9A000000    E  ECALL    ?C?CASTF?
001D36 7A370000    R  MOV      DisSoft,WR6
                                                ; SOURCE LINE # 2206
001D3A 7E1016         MOV      R1,#016H
001D3D AC1E           MUL      R1,R14
001D3F 7E3002         MOV      R3,#02H
001D42 AC3F           MUL      R3,R15
001D44 2D10           ADD      WR2,WR0
001D46 7E1F0000    R  MOV      DR4,T_tempOut
001D4A 2D31           ADD      WR6,WR2
001D4C 0B1A60         MOV      WR12,@DR4
;---- Variable 'DisCal' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 2207
001D4F BE670000    R  CMP      WR12,DisSoft
001D53 7803        R  JNE      $ + 5H
001D55 020000      R  LJMP     ?C0669
                                                ; SOURCE LINE # 2209
001D58 7401           MOV      A,#01H           ; A=R11
001D5A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2210
001D5E 7A670000    E  MOV      ?printf??BYTE-2,WR12
001D62 7E370000    R  MOV      WR6,DisSoft
001D66 7A370000    E  MOV      ?printf??BYTE-4,WR6
001D6A 7E140000    R  MOV      WR2,#WORD0 ?SC_2784
001D6E 7E040000    R  MOV      WR0,#WORD2 ?SC_2784
001D72 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2211
001D76 7E340064       MOV      WR6,#064H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 303 

001D7A 9A000000    E  ECALL    DelayMs?
               ?C0675:
001D7E 80FE           SJMP     ?C0675
                                                ; SOURCE LINE # 2213
                                                ; SOURCE LINE # 2217
                                                ; SOURCE LINE # 2218
               ?C0669:
001D80 0BE0           INC      R14,#01H
001D82 BEE00B         CMP      R14,#0BH
001D85 6803        R  JE       $ + 5H
001D87 020000      R  LJMP     ?C0672
                                                ; SOURCE LINE # 2219
001D8A 0BF0           INC      R15,#01H
001D8C BEF00B         CMP      R15,#0BH
001D8F 5003        R  JNC      $ + 5H
001D91 020000      R  LJMP     ?C0673
                                                ; SOURCE LINE # 2220
001D94 7E140000    R  MOV      WR2,#WORD0 ?SC_2776
001D98 7E040000    R  MOV      WR0,#WORD2 ?SC_2776
001D9C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2221
001DA0 C3             CLR      C
                                                ; SOURCE LINE # 2223
001DA1 DA3B           POP      DR12
001DA3 AA             ERET     
;       FUNCTION Test_CAL_MDS? (END)

;       FUNCTION Test_CAL_CHK? (BEGIN)
                                                ; SOURCE LINE # 2240
001DA4 CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'max_all' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 2241
                                                ; SOURCE LINE # 2242
001DA6 C200        R  CLR      flag
                                                ; SOURCE LINE # 2250
001DA8 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001DAC 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001DB0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2251
001DB4 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 2253
               ?C0690:
001DB6 6CFF           XRL      R15,R15
               ?C0689:
                                                ; SOURCE LINE # 2255
001DB8 9A000000    E  ECALL    rand??
001DBC 7D13           MOV      WR2,WR6
001DBE 0E14           SRA      WR2
001DC0 7E1024         MOV      R1,#024H
001DC3 AC1E           MUL      R1,R14
001DC5 0A3F           MOVZ     WR6,R15
001DC7 2D03           ADD      WR0,WR6
001DC9 3E04           SLL      WR0
001DCB 7E1F0000    R  MOV      DR4,T_tempbuf1
001DCF 2D30           ADD      WR6,WR0
001DD1 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2256
001DD4 0BF0           INC      R15,#01H
001DD6 BEF024         CMP      R15,#024H
001DD9 78DD           JNE      ?C0689
                                                ; SOURCE LINE # 2258
001DDB 0BE0           INC      R14,#01H
001DDD BEE012         CMP      R14,#012H
001DE0 78D4           JNE      ?C0690
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 304 

                                                ; SOURCE LINE # 2260
001DE2 7E140000    R  MOV      WR2,#WORD0 ?SC_2764
001DE6 7E040000    R  MOV      WR0,#WORD2 ?SC_2764
001DEA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2261
001DEE 7E140000    R  MOV      WR2,#WORD0 ?SC_2759
001DF2 7E040000    R  MOV      WR0,#WORD2 ?SC_2759
001DF6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2263
001DFA 6D66           XRL      WR12,WR12
                                                ; SOURCE LINE # 2264
001DFC 6CEE           XRL      R14,R14
               ?C0694:
                                                ; SOURCE LINE # 2266
001DFE 7E347FFF       MOV      WR6,#07FFFH
;---- Variable 'min' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 2267
001E02 6D22           XRL      WR4,WR4
;---- Variable 'max' assigned to Register 'WR4' ----
                                                ; SOURCE LINE # 2268
001E04 6CFF           XRL      R15,R15
               ?C0699:
                                                ; SOURCE LINE # 2270
001E06 7424           MOV      A,#024H          ; A=R11
001E08 ACBF           MUL      R11,R15          ; A=R11
001E0A 0A4E           MOVZ     WR8,R14
001E0C 2D54           ADD      WR10,WR8
001E0E 3E54           SLL      WR10
001E10 7E0F0000    R  MOV      DR0,T_tempbuf1
001E14 2D15           ADD      WR2,WR10
001E16 0B0A10         MOV      WR2,@DR0
001E19 BD12           CMP      WR2,WR4
001E1B 3803        R  JG       $ + 5H
001E1D 020000      R  LJMP     ?C0701
                                                ; SOURCE LINE # 2272
001E20 7D21           MOV      WR4,WR2
                                                ; SOURCE LINE # 2273
               ?C0701:
                                                ; SOURCE LINE # 2274
001E22 BD13           CMP      WR2,WR6
001E24 4003        R  JC       $ + 5H
001E26 020000      R  LJMP     ?C0696
                                                ; SOURCE LINE # 2276
001E29 7D31           MOV      WR6,WR2
                                                ; SOURCE LINE # 2277
               ?C0696:
001E2B 0BF0           INC      R15,#01H
001E2D BEF012         CMP      R15,#012H
001E30 78D4           JNE      ?C0699
                                                ; SOURCE LINE # 2279
001E32 7D42           MOV      WR8,WR4
001E34 9D43           SUB      WR8,WR6
001E36 7402           MOV      A,#02H           ; A=R11
001E38 ACBE           MUL      R11,R14          ; A=R11
001E3A 59450000    R  MOV      @WR10+RxMax,WR8
                                                ; SOURCE LINE # 2280
001E3E 49150000    R  MOV      WR2,@WR10+RxMax
001E42 BD16           CMP      WR2,WR12
001E44 3803        R  JG       $ + 5H
001E46 020000      R  LJMP     ?C0691
                                                ; SOURCE LINE # 2282
001E49 7D61           MOV      WR12,WR2
                                                ; SOURCE LINE # 2283
               ?C0691:
001E4B 0BE0           INC      R14,#01H
001E4D BEE024         CMP      R14,#024H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 305 

001E50 78AC           JNE      ?C0694
                                                ; SOURCE LINE # 2286
001E52 7E341000       MOV      WR6,#01000H
001E56 7412           MOV      A,#012H          ; A=R11
001E58 7E5024         MOV      R5,#024H
001E5B 9A000000    E  ECALL    DrvCal_Noise?
;---- Variable 'check' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 2288
001E5F BD36           CMP      WR6,WR12
001E61 7803        R  JNE      $ + 5H
001E63 020000      R  LJMP     ?C0704
                                                ; SOURCE LINE # 2290
001E66 7401           MOV      A,#01H           ; A=R11
001E68 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2291
               ?C0704:
                                                ; SOURCE LINE # 2293
001E6C 7A370000    E  MOV      ?printf??BYTE-2,WR6
001E70 7A670000    E  MOV      ?printf??BYTE-4,WR12
001E74 7E140000    R  MOV      WR2,#WORD0 ?SC_2737
001E78 7E040000    R  MOV      WR0,#WORD2 ?SC_2737
001E7C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2295
001E80 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
001E84 7003        R  JNZ      $ + 5H
001E86 020000      R  LJMP     ?C0705
                                                ; SOURCE LINE # 2297
001E89 7E140000    R  MOV      WR2,#WORD0 ?SC_2730
001E8D 7E040000    R  MOV      WR0,#WORD2 ?SC_2730
001E91 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2298
001E95 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001E99 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001E9D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2299
001EA1 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 2301
               ?C0715:
001EA3 6CFF           XRL      R15,R15
               ?C0714:
                                                ; SOURCE LINE # 2303
001EA5 7E1048         MOV      R1,#048H
001EA8 AC1E           MUL      R1,R14
001EAA 7E3002         MOV      R3,#02H
001EAD AC3F           MUL      R3,R15
001EAF 2D10           ADD      WR2,WR0
001EB1 7E1F0000    R  MOV      DR4,T_tempbuf1
001EB5 2D31           ADD      WR6,WR2
001EB7 0B1A30         MOV      WR6,@DR4
001EBA 7A370000    E  MOV      ?printf??BYTE-2,WR6
001EBE 7E140000    R  MOV      WR2,#WORD0 ?SC_4111
001EC2 7E040000    R  MOV      WR0,#WORD2 ?SC_4111
001EC6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2304
001ECA 0BF0           INC      R15,#01H
001ECC BEF024         CMP      R15,#024H
001ECF 78D4           JNE      ?C0714
                                                ; SOURCE LINE # 2305
001ED1 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
001ED5 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
001ED9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2306
001EDD 0BE0           INC      R14,#01H
001EDF BEE012         CMP      R14,#012H
001EE2 78BF           JNE      ?C0715
                                                ; SOURCE LINE # 2308
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 306 

001EE4 7E340064       MOV      WR6,#064H
001EE8 9A000000    E  ECALL    DelayMs?
               ?C0716:
001EEC 80FE           SJMP     ?C0716
               ?C0705:
                                                ; SOURCE LINE # 2312
001EEE 7E140000    R  MOV      WR2,#WORD0 ?SC_2725
001EF2 7E040000    R  MOV      WR0,#WORD2 ?SC_2725
001EF6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2313
                                                ; SOURCE LINE # 2382
001EFA 7E730000    R  MOV      R7,g_ucCalFlag
001EFE 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 2383
001F01 DA3B           POP      DR12
001F03 AA             ERET     
;       FUNCTION Test_CAL_CHK? (END)

;       FUNCTION GetCrc16? (BEGIN)
                                                ; SOURCE LINE # 2398
001F04 CA3B           PUSH     DR12
;---- Variable 'bPram' assigned to Register 'R11' ----
;---- Variable 'length' assigned to Register 'WR2' ----
001F06 7F71           MOV      DR28,DR4
;---- Variable 'addr' assigned to Register 'DR28' ----
                                                ; SOURCE LINE # 2399
                                                ; SOURCE LINE # 2400
001F08 6D33           XRL      WR6,WR6
;---- Variable 'cFcs' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 2403
001F0A 9F66           SUB      DR24,DR24
;---- Variable 'i' assigned to Register 'DR24' ----
001F0C 8056           SJMP     ?C0724
               ?C0725:
                                                ; SOURCE LINE # 2405
001F0E BEB003         CMP      R11,#03H         ; A=R11
001F11 6803           JE       ?C0728
001F13 B40410         CJNE     A,#04H,?C0727    ; A=R11
               ?C0728:
                                                ; SOURCE LINE # 2419
001F16 7F36           MOV      DR12,DR24
001F18 2F33           ADD      DR12,DR12
001F1A 7F57           MOV      DR20,DR28
001F1C 2EA400FE       ADD      WR20,#0FEH
001F20 2E58E800       ADD      DR20,#0E800H
                                                ; SOURCE LINE # 2421
001F24 8008           SJMP     ?C2057
               ?C0727:
                                                ; SOURCE LINE # 2422
001F26 700A           JNZ      ?C0730
                                                ; SOURCE LINE # 2424
001F28 7F36           MOV      DR12,DR24
001F2A 2F33           ADD      DR12,DR12
001F2C 7F57           MOV      DR20,DR28
               ?C2057:
001F2E 2F53           ADD      DR20,DR12
                                                ; SOURCE LINE # 2425
001F30 800F           SJMP     ?C2058
               ?C0730:
                                                ; SOURCE LINE # 2426
001F32 B40211         CJNE     A,#02H,?C0737    ; A=R11
                                                ; SOURCE LINE # 2428
001F35 7F36           MOV      DR12,DR24
001F37 2F33           ADD      DR12,DR12
001F39 7F57           MOV      DR20,DR28
001F3B 2F53           ADD      DR20,DR12
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 307 

001F3D 2EA400FD       ADD      WR20,#0FDH
               ?C2058:
001F41 0B5A20         MOV      WR4,@DR20
001F44 6D32           XRL      WR6,WR4
                                                ; SOURCE LINE # 2429
                                                ; SOURCE LINE # 2431
               ?C0737:
001F46 9F55           SUB      DR20,DR20
;---- Variable 'j' assigned to Register 'DR20' ----
               ?C0736:
                                                ; SOURCE LINE # 2433
001F48 7D23           MOV      WR4,WR6
001F4A 5E240001       ANL      WR4,#01H
001F4E 6808           JE       ?C0738
                                                ; SOURCE LINE # 2435
001F50 1E34           SRL      WR6
001F52 6E348408       XRL      WR6,#08408H
                                                ; SOURCE LINE # 2436
001F56 8002           SJMP     ?C0733
               ?C0738:
                                                ; SOURCE LINE # 2439
001F58 1E34           SRL      WR6
                                                ; SOURCE LINE # 2440
                                                ; SOURCE LINE # 2441
               ?C0733:
001F5A 0B5C           INC      DR20,#01H
001F5C BE580010       CMP      DR20,#010H
001F60 78E6           JNE      ?C0736
                                                ; SOURCE LINE # 2442
001F62 0B6C           INC      DR24,#01H
               ?C0724:
001F64 7D91           MOV      WR18,WR2
001F66 6D88           XRL      WR16,WR16
001F68 BF64           CMP      DR24,DR16
001F6A 40A2           JC       ?C0725
                                                ; SOURCE LINE # 2443
                                                ; SOURCE LINE # 2444
001F6C DA3B           POP      DR12
001F6E AA             ERET     
;       FUNCTION GetCrc16? (END)

;       FUNCTION Test_CAL_CRC? (BEGIN)
                                                ; SOURCE LINE # 2452
001F6F CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2453
                                                ; SOURCE LINE # 2454
001F71 C200        R  CLR      flag
                                                ; SOURCE LINE # 2459
001F73 7E140000    R  MOV      WR2,#WORD0 ?SC_2713
001F77 7E040000    R  MOV      WR0,#WORD2 ?SC_2713
001F7B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2495
001F7F 7E140000    R  MOV      WR2,#WORD0 ?SC_2705
001F83 7E040000    R  MOV      WR0,#WORD2 ?SC_2705
001F87 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2498
001F8B C200        E  CLR      ?DrvCal_CRC16??BIT
001F8D 7E34E800       MOV      WR6,#0E800H
001F91 7E248C00       MOV      WR4,#08C00H
001F95 7403           MOV      A,#03H           ; A=R11
001F97 9A000000    E  ECALL    DrvCal_CRC16?
001F9B 7D63           MOV      WR12,WR6
;---- Variable 'ResultCal' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 2500
001F9D 7A670000    E  MOV      ?printf??BYTE-2,WR12
001FA1 7E140000    R  MOV      WR2,#WORD0 ?SC_2690
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 308 

001FA5 7E040000    R  MOV      WR0,#WORD2 ?SC_2690
001FA9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2502
001FAD 9F11           SUB      DR4,DR4
001FAF 7E148C00       MOV      WR2,#08C00H
001FB3 7403           MOV      A,#03H           ; A=R11
001FB5 9A000000    R  ECALL    GetCrc16?
001FB9 7D73           MOV      WR14,WR6
;---- Variable 'ResultSoft' assigned to Register 'WR14' ----
                                                ; SOURCE LINE # 2504
001FBB 7A770000    E  MOV      ?printf??BYTE-2,WR14
001FBF 7E140000    R  MOV      WR2,#WORD0 ?SC_2674
001FC3 7E040000    R  MOV      WR0,#WORD2 ?SC_2674
001FC7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2506
001FCB BD76           CMP      WR14,WR12
001FCD 7803        R  JNE      $ + 5H
001FCF 020000      R  LJMP     ?C0741
                                                ; SOURCE LINE # 2508
001FD2 7401           MOV      A,#01H           ; A=R11
001FD4 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2509
001FD8 7E140000    R  MOV      WR2,#WORD0 ?SC_3930
001FDC 7E040000    R  MOV      WR0,#WORD2 ?SC_3930
001FE0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2510
001FE4 7E340064       MOV      WR6,#064H
001FE8 9A000000    E  ECALL    DelayMs?
               ?C0742:
001FEC 80FE           SJMP     ?C0742
                                                ; SOURCE LINE # 2512
               ?C0741:
                                                ; SOURCE LINE # 2515
001FEE 7E140000    R  MOV      WR2,#WORD0 ?SC_2669
001FF2 7E040000    R  MOV      WR0,#WORD2 ?SC_2669
001FF6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2516
                                                ; SOURCE LINE # 2520
001FFA 7E140000    R  MOV      WR2,#WORD0 ?SC_2661
001FFE 7E040000    R  MOV      WR0,#WORD2 ?SC_2661
002002 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2523
002006 C200        E  CLR      ?DrvCal_CRC16??BIT
002008 6D33           XRL      WR6,WR6
00200A 7E240800       MOV      WR4,#0800H
00200E 7402           MOV      A,#02H           ; A=R11
002010 9A000000    E  ECALL    DrvCal_CRC16?
002014 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 2524
002016 7A670000    E  MOV      ?printf??BYTE-2,WR12
00201A 7E140000    R  MOV      WR2,#WORD0 ?SC_2690
00201E 7E040000    R  MOV      WR0,#WORD2 ?SC_2690
002022 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2527
002026 9F11           SUB      DR4,DR4
002028 7E140800       MOV      WR2,#0800H
00202C 7402           MOV      A,#02H           ; A=R11
00202E 9A000000    R  ECALL    GetCrc16?
002032 7D73           MOV      WR14,WR6
                                                ; SOURCE LINE # 2528
002034 7A770000    E  MOV      ?printf??BYTE-2,WR14
002038 7E140000    R  MOV      WR2,#WORD0 ?SC_2674
00203C 7E040000    R  MOV      WR0,#WORD2 ?SC_2674
002040 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2530
002044 BD76           CMP      WR14,WR12
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 309 

002046 7803        R  JNE      $ + 5H
002048 020000      R  LJMP     ?C0748
                                                ; SOURCE LINE # 2532
00204B 7401           MOV      A,#01H           ; A=R11
00204D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2533
002051 7E140000    R  MOV      WR2,#WORD0 ?SC_3930
002055 7E040000    R  MOV      WR0,#WORD2 ?SC_3930
002059 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2534
00205D 7E340064       MOV      WR6,#064H
002061 9A000000    E  ECALL    DelayMs?
               ?C0749:
002065 80FE           SJMP     ?C0749
                                                ; SOURCE LINE # 2536
               ?C0748:
                                                ; SOURCE LINE # 2539
002067 7E140000    R  MOV      WR2,#WORD0 ?SC_2669
00206B 7E040000    R  MOV      WR0,#WORD2 ?SC_2669
00206F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2540
                                                ; SOURCE LINE # 2542
002073 7E730000    R  MOV      R7,g_ucCalFlag
002077 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 2543
00207A DA3B           POP      DR12
00207C AA             ERET     
;       FUNCTION Test_CAL_CRC? (END)

;       FUNCTION GetXorSum? (BEGIN)
                                                ; SOURCE LINE # 2557
00207D CA3B           PUSH     DR12
;---- Variable 'bPram' assigned to Register 'R11' ----
;---- Variable 'length' assigned to Register 'WR2' ----
00207F 7F71           MOV      DR28,DR4
;---- Variable 'addr' assigned to Register 'DR28' ----
                                                ; SOURCE LINE # 2558
                                                ; SOURCE LINE # 2559
002081 6D33           XRL      WR6,WR6
;---- Variable 'cFcs' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 2561
002083 9F66           SUB      DR24,DR24
;---- Variable 'i' assigned to Register 'DR24' ----
002085 803A           SJMP     ?C0756
               ?C0757:
                                                ; SOURCE LINE # 2563
002087 BEB004         CMP      R11,#04H         ; A=R11
00208A 6803           JE       ?C0760
00208C B40310         CJNE     A,#03H,?C0759    ; A=R11
               ?C0760:
                                                ; SOURCE LINE # 2577
00208F 7F36           MOV      DR12,DR24
002091 2F33           ADD      DR12,DR12
002093 7F57           MOV      DR20,DR28
002095 2EA400FE       ADD      WR20,#0FEH
002099 2E58E800       ADD      DR20,#0E800H
                                                ; SOURCE LINE # 2579
00209D 8008           SJMP     ?C2059
               ?C0759:
                                                ; SOURCE LINE # 2580
00209F 700A           JNZ      ?C0762
                                                ; SOURCE LINE # 2582
0020A1 7F36           MOV      DR12,DR24
0020A3 2F33           ADD      DR12,DR12
0020A5 7F57           MOV      DR20,DR28
               ?C2059:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 310 

0020A7 2F53           ADD      DR20,DR12
                                                ; SOURCE LINE # 2583
0020A9 800F           SJMP     ?C2060
               ?C0762:
                                                ; SOURCE LINE # 2584
0020AB B40211         CJNE     A,#02H,?C0754    ; A=R11
                                                ; SOURCE LINE # 2586
0020AE 7F36           MOV      DR12,DR24
0020B0 2F33           ADD      DR12,DR12
0020B2 7F57           MOV      DR20,DR28
0020B4 2F53           ADD      DR20,DR12
0020B6 2EA400FD       ADD      WR20,#0FDH
               ?C2060:
0020BA 0B5A20         MOV      WR4,@DR20
0020BD 6D32           XRL      WR6,WR4
                                                ; SOURCE LINE # 2587
               ?C0754:
0020BF 0B6C           INC      DR24,#01H
               ?C0756:
0020C1 7DB1           MOV      WR22,WR2
0020C3 6DAA           XRL      WR20,WR20
0020C5 BF65           CMP      DR24,DR20
0020C7 40BE           JC       ?C0757
                                                ; SOURCE LINE # 2591
                                                ; SOURCE LINE # 2592
0020C9 DA3B           POP      DR12
0020CB AA             ERET     
;       FUNCTION GetXorSum? (END)

;       FUNCTION Test_CAL_XORSUM? (BEGIN)
                                                ; SOURCE LINE # 2601
0020CC CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2602
                                                ; SOURCE LINE # 2604
0020CE C200        R  CLR      flag
                                                ; SOURCE LINE # 2608
0020D0 7E140000    R  MOV      WR2,#WORD0 ?SC_2646
0020D4 7E040000    R  MOV      WR0,#WORD2 ?SC_2646
0020D8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2611
0020DC 7E140000    R  MOV      WR2,#WORD0 ?SC_2639
0020E0 7E040000    R  MOV      WR0,#WORD2 ?SC_2639
0020E4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2612
0020E8 6CFF           XRL      R15,R15
;---- Variable 'i' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 2614
               ?C0775:
0020EA 6CEE           XRL      R14,R14
;---- Variable 'j' assigned to Register 'R14' ----
               ?C0774:
                                                ; SOURCE LINE # 2616
0020EC 9A000000    E  ECALL    rand??
0020F0 7D13           MOV      WR2,WR6
0020F2 7E7048         MOV      R7,#048H
0020F5 AC7F           MUL      R7,R15
0020F7 7E1002         MOV      R1,#02H
0020FA AC1E           MUL      R1,R14
0020FC 2D03           ADD      WR0,WR6
0020FE 7E1F0000    R  MOV      DR4,T_tempbuf1
002102 2D30           ADD      WR6,WR0
002104 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2617
002107 0BE0           INC      R14,#01H
002109 BEE024         CMP      R14,#024H
00210C 78DE           JNE      ?C0774
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 311 

                                                ; SOURCE LINE # 2618
00210E 0BF0           INC      R15,#01H
002110 BEF012         CMP      R15,#012H
002113 78D5           JNE      ?C0775
                                                ; SOURCE LINE # 2620
002115 D200        E  SETB     ?DrvCal_CRC16??BIT
002117 7E1F0000    R  MOV      DR4,T_tempbuf1
00211B 7E240510       MOV      WR4,#0510H
00211F E4             CLR      A                ; A=R11
002120 9A000000    E  ECALL    DrvCal_CRC16?
002124 7D63           MOV      WR12,WR6
;---- Variable 'ResultCal' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 2621
002126 7A670000    E  MOV      ?printf??BYTE-2,WR12
00212A 7E140000    R  MOV      WR2,#WORD0 ?SC_2622
00212E 7E040000    R  MOV      WR0,#WORD2 ?SC_2622
002132 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2623
002136 7E1F0000    R  MOV      DR4,T_tempbuf1
00213A 6D22           XRL      WR4,WR4
00213C 7E140510       MOV      WR2,#0510H
002140 E4             CLR      A                ; A=R11
002141 9A000000    R  ECALL    GetXorSum?
002145 7D73           MOV      WR14,WR6
;---- Variable 'ResultSoft' assigned to Register 'WR14' ----
                                                ; SOURCE LINE # 2624
002147 7A770000    E  MOV      ?printf??BYTE-2,WR14
00214B 7E140000    R  MOV      WR2,#WORD0 ?SC_2603
00214F 7E040000    R  MOV      WR0,#WORD2 ?SC_2603
002153 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2626
002157 BD76           CMP      WR14,WR12
002159 7803        R  JNE      $ + 5H
00215B 020000      R  LJMP     ?C0776
                                                ; SOURCE LINE # 2628
00215E 7401           MOV      A,#01H           ; A=R11
002160 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2629
002164 7E140000    R  MOV      WR2,#WORD0 ?SC_2730
002168 7E040000    R  MOV      WR0,#WORD2 ?SC_2730
00216C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2630
002170 7E340064       MOV      WR6,#064H
002174 9A000000    E  ECALL    DelayMs?
               ?C0777:
002178 80FE           SJMP     ?C0777
               ?C0776:
                                                ; SOURCE LINE # 2634
00217A 7E140000    R  MOV      WR2,#WORD0 ?SC_2599
00217E 7E040000    R  MOV      WR0,#WORD2 ?SC_2599
002182 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2635
                                                ; SOURCE LINE # 2639
002186 7E140000    R  MOV      WR2,#WORD0 ?SC_2705
00218A 7E040000    R  MOV      WR0,#WORD2 ?SC_2705
00218E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2642
002192 D200        E  SETB     ?DrvCal_CRC16??BIT
002194 7E34E800       MOV      WR6,#0E800H
002198 7E248C00       MOV      WR4,#08C00H
00219C 7403           MOV      A,#03H           ; A=R11
00219E 9A000000    E  ECALL    DrvCal_CRC16?
0021A2 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 2643
0021A4 7A670000    E  MOV      ?printf??BYTE-2,WR12
0021A8 7E140000    R  MOV      WR2,#WORD0 ?SC_2581
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 312 

0021AC 7E040000    R  MOV      WR0,#WORD2 ?SC_2581
0021B0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2645
0021B4 9F11           SUB      DR4,DR4
0021B6 7E148C00       MOV      WR2,#08C00H
0021BA 7403           MOV      A,#03H           ; A=R11
0021BC 9A000000    R  ECALL    GetXorSum?
0021C0 7D73           MOV      WR14,WR6
                                                ; SOURCE LINE # 2646
0021C2 7A770000    E  MOV      ?printf??BYTE-2,WR14
0021C6 7E140000    R  MOV      WR2,#WORD0 ?SC_2603
0021CA 7E040000    R  MOV      WR0,#WORD2 ?SC_2603
0021CE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2648
0021D2 BD76           CMP      WR14,WR12
0021D4 7803        R  JNE      $ + 5H
0021D6 020000      R  LJMP     ?C0782
                                                ; SOURCE LINE # 2650
0021D9 7401           MOV      A,#01H           ; A=R11
0021DB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2651
0021DF 7E140000    R  MOV      WR2,#WORD0 ?SC_3930
0021E3 7E040000    R  MOV      WR0,#WORD2 ?SC_3930
0021E7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2652
0021EB 7E340064       MOV      WR6,#064H
0021EF 9A000000    E  ECALL    DelayMs?
               ?C0783:
0021F3 80FE           SJMP     ?C0783
               ?C0782:
                                                ; SOURCE LINE # 2656
0021F5 7E140000    R  MOV      WR2,#WORD0 ?SC_2669
0021F9 7E040000    R  MOV      WR0,#WORD2 ?SC_2669
0021FD 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2657
                                                ; SOURCE LINE # 2663
002201 7E140000    R  MOV      WR2,#WORD0 ?SC_2661
002205 7E040000    R  MOV      WR0,#WORD2 ?SC_2661
002209 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2666
00220D D200        E  SETB     ?DrvCal_CRC16??BIT
00220F 6D33           XRL      WR6,WR6
002211 7E240800       MOV      WR4,#0800H
002215 7402           MOV      A,#02H           ; A=R11
002217 9A000000    E  ECALL    DrvCal_CRC16?
00221B 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 2667
00221D 7A670000    E  MOV      ?printf??BYTE-2,WR12
002221 7E140000    R  MOV      WR2,#WORD0 ?SC_2581
002225 7E040000    R  MOV      WR0,#WORD2 ?SC_2581
002229 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2669
00222D 9F11           SUB      DR4,DR4
00222F 7E140800       MOV      WR2,#0800H
002233 7402           MOV      A,#02H           ; A=R11
002235 9A000000    R  ECALL    GetXorSum?
002239 7D73           MOV      WR14,WR6
                                                ; SOURCE LINE # 2670
00223B 7A770000    E  MOV      ?printf??BYTE-2,WR14
00223F 7E140000    R  MOV      WR2,#WORD0 ?SC_2603
002243 7E040000    R  MOV      WR0,#WORD2 ?SC_2603
002247 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2672
00224B BD76           CMP      WR14,WR12
00224D 7803        R  JNE      $ + 5H
00224F 020000      R  LJMP     ?C0788
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 313 

                                                ; SOURCE LINE # 2674
002252 7401           MOV      A,#01H           ; A=R11
002254 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 2675
002258 7E140000    R  MOV      WR2,#WORD0 ?SC_3930
00225C 7E040000    R  MOV      WR0,#WORD2 ?SC_3930
002260 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2676
002264 7E340064       MOV      WR6,#064H
002268 9A000000    E  ECALL    DelayMs?
               ?C0789:
00226C 80FE           SJMP     ?C0789
               ?C0788:
                                                ; SOURCE LINE # 2680
00226E 7E140000    R  MOV      WR2,#WORD0 ?SC_2669
002272 7E040000    R  MOV      WR0,#WORD2 ?SC_2669
002276 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2681
                                                ; SOURCE LINE # 2684
00227A 7E730000    R  MOV      R7,g_ucCalFlag
00227E 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 2685
002281 DA3B           POP      DR12
002283 AA             ERET     
;       FUNCTION Test_CAL_XORSUM? (END)

;       FUNCTION Test_CAL_MAC_1? (BEGIN)
                                                ; SOURCE LINE # 2702
002284 CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2703
                                                ; SOURCE LINE # 2705
002286 9F33           SUB      DR12,DR12
002288 7A3F0000    R  MOV      ulSum_c,DR12
                                                ; SOURCE LINE # 2706
00228C 7A3F0000    R  MOV      ulSum_tx,DR12
                                                ; SOURCE LINE # 2707
;---- Variable 'ulSum_rx' assigned to Register 'DR12' ----
                                                ; SOURCE LINE # 2710
002290 7E140000    R  MOV      WR2,#WORD0 ?SC_2559
002294 7E040000    R  MOV      WR0,#WORD2 ?SC_2559
002298 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2712
00229C E4             CLR      A                ; A=R11
00229D 7AB30000    R  MOV      i,R11            ; A=R11
                                                ; SOURCE LINE # 2714
               ?C0804:
0022A1 E4             CLR      A                ; A=R11
0022A2 7AB30000    R  MOV      j,R11            ; A=R11
               ?C0803:
                                                ; SOURCE LINE # 2716
0022A6 9A000000    E  ECALL    rand??
0022AA 7D13           MOV      WR2,WR6
0022AC 7E630000    R  MOV      R6,i
0022B0 7E7048         MOV      R7,#048H
0022B3 AC67           MUL      R6,R7
0022B5 7E030000    R  MOV      R0,j
0022B9 7E1002         MOV      R1,#02H
0022BC AC01           MUL      R0,R1
0022BE 2D03           ADD      WR0,WR6
0022C0 7E1F0000    R  MOV      DR4,T_tempbuf1
0022C4 2D30           ADD      WR6,WR0
0022C6 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2717
0022C9 6D11           XRL      WR2,WR2
0022CB 7E630000    R  MOV      R6,i
0022CF 7E7048         MOV      R7,#048H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 314 

0022D2 AC67           MUL      R6,R7
0022D4 7E030000    R  MOV      R0,j
0022D8 7E1002         MOV      R1,#02H
0022DB AC01           MUL      R0,R1
0022DD 2D03           ADD      WR0,WR6
0022DF 7E1F0000    R  MOV      DR4,T_tempbuf2
0022E3 2D30           ADD      WR6,WR0
0022E5 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2718
0022E8 7EB30000    R  MOV      R11,j            ; A=R11
0022EC 04             INC      A                ; A=R11
0022ED 7AB30000    R  MOV      j,R11            ; A=R11
0022F1 B424B2         CJNE     A,#024H,?C0803   ; A=R11
                                                ; SOURCE LINE # 2719
0022F4 7EB30000    R  MOV      R11,i            ; A=R11
0022F8 04             INC      A                ; A=R11
0022F9 7AB30000    R  MOV      i,R11            ; A=R11
0022FD B412A1         CJNE     A,#012H,?C0804   ; A=R11
                                                ; SOURCE LINE # 2736
002300 7E341094       MOV      WR6,#01094H
002304 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 2737
002308 7E341510       MOV      WR6,#01510H
00230C 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 2738
002310 7402           MOV      A,#02H           ; A=R11
002312 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 2739
002316 7402           MOV      A,#02H           ; A=R11
002318 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 2740
00231C 7405           MOV      A,#05H           ; A=R11
00231E 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 2741
002322 7405           MOV      A,#05H           ; A=R11
002324 7AB30000    R  MOV      CalParam+2,R11   ; A=R11
                                                ; SOURCE LINE # 2744
002328 E4             CLR      A                ; A=R11
002329 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 2745
00232D 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 2747
002331 7E000000    R  MOV      DR0,#WORD0 CalParam
002335 9A000000    E  ECALL    DrvCal_Mac?
                                                ; SOURCE LINE # 2749
002339 7402           MOV      A,#02H           ; A=R11
00233B 7AB30000    R  MOV      i,R11            ; A=R11
                                                ; SOURCE LINE # 2751
               ?C0814:
00233F 7402           MOV      A,#02H           ; A=R11
002341 7AB30000    R  MOV      j,R11            ; A=R11
               ?C0813:
                                                ; SOURCE LINE # 2754
002345 7E230000    R  MOV      R2,i
002349 7E3024         MOV      R3,#024H
00234C AC23           MUL      R2,R3
00234E 7E730000    R  MOV      R7,j
002352 0A07           MOVZ     WR0,R7
002354 2D10           ADD      WR2,WR0
002356 3E14           SLL      WR2
002358 7E1F0000    R  MOV      DR4,T_tempbuf1
00235C 2D31           ADD      WR6,WR2
00235E 0B1AF0         MOV      WR30,@DR4
002361 BEF40000       CMP      WR30,#00H
002365 5803        R  JSGE     $ + 5H
002367 020000      R  LJMP     ?C0810
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 315 

                                                ; SOURCE LINE # 2756
00236A 7D3F           MOV      WR6,WR30
00236C 1A36           MOVS     WR6,R6
00236E 1AE6           MOVS     WR28,R6
002370 7E1F0000    R  MOV      DR4,ulSum_c
002374 2F17           ADD      DR4,DR28
002376 7A1F0000    R  MOV      ulSum_c,DR4
                                                ; SOURCE LINE # 2757
00237A 7E730000    R  MOV      R7,i
00237E 0A17           MOVZ     WR2,R7
002380 6D00           XRL      WR0,WR0
002382 7F17           MOV      DR4,DR28
002384 9A000000    E  ECALL    ?C?LMUL?
002388 7F01           MOV      DR0,DR4
00238A 7E1F0000    R  MOV      DR4,ulSum_tx
00238E 2F10           ADD      DR4,DR0
002390 7A1F0000    R  MOV      ulSum_tx,DR4
                                                ; SOURCE LINE # 2758
002394 7E730000    R  MOV      R7,j
002398 0A17           MOVZ     WR2,R7
00239A 6D00           XRL      WR0,WR0
00239C 7F17           MOV      DR4,DR28
00239E 9A000000    E  ECALL    ?C?LMUL?
0023A2 2F31           ADD      DR12,DR4
                                                ; SOURCE LINE # 2759
               ?C0810:
0023A4 7EB30000    R  MOV      R11,j            ; A=R11
0023A8 04             INC      A                ; A=R11
0023A9 7AB30000    R  MOV      j,R11            ; A=R11
0023AD B40795         CJNE     A,#07H,?C0813    ; A=R11
                                                ; SOURCE LINE # 2775
0023B0 7EB30000    R  MOV      R11,i            ; A=R11
0023B4 04             INC      A                ; A=R11
0023B5 7AB30000    R  MOV      i,R11            ; A=R11
0023B9 B40783         CJNE     A,#07H,?C0814    ; A=R11
                                                ; SOURCE LINE # 2777
0023BC 7E1F0000    R  MOV      DR4,ulSum_c
0023C0 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
0023C4 7E1F0000    R  MOV      DR4,ulSum_tx
0023C8 7A1F0000    E  MOV      ?printf??BYTE-8,DR4
0023CC 7A3F0000    E  MOV      ?printf??BYTE-12,DR12
0023D0 7E140000    R  MOV      WR2,#WORD0 ?SC_2539
0023D4 7E040000    R  MOV      WR0,#WORD2 ?SC_2539
0023D8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2779
0023DC 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0023E0 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0023E4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2780
0023E8 E4             CLR      A                ; A=R11
0023E9 7AB30000    R  MOV      i,R11            ; A=R11
               ?C0819:
                                                ; SOURCE LINE # 2782
0023ED 7EA30000    R  MOV      R10,i
0023F1 7402           MOV      A,#02H           ; A=R11
0023F3 A4             MUL      AB
0023F4 7E1F0000    R  MOV      DR4,T_tempbuf2
0023F8 2D35           ADD      WR6,WR10
0023FA 0B1A30         MOV      WR6,@DR4
0023FD 7A370000    E  MOV      ?printf??BYTE-2,WR6
002401 7E140000    R  MOV      WR2,#WORD0 ?SC_2533
002405 7E040000    R  MOV      WR0,#WORD2 ?SC_2533
002409 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2783
00240D 7EB30000    R  MOV      R11,i            ; A=R11
002411 04             INC      A                ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 316 

002412 7AB30000    R  MOV      i,R11            ; A=R11
002416 B406D4         CJNE     A,#06H,?C0819    ; A=R11
                                                ; SOURCE LINE # 2784
002419 7E1F0000    R  MOV      DR4,ulSum_c
00241D 7D12           MOV      WR2,WR4
00241F 1A04           MOVS     WR0,R4
002421 7D41           MOV      WR8,WR2
002423 7E0F0000    R  MOV      DR0,T_tempbuf2
002427 0B0A50         MOV      WR10,@DR0
00242A BD45           CMP      WR8,WR10
00242C 6803        R  JE       $ + 5H
00242E 020000      R  LJMP     ?C0821
002431 5E34FFFF       ANL      WR6,#0FFFFH
002435 5E240000       ANL      WR4,#00H
002439 7D23           MOV      WR4,WR6
00243B 69300002       MOV      WR6,@DR0+0x2
00243F BD23           CMP      WR4,WR6
002441 6803        R  JE       $ + 5H
002443 020000      R  LJMP     ?C0821
002446 7E1F0000    R  MOV      DR4,ulSum_tx
00244A 7D52           MOV      WR10,WR4
00244C 1A44           MOVS     WR8,R4
00244E 7D45           MOV      WR8,WR10
002450 69500004       MOV      WR10,@DR0+0x4
002454 BD45           CMP      WR8,WR10
002456 6803        R  JE       $ + 5H
002458 020000      R  LJMP     ?C0821
00245B 5E34FFFF       ANL      WR6,#0FFFFH
00245F 5E240000       ANL      WR4,#00H
002463 7D23           MOV      WR4,WR6
002465 69300006       MOV      WR6,@DR0+0x6
002469 BD23           CMP      WR4,WR6
00246B 6803        R  JE       $ + 5H
00246D 020000      R  LJMP     ?C0821
002470 7D36           MOV      WR6,WR12
002472 1A2C           MOVS     WR4,R12
002474 7D23           MOV      WR4,WR6
002476 69300008       MOV      WR6,@DR0+0x8
00247A BD23           CMP      WR4,WR6
00247C 6803        R  JE       $ + 5H
00247E 020000      R  LJMP     ?C0821
002481 7F13           MOV      DR4,DR12
002483 5E34FFFF       ANL      WR6,#0FFFFH
002487 5E240000       ANL      WR4,#00H
00248B 7D23           MOV      WR4,WR6
00248D 6930000A       MOV      WR6,@DR0+0xA
002491 BD23           CMP      WR4,WR6
002493 6803        R  JE       $ + 5H
002495 020000      R  LJMP     ?C0821
                                                ; SOURCE LINE # 2789
002498 7E140000    R  MOV      WR2,#WORD0 ?SC_2523
00249C 7E040000    R  MOV      WR0,#WORD2 ?SC_2523
0024A0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2790
0024A4 020000      R  LJMP     ?C0822
               ?C0821:
                                                ; SOURCE LINE # 2793
0024A7 7E140000    R  MOV      WR2,#WORD0 ?SC_2510
0024AB 7E040000    R  MOV      WR0,#WORD2 ?SC_2510
0024AF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2794
0024B3 7E340064       MOV      WR6,#064H
0024B7 9A000000    E  ECALL    DelayMs?
               ?C0823:
0024BB 80FE           SJMP     ?C0823
                                                ; SOURCE LINE # 2795
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 317 

               ?C0822:
                                                ; SOURCE LINE # 2798
0024BD DA3B           POP      DR12
0024BF AA             ERET     
;       FUNCTION Test_CAL_MAC_1? (END)

;       FUNCTION Test_CAL_MAC_2? (BEGIN)
                                                ; SOURCE LINE # 2812
0024C0 CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2813
                                                ; SOURCE LINE # 2815
0024C2 9F33           SUB      DR12,DR12
0024C4 7A3F0000    R  MOV      ulSum_c,DR12
                                                ; SOURCE LINE # 2816
0024C8 7A3F0000    R  MOV      ulSum_tx,DR12
                                                ; SOURCE LINE # 2817
;---- Variable 'ulSum_rx' assigned to Register 'DR12' ----
                                                ; SOURCE LINE # 2820
0024CC 7E140000    R  MOV      WR2,#WORD0 ?SC_2559
0024D0 7E040000    R  MOV      WR0,#WORD2 ?SC_2559
0024D4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2823
0024D8 E4             CLR      A                ; A=R11
0024D9 7AB30000    R  MOV      i,R11            ; A=R11
                                                ; SOURCE LINE # 2825
               ?C0836:
0024DD E4             CLR      A                ; A=R11
0024DE 7AB30000    R  MOV      j,R11            ; A=R11
               ?C0835:
                                                ; SOURCE LINE # 2827
0024E2 9A000000    E  ECALL    rand??
0024E6 7D13           MOV      WR2,WR6
0024E8 7E630000    R  MOV      R6,i
0024EC 7E7048         MOV      R7,#048H
0024EF AC67           MUL      R6,R7
0024F1 7E030000    R  MOV      R0,j
0024F5 7E1002         MOV      R1,#02H
0024F8 AC01           MUL      R0,R1
0024FA 2D03           ADD      WR0,WR6
0024FC 7E1F0000    R  MOV      DR4,T_tempbuf1
002500 2D30           ADD      WR6,WR0
002502 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2828
002505 6D11           XRL      WR2,WR2
002507 7E630000    R  MOV      R6,i
00250B 7E7048         MOV      R7,#048H
00250E AC67           MUL      R6,R7
002510 7E030000    R  MOV      R0,j
002514 7E1002         MOV      R1,#02H
002517 AC01           MUL      R0,R1
002519 2D03           ADD      WR0,WR6
00251B 7E1F0000    R  MOV      DR4,T_tempbuf2
00251F 2D30           ADD      WR6,WR0
002521 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 2829
002524 7EB30000    R  MOV      R11,j            ; A=R11
002528 04             INC      A                ; A=R11
002529 7AB30000    R  MOV      j,R11            ; A=R11
00252D B424B2         CJNE     A,#024H,?C0835   ; A=R11
                                                ; SOURCE LINE # 2830
002530 7EB30000    R  MOV      R11,i            ; A=R11
002534 04             INC      A                ; A=R11
002535 7AB30000    R  MOV      i,R11            ; A=R11
002539 B412A1         CJNE     A,#012H,?C0836   ; A=R11
                                                ; SOURCE LINE # 2844
00253C 7E341000       MOV      WR6,#01000H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 318 

002540 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 2845
002544 7E341510       MOV      WR6,#01510H
002548 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 2846
00254C E4             CLR      A                ; A=R11
00254D 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 2847
002551 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 2848
002555 7405           MOV      A,#05H           ; A=R11
002557 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 2849
00255B 7405           MOV      A,#05H           ; A=R11
00255D 7AB30000    R  MOV      CalParam+2,R11   ; A=R11
                                                ; SOURCE LINE # 2850
002561 7403           MOV      A,#03H           ; A=R11
002563 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 2851
002567 E4             CLR      A                ; A=R11
002568 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 2853
00256C 7E000000    R  MOV      DR0,#WORD0 CalParam
002570 9A000000    E  ECALL    DrvCal_Mac?
                                                ; SOURCE LINE # 2855
002574 E4             CLR      A                ; A=R11
002575 7AB30000    R  MOV      i,R11            ; A=R11
                                                ; SOURCE LINE # 2857
               ?C0846:
002579 E4             CLR      A                ; A=R11
00257A 7AB30000    R  MOV      j,R11            ; A=R11
               ?C0845:
                                                ; SOURCE LINE # 2867
00257E 7E230000    R  MOV      R2,i
002582 7E3005         MOV      R3,#05H
002585 AC23           MUL      R2,R3
002587 7E730000    R  MOV      R7,j
00258B 0A07           MOVZ     WR0,R7
00258D 2D10           ADD      WR2,WR0
00258F 3E14           SLL      WR2
002591 7E1F0000    R  MOV      DR4,T_tempbuf1
002595 2D31           ADD      WR6,WR2
002597 0B1AF0         MOV      WR30,@DR4
00259A BEF40000       CMP      WR30,#00H
00259E 5803        R  JSGE     $ + 5H
0025A0 020000      R  LJMP     ?C0847
                                                ; SOURCE LINE # 2869
0025A3 7D3F           MOV      WR6,WR30
0025A5 1A36           MOVS     WR6,R6
0025A7 1AE6           MOVS     WR28,R6
                                                ; SOURCE LINE # 2870
                                                ; SOURCE LINE # 2871
                                                ; SOURCE LINE # 2872
0025A9 020000      R  LJMP     ?C2061
               ?C0847:
                                                ; SOURCE LINE # 2873
0025AC 7E230000    R  MOV      R2,i
0025B0 7E3005         MOV      R3,#05H
0025B3 AC23           MUL      R2,R3
0025B5 7E730000    R  MOV      R7,j
0025B9 0A07           MOVZ     WR0,R7
0025BB 2D10           ADD      WR2,WR0
0025BD 3E14           SLL      WR2
0025BF 7E1F0000    R  MOV      DR4,T_tempbuf1
0025C3 2D31           ADD      WR6,WR2
0025C5 0B1A30         MOV      WR6,@DR4
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 319 

0025C8 6E34FFFF       XRL      WR6,#0FFFFH
0025CC 0B34           INC      WR6,#01H
0025CE BE340000       CMP      WR6,#00H
0025D2 5803        R  JSGE     $ + 5H
0025D4 020000      R  LJMP     ?C0842
                                                ; SOURCE LINE # 2875
0025D7 7E230000    R  MOV      R2,i
0025DB 7E3005         MOV      R3,#05H
0025DE AC23           MUL      R2,R3
0025E0 7E730000    R  MOV      R7,j
0025E4 0A07           MOVZ     WR0,R7
0025E6 2D10           ADD      WR2,WR0
0025E8 3E14           SLL      WR2
0025EA 7E1F0000    R  MOV      DR4,T_tempbuf1
0025EE 2D31           ADD      WR6,WR2
0025F0 0B1A30         MOV      WR6,@DR4
0025F3 1A26           MOVS     WR4,R6
0025F5 1A24           MOVS     WR4,R4
0025F7 9F77           SUB      DR28,DR28
0025F9 9F71           SUB      DR28,DR4
               ?C2061:
0025FB 7E1F0000    R  MOV      DR4,ulSum_c
0025FF 2F17           ADD      DR4,DR28
002601 7A1F0000    R  MOV      ulSum_c,DR4
                                                ; SOURCE LINE # 2876
002605 7E730000    R  MOV      R7,i
002609 0A17           MOVZ     WR2,R7
00260B 6D00           XRL      WR0,WR0
00260D 7F17           MOV      DR4,DR28
00260F 9A000000    E  ECALL    ?C?LMUL?
002613 7F01           MOV      DR0,DR4
002615 7E1F0000    R  MOV      DR4,ulSum_tx
002619 2F10           ADD      DR4,DR0
00261B 7A1F0000    R  MOV      ulSum_tx,DR4
                                                ; SOURCE LINE # 2877
00261F 7E730000    R  MOV      R7,j
002623 0A17           MOVZ     WR2,R7
002625 6D00           XRL      WR0,WR0
002627 7F17           MOV      DR4,DR28
002629 9A000000    E  ECALL    ?C?LMUL?
00262D 2F31           ADD      DR12,DR4
                                                ; SOURCE LINE # 2878
               ?C0842:
00262F 7EB30000    R  MOV      R11,j            ; A=R11
002633 04             INC      A                ; A=R11
002634 7AB30000    R  MOV      j,R11            ; A=R11
002638 B40502      R  CJNE     A,#05H,$ + 5H    ; A=R11
00263B 8003        R  SJMP     $ + 5H
00263D 020000      R  LJMP     ?C0845
                                                ; SOURCE LINE # 2882
002640 7EB30000    R  MOV      R11,i            ; A=R11
002644 04             INC      A                ; A=R11
002645 7AB30000    R  MOV      i,R11            ; A=R11
002649 B40502      R  CJNE     A,#05H,$ + 5H    ; A=R11
00264C 8003        R  SJMP     $ + 5H
00264E 020000      R  LJMP     ?C0846
                                                ; SOURCE LINE # 2883
002651 7E1F0000    R  MOV      DR4,ulSum_c
002655 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
002659 7E1F0000    R  MOV      DR4,ulSum_tx
00265D 7A1F0000    E  MOV      ?printf??BYTE-8,DR4
002661 7A3F0000    E  MOV      ?printf??BYTE-12,DR12
002665 7E140000    R  MOV      WR2,#WORD0 ?SC_2491
002669 7E040000    R  MOV      WR0,#WORD2 ?SC_2491
00266D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2885
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 320 

002671 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
002675 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
002679 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2886
00267D E4             CLR      A                ; A=R11
00267E 7AB30000    R  MOV      i,R11            ; A=R11
               ?C0853:
                                                ; SOURCE LINE # 2888
002682 7EA30000    R  MOV      R10,i
002686 7402           MOV      A,#02H           ; A=R11
002688 A4             MUL      AB
002689 7E1F0000    R  MOV      DR4,T_tempbuf2
00268D 2D35           ADD      WR6,WR10
00268F 0B1A30         MOV      WR6,@DR4
002692 7A370000    E  MOV      ?printf??BYTE-2,WR6
002696 7E140000    R  MOV      WR2,#WORD0 ?SC_2533
00269A 7E040000    R  MOV      WR0,#WORD2 ?SC_2533
00269E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2889
0026A2 7EB30000    R  MOV      R11,i            ; A=R11
0026A6 04             INC      A                ; A=R11
0026A7 7AB30000    R  MOV      i,R11            ; A=R11
0026AB B406D4         CJNE     A,#06H,?C0853    ; A=R11
                                                ; SOURCE LINE # 2892
0026AE 7E1F0000    R  MOV      DR4,ulSum_c
0026B2 7D12           MOV      WR2,WR4
0026B4 1A04           MOVS     WR0,R4
0026B6 7D41           MOV      WR8,WR2
0026B8 7E0F0000    R  MOV      DR0,T_tempbuf2
0026BC 0B0A50         MOV      WR10,@DR0
0026BF BD45           CMP      WR8,WR10
0026C1 6803        R  JE       $ + 5H
0026C3 020000      R  LJMP     ?C0855
0026C6 5E34FFFF       ANL      WR6,#0FFFFH
0026CA 5E240000       ANL      WR4,#00H
0026CE 7D23           MOV      WR4,WR6
0026D0 69300002       MOV      WR6,@DR0+0x2
0026D4 BD23           CMP      WR4,WR6
0026D6 6803        R  JE       $ + 5H
0026D8 020000      R  LJMP     ?C0855
0026DB 7E1F0000    R  MOV      DR4,ulSum_tx
0026DF 7D52           MOV      WR10,WR4
0026E1 1A44           MOVS     WR8,R4
0026E3 7D45           MOV      WR8,WR10
0026E5 69500004       MOV      WR10,@DR0+0x4
0026E9 BD45           CMP      WR8,WR10
0026EB 6803        R  JE       $ + 5H
0026ED 020000      R  LJMP     ?C0855
0026F0 5E34FFFF       ANL      WR6,#0FFFFH
0026F4 5E240000       ANL      WR4,#00H
0026F8 7D23           MOV      WR4,WR6
0026FA 69300006       MOV      WR6,@DR0+0x6
0026FE BD23           CMP      WR4,WR6
002700 6803        R  JE       $ + 5H
002702 020000      R  LJMP     ?C0855
002705 7D36           MOV      WR6,WR12
002707 1A2C           MOVS     WR4,R12
002709 7D23           MOV      WR4,WR6
00270B 69300008       MOV      WR6,@DR0+0x8
00270F BD23           CMP      WR4,WR6
002711 6803        R  JE       $ + 5H
002713 020000      R  LJMP     ?C0855
002716 7F13           MOV      DR4,DR12
002718 5E34FFFF       ANL      WR6,#0FFFFH
00271C 5E240000       ANL      WR4,#00H
002720 7D23           MOV      WR4,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 321 

002722 6930000A       MOV      WR6,@DR0+0xA
002726 BD23           CMP      WR4,WR6
002728 6803        R  JE       $ + 5H
00272A 020000      R  LJMP     ?C0855
                                                ; SOURCE LINE # 2896
00272D 7E140000    R  MOV      WR2,#WORD0 ?SC_2481
002731 7E040000    R  MOV      WR0,#WORD2 ?SC_2481
002735 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2897
002739 020000      R  LJMP     ?C0856
               ?C0855:
                                                ; SOURCE LINE # 2900
00273C 7E140000    R  MOV      WR2,#WORD0 ?SC_2468
002740 7E040000    R  MOV      WR0,#WORD2 ?SC_2468
002744 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2901
002748 7E340064       MOV      WR6,#064H
00274C 9A000000    E  ECALL    DelayMs?
               ?C0857:
002750 80FE           SJMP     ?C0857
                                                ; SOURCE LINE # 2902
               ?C0856:
                                                ; SOURCE LINE # 2904
002752 DA3B           POP      DR12
002754 AA             ERET     
;       FUNCTION Test_CAL_MAC_2? (END)

;       FUNCTION Test_CAL_ID? (BEGIN)
                                                ; SOURCE LINE # 2917
002755 CA3B           PUSH     DR12
                                                ; SOURCE LINE # 2918
                                                ; SOURCE LINE # 2920
002757 7EC004         MOV      R12,#04H
;---- Variable 'ucLastNum' assigned to Register 'R12' ----
                                                ; SOURCE LINE # 2921
00275A 7ED008         MOV      R13,#08H
;---- Variable 'ucCurrNum' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 2922
00275D 7EF00A         MOV      R15,#0AH
;---- Variable 'ucMaxNum' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 2925
002760 7E140000    R  MOV      WR2,#WORD0 ?SC_2448
002764 7E040000    R  MOV      WR0,#WORD2 ?SC_2448
002768 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2928
00276C 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
00276E 020000      R  LJMP     ?C0863
               ?C0864:
                                                ; SOURCE LINE # 2930
002771 7E347FFF       MOV      WR6,#07FFFH
002775 7402           MOV      A,#02H           ; A=R11
002777 ACBE           MUL      R11,R14          ; A=R11
002779 59350000    R  MOV      @WR10+g_stFrmData+0x1468,WR6
                                                ; SOURCE LINE # 2931
00277D 59350000    R  MOV      @WR10+g_stFrmData+0x1440,WR6
                                                ; SOURCE LINE # 2932
002781 0BE0           INC      R14,#01H
               ?C0863:
002783 0A2F           MOVZ     WR4,R15
002785 3E24           SLL      WR4
002787 0A3E           MOVZ     WR6,R14
002789 BD32           CMP      WR6,WR4
00278B 40E4           JC       ?C0864
                                                ; SOURCE LINE # 2934
00278D 6CEE           XRL      R14,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 322 

00278F 020000      R  LJMP     ?C0868
               ?C0869:
                                                ; SOURCE LINE # 2936
002792 7E700A         MOV      R7,#0AH
002795 AC7E           MUL      R7,R14
002797 7E5002         MOV      R5,#02H
00279A AC5E           MUL      R5,R14
00279C 3E24           SLL      WR4
00279E 59320000    R  MOV      @WR4+g_stFrmData+0x1440,WR6
                                                ; SOURCE LINE # 2937
0027A2 59320000    R  MOV      @WR4+g_stFrmData+0x1442,WR6
                                                ; SOURCE LINE # 2938
0027A6 0BE0           INC      R14,#01H
               ?C0868:
0027A8 BCCE           CMP      R12,R14
0027AA 38E6           JG       ?C0869
                                                ; SOURCE LINE # 2940
0027AC 6CEE           XRL      R14,R14
0027AE 020000      R  LJMP     ?C0873
               ?C0874:
                                                ; SOURCE LINE # 2942
0027B1 0A3E           MOVZ     WR6,R14
0027B3 0A2D           MOVZ     WR4,R13
0027B5 9D23           SUB      WR4,WR6
0027B7 7E34000A       MOV      WR6,#0AH
0027BB AD32           MUL      WR6,WR4
0027BD 0B34           INC      WR6,#01H
0027BF 7E5002         MOV      R5,#02H
0027C2 AC5E           MUL      R5,R14
0027C4 3E24           SLL      WR4
0027C6 59320000    R  MOV      @WR4+g_stFrmData+0x1468,WR6
                                                ; SOURCE LINE # 2943
0027CA 59320000    R  MOV      @WR4+g_stFrmData+0x146A,WR6
                                                ; SOURCE LINE # 2944
0027CE 0BE0           INC      R14,#01H
               ?C0873:
0027D0 BCDE           CMP      R13,R14
0027D2 38DD           JG       ?C0874
                                                ; SOURCE LINE # 2946
0027D4 7E342440       MOV      WR6,#02440H
0027D8 7A370000    R  MOV      stKmIDp+2,WR6
                                                ; SOURCE LINE # 2947
0027DC 7E342468       MOV      WR6,#02468H
0027E0 7A370000    R  MOV      stKmIDp+4,WR6
                                                ; SOURCE LINE # 2948
0027E4 7E1F0000    R  MOV      DR4,T_tempOut
0027E8 7A370000    R  MOV      stKmIDp+6,WR6
                                                ; SOURCE LINE # 2949
0027EC 7AC30000    R  MOV      stKmIDp,R12
                                                ; SOURCE LINE # 2950
0027F0 7AD30000    R  MOV      stKmIDp+1,R13
                                                ; SOURCE LINE # 2952
0027F4 0A3C           MOVZ     WR6,R12
0027F6 7A370000    E  MOV      ?printf??BYTE-2,WR6
0027FA 0A3D           MOVZ     WR6,R13
0027FC 7A370000    E  MOV      ?printf??BYTE-4,WR6
002800 7E140000    R  MOV      WR2,#WORD0 ?SC_2427
002804 7E040000    R  MOV      WR0,#WORD2 ?SC_2427
002808 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2953
00280C 7E000000    R  MOV      DR0,#WORD0 stKmIDp
002810 9A000000    E  ECALL    DrvCal_KmID?
                                                ; SOURCE LINE # 2955
002814 6CEE           XRL      R14,R14
002816 020000      R  LJMP     ?C0878
               ?C0879:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 323 

                                                ; SOURCE LINE # 2956
                                                ; SOURCE LINE # 2958
002819 7402           MOV      A,#02H           ; A=R11
00281B ACBE           MUL      R11,R14          ; A=R11
00281D 7E1F0000    R  MOV      DR4,T_tempOut
002821 2D35           ADD      WR6,WR10
002823 0B1A50         MOV      WR10,@DR4
002826 7AB30000    R  MOV      id,R11           ; A=R11
                                                ; SOURCE LINE # 2960
00282A 0A3E           MOVZ     WR6,R14
00282C 7A370000    E  MOV      ?printf??BYTE-2,WR6
002830 7E730000    R  MOV      R7,id
002834 B40F02      R  CJNE     A,#0FH,$ + 5H    ; A=R11
002837 8003        R  SJMP     $ + 5H
002839 020000      R  LJMP     ?C0881
                                                ; SOURCE LINE # 2962
00283C 0A37           MOVZ     WR6,R7
00283E 0B34           INC      WR6,#01H
002840 7A370000    E  MOV      ?printf??BYTE-4,WR6
002844 7404           MOV      A,#04H           ; A=R11
002846 ACBE           MUL      R11,R14          ; A=R11
002848 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1440
00284C 7A370000    E  MOV      ?printf??BYTE-6,WR6
002850 7E140000    R  MOV      WR2,#WORD0 ?SC_2401
002854 7E040000    R  MOV      WR0,#WORD2 ?SC_2401
                                                ; SOURCE LINE # 2963
002858 020000      R  LJMP     ?C2062
               ?C0881:
                                                ; SOURCE LINE # 2966
00285B 0A37           MOVZ     WR6,R7
00285D 0B34           INC      WR6,#01H
00285F 7A370000    E  MOV      ?printf??BYTE-4,WR6
002863 7404           MOV      A,#04H           ; A=R11
002865 ACBE           MUL      R11,R14          ; A=R11
002867 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1440
00286B 7A370000    E  MOV      ?printf??BYTE-6,WR6
00286F 7EA30000    R  MOV      R10,id
002873 7404           MOV      A,#04H           ; A=R11
002875 A4             MUL      AB
002876 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1468
00287A 7A370000    E  MOV      ?printf??BYTE-8,WR6
00287E 7E140000    R  MOV      WR2,#WORD0 ?SC_2374
002882 7E040000    R  MOV      WR0,#WORD2 ?SC_2374
               ?C2062:
002886 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2967
                                                ; SOURCE LINE # 2968
00288A 0BE0           INC      R14,#01H
               ?C0878:
00288C BCFE           CMP      R15,R14
00288E 3889           JG       ?C0879
                                                ; SOURCE LINE # 2970
002890 7E1F0000    R  MOV      DR4,T_tempOut
002894 0B1A10         MOV      WR2,@DR4
002897 BE140007       CMP      WR2,#07H
00289B 6803        R  JE       $ + 5H
00289D 020000      R  LJMP     ?C0884
0028A0 69110002       MOV      WR2,@DR4+0x2
0028A4 BE140006       CMP      WR2,#06H
0028A8 6803        R  JE       $ + 5H
0028AA 020000      R  LJMP     ?C0884
0028AD 69110004       MOV      WR2,@DR4+0x4
0028B1 BE140005       CMP      WR2,#05H
0028B5 6803        R  JE       $ + 5H
0028B7 020000      R  LJMP     ?C0884
0028BA 69310006       MOV      WR6,@DR4+0x6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 324 

0028BE BE340004       CMP      WR6,#04H
0028C2 7803        R  JNE      $ + 5H
0028C4 020000      R  LJMP     ?C0883
               ?C0884:
                                                ; SOURCE LINE # 2972
0028C7 7E140000    R  MOV      WR2,#WORD0 ?SC_2367
0028CB 7E040000    R  MOV      WR0,#WORD2 ?SC_2367
0028CF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2973
0028D3 7E340064       MOV      WR6,#064H
0028D7 9A000000    E  ECALL    DelayMs?
               ?C0885:
0028DB 80FE           SJMP     ?C0885
                                                ; SOURCE LINE # 2974
               ?C0883:
                                                ; SOURCE LINE # 2976
0028DD 7EC008         MOV      R12,#08H
                                                ; SOURCE LINE # 2977
0028E0 7ED004         MOV      R13,#04H
                                                ; SOURCE LINE # 2978
0028E3 7408           MOV      A,#08H           ; A=R11
0028E5 7AB30000    R  MOV      stKmIDp,R11      ; A=R11
                                                ; SOURCE LINE # 2979
0028E9 7404           MOV      A,#04H           ; A=R11
0028EB 7AB30000    R  MOV      stKmIDp+1,R11    ; A=R11
                                                ; SOURCE LINE # 2981
0028EF 7E340008       MOV      WR6,#08H
0028F3 7A370000    E  MOV      ?printf??BYTE-2,WR6
0028F7 7E340004       MOV      WR6,#04H
0028FB 7A370000    E  MOV      ?printf??BYTE-4,WR6
0028FF 7E140000    R  MOV      WR2,#WORD0 ?SC_2345
002903 7E040000    R  MOV      WR0,#WORD2 ?SC_2345
002907 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 2983
00290B 6CEE           XRL      R14,R14
00290D 020000      R  LJMP     ?C0891
               ?C0892:
                                                ; SOURCE LINE # 2985
002910 7E347FFF       MOV      WR6,#07FFFH
002914 7402           MOV      A,#02H           ; A=R11
002916 ACBE           MUL      R11,R14          ; A=R11
002918 59350000    R  MOV      @WR10+g_stFrmData+0x1468,WR6
                                                ; SOURCE LINE # 2986
00291C 59350000    R  MOV      @WR10+g_stFrmData+0x1440,WR6
                                                ; SOURCE LINE # 2987
002920 0BE0           INC      R14,#01H
               ?C0891:
002922 0A2F           MOVZ     WR4,R15
002924 3E24           SLL      WR4
002926 0A3E           MOVZ     WR6,R14
002928 BD32           CMP      WR6,WR4
00292A 40E4           JC       ?C0892
                                                ; SOURCE LINE # 2989
00292C 6CEE           XRL      R14,R14
00292E 020000      R  LJMP     ?C0896
               ?C0897:
                                                ; SOURCE LINE # 2991
002931 7E700A         MOV      R7,#0AH
002934 AC7E           MUL      R7,R14
002936 7E5002         MOV      R5,#02H
002939 AC5E           MUL      R5,R14
00293B 3E24           SLL      WR4
00293D 59320000    R  MOV      @WR4+g_stFrmData+0x1440,WR6
                                                ; SOURCE LINE # 2992
002941 59320000    R  MOV      @WR4+g_stFrmData+0x1442,WR6
                                                ; SOURCE LINE # 2993
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 325 

002945 0BE0           INC      R14,#01H
               ?C0896:
002947 BCCE           CMP      R12,R14
002949 38E6           JG       ?C0897
                                                ; SOURCE LINE # 2995
00294B 6CEE           XRL      R14,R14
00294D 020000      R  LJMP     ?C0901
               ?C0902:
                                                ; SOURCE LINE # 2997
002950 7E700A         MOV      R7,#0AH
002953 AC7E           MUL      R7,R14
002955 0B34           INC      WR6,#01H
002957 7E5002         MOV      R5,#02H
00295A AC5E           MUL      R5,R14
00295C 3E24           SLL      WR4
00295E 59320000    R  MOV      @WR4+g_stFrmData+0x1468,WR6
                                                ; SOURCE LINE # 2998
002962 59320000    R  MOV      @WR4+g_stFrmData+0x146A,WR6
                                                ; SOURCE LINE # 2999
002966 0BE0           INC      R14,#01H
               ?C0901:
002968 BCDE           CMP      R13,R14
00296A 38E4           JG       ?C0902
                                                ; SOURCE LINE # 3001
00296C 7E000000    R  MOV      DR0,#WORD0 stKmIDp
002970 9A000000    E  ECALL    DrvCal_KmID?
                                                ; SOURCE LINE # 3003
002974 6CEE           XRL      R14,R14
002976 020000      R  LJMP     ?C0906
               ?C0907:
                                                ; SOURCE LINE # 3004
                                                ; SOURCE LINE # 3006
002979 7402           MOV      A,#02H           ; A=R11
00297B ACBE           MUL      R11,R14          ; A=R11
00297D 7E1F0000    R  MOV      DR4,T_tempOut
002981 2D35           ADD      WR6,WR10
002983 0B1A60         MOV      WR12,@DR4
;---- Variable 'id' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 3007
002986 BED00F         CMP      R13,#0FH
002989 0A3E           MOVZ     WR6,R14
00298B 7A370000    E  MOV      ?printf??BYTE-2,WR6
00298F 0A3D           MOVZ     WR6,R13
002991 6803        R  JE       $ + 5H
002993 020000      R  LJMP     ?C0909
                                                ; SOURCE LINE # 3009
002996 0B34           INC      WR6,#01H
002998 7A370000    E  MOV      ?printf??BYTE-4,WR6
00299C 7404           MOV      A,#04H           ; A=R11
00299E ACBE           MUL      R11,R14          ; A=R11
0029A0 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1440
0029A4 7A370000    E  MOV      ?printf??BYTE-6,WR6
0029A8 7E140000    R  MOV      WR2,#WORD0 ?SC_2323
0029AC 7E040000    R  MOV      WR0,#WORD2 ?SC_2323
                                                ; SOURCE LINE # 3010
0029B0 020000      R  LJMP     ?C2063
               ?C0909:
                                                ; SOURCE LINE # 3013
0029B3 0B34           INC      WR6,#01H
0029B5 7A370000    E  MOV      ?printf??BYTE-4,WR6
0029B9 7404           MOV      A,#04H           ; A=R11
0029BB ACBE           MUL      R11,R14          ; A=R11
0029BD 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1440
0029C1 7A370000    E  MOV      ?printf??BYTE-6,WR6
0029C5 7404           MOV      A,#04H           ; A=R11
0029C7 ACBD           MUL      R11,R13          ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 326 

0029C9 49350000    R  MOV      WR6,@WR10+g_stFrmData+0x1468
0029CD 7A370000    E  MOV      ?printf??BYTE-8,WR6
0029D1 7E140000    R  MOV      WR2,#WORD0 ?SC_2302
0029D5 7E040000    R  MOV      WR0,#WORD2 ?SC_2302
               ?C2063:
0029D9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3014
                                                ; SOURCE LINE # 3015
0029DD 0BE0           INC      R14,#01H
               ?C0906:
0029DF BCFE           CMP      R15,R14
0029E1 3896           JG       ?C0907
                                                ; SOURCE LINE # 3017
0029E3 7E1F0000    R  MOV      DR4,T_tempOut
0029E7 0B1A10         MOV      WR2,@DR4
0029EA 4D11           ORL      WR2,WR2
0029EC 6803        R  JE       $ + 5H
0029EE 020000      R  LJMP     ?C0912
0029F1 69110002       MOV      WR2,@DR4+0x2
0029F5 BE140001       CMP      WR2,#01H
0029F9 6803        R  JE       $ + 5H
0029FB 020000      R  LJMP     ?C0912
0029FE 69110004       MOV      WR2,@DR4+0x4
002A02 BE140002       CMP      WR2,#02H
002A06 6803        R  JE       $ + 5H
002A08 020000      R  LJMP     ?C0912
002A0B 69310006       MOV      WR6,@DR4+0x6
002A0F BE340003       CMP      WR6,#03H
002A13 7803        R  JNE      $ + 5H
002A15 020000      R  LJMP     ?C0911
               ?C0912:
                                                ; SOURCE LINE # 3019
002A18 7E140000    R  MOV      WR2,#WORD0 ?SC_2367
002A1C 7E040000    R  MOV      WR0,#WORD2 ?SC_2367
002A20 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3020
002A24 7E340064       MOV      WR6,#064H
002A28 9A000000    E  ECALL    DelayMs?
               ?C0913:
002A2C 80FE           SJMP     ?C0913
                                                ; SOURCE LINE # 3021
               ?C0911:
002A2E DA3B           POP      DR12
002A30 AA             ERET     
;       FUNCTION Test_CAL_ID? (END)

;       FUNCTION Test_CAL_SearchPeak? (BEGIN)
                                                ; SOURCE LINE # 3037
002A31 CA79           PUSH     WR14
                                                ; SOURCE LINE # 3038
                                                ; SOURCE LINE # 3049
002A33 6CFF           XRL      R15,R15
;---- Variable 'i' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 3051
               ?C0926:
002A35 6CEE           XRL      R14,R14
002A37 6D11           XRL      WR2,WR2
;---- Variable 'j' assigned to Register 'R14' ----
               ?C0925:
                                                ; SOURCE LINE # 3053
002A39 7E1024         MOV      R1,#024H
002A3C AC1F           MUL      R1,R15
002A3E 0A3E           MOVZ     WR6,R14
002A40 2D03           ADD      WR0,WR6
002A42 3E04           SLL      WR0
002A44 7E1F0000    R  MOV      DR4,T_tempbuf3
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 327 

002A48 2D30           ADD      WR6,WR0
002A4A 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3054
002A4D 0BE0           INC      R14,#01H
002A4F BEE024         CMP      R14,#024H
002A52 78E5           JNE      ?C0925
                                                ; SOURCE LINE # 3055
002A54 0BF0           INC      R15,#01H
002A56 BEF012         CMP      R15,#012H
002A59 78DA           JNE      ?C0926
                                                ; SOURCE LINE # 3056
002A5B 7E140000    R  MOV      WR2,#WORD0 ?SC_2272
002A5F 7E040000    R  MOV      WR0,#WORD2 ?SC_2272
002A63 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3059
002A67 7E34FE70       MOV      WR6,#0FE70H
002A6B 7E0F0000    R  MOV      DR0,T_tempbuf3
002A6F 7930009E       MOV      @DR0+0x9E,WR6
                                                ; SOURCE LINE # 3060
002A73 7E340064       MOV      WR6,#064H
002A77 7E0F0000    R  MOV      DR0,T_tempbuf3
002A7B 793000A0       MOV      @DR0+0xA0,WR6
                                                ; SOURCE LINE # 3061
002A7F 7E340064       MOV      WR6,#064H
002A83 7E0F0000    R  MOV      DR0,T_tempbuf3
002A87 793000A2       MOV      @DR0+0xA2,WR6
                                                ; SOURCE LINE # 3063
002A8B 7E34FF06       MOV      WR6,#0FF06H
002A8F 7E0F0000    R  MOV      DR0,T_tempbuf3
002A93 793000E6       MOV      @DR0+0xE6,WR6
                                                ; SOURCE LINE # 3064
002A97 7E340320       MOV      WR6,#0320H
002A9B 7E0F0000    R  MOV      DR0,T_tempbuf3
002A9F 793000E8       MOV      @DR0+0xE8,WR6
                                                ; SOURCE LINE # 3065
002AA3 7E34FF38       MOV      WR6,#0FF38H
002AA7 7E0F0000    R  MOV      DR0,T_tempbuf3
002AAB 793000EA       MOV      @DR0+0xEA,WR6
                                                ; SOURCE LINE # 3067
002AAF 7E34FF38       MOV      WR6,#0FF38H
002AB3 7E0F0000    R  MOV      DR0,T_tempbuf3
002AB7 7930012E       MOV      @DR0+0x12E,WR6
                                                ; SOURCE LINE # 3068
002ABB 7E34FF38       MOV      WR6,#0FF38H
002ABF 7E0F0000    R  MOV      DR0,T_tempbuf3
002AC3 79300130       MOV      @DR0+0x130,WR6
                                                ; SOURCE LINE # 3069
002AC7 7E340064       MOV      WR6,#064H
002ACB 7E0F0000    R  MOV      DR0,T_tempbuf3
002ACF 79300132       MOV      @DR0+0x132,WR6
                                                ; SOURCE LINE # 3071
002AD3 7E34FB50       MOV      WR6,#0FB50H
002AD7 7E0F0000    R  MOV      DR0,T_tempbuf3
002ADB 79300250       MOV      @DR0+0x250,WR6
                                                ; SOURCE LINE # 3072
002ADF 7E341FA4       MOV      WR6,#01FA4H
002AE3 7E0F0000    R  MOV      DR0,T_tempbuf3
002AE7 7930017A       MOV      @DR0+0x17A,WR6
                                                ; SOURCE LINE # 3074
002AEB 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 3076
               ?C0936:
002AED 6CEE           XRL      R14,R14
               ?C0935:
                                                ; SOURCE LINE # 3078
002AEF 7E3024         MOV      R3,#024H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 328 

002AF2 AC3F           MUL      R3,R15
002AF4 0A0E           MOVZ     WR0,R14
002AF6 2D10           ADD      WR2,WR0
002AF8 3E14           SLL      WR2
002AFA 7E1F0000    R  MOV      DR4,T_tempbuf3
002AFE 2D31           ADD      WR6,WR2
002B00 0B1A30         MOV      WR6,@DR4
002B03 7A370000    E  MOV      ?printf??BYTE-2,WR6
002B07 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
002B0B 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
002B0F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3079
002B13 0BE0           INC      R14,#01H
002B15 BEE024         CMP      R14,#024H
002B18 78D5           JNE      ?C0935
                                                ; SOURCE LINE # 3080
002B1A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
002B1E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
002B22 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3081
002B26 0BF0           INC      R15,#01H
002B28 BEF012         CMP      R15,#012H
002B2B 78C0           JNE      ?C0936
                                                ; SOURCE LINE # 3084
002B2D 7E340000    R  MOV      WR6,#WORD0 ausNegPeaks+2
002B31 5E34FFFE       ANL      WR6,#0FFFEH
002B35 6D22           XRL      WR4,WR4
002B37 7A1F0000    R  MOV      pNegPeakBuf,DR4
                                                ; SOURCE LINE # 3087
002B3B 7E341F30       MOV      WR6,#01F30H
002B3F 7A370000    R  MOV      stMcPDP+4,WR6
                                                ; SOURCE LINE # 3088
002B43 7E1F0000    R  MOV      DR4,pNegPeakBuf
002B47 7A370000    R  MOV      stMcPDP+8,WR6
                                                ; SOURCE LINE # 3089
002B4B 7E341A20       MOV      WR6,#01A20H
002B4F 7A370000    R  MOV      stMcPDP+6,WR6
                                                ; SOURCE LINE # 3091
002B53 7412           MOV      A,#012H          ; A=R11
002B55 7AB30000    R  MOV      stMcPDP+1,R11    ; A=R11
                                                ; SOURCE LINE # 3092
002B59 7424           MOV      A,#024H          ; A=R11
002B5B 7AB30000    R  MOV      stMcPDP,R11      ; A=R11
                                                ; SOURCE LINE # 3093
002B5F 7E3400C8       MOV      WR6,#0C8H
002B63 7A370000    R  MOV      stMcPDP+10,WR6
                                                ; SOURCE LINE # 3094
002B67 7E34FF38       MOV      WR6,#0FF38H
002B6B 7A370000    R  MOV      stMcPDP+12,WR6
                                                ; SOURCE LINE # 3095
002B6F 7E340032       MOV      WR6,#032H
002B73 7A370000    R  MOV      stMcPDP+14,WR6
                                                ; SOURCE LINE # 3096
002B77 7E34FFCE       MOV      WR6,#0FFCEH
002B7B 7A370000    R  MOV      stMcPDP+16,WR6
                                                ; SOURCE LINE # 3098
002B7F 741D           MOV      A,#01DH          ; A=R11
002B81 7AB30000    R  MOV      stMcPDP+2,R11    ; A=R11
                                                ; SOURCE LINE # 3099
002B85 E4             CLR      A                ; A=R11
002B86 7AB30000    R  MOV      stMcPDP+3,R11    ; A=R11
                                                ; SOURCE LINE # 3102
002B8A 7E000000    R  MOV      DR0,#WORD0 stMcPDP
002B8E 7E100000    R  MOV      DR4,#WORD0 stMcPI
002B92 9A000000    E  ECALL    DrvCal_McPeak?
                                                ; SOURCE LINE # 3105
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 329 

002B96 7E730000    R  MOV      R7,stMcPI
002B9A 7A730000    R  MOV      g_stPeakData+124,R7
                                                ; SOURCE LINE # 3106
002B9E 7E730000    R  MOV      R7,stMcPI+1
002BA2 7A730000    R  MOV      g_stPeakData+125,R7
                                                ; SOURCE LINE # 3107
002BA6 7E370000    R  MOV      WR6,stMcPI+2
002BAA 7A370000    R  MOV      g_stPeakData+128,WR6
                                                ; SOURCE LINE # 3108
002BAE 7E370000    R  MOV      WR6,stMcPI+4
002BB2 7A370000    R  MOV      g_stPeakData+130,WR6
                                                ; SOURCE LINE # 3111
002BB6 6CFF           XRL      R15,R15
002BB8 020000      R  LJMP     ?C0939
               ?C0940:
                                                ; SOURCE LINE # 3113
002BBB 7CAF           MOV      R10,R15
002BBD 1EA0           SRL      R10
002BBF 1EA0           SRL      R10
002BC1 1EA0           SRL      R10
;---- Variable 'ucPeakValidGroup' assigned to Register 'R10' ----
                                                ; SOURCE LINE # 3114
002BC3 7CBF           MOV      R11,R15          ; A=R11
002BC5 5407           ANL      A,#07H           ; A=R11
002BC7 7E7001         MOV      R7,#01H
002BCA 7003        R  JNZ      $ + 5H
002BCC 020000      R  LJMP     ?C2045
               ?C2044:
002BCF 3E70           SLL      R7
002BD1 14             DEC      A                ; A=R11
002BD2 78FB           JNE      ?C2044
               ?C2045:
;---- Variable 'ucPeakValidPos' assigned to Register 'R7' ----
                                                ; SOURCE LINE # 3115
002BD4 0A2A           MOVZ     WR4,R10
002BD6 2E240000    R  ADD      WR4,#WORD0 g_stPeakData+120
002BDA 7E2960         MOV      R6,@WR4
002BDD 4C67           ORL      R6,R7
002BDF 7A2960         MOV      @WR4,R6
                                                ; SOURCE LINE # 3117
002BE2 7E5002         MOV      R5,#02H
002BE5 AC5F           MUL      R5,R15
002BE7 7E0F0000    R  MOV      DR0,T_tempOut
002BEB 2D12           ADD      WR2,WR4
002BED 0B0A10         MOV      WR2,@DR0
002BF0 1A02           MOVS     WR0,R2
002BF2 7C61           MOV      R6,R1
002BF4 19620000    R  MOV      @WR4+g_stPeakData,R6
                                                ; SOURCE LINE # 3118
002BF8 5E1400FF       ANL      WR2,#0FFH
002BFC 7C63           MOV      R6,R3
002BFE 19620000    R  MOV      @WR4+g_stPeakData+0x1,R6
                                                ; SOURCE LINE # 3119
002C02 0BF0           INC      R15,#01H
               ?C0939:
002C04 7E630000    R  MOV      R6,g_stPeakData+124
002C08 BC6F           CMP      R6,R15
002C0A 38AF           JG       ?C0940
                                                ; SOURCE LINE # 3121
002C0C 6CFF           XRL      R15,R15
002C0E 020000      R  LJMP     ?C0944
               ?C0945:
                                                ; SOURCE LINE # 3123
002C11 7402           MOV      A,#02H           ; A=R11
002C13 ACBF           MUL      R11,R15          ; A=R11
002C15 7E1F0000    R  MOV      DR4,pNegPeakBuf
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 330 

002C19 2D35           ADD      WR6,WR10
002C1B 0B1A30         MOV      WR6,@DR4
002C1E 0A26           MOVZ     WR4,R6
002C20 19550000    R  MOV      @WR10+g_stPeakData+0x3C,R5
                                                ; SOURCE LINE # 3124
002C24 5E3400FF       ANL      WR6,#0FFH
002C28 19750000    R  MOV      @WR10+g_stPeakData+0x3D,R7
                                                ; SOURCE LINE # 3125
002C2C 0BF0           INC      R15,#01H
               ?C0944:
002C2E 7E730000    R  MOV      R7,g_stPeakData+125
002C32 BC7F           CMP      R7,R15
002C34 38DB           JG       ?C0945
                                                ; SOURCE LINE # 3127
002C36 7E730000    R  MOV      R7,g_stPeakData+124
002C3A BE7000         CMP      R7,#00H
002C3D 3803        R  JG       $ + 5H
002C3F 020000      R  LJMP     ?C0947
                                                ; SOURCE LINE # 3129
002C42 7E240002       MOV      WR4,#02H
002C46 7A270000    E  MOV      ?printf??BYTE-2,WR4
002C4A 0A37           MOVZ     WR6,R7
002C4C 7A370000    E  MOV      ?printf??BYTE-4,WR6
002C50 7E140000    R  MOV      WR2,#WORD0 ?SC_2249
002C54 7E040000    R  MOV      WR0,#WORD2 ?SC_2249
002C58 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3130
002C5C 7E340002       MOV      WR6,#02H
002C60 7A370000    E  MOV      ?printf??BYTE-2,WR6
002C64 7E730000    R  MOV      R7,g_stPeakData+125
002C68 0A37           MOVZ     WR6,R7
002C6A 7A370000    E  MOV      ?printf??BYTE-4,WR6
002C6E 7E140000    R  MOV      WR2,#WORD0 ?SC_2232
002C72 7E040000    R  MOV      WR0,#WORD2 ?SC_2232
002C76 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3131
002C7A 7E340002       MOV      WR6,#02H
002C7E 7A370000    E  MOV      ?printf??BYTE-2,WR6
002C82 7E370000    R  MOV      WR6,g_stPeakData+128
002C86 7A370000    E  MOV      ?printf??BYTE-4,WR6
002C8A 7E140000    R  MOV      WR2,#WORD0 ?SC_2215
002C8E 7E040000    R  MOV      WR0,#WORD2 ?SC_2215
002C92 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3132
002C96 7E340002       MOV      WR6,#02H
002C9A 7A370000    E  MOV      ?printf??BYTE-2,WR6
002C9E 7E370000    R  MOV      WR6,g_stPeakData+130
002CA2 7A370000    E  MOV      ?printf??BYTE-4,WR6
002CA6 7E140000    R  MOV      WR2,#WORD0 ?SC_2198
002CAA 7E040000    R  MOV      WR0,#WORD2 ?SC_2198
002CAE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3134
002CB2 6CFF           XRL      R15,R15
002CB4 020000      R  LJMP     ?C0950
               ?C0951:
                                                ; SOURCE LINE # 3136
002CB7 0A3F           MOVZ     WR6,R15
002CB9 7A370000    E  MOV      ?printf??BYTE-2,WR6
002CBD 7402           MOV      A,#02H           ; A=R11
002CBF ACBF           MUL      R11,R15          ; A=R11
002CC1 09750000    R  MOV      R7,@WR10+g_stPeakData
002CC5 0A47           MOVZ     WR8,R7
002CC7 7A470000    E  MOV      ?printf??BYTE-4,WR8
002CCB 09750000    R  MOV      R7,@WR10+g_stPeakData+0x1
002CCF 7A370000    E  MOV      ?printf??BYTE-6,WR6
002CD3 7E140000    R  MOV      WR2,#WORD0 ?SC_2185
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 331 

002CD7 7E040000    R  MOV      WR0,#WORD2 ?SC_2185
002CDB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3137
002CDF 0BF0           INC      R15,#01H
               ?C0950:
002CE1 7E730000    R  MOV      R7,g_stPeakData+124
002CE5 BC7F           CMP      R7,R15
002CE7 38CE           JG       ?C0951
                                                ; SOURCE LINE # 3139
002CE9 6CFF           XRL      R15,R15
002CEB 020000      R  LJMP     ?C0955
               ?C0956:
                                                ; SOURCE LINE # 3141
002CEE 0A3F           MOVZ     WR6,R15
002CF0 7A370000    E  MOV      ?printf??BYTE-2,WR6
002CF4 7402           MOV      A,#02H           ; A=R11
002CF6 ACBF           MUL      R11,R15          ; A=R11
002CF8 09750000    R  MOV      R7,@WR10+g_stPeakData+0x3C
002CFC 0A47           MOVZ     WR8,R7
002CFE 7A470000    E  MOV      ?printf??BYTE-4,WR8
002D02 09750000    R  MOV      R7,@WR10+g_stPeakData+0x3D
002D06 7A370000    E  MOV      ?printf??BYTE-6,WR6
002D0A 7E140000    R  MOV      WR2,#WORD0 ?SC_2172
002D0E 7E040000    R  MOV      WR0,#WORD2 ?SC_2172
002D12 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3142
002D16 0BF0           INC      R15,#01H
               ?C0955:
002D18 7E730000    R  MOV      R7,g_stPeakData+125
002D1C BC7F           CMP      R7,R15
002D1E 38CE           JG       ?C0956
                                                ; SOURCE LINE # 3143
               ?C0947:
                                                ; SOURCE LINE # 3145
002D20 7EB30000    R  MOV      R11,g_stPeakData+124
002D24 B40202      R  CJNE     A,#02H,$ + 5H    ; A=R11
002D27 8003        R  SJMP     $ + 5H
002D29 020000      R  LJMP     ?C0959
002D2C 7EB30000    R  MOV      R11,g_stPeakData+125
002D30 B40402      R  CJNE     A,#04H,$ + 5H    ; A=R11
002D33 8003        R  SJMP     $ + 5H
002D35 020000      R  LJMP     ?C0959
002D38 7E370000    R  MOV      WR6,g_stPeakData+128
002D3C BE340005       CMP      WR6,#05H
002D40 6803        R  JE       $ + 5H
002D42 020000      R  LJMP     ?C0959
002D45 7E370000    R  MOV      WR6,g_stPeakData+130
002D49 BE340006       CMP      WR6,#06H
002D4D 7803        R  JNE      $ + 5H
002D4F 020000      R  LJMP     ?C0958
               ?C0959:
                                                ; SOURCE LINE # 3147
002D52 7E140000    R  MOV      WR2,#WORD0 ?SC_2152
002D56 7E040000    R  MOV      WR0,#WORD2 ?SC_2152
002D5A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3148
002D5E 7E340064       MOV      WR6,#064H
002D62 9A000000    E  ECALL    DelayMs?
               ?C0960:
002D66 80FE           SJMP     ?C0960
                                                ; SOURCE LINE # 3149
               ?C0958:
002D68 DA79           POP      WR14
002D6A AA             ERET     
;       FUNCTION Test_CAL_SearchPeak? (END)

C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 332 

;       FUNCTION Test_CAL_AVG_TX? (BEGIN)
                                                ; SOURCE LINE # 3277
002D6B CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 3278
                                                ; SOURCE LINE # 3282
002D6D 9F11           SUB      DR4,DR4
002D6F 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3287
002D73 7E140000    R  MOV      WR2,#WORD0 ?SC_2130
002D77 7E040000    R  MOV      WR0,#WORD2 ?SC_2130
002D7B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3288
002D7F 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 3290
               ?C0973:
002D81 6CFF           XRL      R15,R15
               ?C0972:
                                                ; SOURCE LINE # 3292
002D83 9A000000    E  ECALL    rand??
002D87 7D13           MOV      WR2,WR6
002D89 7E7048         MOV      R7,#048H
002D8C AC7E           MUL      R7,R14
002D8E 7E1002         MOV      R1,#02H
002D91 AC1F           MUL      R1,R15
002D93 2D03           ADD      WR0,WR6
002D95 7E1F0000    R  MOV      DR4,T_tempbuf1
002D99 2D30           ADD      WR6,WR0
002D9B 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3293
002D9E 0BF0           INC      R15,#01H
002DA0 BEF024         CMP      R15,#024H
002DA3 78DE           JNE      ?C0972
                                                ; SOURCE LINE # 3294
002DA5 0BE0           INC      R14,#01H
002DA7 BEE012         CMP      R14,#012H
002DAA 78D5           JNE      ?C0973
                                                ; SOURCE LINE # 3296
002DAC 6CEE           XRL      R14,R14
               ?C0977:
                                                ; SOURCE LINE # 3298
002DAE 9A000000    E  ECALL    rand??
002DB2 7D13           MOV      WR2,WR6
002DB4 7402           MOV      A,#02H           ; A=R11
002DB6 ACBE           MUL      R11,R14          ; A=R11
002DB8 7E1F0000    R  MOV      DR4,T_tempbuf2
002DBC 2D35           ADD      WR6,WR10
002DBE 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3299
002DC1 9A000000    E  ECALL    rand??
002DC5 0E34           SRA      WR6
002DC7 4E348000       ORL      WR6,#08000H
002DCB 7402           MOV      A,#02H           ; A=R11
002DCD ACBE           MUL      R11,R14          ; A=R11
002DCF 7E0F0000    R  MOV      DR0,T_tempbuf2
002DD3 2D15           ADD      WR2,WR10
002DD5 79300024       MOV      @DR0+0x24,WR6
                                                ; SOURCE LINE # 3300
002DD9 0BE0           INC      R14,#01H
002DDB BEE012         CMP      R14,#012H
002DDE 78CE           JNE      ?C0977
                                                ; SOURCE LINE # 3303
002DE0 7E341000       MOV      WR6,#01000H
002DE4 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3304
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 333 

002DE8 7E341510       MOV      WR6,#01510H
002DEC 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3305
002DF0 7E341A20       MOV      WR6,#01A20H
002DF4 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3306
002DF8 7412           MOV      A,#012H          ; A=R11
002DFA 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3307
002DFE 7424           MOV      A,#024H          ; A=R11
002E00 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 3308
002E04 6D33           XRL      WR6,WR6
002E06 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3309
002E0A E4             CLR      A                ; A=R11
002E0B 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3310
002E0F 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3311
002E13 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3313
                                                ; SOURCE LINE # 3315
002E17 7E000000    R  MOV      DR0,#WORD0 CalParam
002E1B 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3317
002E1F 6CEE           XRL      R14,R14
               ?C0982:
                                                ; SOURCE LINE # 3319
002E21 9F11           SUB      DR4,DR4
002E23 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3320
002E27 6CFF           XRL      R15,R15
               ?C0987:
                                                ; SOURCE LINE # 3322
002E29 7E1048         MOV      R1,#048H
002E2C AC1E           MUL      R1,R14
002E2E 7E3002         MOV      R3,#02H
002E31 AC3F           MUL      R3,R15
002E33 2D10           ADD      WR2,WR0
002E35 7E1F0000    R  MOV      DR4,T_tempbuf1
002E39 2D31           ADD      WR6,WR2
002E3B 0B1A00         MOV      WR0,@DR4
002E3E 7402           MOV      A,#02H           ; A=R11
002E40 ACBE           MUL      R11,R14          ; A=R11
002E42 7E1F0000    R  MOV      DR4,T_tempbuf2
002E46 2D35           ADD      WR6,WR10
002E48 0B1A50         MOV      WR10,@DR4
002E4B BD05           CMP      WR0,WR10
002E4D 1803        R  JSG      $ + 5H
002E4F 020000      R  LJMP     ?C0989
                                                ; SOURCE LINE # 3324
002E52 1A4A           MOVS     WR8,R10
002E54 1A48           MOVS     WR8,R8
002E56 7E1F0000    R  MOV      DR4,slSumDiff
002E5A 2F12           ADD      DR4,DR8
                                                ; SOURCE LINE # 3325
002E5C 020000      R  LJMP     ?C2066
               ?C0989:
                                                ; SOURCE LINE # 3326
002E5F 7402           MOV      A,#02H           ; A=R11
002E61 ACBE           MUL      R11,R14          ; A=R11
002E63 7E1F0000    R  MOV      DR4,T_tempbuf2
002E67 2D35           ADD      WR6,WR10
002E69 69110024       MOV      WR2,@DR4+0x24
002E6D BD01           CMP      WR0,WR2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 334 

002E6F 4803        R  JSL      $ + 5H
002E71 020000      R  LJMP     ?C0991
                                                ; SOURCE LINE # 3328
                                                ; SOURCE LINE # 3329
002E74 020000      R  LJMP     ?C2064
               ?C0991:
                                                ; SOURCE LINE # 3332
002E77 7E1048         MOV      R1,#048H
002E7A AC1E           MUL      R1,R14
002E7C 7E3002         MOV      R3,#02H
002E7F AC3F           MUL      R3,R15
002E81 2D10           ADD      WR2,WR0
002E83 7E1F0000    R  MOV      DR4,T_tempbuf1
002E87 2D31           ADD      WR6,WR2
002E89 0B1A10         MOV      WR2,@DR4
               ?C2064:
002E8C 1A02           MOVS     WR0,R2
002E8E 1A00           MOVS     WR0,R0
002E90 7E1F0000    R  MOV      DR4,slSumDiff
002E94 2F10           ADD      DR4,DR0
               ?C2066:
002E96 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3333
                                                ; SOURCE LINE # 3334
               ?C0984:
002E9A 0BF0           INC      R15,#01H
002E9C BEF024         CMP      R15,#024H
002E9F 7888           JNE      ?C0987
                                                ; SOURCE LINE # 3337
002EA1 7E080024       MOV      DR0,#024H
002EA5 7E1F0000    R  MOV      DR4,slSumDiff
002EA9 9A000000    E  ECALL    ?C?SLDIV?
002EAD 7402           MOV      A,#02H           ; A=R11
002EAF ACBE           MUL      R11,R14          ; A=R11
002EB1 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 3338
002EB5 0BE0           INC      R14,#01H
002EB7 BEE012         CMP      R14,#012H
002EBA 6803        R  JE       $ + 5H
002EBC 020000      R  LJMP     ?C0982
                                                ; SOURCE LINE # 3340
002EBF E4             CLR      A                ; A=R11
002EC0 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3341
002EC4 6CEE           XRL      R14,R14
               ?C0996:
                                                ; SOURCE LINE # 3343
002EC6 7E1002         MOV      R1,#02H
002EC9 AC1E           MUL      R1,R14
002ECB 49300000    R  MOV      WR6,@WR0+ssAvgBuf
002ECF 7E5002         MOV      R5,#02H
002ED2 AC5E           MUL      R5,R14
002ED4 7E2F0000    R  MOV      DR8,T_tempOut
002ED8 2D52           ADD      WR10,WR4
002EDA 0B2A20         MOV      WR4,@DR8
002EDD BD23           CMP      WR4,WR6
002EDF 7803        R  JNE      $ + 5H
002EE1 020000      R  LJMP     ?C0993
                                                ; SOURCE LINE # 3345
002EE4 0A1E           MOVZ     WR2,R14
002EE6 7A170000    E  MOV      ?printf??BYTE-2,WR2
002EEA 7A270000    E  MOV      ?printf??BYTE-4,WR4
002EEE 7A370000    E  MOV      ?printf??BYTE-6,WR6
002EF2 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
002EF6 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
002EFA 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 335 

                                                ; SOURCE LINE # 3346
002EFE 7401           MOV      A,#01H           ; A=R11
002F00 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3347
                                                ; SOURCE LINE # 3351
                                                ; SOURCE LINE # 3352
               ?C0993:
002F04 0BE0           INC      R14,#01H
002F06 BEE012         CMP      R14,#012H
002F09 78BB           JNE      ?C0996
                                                ; SOURCE LINE # 3354
002F0B 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
002F0F 7003        R  JNZ      $ + 5H
002F11 020000      R  LJMP     ?C1000
                                                ; SOURCE LINE # 3356
002F14 7E140000    R  MOV      WR2,#WORD0 ?SC_2066
002F18 7E040000    R  MOV      WR0,#WORD2 ?SC_2066
002F1C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3358
002F20 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
002F24 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
002F28 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3359
002F2C 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3361
               ?C1010:
002F2E 6CFF           XRL      R15,R15
               ?C1009:
                                                ; SOURCE LINE # 3364
002F30 7E1048         MOV      R1,#048H
002F33 AC1E           MUL      R1,R14
002F35 7E3002         MOV      R3,#02H
002F38 AC3F           MUL      R3,R15
002F3A 2D10           ADD      WR2,WR0
002F3C 7E1F0000    R  MOV      DR4,T_tempbuf1
002F40 2D31           ADD      WR6,WR2
002F42 0B1A30         MOV      WR6,@DR4
002F45 7A370000    E  MOV      ?printf??BYTE-2,WR6
002F49 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
002F4D 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
002F51 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3365
002F55 0BF0           INC      R15,#01H
002F57 BEF024         CMP      R15,#024H
002F5A 78D4           JNE      ?C1009
                                                ; SOURCE LINE # 3366
002F5C 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
002F60 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
002F64 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3367
002F68 0BE0           INC      R14,#01H
002F6A BEE012         CMP      R14,#012H
002F6D 78BF           JNE      ?C1010
                                                ; SOURCE LINE # 3369
002F6F 6CEE           XRL      R14,R14
               ?C1014:
                                                ; SOURCE LINE # 3371
002F71 7402           MOV      A,#02H           ; A=R11
002F73 ACBE           MUL      R11,R14          ; A=R11
002F75 7E1F0000    R  MOV      DR4,T_tempbuf2
002F79 2D35           ADD      WR6,WR10
002F7B 0B1A30         MOV      WR6,@DR4
002F7E 7A370000    E  MOV      ?printf??BYTE-2,WR6
002F82 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
002F86 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
002F8A 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 336 

                                                ; SOURCE LINE # 3372
002F8E 7402           MOV      A,#02H           ; A=R11
002F90 ACBE           MUL      R11,R14          ; A=R11
002F92 7E1F0000    R  MOV      DR4,T_tempbuf2
002F96 2D35           ADD      WR6,WR10
002F98 69310024       MOV      WR6,@DR4+0x24
002F9C 7A370000    E  MOV      ?printf??BYTE-2,WR6
002FA0 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
002FA4 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
002FA8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3374
002FAC 0BE0           INC      R14,#01H
002FAE BEE012         CMP      R14,#012H
002FB1 78BE           JNE      ?C1014
                                                ; SOURCE LINE # 3377
002FB3 7E340064       MOV      WR6,#064H
002FB7 9A000000    E  ECALL    DelayMs?
               ?C1016:
002FBB 80FE           SJMP     ?C1016
               ?C1000:
                                                ; SOURCE LINE # 3381
002FBD 7E140000    R  MOV      WR2,#WORD0 ?SC_2023
002FC1 7E040000    R  MOV      WR0,#WORD2 ?SC_2023
002FC5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3382
                                                ; SOURCE LINE # 3385
002FC9 6CEE           XRL      R14,R14
               ?C1024:
                                                ; SOURCE LINE # 3387
002FCB 7ED002         MOV      R13,#02H
002FCE ACDE           MUL      R13,R14
002FD0 7E1F0000    R  MOV      DR4,T_tempbuf2
002FD4 2D36           ADD      WR6,WR12
002FD6 0B1A30         MOV      WR6,@DR4
002FD9 9E3403E8       SUB      WR6,#03E8H
002FDD BE340000       CMP      WR6,#00H
002FE1 4803        R  JSL      $ + 5H
002FE3 020000      R  LJMP     ?C1026
002FE6 6D33           XRL      WR6,WR6
002FE8 020000      R  LJMP     ?C1027
               ?C1026:
002FEB 9A000000    E  ECALL    rand??
002FEF 0A17           MOVZ     WR2,R7
002FF1 7E1F0000    R  MOV      DR4,T_tempbuf2
002FF5 2D36           ADD      WR6,WR12
002FF7 0B1A30         MOV      WR6,@DR4
002FFA 7D23           MOV      WR4,WR6
002FFC 9E2403E8       SUB      WR4,#03E8H
003000 BD21           CMP      WR4,WR2
003002 4803        R  JSL      $ + 5H
003004 020000      R  LJMP     ?C1028
003007 9E3403E8       SUB      WR6,#03E8H
00300B 020000      R  LJMP     ?C1029
               ?C1028:
00300E 9A000000    E  ECALL    rand??
003012 0A37           MOVZ     WR6,R7
               ?C1029:
               ?C1027:
003014 7402           MOV      A,#02H           ; A=R11
003016 ACBE           MUL      R11,R14          ; A=R11
003018 7E0F0000    R  MOV      DR0,T_tempbuf2
00301C 2D15           ADD      WR2,WR10
00301E 79300024       MOV      @DR0+0x24,WR6
                                                ; SOURCE LINE # 3388
003022 0BE0           INC      R14,#01H
003024 BEE012         CMP      R14,#012H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 337 

003027 78A2           JNE      ?C1024
                                                ; SOURCE LINE # 3391
003029 7E140000    R  MOV      WR2,#WORD0 ?SC_2001
00302D 7E040000    R  MOV      WR0,#WORD2 ?SC_2001
003031 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3392
003035 7E341000       MOV      WR6,#01000H
003039 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3393
00303D 7E341510       MOV      WR6,#01510H
003041 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3394
003045 7E341A20       MOV      WR6,#01A20H
003049 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3395
00304D 7412           MOV      A,#012H          ; A=R11
00304F 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3396
003053 7424           MOV      A,#024H          ; A=R11
003055 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 3397
003059 6D33           XRL      WR6,WR6
00305B 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3398
00305F E4             CLR      A                ; A=R11
003060 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3399
003064 7401           MOV      A,#01H           ; A=R11
003066 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3400
00306A E4             CLR      A                ; A=R11
00306B 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3401
                                                ; SOURCE LINE # 3403
00306F 7E000000    R  MOV      DR0,#WORD0 CalParam
003073 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3404
003077 6CEE           XRL      R14,R14
               ?C1033:
                                                ; SOURCE LINE # 3406
003079 9F11           SUB      DR4,DR4
00307B 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3407
00307F 6CFF           XRL      R15,R15
               ?C1038:
                                                ; SOURCE LINE # 3409
003081 7E1048         MOV      R1,#048H
003084 AC1E           MUL      R1,R14
003086 7E3002         MOV      R3,#02H
003089 AC3F           MUL      R3,R15
00308B 2D10           ADD      WR2,WR0
00308D 7E1F0000    R  MOV      DR4,T_tempbuf1
003091 2D31           ADD      WR6,WR2
003093 0B1A30         MOV      WR6,@DR4
003096 9A000000    E  ECALL    abs??
00309A 7402           MOV      A,#02H           ; A=R11
00309C ACBE           MUL      R11,R14          ; A=R11
00309E 7E0F0000    R  MOV      DR0,T_tempbuf2
0030A2 2D15           ADD      WR2,WR10
0030A4 0B0A10         MOV      WR2,@DR0
0030A7 BD31           CMP      WR6,WR2
0030A9 1803        R  JSG      $ + 5H
0030AB 020000      R  LJMP     ?C1040
                                                ; SOURCE LINE # 3411
                                                ; SOURCE LINE # 3412
0030AE 020000      R  LJMP     ?C2067
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 338 

               ?C1040:
                                                ; SOURCE LINE # 3413
0030B1 7E1048         MOV      R1,#048H
0030B4 AC1E           MUL      R1,R14
0030B6 7E3002         MOV      R3,#02H
0030B9 AC3F           MUL      R3,R15
0030BB 2D10           ADD      WR2,WR0
0030BD 7E1F0000    R  MOV      DR4,T_tempbuf1
0030C1 2D31           ADD      WR6,WR2
0030C3 0B1A30         MOV      WR6,@DR4
0030C6 9A000000    E  ECALL    abs??
0030CA 7D03           MOV      WR0,WR6
0030CC 7402           MOV      A,#02H           ; A=R11
0030CE ACBE           MUL      R11,R14          ; A=R11
0030D0 7E1F0000    R  MOV      DR4,T_tempbuf2
0030D4 2D35           ADD      WR6,WR10
0030D6 69110024       MOV      WR2,@DR4+0x24
0030DA BD01           CMP      WR0,WR2
0030DC 4803        R  JSL      $ + 5H
0030DE 020000      R  LJMP     ?C1042
                                                ; SOURCE LINE # 3415
                                                ; SOURCE LINE # 3416
0030E1 020000      R  LJMP     ?C2065
               ?C1042:
                                                ; SOURCE LINE # 3419
0030E4 7E1048         MOV      R1,#048H
0030E7 AC1E           MUL      R1,R14
0030E9 7E3002         MOV      R3,#02H
0030EC AC3F           MUL      R3,R15
0030EE 2D10           ADD      WR2,WR0
0030F0 7E1F0000    R  MOV      DR4,T_tempbuf1
0030F4 2D31           ADD      WR6,WR2
0030F6 0B1A30         MOV      WR6,@DR4
0030F9 9A000000    E  ECALL    abs??
0030FD 7D13           MOV      WR2,WR6
               ?C2065:
               ?C2067:
0030FF 1A02           MOVS     WR0,R2
003101 1A00           MOVS     WR0,R0
003103 7E1F0000    R  MOV      DR4,slSumDiff
003107 2F10           ADD      DR4,DR0
003109 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3420
                                                ; SOURCE LINE # 3422
               ?C1035:
00310D 0BF0           INC      R15,#01H
00310F BEF024         CMP      R15,#024H
003112 6803        R  JE       $ + 5H
003114 020000      R  LJMP     ?C1038
                                                ; SOURCE LINE # 3423
003117 7E080024       MOV      DR0,#024H
00311B 7E1F0000    R  MOV      DR4,slSumDiff
00311F 9A000000    E  ECALL    ?C?SLDIV?
003123 7402           MOV      A,#02H           ; A=R11
003125 ACBE           MUL      R11,R14          ; A=R11
003127 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 3424
00312B 0BE0           INC      R14,#01H
00312D BEE012         CMP      R14,#012H
003130 6803        R  JE       $ + 5H
003132 020000      R  LJMP     ?C1033
                                                ; SOURCE LINE # 3426
003135 E4             CLR      A                ; A=R11
003136 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3427
00313A 6CEE           XRL      R14,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 339 

               ?C1047:
                                                ; SOURCE LINE # 3429
00313C 7E1002         MOV      R1,#02H
00313F AC1E           MUL      R1,R14
003141 49300000    R  MOV      WR6,@WR0+ssAvgBuf
003145 7E5002         MOV      R5,#02H
003148 AC5E           MUL      R5,R14
00314A 7E2F0000    R  MOV      DR8,T_tempOut
00314E 2D52           ADD      WR10,WR4
003150 0B2A20         MOV      WR4,@DR8
003153 BD23           CMP      WR4,WR6
003155 7803        R  JNE      $ + 5H
003157 020000      R  LJMP     ?C1044
                                                ; SOURCE LINE # 3431
00315A 0A1E           MOVZ     WR2,R14
00315C 7A170000    E  MOV      ?printf??BYTE-2,WR2
003160 7A270000    E  MOV      ?printf??BYTE-4,WR4
003164 7A370000    E  MOV      ?printf??BYTE-6,WR6
003168 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
00316C 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
003170 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3432
003174 7401           MOV      A,#01H           ; A=R11
003176 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3433
                                                ; SOURCE LINE # 3437
                                                ; SOURCE LINE # 3438
               ?C1044:
00317A 0BE0           INC      R14,#01H
00317C BEE012         CMP      R14,#012H
00317F 78BB           JNE      ?C1047
                                                ; SOURCE LINE # 3440
003181 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
003185 7003        R  JNZ      $ + 5H
003187 020000      R  LJMP     ?C1051
                                                ; SOURCE LINE # 3442
00318A 7E140000    R  MOV      WR2,#WORD0 ?SC_1969
00318E 7E040000    R  MOV      WR0,#WORD2 ?SC_1969
003192 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3443
003196 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00319A 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00319E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3444
0031A2 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3446
               ?C1061:
0031A4 6CFF           XRL      R15,R15
               ?C1060:
                                                ; SOURCE LINE # 3449
0031A6 7E1048         MOV      R1,#048H
0031A9 AC1E           MUL      R1,R14
0031AB 7E3002         MOV      R3,#02H
0031AE AC3F           MUL      R3,R15
0031B0 2D10           ADD      WR2,WR0
0031B2 7E1F0000    R  MOV      DR4,T_tempbuf1
0031B6 2D31           ADD      WR6,WR2
0031B8 0B1A30         MOV      WR6,@DR4
0031BB 7A370000    E  MOV      ?printf??BYTE-2,WR6
0031BF 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0031C3 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0031C7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3450
0031CB 0BF0           INC      R15,#01H
0031CD BEF024         CMP      R15,#024H
0031D0 78D4           JNE      ?C1060
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 340 

                                                ; SOURCE LINE # 3451
0031D2 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0031D6 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0031DA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3452
0031DE 0BE0           INC      R14,#01H
0031E0 BEE012         CMP      R14,#012H
0031E3 78BF           JNE      ?C1061
                                                ; SOURCE LINE # 3454
0031E5 6CEE           XRL      R14,R14
               ?C1065:
                                                ; SOURCE LINE # 3456
0031E7 7402           MOV      A,#02H           ; A=R11
0031E9 ACBE           MUL      R11,R14          ; A=R11
0031EB 7E1F0000    R  MOV      DR4,T_tempbuf2
0031EF 2D35           ADD      WR6,WR10
0031F1 0B1A30         MOV      WR6,@DR4
0031F4 7A370000    E  MOV      ?printf??BYTE-2,WR6
0031F8 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
0031FC 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
003200 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3457
003204 7402           MOV      A,#02H           ; A=R11
003206 ACBE           MUL      R11,R14          ; A=R11
003208 7E1F0000    R  MOV      DR4,T_tempbuf2
00320C 2D35           ADD      WR6,WR10
00320E 69310024       MOV      WR6,@DR4+0x24
003212 7A370000    E  MOV      ?printf??BYTE-2,WR6
003216 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
00321A 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
00321E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3459
003222 0BE0           INC      R14,#01H
003224 BEE012         CMP      R14,#012H
003227 78BE           JNE      ?C1065
                                                ; SOURCE LINE # 3462
003229 7E340064       MOV      WR6,#064H
00322D 9A000000    E  ECALL    DelayMs?
               ?C1067:
003231 80FE           SJMP     ?C1067
               ?C1051:
                                                ; SOURCE LINE # 3466
003233 7E140000    R  MOV      WR2,#WORD0 ?SC_1940
003237 7E040000    R  MOV      WR0,#WORD2 ?SC_1940
00323B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3467
                                                ; SOURCE LINE # 3469
00323F DA3B           POP      DR12
003241 AA             ERET     
;       FUNCTION Test_CAL_AVG_TX? (END)

;       FUNCTION Test_CAL_AVG_RX? (BEGIN)
                                                ; SOURCE LINE # 3483
003242 CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 3484
                                                ; SOURCE LINE # 3488
003244 9F11           SUB      DR4,DR4
003246 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3493
00324A 7E140000    R  MOV      WR2,#WORD0 ?SC_1918
00324E 7E040000    R  MOV      WR0,#WORD2 ?SC_1918
003252 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3495
003256 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 341 

                                                ; SOURCE LINE # 3497
               ?C1081:
003258 6CFF           XRL      R15,R15
               ?C1080:
                                                ; SOURCE LINE # 3499
00325A 9A000000    E  ECALL    rand??
00325E 7D13           MOV      WR2,WR6
003260 7E7048         MOV      R7,#048H
003263 AC7E           MUL      R7,R14
003265 7E1002         MOV      R1,#02H
003268 AC1F           MUL      R1,R15
00326A 2D03           ADD      WR0,WR6
00326C 7E1F0000    R  MOV      DR4,T_tempbuf1
003270 2D30           ADD      WR6,WR0
003272 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3501
003275 0BF0           INC      R15,#01H
003277 BEF024         CMP      R15,#024H
00327A 78DE           JNE      ?C1080
                                                ; SOURCE LINE # 3503
00327C 0BE0           INC      R14,#01H
00327E BEE012         CMP      R14,#012H
003281 78D5           JNE      ?C1081
                                                ; SOURCE LINE # 3505
003283 6CEE           XRL      R14,R14
               ?C1085:
                                                ; SOURCE LINE # 3507
003285 9A000000    E  ECALL    rand??
003289 7D13           MOV      WR2,WR6
00328B 7402           MOV      A,#02H           ; A=R11
00328D ACBE           MUL      R11,R14          ; A=R11
00328F 7E1F0000    R  MOV      DR4,T_tempbuf2
003293 2D35           ADD      WR6,WR10
003295 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3508
003298 9A000000    E  ECALL    rand??
00329C 0E34           SRA      WR6
00329E 4E348000       ORL      WR6,#08000H
0032A2 7402           MOV      A,#02H           ; A=R11
0032A4 ACBE           MUL      R11,R14          ; A=R11
0032A6 7E0F0000    R  MOV      DR0,T_tempbuf2
0032AA 2D15           ADD      WR2,WR10
0032AC 79300048       MOV      @DR0+0x48,WR6
                                                ; SOURCE LINE # 3509
0032B0 0BE0           INC      R14,#01H
0032B2 BEE024         CMP      R14,#024H
0032B5 78CE           JNE      ?C1085
                                                ; SOURCE LINE # 3512
0032B7 7E341000       MOV      WR6,#01000H
0032BB 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3513
0032BF 7E341510       MOV      WR6,#01510H
0032C3 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3514
0032C7 7E341A20       MOV      WR6,#01A20H
0032CB 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3515
0032CF 7412           MOV      A,#012H          ; A=R11
0032D1 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3516
0032D5 7424           MOV      A,#024H          ; A=R11
0032D7 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 3517
0032DB 6D33           XRL      WR6,WR6
0032DD 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3518
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 342 

0032E1 E4             CLR      A                ; A=R11
0032E2 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3519
0032E6 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3520
0032EA 7401           MOV      A,#01H           ; A=R11
0032EC 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3522
                                                ; SOURCE LINE # 3524
0032F0 7E000000    R  MOV      DR0,#WORD0 CalParam
0032F4 E4             CLR      A                ; A=R11
0032F5 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3526
0032F9 6CEE           XRL      R14,R14
               ?C1090:
                                                ; SOURCE LINE # 3528
0032FB 9F11           SUB      DR4,DR4
0032FD 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3529
003301 6CFF           XRL      R15,R15
               ?C1095:
                                                ; SOURCE LINE # 3531
003303 7E9048         MOV      R9,#048H
003306 AC9F           MUL      R9,R15
003308 7402           MOV      A,#02H           ; A=R11
00330A ACBE           MUL      R11,R14          ; A=R11
00330C 2D45           ADD      WR8,WR10
00330E 7E1F0000    R  MOV      DR4,T_tempbuf1
003312 2D34           ADD      WR6,WR8
003314 0B1A10         MOV      WR2,@DR4
003317 7E1F0000    R  MOV      DR4,T_tempbuf2
00331B 2D35           ADD      WR6,WR10
00331D 0B1AF0         MOV      WR30,@DR4
003320 BD1F           CMP      WR2,WR30
003322 1803        R  JSG      $ + 5H
003324 020000      R  LJMP     ?C1097
                                                ; SOURCE LINE # 3533
003327 7D3F           MOV      WR6,WR30
003329 1A36           MOVS     WR6,R6
00332B 1AE6           MOVS     WR28,R6
00332D 7E1F0000    R  MOV      DR4,slSumDiff
003331 2F17           ADD      DR4,DR28
                                                ; SOURCE LINE # 3534
003333 020000      R  LJMP     ?C2070
               ?C1097:
                                                ; SOURCE LINE # 3535
003336 7E1F0000    R  MOV      DR4,T_tempbuf2
00333A 2D35           ADD      WR6,WR10
00333C 69510048       MOV      WR10,@DR4+0x48
003340 BD15           CMP      WR2,WR10
003342 4803        R  JSL      $ + 5H
003344 020000      R  LJMP     ?C1099
                                                ; SOURCE LINE # 3537
003347 1A4A           MOVS     WR8,R10
003349 1A48           MOVS     WR8,R8
00334B 7E1F0000    R  MOV      DR4,slSumDiff
00334F 2F12           ADD      DR4,DR8
                                                ; SOURCE LINE # 3538
003351 020000      R  LJMP     ?C2068
               ?C1099:
                                                ; SOURCE LINE # 3541
003354 1A02           MOVS     WR0,R2
003356 1A00           MOVS     WR0,R0
003358 7E1F0000    R  MOV      DR4,slSumDiff
00335C 2F10           ADD      DR4,DR0
               ?C2068:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 343 

               ?C2070:
00335E 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3542
                                                ; SOURCE LINE # 3543
               ?C1092:
003362 0BF0           INC      R15,#01H
003364 BEF012         CMP      R15,#012H
003367 789A           JNE      ?C1095
                                                ; SOURCE LINE # 3546
003369 7E080012       MOV      DR0,#012H
00336D 7E1F0000    R  MOV      DR4,slSumDiff
003371 9A000000    E  ECALL    ?C?SLDIV?
003375 7402           MOV      A,#02H           ; A=R11
003377 ACBE           MUL      R11,R14          ; A=R11
003379 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 3547
00337D 0BE0           INC      R14,#01H
00337F BEE024         CMP      R14,#024H
003382 6803        R  JE       $ + 5H
003384 020000      R  LJMP     ?C1090
                                                ; SOURCE LINE # 3550
003387 E4             CLR      A                ; A=R11
003388 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3551
00338C 6CEE           XRL      R14,R14
               ?C1104:
                                                ; SOURCE LINE # 3553
00338E 7E1002         MOV      R1,#02H
003391 AC1E           MUL      R1,R14
003393 49300000    R  MOV      WR6,@WR0+ssAvgBuf
003397 7E5002         MOV      R5,#02H
00339A AC5E           MUL      R5,R14
00339C 7E2F0000    R  MOV      DR8,T_tempOut
0033A0 2D52           ADD      WR10,WR4
0033A2 0B2A20         MOV      WR4,@DR8
0033A5 BD23           CMP      WR4,WR6
0033A7 7803        R  JNE      $ + 5H
0033A9 020000      R  LJMP     ?C1101
                                                ; SOURCE LINE # 3555
0033AC 0A1E           MOVZ     WR2,R14
0033AE 7A170000    E  MOV      ?printf??BYTE-2,WR2
0033B2 7A270000    E  MOV      ?printf??BYTE-4,WR4
0033B6 7A370000    E  MOV      ?printf??BYTE-6,WR6
0033BA 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
0033BE 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
0033C2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3556
0033C6 7401           MOV      A,#01H           ; A=R11
0033C8 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3557
                                                ; SOURCE LINE # 3561
                                                ; SOURCE LINE # 3562
               ?C1101:
0033CC 0BE0           INC      R14,#01H
0033CE BEE024         CMP      R14,#024H
0033D1 78BB           JNE      ?C1104
                                                ; SOURCE LINE # 3564
0033D3 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0033D7 7003        R  JNZ      $ + 5H
0033D9 020000      R  LJMP     ?C1108
                                                ; SOURCE LINE # 3566
0033DC 7E140000    R  MOV      WR2,#WORD0 ?SC_1886
0033E0 7E040000    R  MOV      WR0,#WORD2 ?SC_1886
0033E4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3568
0033E8 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 344 

0033EC 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0033F0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3569
0033F4 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3571
               ?C1118:
0033F6 6CFF           XRL      R15,R15
               ?C1117:
                                                ; SOURCE LINE # 3574
0033F8 7E1048         MOV      R1,#048H
0033FB AC1E           MUL      R1,R14
0033FD 7E3002         MOV      R3,#02H
003400 AC3F           MUL      R3,R15
003402 2D10           ADD      WR2,WR0
003404 7E1F0000    R  MOV      DR4,T_tempbuf1
003408 2D31           ADD      WR6,WR2
00340A 0B1A30         MOV      WR6,@DR4
00340D 7A370000    E  MOV      ?printf??BYTE-2,WR6
003411 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
003415 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
003419 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3575
00341D 0BF0           INC      R15,#01H
00341F BEF024         CMP      R15,#024H
003422 78D4           JNE      ?C1117
                                                ; SOURCE LINE # 3576
003424 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003428 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00342C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3577
003430 0BE0           INC      R14,#01H
003432 BEE012         CMP      R14,#012H
003435 78BF           JNE      ?C1118
                                                ; SOURCE LINE # 3579
003437 6CEE           XRL      R14,R14
               ?C1122:
                                                ; SOURCE LINE # 3581
003439 7402           MOV      A,#02H           ; A=R11
00343B ACBE           MUL      R11,R14          ; A=R11
00343D 7E1F0000    R  MOV      DR4,T_tempbuf2
003441 2D35           ADD      WR6,WR10
003443 0B1A30         MOV      WR6,@DR4
003446 7A370000    E  MOV      ?printf??BYTE-2,WR6
00344A 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
00344E 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
003452 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3582
003456 7402           MOV      A,#02H           ; A=R11
003458 ACBE           MUL      R11,R14          ; A=R11
00345A 7E1F0000    R  MOV      DR4,T_tempbuf2
00345E 2D35           ADD      WR6,WR10
003460 69310048       MOV      WR6,@DR4+0x48
003464 7A370000    E  MOV      ?printf??BYTE-2,WR6
003468 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
00346C 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
003470 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3584
003474 0BE0           INC      R14,#01H
003476 BEE024         CMP      R14,#024H
003479 78BE           JNE      ?C1122
                                                ; SOURCE LINE # 3586
00347B 7E340064       MOV      WR6,#064H
00347F 9A000000    E  ECALL    DelayMs?
               ?C1124:
003483 80FE           SJMP     ?C1124
               ?C1108:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 345 

                                                ; SOURCE LINE # 3590
003485 7E140000    R  MOV      WR2,#WORD0 ?SC_1857
003489 7E040000    R  MOV      WR0,#WORD2 ?SC_1857
00348D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3591
                                                ; SOURCE LINE # 3594
003491 6CEE           XRL      R14,R14
               ?C1132:
                                                ; SOURCE LINE # 3596
003493 7ED002         MOV      R13,#02H
003496 ACDE           MUL      R13,R14
003498 7E1F0000    R  MOV      DR4,T_tempbuf2
00349C 2D36           ADD      WR6,WR12
00349E 0B1A30         MOV      WR6,@DR4
0034A1 9E3403E8       SUB      WR6,#03E8H
0034A5 BE340000       CMP      WR6,#00H
0034A9 4803        R  JSL      $ + 5H
0034AB 020000      R  LJMP     ?C1134
0034AE 6D33           XRL      WR6,WR6
0034B0 020000      R  LJMP     ?C1135
               ?C1134:
0034B3 9A000000    E  ECALL    rand??
0034B7 0A17           MOVZ     WR2,R7
0034B9 7E1F0000    R  MOV      DR4,T_tempbuf2
0034BD 2D36           ADD      WR6,WR12
0034BF 0B1A30         MOV      WR6,@DR4
0034C2 7D23           MOV      WR4,WR6
0034C4 9E2403E8       SUB      WR4,#03E8H
0034C8 BD21           CMP      WR4,WR2
0034CA 4803        R  JSL      $ + 5H
0034CC 020000      R  LJMP     ?C1136
0034CF 9E3403E8       SUB      WR6,#03E8H
0034D3 020000      R  LJMP     ?C1137
               ?C1136:
0034D6 9A000000    E  ECALL    rand??
0034DA 0A37           MOVZ     WR6,R7
               ?C1137:
               ?C1135:
0034DC 7402           MOV      A,#02H           ; A=R11
0034DE ACBE           MUL      R11,R14          ; A=R11
0034E0 7E0F0000    R  MOV      DR0,T_tempbuf2
0034E4 2D15           ADD      WR2,WR10
0034E6 79300048       MOV      @DR0+0x48,WR6
                                                ; SOURCE LINE # 3597
0034EA 0BE0           INC      R14,#01H
0034EC BEE024         CMP      R14,#024H
0034EF 78A2           JNE      ?C1132
                                                ; SOURCE LINE # 3600
0034F1 7E140000    R  MOV      WR2,#WORD0 ?SC_1835
0034F5 7E040000    R  MOV      WR0,#WORD2 ?SC_1835
0034F9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3601
0034FD 7E341000       MOV      WR6,#01000H
003501 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3602
003505 7E341510       MOV      WR6,#01510H
003509 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3603
00350D 7E341A20       MOV      WR6,#01A20H
003511 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3604
003515 7412           MOV      A,#012H          ; A=R11
003517 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3605
00351B 7424           MOV      A,#024H          ; A=R11
00351D 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 346 

                                                ; SOURCE LINE # 3606
003521 6D33           XRL      WR6,WR6
003523 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3607
003527 E4             CLR      A                ; A=R11
003528 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3608
00352C 7401           MOV      A,#01H           ; A=R11
00352E 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3609
003532 7401           MOV      A,#01H           ; A=R11
003534 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3610
                                                ; SOURCE LINE # 3612
003538 7E000000    R  MOV      DR0,#WORD0 CalParam
00353C E4             CLR      A                ; A=R11
00353D 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3613
003541 6CEE           XRL      R14,R14
               ?C1141:
                                                ; SOURCE LINE # 3615
003543 9F11           SUB      DR4,DR4
003545 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3616
003549 6CFF           XRL      R15,R15
               ?C1146:
                                                ; SOURCE LINE # 3618
00354B 7E1048         MOV      R1,#048H
00354E AC1F           MUL      R1,R15
003550 7E3002         MOV      R3,#02H
003553 AC3E           MUL      R3,R14
003555 2D10           ADD      WR2,WR0
003557 7E1F0000    R  MOV      DR4,T_tempbuf1
00355B 2D31           ADD      WR6,WR2
00355D 0B1A30         MOV      WR6,@DR4
003560 9A000000    E  ECALL    abs??
003564 7E3002         MOV      R3,#02H
003567 AC3E           MUL      R3,R14
003569 7E2F0000    R  MOV      DR8,T_tempbuf2
00356D 2D51           ADD      WR10,WR2
00356F 0B2A50         MOV      WR10,@DR8
003572 BD35           CMP      WR6,WR10
003574 1803        R  JSG      $ + 5H
003576 020000      R  LJMP     ?C1148
                                                ; SOURCE LINE # 3620
003579 1A4A           MOVS     WR8,R10
00357B 1A48           MOVS     WR8,R8
00357D 7E1F0000    R  MOV      DR4,slSumDiff
003581 2F12           ADD      DR4,DR8
                                                ; SOURCE LINE # 3621
003583 020000      R  LJMP     ?C2071
               ?C1148:
                                                ; SOURCE LINE # 3622
003586 7448           MOV      A,#048H          ; A=R11
003588 ACBF           MUL      R11,R15          ; A=R11
00358A 2D15           ADD      WR2,WR10
00358C 7E1F0000    R  MOV      DR4,T_tempbuf1
003590 2D31           ADD      WR6,WR2
003592 0B1A30         MOV      WR6,@DR4
003595 9A000000    E  ECALL    abs??
003599 7D03           MOV      WR0,WR6
00359B 7E3002         MOV      R3,#02H
00359E AC3E           MUL      R3,R14
0035A0 7E1F0000    R  MOV      DR4,T_tempbuf2
0035A4 2D31           ADD      WR6,WR2
0035A6 69510048       MOV      WR10,@DR4+0x48
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 347 

0035AA BD05           CMP      WR0,WR10
0035AC 4803        R  JSL      $ + 5H
0035AE 020000      R  LJMP     ?C1150
                                                ; SOURCE LINE # 3624
0035B1 1A4A           MOVS     WR8,R10
0035B3 1A48           MOVS     WR8,R8
0035B5 7E1F0000    R  MOV      DR4,slSumDiff
0035B9 2F12           ADD      DR4,DR8
                                                ; SOURCE LINE # 3625
0035BB 020000      R  LJMP     ?C2069
               ?C1150:
                                                ; SOURCE LINE # 3628
0035BE 7448           MOV      A,#048H          ; A=R11
0035C0 ACBF           MUL      R11,R15          ; A=R11
0035C2 2D15           ADD      WR2,WR10
0035C4 7E1F0000    R  MOV      DR4,T_tempbuf1
0035C8 2D31           ADD      WR6,WR2
0035CA 0B1A30         MOV      WR6,@DR4
0035CD 9A000000    E  ECALL    abs??
0035D1 7D13           MOV      WR2,WR6
0035D3 1A02           MOVS     WR0,R2
0035D5 1A00           MOVS     WR0,R0
0035D7 7E1F0000    R  MOV      DR4,slSumDiff
0035DB 2F10           ADD      DR4,DR0
               ?C2069:
               ?C2071:
0035DD 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3629
                                                ; SOURCE LINE # 3631
               ?C1143:
0035E1 0BF0           INC      R15,#01H
0035E3 BEF012         CMP      R15,#012H
0035E6 6803        R  JE       $ + 5H
0035E8 020000      R  LJMP     ?C1146
                                                ; SOURCE LINE # 3632
0035EB 7E080012       MOV      DR0,#012H
0035EF 7E1F0000    R  MOV      DR4,slSumDiff
0035F3 9A000000    E  ECALL    ?C?SLDIV?
0035F7 7402           MOV      A,#02H           ; A=R11
0035F9 ACBE           MUL      R11,R14          ; A=R11
0035FB 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 3633
0035FF 0BE0           INC      R14,#01H
003601 BEE024         CMP      R14,#024H
003604 6803        R  JE       $ + 5H
003606 020000      R  LJMP     ?C1141
                                                ; SOURCE LINE # 3635
003609 E4             CLR      A                ; A=R11
00360A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3636
00360E 6CEE           XRL      R14,R14
               ?C1155:
                                                ; SOURCE LINE # 3638
003610 7E1002         MOV      R1,#02H
003613 AC1E           MUL      R1,R14
003615 49300000    R  MOV      WR6,@WR0+ssAvgBuf
003619 7E5002         MOV      R5,#02H
00361C AC5E           MUL      R5,R14
00361E 7E2F0000    R  MOV      DR8,T_tempOut
003622 2D52           ADD      WR10,WR4
003624 0B2A20         MOV      WR4,@DR8
003627 BD23           CMP      WR4,WR6
003629 7803        R  JNE      $ + 5H
00362B 020000      R  LJMP     ?C1152
                                                ; SOURCE LINE # 3640
00362E 0A1E           MOVZ     WR2,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 348 

003630 7A170000    E  MOV      ?printf??BYTE-2,WR2
003634 7A270000    E  MOV      ?printf??BYTE-4,WR4
003638 7A370000    E  MOV      ?printf??BYTE-6,WR6
00363C 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
003640 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
003644 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3641
003648 7401           MOV      A,#01H           ; A=R11
00364A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3642
                                                ; SOURCE LINE # 3646
                                                ; SOURCE LINE # 3647
               ?C1152:
00364E 0BE0           INC      R14,#01H
003650 BEE024         CMP      R14,#024H
003653 78BB           JNE      ?C1155
                                                ; SOURCE LINE # 3649
003655 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
003659 7003        R  JNZ      $ + 5H
00365B 020000      R  LJMP     ?C1159
                                                ; SOURCE LINE # 3651
00365E 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003662 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
003666 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3652
00366A 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3654
               ?C1169:
00366C 6CFF           XRL      R15,R15
               ?C1168:
                                                ; SOURCE LINE # 3657
00366E 7E1048         MOV      R1,#048H
003671 AC1E           MUL      R1,R14
003673 7E3002         MOV      R3,#02H
003676 AC3F           MUL      R3,R15
003678 2D10           ADD      WR2,WR0
00367A 7E1F0000    R  MOV      DR4,T_tempbuf1
00367E 2D31           ADD      WR6,WR2
003680 0B1A30         MOV      WR6,@DR4
003683 7A370000    E  MOV      ?printf??BYTE-2,WR6
003687 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
00368B 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
00368F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3658
003693 0BF0           INC      R15,#01H
003695 BEF024         CMP      R15,#024H
003698 78D4           JNE      ?C1168
                                                ; SOURCE LINE # 3659
00369A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00369E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0036A2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3660
0036A6 0BE0           INC      R14,#01H
0036A8 BEE012         CMP      R14,#012H
0036AB 78BF           JNE      ?C1169
                                                ; SOURCE LINE # 3662
0036AD 6CEE           XRL      R14,R14
               ?C1173:
                                                ; SOURCE LINE # 3664
0036AF 7402           MOV      A,#02H           ; A=R11
0036B1 ACBE           MUL      R11,R14          ; A=R11
0036B3 7E1F0000    R  MOV      DR4,T_tempbuf2
0036B7 2D35           ADD      WR6,WR10
0036B9 0B1A30         MOV      WR6,@DR4
0036BC 7A370000    E  MOV      ?printf??BYTE-2,WR6
0036C0 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 349 

0036C4 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
0036C8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3665
0036CC 7402           MOV      A,#02H           ; A=R11
0036CE ACBE           MUL      R11,R14          ; A=R11
0036D0 7E1F0000    R  MOV      DR4,T_tempbuf2
0036D4 2D35           ADD      WR6,WR10
0036D6 69310048       MOV      WR6,@DR4+0x48
0036DA 7A370000    E  MOV      ?printf??BYTE-2,WR6
0036DE 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
0036E2 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
0036E6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3667
0036EA 0BE0           INC      R14,#01H
0036EC BEE024         CMP      R14,#024H
0036EF 78BE           JNE      ?C1173
                                                ; SOURCE LINE # 3668
0036F1 7E140000    R  MOV      WR2,#WORD0 ?SC_1803
0036F5 7E040000    R  MOV      WR0,#WORD2 ?SC_1803
0036F9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3669
0036FD 7E340064       MOV      WR6,#064H
003701 9A000000    E  ECALL    DelayMs?
               ?C1175:
003705 80FE           SJMP     ?C1175
               ?C1159:
                                                ; SOURCE LINE # 3673
003707 7E140000    R  MOV      WR2,#WORD0 ?SC_1774
00370B 7E040000    R  MOV      WR0,#WORD2 ?SC_1774
00370F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3674
                                                ; SOURCE LINE # 3676
003713 DA3B           POP      DR12
003715 AA             ERET     
;       FUNCTION Test_CAL_AVG_RX? (END)

;       FUNCTION Test_CAL_AVG2_TX? (BEGIN)
                                                ; SOURCE LINE # 3852
003716 CAD8           PUSH     R13
003718 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'removalData' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 3853
                                                ; SOURCE LINE # 3858
00371A 9F11           SUB      DR4,DR4
00371C 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3863
003720 7E140000    R  MOV      WR2,#WORD0 ?SC_1751
003724 7E040000    R  MOV      WR0,#WORD2 ?SC_1751
003728 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3864
00372C 6CDD           XRL      R13,R13
;---- Variable 'i' assigned to Register 'R13' ----
                                                ; SOURCE LINE # 3866
               ?C1189:
00372E 6CFF           XRL      R15,R15
               ?C1188:
                                                ; SOURCE LINE # 3868
003730 9A000000    E  ECALL    rand??
003734 7D13           MOV      WR2,WR6
003736 7E7048         MOV      R7,#048H
003739 AC7D           MUL      R7,R13
00373B 7E1002         MOV      R1,#02H
00373E AC1F           MUL      R1,R15
003740 2D03           ADD      WR0,WR6
003742 7E1F0000    R  MOV      DR4,T_tempbuf1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 350 

003746 2D30           ADD      WR6,WR0
003748 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3869
00374B 0BF0           INC      R15,#01H
00374D BEF024         CMP      R15,#024H
003750 78DE           JNE      ?C1188
                                                ; SOURCE LINE # 3870
003752 0BD0           INC      R13,#01H
003754 BED012         CMP      R13,#012H
003757 78D5           JNE      ?C1189
                                                ; SOURCE LINE # 3872
003759 6CDD           XRL      R13,R13
               ?C1193:
                                                ; SOURCE LINE # 3874
00375B 9A000000    E  ECALL    rand??
00375F 7D13           MOV      WR2,WR6
003761 7402           MOV      A,#02H           ; A=R11
003763 ACBD           MUL      R11,R13          ; A=R11
003765 7E1F0000    R  MOV      DR4,T_tempbuf2
003769 2D35           ADD      WR6,WR10
00376B 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 3875
00376E 9A000000    E  ECALL    rand??
003772 4E348000       ORL      WR6,#08000H
003776 7402           MOV      A,#02H           ; A=R11
003778 ACBD           MUL      R11,R13          ; A=R11
00377A 7E0F0000    R  MOV      DR0,T_tempbuf2
00377E 2D15           ADD      WR2,WR10
003780 79300024       MOV      @DR0+0x24,WR6
                                                ; SOURCE LINE # 3876
003784 0BD0           INC      R13,#01H
003786 BED012         CMP      R13,#012H
003789 78D0           JNE      ?C1193
                                                ; SOURCE LINE # 3878
00378B 7E341000       MOV      WR6,#01000H
00378F 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3879
003793 7E341510       MOV      WR6,#01510H
003797 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3880
00379B 7E341A20       MOV      WR6,#01A20H
00379F 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3881
0037A3 7412           MOV      A,#012H          ; A=R11
0037A5 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3882
0037A9 7424           MOV      A,#024H          ; A=R11
0037AB 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 3883
0037AF 6D33           XRL      WR6,WR6
0037B1 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3884
0037B5 E4             CLR      A                ; A=R11
0037B6 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3885
0037BA 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3886
0037BE 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3887
                                                ; SOURCE LINE # 3889
0037C2 7E000000    R  MOV      DR0,#WORD0 CalParam
0037C6 7401           MOV      A,#01H           ; A=R11
0037C8 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3891
0037CC 6CDD           XRL      R13,R13
               ?C1198:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 351 

                                                ; SOURCE LINE # 3893
0037CE 9F11           SUB      DR4,DR4
0037D0 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3894
0037D4 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3895
0037D6 6CFF           XRL      R15,R15
               ?C1203:
                                                ; SOURCE LINE # 3897
0037D8 7E1048         MOV      R1,#048H
0037DB AC1D           MUL      R1,R13
0037DD 7E3002         MOV      R3,#02H
0037E0 AC3F           MUL      R3,R15
0037E2 7D51           MOV      WR10,WR2
0037E4 2D50           ADD      WR10,WR0
0037E6 7E1F0000    R  MOV      DR4,T_tempbuf1
0037EA 2D35           ADD      WR6,WR10
0037EC 0B1A20         MOV      WR4,@DR4
0037EF 7402           MOV      A,#02H           ; A=R11
0037F1 ACBD           MUL      R11,R13          ; A=R11
0037F3 7E7F0000    R  MOV      DR28,T_tempbuf2
0037F7 2DF5           ADD      WR30,WR10
0037F9 0B7A30         MOV      WR6,@DR28
0037FC BD23           CMP      WR4,WR6
0037FE 1803        R  JSG      $ + 5H
003800 020000      R  LJMP     ?C1205
                                                ; SOURCE LINE # 3899
003803 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 3900
003805 020000      R  LJMP     ?C1200
                                                ; SOURCE LINE # 3901
               ?C1205:
                                                ; SOURCE LINE # 3902
003808 69370024       MOV      WR6,@DR28+0x24
00380C BD23           CMP      WR4,WR6
00380E 4803        R  JSL      $ + 5H
003810 020000      R  LJMP     ?C1207
                                                ; SOURCE LINE # 3904
003813 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 3905
003815 020000      R  LJMP     ?C1200
                                                ; SOURCE LINE # 3906
               ?C1207:
                                                ; SOURCE LINE # 3909
003818 2D10           ADD      WR2,WR0
00381A 7E1F0000    R  MOV      DR4,T_tempbuf1
00381E 2D31           ADD      WR6,WR2
003820 0B1A10         MOV      WR2,@DR4
003823 1A02           MOVS     WR0,R2
003825 1A00           MOVS     WR0,R0
003827 7E1F0000    R  MOV      DR4,slSumDiff
00382B 2F10           ADD      DR4,DR0
00382D 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3910
                                                ; SOURCE LINE # 3911
               ?C1200:
003831 0BF0           INC      R15,#01H
003833 BEF024         CMP      R15,#024H
003836 78A0           JNE      ?C1203
                                                ; SOURCE LINE # 3912
003838 BEE024         CMP      R14,#024H
00383B 6803        R  JE       $ + 5H
00383D 020000      R  LJMP     ?C1209
                                                ; SOURCE LINE # 3913
003840 7E347FFF       MOV      WR6,#07FFFH
003844 020000      R  LJMP     ?C2072
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 352 

               ?C1209:
                                                ; SOURCE LINE # 3915
003847 0A3E           MOVZ     WR6,R14
003849 6D22           XRL      WR4,WR4
00384B 7E080024       MOV      DR0,#024H
00384F 9F01           SUB      DR0,DR4
003851 7E1F0000    R  MOV      DR4,slSumDiff
003855 9A000000    E  ECALL    ?C?SLDIV?
               ?C2072:
003859 7402           MOV      A,#02H           ; A=R11
00385B ACBD           MUL      R11,R13          ; A=R11
00385D 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 3916
               ?C1195:
003861 0BD0           INC      R13,#01H
003863 BED012         CMP      R13,#012H
003866 6803        R  JE       $ + 5H
003868 020000      R  LJMP     ?C1198
                                                ; SOURCE LINE # 3918
00386B E4             CLR      A                ; A=R11
00386C 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3919
003870 6CDD           XRL      R13,R13
               ?C1214:
                                                ; SOURCE LINE # 3921
003872 7402           MOV      A,#02H           ; A=R11
003874 ACBD           MUL      R11,R13          ; A=R11
003876 49350000    R  MOV      WR6,@WR10+ssAvgBuf
00387A 7402           MOV      A,#02H           ; A=R11
00387C ACBD           MUL      R11,R13          ; A=R11
00387E 7E0F0000    R  MOV      DR0,T_tempOut
003882 2D15           ADD      WR2,WR10
003884 0B0A20         MOV      WR4,@DR0
003887 BD23           CMP      WR4,WR6
003889 7803        R  JNE      $ + 5H
00388B 020000      R  LJMP     ?C1211
                                                ; SOURCE LINE # 3923
00388E 0A1D           MOVZ     WR2,R13
003890 7A170000    E  MOV      ?printf??BYTE-2,WR2
003894 7A270000    E  MOV      ?printf??BYTE-4,WR4
003898 7A370000    E  MOV      ?printf??BYTE-6,WR6
00389C 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
0038A0 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
0038A4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3924
0038A8 7401           MOV      A,#01H           ; A=R11
0038AA 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 3925
                                                ; SOURCE LINE # 3929
                                                ; SOURCE LINE # 3930
               ?C1211:
0038AE 0BD0           INC      R13,#01H
0038B0 BED012         CMP      R13,#012H
0038B3 78BD           JNE      ?C1214
                                                ; SOURCE LINE # 3932
0038B5 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0038B9 7003        R  JNZ      $ + 5H
0038BB 020000      R  LJMP     ?C1218
                                                ; SOURCE LINE # 3934
0038BE 7E140000    R  MOV      WR2,#WORD0 ?SC_1718
0038C2 7E040000    R  MOV      WR0,#WORD2 ?SC_1718
0038C6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3935
0038CA 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0038CE 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0038D2 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 353 

                                                ; SOURCE LINE # 3936
0038D6 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 3938
               ?C1228:
0038D8 6CFF           XRL      R15,R15
               ?C1227:
                                                ; SOURCE LINE # 3941
0038DA 7E1048         MOV      R1,#048H
0038DD AC1D           MUL      R1,R13
0038DF 7E3002         MOV      R3,#02H
0038E2 AC3F           MUL      R3,R15
0038E4 2D10           ADD      WR2,WR0
0038E6 7E1F0000    R  MOV      DR4,T_tempbuf1
0038EA 2D31           ADD      WR6,WR2
0038EC 0B1A30         MOV      WR6,@DR4
0038EF 7A370000    E  MOV      ?printf??BYTE-2,WR6
0038F3 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0038F7 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0038FB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3942
0038FF 0BF0           INC      R15,#01H
003901 BEF024         CMP      R15,#024H
003904 78D4           JNE      ?C1227
                                                ; SOURCE LINE # 3943
003906 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00390A 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00390E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3944
003912 0BD0           INC      R13,#01H
003914 BED012         CMP      R13,#012H
003917 78BF           JNE      ?C1228
                                                ; SOURCE LINE # 3946
003919 6CDD           XRL      R13,R13
               ?C1232:
                                                ; SOURCE LINE # 3948
00391B 7402           MOV      A,#02H           ; A=R11
00391D ACBD           MUL      R11,R13          ; A=R11
00391F 7E1F0000    R  MOV      DR4,T_tempbuf2
003923 2D35           ADD      WR6,WR10
003925 0B1A30         MOV      WR6,@DR4
003928 7A370000    E  MOV      ?printf??BYTE-2,WR6
00392C 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
003930 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
003934 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3949
003938 7402           MOV      A,#02H           ; A=R11
00393A ACBD           MUL      R11,R13          ; A=R11
00393C 7E1F0000    R  MOV      DR4,T_tempbuf2
003940 2D35           ADD      WR6,WR10
003942 69310024       MOV      WR6,@DR4+0x24
003946 7A370000    E  MOV      ?printf??BYTE-2,WR6
00394A 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
00394E 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
003952 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3951
003956 0BD0           INC      R13,#01H
003958 BED012         CMP      R13,#012H
00395B 78BE           JNE      ?C1232
                                                ; SOURCE LINE # 3954
00395D 7E340064       MOV      WR6,#064H
003961 9A000000    E  ECALL    DelayMs?
               ?C1234:
003965 80FE           SJMP     ?C1234
               ?C1218:
                                                ; SOURCE LINE # 3958
003967 7E140000    R  MOV      WR2,#WORD0 ?SC_1688
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 354 

00396B 7E040000    R  MOV      WR0,#WORD2 ?SC_1688
00396F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3959
                                                ; SOURCE LINE # 3961
003973 6CDD           XRL      R13,R13
               ?C1242:
                                                ; SOURCE LINE # 3963
003975 7402           MOV      A,#02H           ; A=R11
003977 ACBD           MUL      R11,R13          ; A=R11
003979 7E1F0000    R  MOV      DR4,T_tempbuf2
00397D 2D35           ADD      WR6,WR10
00397F 0B1A30         MOV      WR6,@DR4
003982 9E3403E8       SUB      WR6,#03E8H
003986 BE340000       CMP      WR6,#00H
00398A 4803        R  JSL      $ + 5H
00398C 020000      R  LJMP     ?C1244
00398F 6D33           XRL      WR6,WR6
003991 020000      R  LJMP     ?C1245
               ?C1244:
003994 9A000000    E  ECALL    rand??
003998 0A17           MOVZ     WR2,R7
00399A 7402           MOV      A,#02H           ; A=R11
00399C ACBD           MUL      R11,R13          ; A=R11
00399E 7E1F0000    R  MOV      DR4,T_tempbuf2
0039A2 2D35           ADD      WR6,WR10
0039A4 0B1A30         MOV      WR6,@DR4
0039A7 7D23           MOV      WR4,WR6
0039A9 9E2403E8       SUB      WR4,#03E8H
0039AD BD21           CMP      WR4,WR2
0039AF 4803        R  JSL      $ + 5H
0039B1 020000      R  LJMP     ?C1246
0039B4 9E3403E8       SUB      WR6,#03E8H
0039B8 020000      R  LJMP     ?C1247
               ?C1246:
0039BB 9A000000    E  ECALL    rand??
0039BF 0A37           MOVZ     WR6,R7
               ?C1247:
               ?C1245:
0039C1 7402           MOV      A,#02H           ; A=R11
0039C3 ACBD           MUL      R11,R13          ; A=R11
0039C5 7E0F0000    R  MOV      DR0,T_tempbuf2
0039C9 2D15           ADD      WR2,WR10
0039CB 79300024       MOV      @DR0+0x24,WR6
                                                ; SOURCE LINE # 3964
0039CF 0BD0           INC      R13,#01H
0039D1 BED012         CMP      R13,#012H
0039D4 789F           JNE      ?C1242
                                                ; SOURCE LINE # 3967
0039D6 7E140000    R  MOV      WR2,#WORD0 ?SC_1665
0039DA 7E040000    R  MOV      WR0,#WORD2 ?SC_1665
0039DE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 3968
0039E2 7E341000       MOV      WR6,#01000H
0039E6 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 3969
0039EA 7E341510       MOV      WR6,#01510H
0039EE 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 3970
0039F2 7E341A20       MOV      WR6,#01A20H
0039F6 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 3971
0039FA 7412           MOV      A,#012H          ; A=R11
0039FC 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 3972
003A00 7424           MOV      A,#024H          ; A=R11
003A02 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 355 

                                                ; SOURCE LINE # 3973
003A06 6D33           XRL      WR6,WR6
003A08 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 3974
003A0C E4             CLR      A                ; A=R11
003A0D 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 3975
003A11 7401           MOV      A,#01H           ; A=R11
003A13 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 3976
003A17 E4             CLR      A                ; A=R11
003A18 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 3978
                                                ; SOURCE LINE # 3979
003A1C 7E000000    R  MOV      DR0,#WORD0 CalParam
003A20 7401           MOV      A,#01H           ; A=R11
003A22 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 3980
003A26 6CDD           XRL      R13,R13
               ?C1251:
                                                ; SOURCE LINE # 3982
003A28 9F11           SUB      DR4,DR4
003A2A 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3983
003A2E 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 3984
003A30 6CFF           XRL      R15,R15
               ?C1256:
                                                ; SOURCE LINE # 3986
003A32 7E1048         MOV      R1,#048H
003A35 AC1D           MUL      R1,R13
003A37 7E3002         MOV      R3,#02H
003A3A AC3F           MUL      R3,R15
003A3C 2D10           ADD      WR2,WR0
003A3E 7E1F0000    R  MOV      DR4,T_tempbuf1
003A42 2D31           ADD      WR6,WR2
003A44 0B1A30         MOV      WR6,@DR4
003A47 9A000000    E  ECALL    abs??
003A4B 7402           MOV      A,#02H           ; A=R11
003A4D ACBD           MUL      R11,R13          ; A=R11
003A4F 7E0F0000    R  MOV      DR0,T_tempbuf2
003A53 2D15           ADD      WR2,WR10
003A55 0B0A20         MOV      WR4,@DR0
003A58 BD32           CMP      WR6,WR4
003A5A 1803        R  JSG      $ + 5H
003A5C 020000      R  LJMP     ?C1258
                                                ; SOURCE LINE # 3988
003A5F 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 3989
003A61 020000      R  LJMP     ?C1253
                                                ; SOURCE LINE # 3990
               ?C1258:
                                                ; SOURCE LINE # 3991
003A64 7E1048         MOV      R1,#048H
003A67 AC1D           MUL      R1,R13
003A69 7E3002         MOV      R3,#02H
003A6C AC3F           MUL      R3,R15
003A6E 2D10           ADD      WR2,WR0
003A70 7E1F0000    R  MOV      DR4,T_tempbuf1
003A74 2D31           ADD      WR6,WR2
003A76 0B1A30         MOV      WR6,@DR4
003A79 9A000000    E  ECALL    abs??
003A7D 7402           MOV      A,#02H           ; A=R11
003A7F ACBD           MUL      R11,R13          ; A=R11
003A81 7E0F0000    R  MOV      DR0,T_tempbuf2
003A85 2D15           ADD      WR2,WR10
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 356 

003A87 69200024       MOV      WR4,@DR0+0x24
003A8B BD32           CMP      WR6,WR4
003A8D 4803        R  JSL      $ + 5H
003A8F 020000      R  LJMP     ?C1260
                                                ; SOURCE LINE # 3993
003A92 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 3994
003A94 020000      R  LJMP     ?C1253
                                                ; SOURCE LINE # 3995
               ?C1260:
                                                ; SOURCE LINE # 3998
003A97 7E1048         MOV      R1,#048H
003A9A AC1D           MUL      R1,R13
003A9C 7E3002         MOV      R3,#02H
003A9F AC3F           MUL      R3,R15
003AA1 2D10           ADD      WR2,WR0
003AA3 7E1F0000    R  MOV      DR4,T_tempbuf1
003AA7 2D31           ADD      WR6,WR2
003AA9 0B1A30         MOV      WR6,@DR4
003AAC 9A000000    E  ECALL    abs??
003AB0 7D13           MOV      WR2,WR6
003AB2 1A02           MOVS     WR0,R2
003AB4 1A00           MOVS     WR0,R0
003AB6 7E1F0000    R  MOV      DR4,slSumDiff
003ABA 2F10           ADD      DR4,DR0
003ABC 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 3999
                                                ; SOURCE LINE # 4000
               ?C1253:
003AC0 0BF0           INC      R15,#01H
003AC2 BEF024         CMP      R15,#024H
003AC5 6803        R  JE       $ + 5H
003AC7 020000      R  LJMP     ?C1256
                                                ; SOURCE LINE # 4001
003ACA BEE024         CMP      R14,#024H
003ACD 6803        R  JE       $ + 5H
003ACF 020000      R  LJMP     ?C1262
                                                ; SOURCE LINE # 4002
003AD2 7E347FFF       MOV      WR6,#07FFFH
003AD6 020000      R  LJMP     ?C2073
               ?C1262:
                                                ; SOURCE LINE # 4004
003AD9 0A3E           MOVZ     WR6,R14
003ADB 6D22           XRL      WR4,WR4
003ADD 7E080024       MOV      DR0,#024H
003AE1 9F01           SUB      DR0,DR4
003AE3 7E1F0000    R  MOV      DR4,slSumDiff
003AE7 9A000000    E  ECALL    ?C?SLDIV?
               ?C2073:
003AEB 7402           MOV      A,#02H           ; A=R11
003AED ACBD           MUL      R11,R13          ; A=R11
003AEF 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 4005
               ?C1248:
003AF3 0BD0           INC      R13,#01H
003AF5 BED012         CMP      R13,#012H
003AF8 6803        R  JE       $ + 5H
003AFA 020000      R  LJMP     ?C1251
                                                ; SOURCE LINE # 4007
003AFD E4             CLR      A                ; A=R11
003AFE 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4008
003B02 6CDD           XRL      R13,R13
               ?C1267:
                                                ; SOURCE LINE # 4010
003B04 7402           MOV      A,#02H           ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 357 

003B06 ACBD           MUL      R11,R13          ; A=R11
003B08 49350000    R  MOV      WR6,@WR10+ssAvgBuf
003B0C 7402           MOV      A,#02H           ; A=R11
003B0E ACBD           MUL      R11,R13          ; A=R11
003B10 7E0F0000    R  MOV      DR0,T_tempOut
003B14 2D15           ADD      WR2,WR10
003B16 0B0A20         MOV      WR4,@DR0
003B19 BD23           CMP      WR4,WR6
003B1B 7803        R  JNE      $ + 5H
003B1D 020000      R  LJMP     ?C1264
                                                ; SOURCE LINE # 4012
003B20 0A1D           MOVZ     WR2,R13
003B22 7A170000    E  MOV      ?printf??BYTE-2,WR2
003B26 7A270000    E  MOV      ?printf??BYTE-4,WR4
003B2A 7A370000    E  MOV      ?printf??BYTE-6,WR6
003B2E 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
003B32 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
003B36 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4013
003B3A 7401           MOV      A,#01H           ; A=R11
003B3C 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4014
                                                ; SOURCE LINE # 4018
                                                ; SOURCE LINE # 4019
               ?C1264:
003B40 0BD0           INC      R13,#01H
003B42 BED012         CMP      R13,#012H
003B45 78BD           JNE      ?C1267
                                                ; SOURCE LINE # 4021
003B47 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
003B4B 7003        R  JNZ      $ + 5H
003B4D 020000      R  LJMP     ?C1271
                                                ; SOURCE LINE # 4023
003B50 7E140000    R  MOV      WR2,#WORD0 ?SC_1632
003B54 7E040000    R  MOV      WR0,#WORD2 ?SC_1632
003B58 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4024
003B5C 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003B60 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
003B64 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4025
003B68 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 4027
               ?C1281:
003B6A 6CFF           XRL      R15,R15
               ?C1280:
                                                ; SOURCE LINE # 4030
003B6C 7E1048         MOV      R1,#048H
003B6F AC1D           MUL      R1,R13
003B71 7E3002         MOV      R3,#02H
003B74 AC3F           MUL      R3,R15
003B76 2D10           ADD      WR2,WR0
003B78 7E1F0000    R  MOV      DR4,T_tempbuf1
003B7C 2D31           ADD      WR6,WR2
003B7E 0B1A30         MOV      WR6,@DR4
003B81 7A370000    E  MOV      ?printf??BYTE-2,WR6
003B85 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
003B89 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
003B8D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4031
003B91 0BF0           INC      R15,#01H
003B93 BEF024         CMP      R15,#024H
003B96 78D4           JNE      ?C1280
                                                ; SOURCE LINE # 4032
003B98 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003B9C 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 358 

003BA0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4033
003BA4 0BD0           INC      R13,#01H
003BA6 BED012         CMP      R13,#012H
003BA9 78BF           JNE      ?C1281
                                                ; SOURCE LINE # 4035
003BAB 6CDD           XRL      R13,R13
               ?C1285:
                                                ; SOURCE LINE # 4037
003BAD 7402           MOV      A,#02H           ; A=R11
003BAF ACBD           MUL      R11,R13          ; A=R11
003BB1 7E1F0000    R  MOV      DR4,T_tempbuf2
003BB5 2D35           ADD      WR6,WR10
003BB7 0B1A30         MOV      WR6,@DR4
003BBA 7A370000    E  MOV      ?printf??BYTE-2,WR6
003BBE 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
003BC2 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
003BC6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4038
003BCA 7402           MOV      A,#02H           ; A=R11
003BCC ACBD           MUL      R11,R13          ; A=R11
003BCE 7E1F0000    R  MOV      DR4,T_tempbuf2
003BD2 2D35           ADD      WR6,WR10
003BD4 69310024       MOV      WR6,@DR4+0x24
003BD8 7A370000    E  MOV      ?printf??BYTE-2,WR6
003BDC 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
003BE0 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
003BE4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4040
003BE8 0BD0           INC      R13,#01H
003BEA BED012         CMP      R13,#012H
003BED 78BE           JNE      ?C1285
                                                ; SOURCE LINE # 4043
003BEF 7E340064       MOV      WR6,#064H
003BF3 9A000000    E  ECALL    DelayMs?
               ?C1287:
003BF7 80FE           SJMP     ?C1287
               ?C1271:
                                                ; SOURCE LINE # 4047
003BF9 7E140000    R  MOV      WR2,#WORD0 ?SC_1602
003BFD 7E040000    R  MOV      WR0,#WORD2 ?SC_1602
003C01 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4048
                                                ; SOURCE LINE # 4049
003C05 DA79           POP      WR14
003C07 DAD8           POP      R13
003C09 AA             ERET     
;       FUNCTION Test_CAL_AVG2_TX? (END)

;       FUNCTION Test_CAL_AVG2_RX? (BEGIN)
                                                ; SOURCE LINE # 4062
003C0A CAD8           PUSH     R13
003C0C CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'removalData' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 4063
                                                ; SOURCE LINE # 4068
003C0E 9F11           SUB      DR4,DR4
003C10 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 4073
003C14 7E140000    R  MOV      WR2,#WORD0 ?SC_1579
003C18 7E040000    R  MOV      WR0,#WORD2 ?SC_1579
003C1C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4074
003C20 6CDD           XRL      R13,R13
;---- Variable 'i' assigned to Register 'R13' ----
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 359 

                                                ; SOURCE LINE # 4076
               ?C1301:
003C22 6CFF           XRL      R15,R15
               ?C1300:
                                                ; SOURCE LINE # 4078
003C24 9A000000    E  ECALL    rand??
003C28 7D13           MOV      WR2,WR6
003C2A 7E7048         MOV      R7,#048H
003C2D AC7D           MUL      R7,R13
003C2F 7E1002         MOV      R1,#02H
003C32 AC1F           MUL      R1,R15
003C34 2D03           ADD      WR0,WR6
003C36 7E1F0000    R  MOV      DR4,T_tempbuf1
003C3A 2D30           ADD      WR6,WR0
003C3C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 4079
003C3F 0BF0           INC      R15,#01H
003C41 BEF024         CMP      R15,#024H
003C44 78DE           JNE      ?C1300
                                                ; SOURCE LINE # 4080
003C46 0BD0           INC      R13,#01H
003C48 BED012         CMP      R13,#012H
003C4B 78D5           JNE      ?C1301
                                                ; SOURCE LINE # 4082
003C4D 6CDD           XRL      R13,R13
               ?C1305:
                                                ; SOURCE LINE # 4084
003C4F 9A000000    E  ECALL    rand??
003C53 7D13           MOV      WR2,WR6
003C55 7402           MOV      A,#02H           ; A=R11
003C57 ACBD           MUL      R11,R13          ; A=R11
003C59 7E1F0000    R  MOV      DR4,T_tempbuf2
003C5D 2D35           ADD      WR6,WR10
003C5F 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 4085
003C62 9A000000    E  ECALL    rand??
003C66 4E348000       ORL      WR6,#08000H
003C6A 7402           MOV      A,#02H           ; A=R11
003C6C ACBD           MUL      R11,R13          ; A=R11
003C6E 7E0F0000    R  MOV      DR0,T_tempbuf2
003C72 2D15           ADD      WR2,WR10
003C74 79300048       MOV      @DR0+0x48,WR6
                                                ; SOURCE LINE # 4086
003C78 0BD0           INC      R13,#01H
003C7A BED024         CMP      R13,#024H
003C7D 78D0           JNE      ?C1305
                                                ; SOURCE LINE # 4088
003C7F 7E341000       MOV      WR6,#01000H
003C83 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4089
003C87 7E341510       MOV      WR6,#01510H
003C8B 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 4090
003C8F 7E341A20       MOV      WR6,#01A20H
003C93 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4091
003C97 7412           MOV      A,#012H          ; A=R11
003C99 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4092
003C9D 7424           MOV      A,#024H          ; A=R11
003C9F 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4093
003CA3 6D33           XRL      WR6,WR6
003CA5 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4094
003CA9 E4             CLR      A                ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 360 

003CAA 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4095
003CAE 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4096
003CB2 7401           MOV      A,#01H           ; A=R11
003CB4 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4098
                                                ; SOURCE LINE # 4100
003CB8 7E000000    R  MOV      DR0,#WORD0 CalParam
003CBC 7401           MOV      A,#01H           ; A=R11
003CBE 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 4101
003CC2 6CDD           XRL      R13,R13
               ?C1310:
                                                ; SOURCE LINE # 4103
003CC4 9F11           SUB      DR4,DR4
003CC6 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 4104
003CCA 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4105
003CCC 6CFF           XRL      R15,R15
               ?C1315:
                                                ; SOURCE LINE # 4107
003CCE 7E9048         MOV      R9,#048H
003CD1 AC9F           MUL      R9,R15
003CD3 7402           MOV      A,#02H           ; A=R11
003CD5 ACBD           MUL      R11,R13          ; A=R11
003CD7 2D45           ADD      WR8,WR10
003CD9 7E1F0000    R  MOV      DR4,T_tempbuf1
003CDD 2D34           ADD      WR6,WR8
003CDF 0B1A10         MOV      WR2,@DR4
003CE2 7E1F0000    R  MOV      DR4,T_tempbuf2
003CE6 2D35           ADD      WR6,WR10
003CE8 0B1A00         MOV      WR0,@DR4
003CEB BD10           CMP      WR2,WR0
003CED 1803        R  JSG      $ + 5H
003CEF 020000      R  LJMP     ?C1317
                                                ; SOURCE LINE # 4109
003CF2 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 4110
003CF4 020000      R  LJMP     ?C1312
                                                ; SOURCE LINE # 4111
               ?C1317:
                                                ; SOURCE LINE # 4112
003CF7 69010048       MOV      WR0,@DR4+0x48
003CFB BD10           CMP      WR2,WR0
003CFD 4803        R  JSL      $ + 5H
003CFF 020000      R  LJMP     ?C1319
                                                ; SOURCE LINE # 4114
003D02 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 4115
003D04 020000      R  LJMP     ?C1312
                                                ; SOURCE LINE # 4116
               ?C1319:
                                                ; SOURCE LINE # 4119
003D07 1A02           MOVS     WR0,R2
003D09 1A00           MOVS     WR0,R0
003D0B 7E1F0000    R  MOV      DR4,slSumDiff
003D0F 2F10           ADD      DR4,DR0
003D11 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 4120
                                                ; SOURCE LINE # 4121
               ?C1312:
003D15 0BF0           INC      R15,#01H
003D17 BEF012         CMP      R15,#012H
003D1A 78B2           JNE      ?C1315
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 361 

                                                ; SOURCE LINE # 4122
003D1C BEE012         CMP      R14,#012H
003D1F 4003        R  JC       $ + 5H
003D21 020000      R  LJMP     ?C1321
                                                ; SOURCE LINE # 4123
003D24 0A3E           MOVZ     WR6,R14
003D26 6D22           XRL      WR4,WR4
003D28 7E080012       MOV      DR0,#012H
003D2C 9F01           SUB      DR0,DR4
003D2E 7E1F0000    R  MOV      DR4,slSumDiff
003D32 9A000000    E  ECALL    ?C?SLDIV?
003D36 020000      R  LJMP     ?C2074
               ?C1321:
                                                ; SOURCE LINE # 4125
003D39 7E347FFF       MOV      WR6,#07FFFH
               ?C2074:
003D3D 7402           MOV      A,#02H           ; A=R11
003D3F ACBD           MUL      R11,R13          ; A=R11
003D41 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 4126
               ?C1307:
003D45 0BD0           INC      R13,#01H
003D47 BED024         CMP      R13,#024H
003D4A 6803        R  JE       $ + 5H
003D4C 020000      R  LJMP     ?C1310
                                                ; SOURCE LINE # 4128
003D4F E4             CLR      A                ; A=R11
003D50 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4129
003D54 6CDD           XRL      R13,R13
               ?C1326:
                                                ; SOURCE LINE # 4131
003D56 7402           MOV      A,#02H           ; A=R11
003D58 ACBD           MUL      R11,R13          ; A=R11
003D5A 49350000    R  MOV      WR6,@WR10+ssAvgBuf
003D5E 7402           MOV      A,#02H           ; A=R11
003D60 ACBD           MUL      R11,R13          ; A=R11
003D62 7E0F0000    R  MOV      DR0,T_tempOut
003D66 2D15           ADD      WR2,WR10
003D68 0B0A20         MOV      WR4,@DR0
003D6B BD23           CMP      WR4,WR6
003D6D 7803        R  JNE      $ + 5H
003D6F 020000      R  LJMP     ?C1323
                                                ; SOURCE LINE # 4133
003D72 0A1D           MOVZ     WR2,R13
003D74 7A170000    E  MOV      ?printf??BYTE-2,WR2
003D78 7A270000    E  MOV      ?printf??BYTE-4,WR4
003D7C 7A370000    E  MOV      ?printf??BYTE-6,WR6
003D80 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
003D84 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
003D88 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4134
003D8C 7401           MOV      A,#01H           ; A=R11
003D8E 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4135
                                                ; SOURCE LINE # 4139
                                                ; SOURCE LINE # 4140
               ?C1323:
003D92 0BD0           INC      R13,#01H
003D94 BED024         CMP      R13,#024H
003D97 78BD           JNE      ?C1326
                                                ; SOURCE LINE # 4142
003D99 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
003D9D 7003        R  JNZ      $ + 5H
003D9F 020000      R  LJMP     ?C1330
                                                ; SOURCE LINE # 4144
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 362 

003DA2 7E140000    R  MOV      WR2,#WORD0 ?SC_1546
003DA6 7E040000    R  MOV      WR0,#WORD2 ?SC_1546
003DAA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4145
003DAE 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003DB2 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
003DB6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4146
003DBA 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 4148
               ?C1340:
003DBC 6CFF           XRL      R15,R15
               ?C1339:
                                                ; SOURCE LINE # 4151
003DBE 7E1048         MOV      R1,#048H
003DC1 AC1D           MUL      R1,R13
003DC3 7E3002         MOV      R3,#02H
003DC6 AC3F           MUL      R3,R15
003DC8 2D10           ADD      WR2,WR0
003DCA 7E1F0000    R  MOV      DR4,T_tempbuf1
003DCE 2D31           ADD      WR6,WR2
003DD0 0B1A30         MOV      WR6,@DR4
003DD3 7A370000    E  MOV      ?printf??BYTE-2,WR6
003DD7 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
003DDB 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
003DDF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4152
003DE3 0BF0           INC      R15,#01H
003DE5 BEF024         CMP      R15,#024H
003DE8 78D4           JNE      ?C1339
                                                ; SOURCE LINE # 4153
003DEA 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
003DEE 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
003DF2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4154
003DF6 0BD0           INC      R13,#01H
003DF8 BED012         CMP      R13,#012H
003DFB 78BF           JNE      ?C1340
                                                ; SOURCE LINE # 4156
003DFD 6CDD           XRL      R13,R13
               ?C1344:
                                                ; SOURCE LINE # 4158
003DFF 7402           MOV      A,#02H           ; A=R11
003E01 ACBD           MUL      R11,R13          ; A=R11
003E03 7E1F0000    R  MOV      DR4,T_tempbuf2
003E07 2D35           ADD      WR6,WR10
003E09 0B1A30         MOV      WR6,@DR4
003E0C 7A370000    E  MOV      ?printf??BYTE-2,WR6
003E10 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
003E14 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
003E18 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4159
003E1C 7402           MOV      A,#02H           ; A=R11
003E1E ACBD           MUL      R11,R13          ; A=R11
003E20 7E1F0000    R  MOV      DR4,T_tempbuf2
003E24 2D35           ADD      WR6,WR10
003E26 69310048       MOV      WR6,@DR4+0x48
003E2A 7A370000    E  MOV      ?printf??BYTE-2,WR6
003E2E 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
003E32 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
003E36 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4161
003E3A 0BD0           INC      R13,#01H
003E3C BED024         CMP      R13,#024H
003E3F 78BE           JNE      ?C1344
                                                ; SOURCE LINE # 4163
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 363 

003E41 7E340064       MOV      WR6,#064H
003E45 9A000000    E  ECALL    DelayMs?
               ?C1346:
003E49 80FE           SJMP     ?C1346
               ?C1330:
                                                ; SOURCE LINE # 4167
003E4B 7E140000    R  MOV      WR2,#WORD0 ?SC_1516
003E4F 7E040000    R  MOV      WR0,#WORD2 ?SC_1516
003E53 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4168
                                                ; SOURCE LINE # 4170
003E57 6CDD           XRL      R13,R13
               ?C1354:
                                                ; SOURCE LINE # 4172
003E59 7402           MOV      A,#02H           ; A=R11
003E5B ACBD           MUL      R11,R13          ; A=R11
003E5D 7E1F0000    R  MOV      DR4,T_tempbuf2
003E61 2D35           ADD      WR6,WR10
003E63 0B1A30         MOV      WR6,@DR4
003E66 9E3403E8       SUB      WR6,#03E8H
003E6A BE340000       CMP      WR6,#00H
003E6E 4803        R  JSL      $ + 5H
003E70 020000      R  LJMP     ?C1356
003E73 6D33           XRL      WR6,WR6
003E75 020000      R  LJMP     ?C1357
               ?C1356:
003E78 9A000000    E  ECALL    rand??
003E7C 0A17           MOVZ     WR2,R7
003E7E 7402           MOV      A,#02H           ; A=R11
003E80 ACBD           MUL      R11,R13          ; A=R11
003E82 7E1F0000    R  MOV      DR4,T_tempbuf2
003E86 2D35           ADD      WR6,WR10
003E88 0B1A30         MOV      WR6,@DR4
003E8B 7D23           MOV      WR4,WR6
003E8D 9E2403E8       SUB      WR4,#03E8H
003E91 BD21           CMP      WR4,WR2
003E93 4803        R  JSL      $ + 5H
003E95 020000      R  LJMP     ?C1358
003E98 9E3403E8       SUB      WR6,#03E8H
003E9C 020000      R  LJMP     ?C1359
               ?C1358:
003E9F 9A000000    E  ECALL    rand??
003EA3 0A37           MOVZ     WR6,R7
               ?C1359:
               ?C1357:
003EA5 7402           MOV      A,#02H           ; A=R11
003EA7 ACBD           MUL      R11,R13          ; A=R11
003EA9 7E0F0000    R  MOV      DR0,T_tempbuf2
003EAD 2D15           ADD      WR2,WR10
003EAF 79300048       MOV      @DR0+0x48,WR6
                                                ; SOURCE LINE # 4173
003EB3 0BD0           INC      R13,#01H
003EB5 BED024         CMP      R13,#024H
003EB8 789F           JNE      ?C1354
                                                ; SOURCE LINE # 4177
003EBA 7E140000    R  MOV      WR2,#WORD0 ?SC_1493
003EBE 7E040000    R  MOV      WR0,#WORD2 ?SC_1493
003EC2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4178
003EC6 7E341000       MOV      WR6,#01000H
003ECA 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4179
003ECE 7E341510       MOV      WR6,#01510H
003ED2 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 4180
003ED6 7E341A20       MOV      WR6,#01A20H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 364 

003EDA 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4181
003EDE 7412           MOV      A,#012H          ; A=R11
003EE0 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4182
003EE4 7424           MOV      A,#024H          ; A=R11
003EE6 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4183
003EEA 6D33           XRL      WR6,WR6
003EEC 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4184
003EF0 E4             CLR      A                ; A=R11
003EF1 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4185
003EF5 7401           MOV      A,#01H           ; A=R11
003EF7 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4186
003EFB 7401           MOV      A,#01H           ; A=R11
003EFD 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4188
                                                ; SOURCE LINE # 4190
003F01 7E000000    R  MOV      DR0,#WORD0 CalParam
003F05 7401           MOV      A,#01H           ; A=R11
003F07 9A000000    E  ECALL    DrvCal_MatrixAvg?
                                                ; SOURCE LINE # 4191
003F0B 6CDD           XRL      R13,R13
               ?C1363:
                                                ; SOURCE LINE # 4193
003F0D 9F11           SUB      DR4,DR4
003F0F 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 4194
003F13 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4195
003F15 6CFF           XRL      R15,R15
               ?C1368:
                                                ; SOURCE LINE # 4197
003F17 7E1048         MOV      R1,#048H
003F1A AC1F           MUL      R1,R15
003F1C 7E3002         MOV      R3,#02H
003F1F AC3D           MUL      R3,R13
003F21 2D10           ADD      WR2,WR0
003F23 7E1F0000    R  MOV      DR4,T_tempbuf1
003F27 2D31           ADD      WR6,WR2
003F29 0B1A30         MOV      WR6,@DR4
003F2C 9A000000    E  ECALL    abs??
003F30 7E3002         MOV      R3,#02H
003F33 AC3D           MUL      R3,R13
003F35 7E2F0000    R  MOV      DR8,T_tempbuf2
003F39 2D51           ADD      WR10,WR2
003F3B 0B2A20         MOV      WR4,@DR8
003F3E BD32           CMP      WR6,WR4
003F40 1803        R  JSG      $ + 5H
003F42 020000      R  LJMP     ?C1370
                                                ; SOURCE LINE # 4199
003F45 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 4200
003F47 020000      R  LJMP     ?C1365
                                                ; SOURCE LINE # 4201
               ?C1370:
                                                ; SOURCE LINE # 4202
003F4A 7448           MOV      A,#048H          ; A=R11
003F4C ACBF           MUL      R11,R15          ; A=R11
003F4E 2D15           ADD      WR2,WR10
003F50 7E1F0000    R  MOV      DR4,T_tempbuf1
003F54 2D31           ADD      WR6,WR2
003F56 0B1A30         MOV      WR6,@DR4
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 365 

003F59 9A000000    E  ECALL    abs??
003F5D 7E3002         MOV      R3,#02H
003F60 AC3D           MUL      R3,R13
003F62 7E2F0000    R  MOV      DR8,T_tempbuf2
003F66 2D51           ADD      WR10,WR2
003F68 69220048       MOV      WR4,@DR8+0x48
003F6C BD32           CMP      WR6,WR4
003F6E 4803        R  JSL      $ + 5H
003F70 020000      R  LJMP     ?C1372
                                                ; SOURCE LINE # 4204
003F73 0BE0           INC      R14,#01H
                                                ; SOURCE LINE # 4205
003F75 020000      R  LJMP     ?C1365
                                                ; SOURCE LINE # 4206
               ?C1372:
                                                ; SOURCE LINE # 4209
003F78 7448           MOV      A,#048H          ; A=R11
003F7A ACBF           MUL      R11,R15          ; A=R11
003F7C 2D15           ADD      WR2,WR10
003F7E 7E1F0000    R  MOV      DR4,T_tempbuf1
003F82 2D31           ADD      WR6,WR2
003F84 0B1A30         MOV      WR6,@DR4
003F87 9A000000    E  ECALL    abs??
003F8B 7D13           MOV      WR2,WR6
003F8D 1A02           MOVS     WR0,R2
003F8F 1A00           MOVS     WR0,R0
003F91 7E1F0000    R  MOV      DR4,slSumDiff
003F95 2F10           ADD      DR4,DR0
003F97 7A1F0000    R  MOV      slSumDiff,DR4
                                                ; SOURCE LINE # 4210
                                                ; SOURCE LINE # 4211
               ?C1365:
003F9B 0BF0           INC      R15,#01H
003F9D BEF012         CMP      R15,#012H
003FA0 6803        R  JE       $ + 5H
003FA2 020000      R  LJMP     ?C1368
                                                ; SOURCE LINE # 4212
003FA5 BEE012         CMP      R14,#012H
003FA8 4003        R  JC       $ + 5H
003FAA 020000      R  LJMP     ?C1374
                                                ; SOURCE LINE # 4214
003FAD 0A3E           MOVZ     WR6,R14
003FAF 6D22           XRL      WR4,WR4
003FB1 7E080012       MOV      DR0,#012H
003FB5 9F01           SUB      DR0,DR4
003FB7 7E1F0000    R  MOV      DR4,slSumDiff
003FBB 9A000000    E  ECALL    ?C?SLDIV?
                                                ; SOURCE LINE # 4215
003FBF 020000      R  LJMP     ?C2075
               ?C1374:
                                                ; SOURCE LINE # 4218
003FC2 7E347FFF       MOV      WR6,#07FFFH
               ?C2075:
003FC6 7402           MOV      A,#02H           ; A=R11
003FC8 ACBD           MUL      R11,R13          ; A=R11
003FCA 59350000    R  MOV      @WR10+ssAvgBuf,WR6
                                                ; SOURCE LINE # 4219
                                                ; SOURCE LINE # 4220
               ?C1360:
003FCE 0BD0           INC      R13,#01H
003FD0 BED024         CMP      R13,#024H
003FD3 6803        R  JE       $ + 5H
003FD5 020000      R  LJMP     ?C1363
                                                ; SOURCE LINE # 4222
003FD8 E4             CLR      A                ; A=R11
003FD9 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 366 

                                                ; SOURCE LINE # 4223
003FDD 6CDD           XRL      R13,R13
               ?C1379:
                                                ; SOURCE LINE # 4225
003FDF 7402           MOV      A,#02H           ; A=R11
003FE1 ACBD           MUL      R11,R13          ; A=R11
003FE3 49350000    R  MOV      WR6,@WR10+ssAvgBuf
003FE7 7402           MOV      A,#02H           ; A=R11
003FE9 ACBD           MUL      R11,R13          ; A=R11
003FEB 7E0F0000    R  MOV      DR0,T_tempOut
003FEF 2D15           ADD      WR2,WR10
003FF1 0B0A20         MOV      WR4,@DR0
003FF4 BD23           CMP      WR4,WR6
003FF6 7803        R  JNE      $ + 5H
003FF8 020000      R  LJMP     ?C1376
                                                ; SOURCE LINE # 4227
003FFB 0A1D           MOVZ     WR2,R13
003FFD 7A170000    E  MOV      ?printf??BYTE-2,WR2
004001 7A270000    E  MOV      ?printf??BYTE-4,WR4
004005 7A370000    E  MOV      ?printf??BYTE-6,WR6
004009 7E140000    R  MOV      WR2,#WORD0 ?SC_2098
00400D 7E040000    R  MOV      WR0,#WORD2 ?SC_2098
004011 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4228
004015 7401           MOV      A,#01H           ; A=R11
004017 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4229
                                                ; SOURCE LINE # 4233
                                                ; SOURCE LINE # 4234
               ?C1376:
00401B 0BD0           INC      R13,#01H
00401D BED024         CMP      R13,#024H
004020 78BD           JNE      ?C1379
                                                ; SOURCE LINE # 4236
004022 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004026 7003        R  JNZ      $ + 5H
004028 020000      R  LJMP     ?C1383
                                                ; SOURCE LINE # 4238
00402B 7E140000    R  MOV      WR2,#WORD0 ?SC_1460
00402F 7E040000    R  MOV      WR0,#WORD2 ?SC_1460
004033 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4240
004037 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00403B 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00403F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4241
004043 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 4243
               ?C1393:
004045 6CFF           XRL      R15,R15
               ?C1392:
                                                ; SOURCE LINE # 4246
004047 7E1048         MOV      R1,#048H
00404A AC1D           MUL      R1,R13
00404C 7E3002         MOV      R3,#02H
00404F AC3F           MUL      R3,R15
004051 2D10           ADD      WR2,WR0
004053 7E1F0000    R  MOV      DR4,T_tempbuf1
004057 2D31           ADD      WR6,WR2
004059 0B1A30         MOV      WR6,@DR4
00405C 7A370000    E  MOV      ?printf??BYTE-2,WR6
004060 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004064 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
004068 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4247
00406C 0BF0           INC      R15,#01H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 367 

00406E BEF024         CMP      R15,#024H
004071 78D4           JNE      ?C1392
                                                ; SOURCE LINE # 4248
004073 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004077 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00407B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4249
00407F 0BD0           INC      R13,#01H
004081 BED012         CMP      R13,#012H
004084 78BF           JNE      ?C1393
                                                ; SOURCE LINE # 4251
004086 6CDD           XRL      R13,R13
               ?C1397:
                                                ; SOURCE LINE # 4253
004088 7402           MOV      A,#02H           ; A=R11
00408A ACBD           MUL      R11,R13          ; A=R11
00408C 7E1F0000    R  MOV      DR4,T_tempbuf2
004090 2D35           ADD      WR6,WR10
004092 0B1A30         MOV      WR6,@DR4
004095 7A370000    E  MOV      ?printf??BYTE-2,WR6
004099 7E140000    R  MOV      WR2,#WORD0 ?SC_2052
00409D 7E040000    R  MOV      WR0,#WORD2 ?SC_2052
0040A1 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4254
0040A5 7402           MOV      A,#02H           ; A=R11
0040A7 ACBD           MUL      R11,R13          ; A=R11
0040A9 7E1F0000    R  MOV      DR4,T_tempbuf2
0040AD 2D35           ADD      WR6,WR10
0040AF 69310048       MOV      WR6,@DR4+0x48
0040B3 7A370000    E  MOV      ?printf??BYTE-2,WR6
0040B7 7E140000    R  MOV      WR2,#WORD0 ?SC_2266
0040BB 7E040000    R  MOV      WR0,#WORD2 ?SC_2266
0040BF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4256
0040C3 0BD0           INC      R13,#01H
0040C5 BED024         CMP      R13,#024H
0040C8 78BE           JNE      ?C1397
                                                ; SOURCE LINE # 4257
0040CA 7E340064       MOV      WR6,#064H
0040CE 9A000000    E  ECALL    DelayMs?
               ?C1399:
0040D2 80FE           SJMP     ?C1399
               ?C1383:
                                                ; SOURCE LINE # 4261
0040D4 7E140000    R  MOV      WR2,#WORD0 ?SC_1430
0040D8 7E040000    R  MOV      WR0,#WORD2 ?SC_1430
0040DC 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4262
                                                ; SOURCE LINE # 4263
0040E0 DA79           POP      WR14
0040E2 DAD8           POP      R13
0040E4 AA             ERET     
;       FUNCTION Test_CAL_AVG2_RX? (END)

;       FUNCTION Test_CAL_MIN_TX? (BEGIN)
                                                ; SOURCE LINE # 4497
0040E5 CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 4498
                                                ; SOURCE LINE # 4506
0040E7 7E140000    R  MOV      WR2,#WORD0 ?SC_1408
0040EB 7E040000    R  MOV      WR0,#WORD2 ?SC_1408
0040EF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4508
0040F3 7E140000    R  MOV      WR2,#WORD0 ?SC_1402
0040F7 7E040000    R  MOV      WR0,#WORD2 ?SC_1402
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 368 

0040FB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4509
0040FF 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 4511
               ?C1413:
004101 6CFF           XRL      R15,R15
               ?C1412:
                                                ; SOURCE LINE # 4513
004103 9A000000    E  ECALL    rand??
004107 1A17           MOVS     WR2,R7
004109 7E7048         MOV      R7,#048H
00410C AC7E           MUL      R7,R14
00410E 7E1002         MOV      R1,#02H
004111 AC1F           MUL      R1,R15
004113 2D03           ADD      WR0,WR6
004115 7E1F0000    R  MOV      DR4,T_tempbuf1
004119 2D30           ADD      WR6,WR0
00411B 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 4514
00411E 0BF0           INC      R15,#01H
004120 BEF024         CMP      R15,#024H
004123 78DE           JNE      ?C1412
                                                ; SOURCE LINE # 4515
004125 0BE0           INC      R14,#01H
004127 BEE012         CMP      R14,#012H
00412A 78D5           JNE      ?C1413
                                                ; SOURCE LINE # 4517
00412C 7E341000       MOV      WR6,#01000H
004130 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4518
004134 7E341A20       MOV      WR6,#01A20H
004138 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4519
00413C 7412           MOV      A,#012H          ; A=R11
00413E 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4520
004142 7424           MOV      A,#024H          ; A=R11
004144 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4521
004148 7E340010       MOV      WR6,#010H
00414C 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4522
004150 E4             CLR      A                ; A=R11
004151 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4523
004155 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4524
004159 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4526
00415D 7E000000    R  MOV      DR0,#WORD0 CalParam
004161 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 4528
004165 6CEE           XRL      R14,R14
               ?C1417:
                                                ; SOURCE LINE # 4530
004167 7E7048         MOV      R7,#048H
00416A AC7E           MUL      R7,R14
00416C 7E0F0000    R  MOV      DR0,T_tempbuf1
004170 7F20           MOV      DR8,DR0
004172 2D53           ADD      WR10,WR6
004174 0B2A40         MOV      WR8,@DR8
004177 7E5002         MOV      R5,#02H
00417A AC5E           MUL      R5,R14
00417C 59420000    R  MOV      @WR4+ssMinBuf,WR8
                                                ; SOURCE LINE # 4531
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 369 

004180 6CFF           XRL      R15,R15
               ?C1422:
                                                ; SOURCE LINE # 4533
004182 7402           MOV      A,#02H           ; A=R11
004184 ACBF           MUL      R11,R15          ; A=R11
004186 2D53           ADD      WR10,WR6
004188 2D51           ADD      WR10,WR2
00418A 7D40           MOV      WR8,WR0
00418C 0B2A40         MOV      WR8,@DR8
00418F 49520000    R  MOV      WR10,@WR4+ssMinBuf
004193 BD45           CMP      WR8,WR10
004195 4803        R  JSL      $ + 5H
004197 020000      R  LJMP     ?C1419
                                                ; SOURCE LINE # 4535
00419A 7402           MOV      A,#02H           ; A=R11
00419C ACBE           MUL      R11,R14          ; A=R11
00419E 59450000    R  MOV      @WR10+ssMinBuf,WR8
                                                ; SOURCE LINE # 4536
               ?C1419:
0041A2 0BF0           INC      R15,#01H
0041A4 BEF024         CMP      R15,#024H
0041A7 78D9           JNE      ?C1422
                                                ; SOURCE LINE # 4538
0041A9 0BE0           INC      R14,#01H
0041AB BEE012         CMP      R14,#012H
0041AE 78B7           JNE      ?C1417
                                                ; SOURCE LINE # 4540
0041B0 E4             CLR      A                ; A=R11
0041B1 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4541
0041B5 6CEE           XRL      R14,R14
               ?C1428:
                                                ; SOURCE LINE # 4543
0041B7 7E3002         MOV      R3,#02H
0041BA AC3E           MUL      R3,R14
0041BC 49310000    R  MOV      WR6,@WR2+ssMinBuf
0041C0 7E5002         MOV      R5,#02H
0041C3 AC5E           MUL      R5,R14
0041C5 7E2F0000    R  MOV      DR8,T_tempOut
0041C9 2D52           ADD      WR10,WR4
0041CB 0B2A20         MOV      WR4,@DR8
0041CE BD23           CMP      WR4,WR6
0041D0 7803        R  JNE      $ + 5H
0041D2 020000      R  LJMP     ?C1425
                                                ; SOURCE LINE # 4545
0041D5 7A270000    E  MOV      ?printf??BYTE-2,WR4
0041D9 7A370000    E  MOV      ?printf??BYTE-4,WR6
0041DD 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
0041E1 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
0041E5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4546
0041E9 7401           MOV      A,#01H           ; A=R11
0041EB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4547
                                                ; SOURCE LINE # 4551
                                                ; SOURCE LINE # 4552
               ?C1425:
0041EF 0BE0           INC      R14,#01H
0041F1 BEE012         CMP      R14,#012H
0041F4 78C1           JNE      ?C1428
                                                ; SOURCE LINE # 4553
0041F6 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0041FA 7003        R  JNZ      $ + 5H
0041FC 020000      R  LJMP     ?C1432
                                                ; SOURCE LINE # 4555
0041FF 7E140000    R  MOV      WR2,#WORD0 ?SC_1342
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 370 

004203 7E040000    R  MOV      WR0,#WORD2 ?SC_1342
004207 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4556
00420B 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00420F 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004213 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4557
004217 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4559
               ?C1442:
004219 6CFF           XRL      R15,R15
               ?C1441:
                                                ; SOURCE LINE # 4562
00421B 7E1048         MOV      R1,#048H
00421E AC1E           MUL      R1,R14
004220 7E3002         MOV      R3,#02H
004223 AC3F           MUL      R3,R15
004225 2D10           ADD      WR2,WR0
004227 7E1F0000    R  MOV      DR4,T_tempbuf1
00422B 2D31           ADD      WR6,WR2
00422D 0B1A30         MOV      WR6,@DR4
004230 7A370000    E  MOV      ?printf??BYTE-2,WR6
004234 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004238 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
00423C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4563
004240 0BF0           INC      R15,#01H
004242 BEF024         CMP      R15,#024H
004245 78D4           JNE      ?C1441
                                                ; SOURCE LINE # 4564
004247 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00424B 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00424F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4565
004253 0BE0           INC      R14,#01H
004255 BEE012         CMP      R14,#012H
004258 78BF           JNE      ?C1442
                                                ; SOURCE LINE # 4567
00425A 7E340064       MOV      WR6,#064H
00425E 9A000000    E  ECALL    DelayMs?
               ?C1443:
004262 80FE           SJMP     ?C1443
               ?C1432:
                                                ; SOURCE LINE # 4571
004264 7E140000    R  MOV      WR2,#WORD0 ?SC_1313
004268 7E040000    R  MOV      WR0,#WORD2 ?SC_1313
00426C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4572
                                                ; SOURCE LINE # 4574
004270 7E140000    R  MOV      WR2,#WORD0 ?SC_1291
004274 7E040000    R  MOV      WR0,#WORD2 ?SC_1291
004278 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4575
00427C 7E341000       MOV      WR6,#01000H
004280 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4576
004284 7E341A20       MOV      WR6,#01A20H
004288 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4577
00428C 7412           MOV      A,#012H          ; A=R11
00428E 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4578
004292 7424           MOV      A,#024H          ; A=R11
004294 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4579
004298 7E340010       MOV      WR6,#010H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 371 

00429C 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4580
0042A0 E4             CLR      A                ; A=R11
0042A1 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4581
0042A5 7401           MOV      A,#01H           ; A=R11
0042A7 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4582
0042AB E4             CLR      A                ; A=R11
0042AC 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4584
0042B0 7E000000    R  MOV      DR0,#WORD0 CalParam
0042B4 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 4586
0042B8 6CEE           XRL      R14,R14
               ?C1451:
                                                ; SOURCE LINE # 4588
0042BA 7448           MOV      A,#048H          ; A=R11
0042BC ACBE           MUL      R11,R14          ; A=R11
0042BE 7E1F0000    R  MOV      DR4,T_tempbuf1
0042C2 2D35           ADD      WR6,WR10
0042C4 0B1A30         MOV      WR6,@DR4
0042C7 9A000000    E  ECALL    abs??
0042CB 7D63           MOV      WR12,WR6
;---- Variable 'slTemp' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 4589
0042CD 6CFF           XRL      R15,R15
               ?C1456:
                                                ; SOURCE LINE # 4591
0042CF 7E1048         MOV      R1,#048H
0042D2 AC1E           MUL      R1,R14
0042D4 7E3002         MOV      R3,#02H
0042D7 AC3F           MUL      R3,R15
0042D9 2D10           ADD      WR2,WR0
0042DB 7E1F0000    R  MOV      DR4,T_tempbuf1
0042DF 2D31           ADD      WR6,WR2
0042E1 0B1A30         MOV      WR6,@DR4
0042E4 9A000000    E  ECALL    abs??
0042E8 BD36           CMP      WR6,WR12
0042EA 4803        R  JSL      $ + 5H
0042EC 020000      R  LJMP     ?C1453
                                                ; SOURCE LINE # 4593
0042EF 7E1048         MOV      R1,#048H
0042F2 AC1E           MUL      R1,R14
0042F4 7E3002         MOV      R3,#02H
0042F7 AC3F           MUL      R3,R15
0042F9 2D10           ADD      WR2,WR0
0042FB 7E1F0000    R  MOV      DR4,T_tempbuf1
0042FF 2D31           ADD      WR6,WR2
004301 0B1A30         MOV      WR6,@DR4
004304 9A000000    E  ECALL    abs??
004308 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 4594
               ?C1453:
00430A 0BF0           INC      R15,#01H
00430C BEF024         CMP      R15,#024H
00430F 78BE           JNE      ?C1456
                                                ; SOURCE LINE # 4596
004311 BE647FFF       CMP      WR12,#07FFFH
004315 1803        R  JSG      $ + 5H
004317 020000      R  LJMP     ?C1459
                                                ; SOURCE LINE # 4598
00431A 7E347FFF       MOV      WR6,#07FFFH
00431E 7402           MOV      A,#02H           ; A=R11
004320 ACBE           MUL      R11,R14          ; A=R11
004322 59350000    R  MOV      @WR10+ssMinBuf,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 372 

                                                ; SOURCE LINE # 4599
004326 020000      R  LJMP     ?C1448
               ?C1459:
                                                ; SOURCE LINE # 4602
004329 7402           MOV      A,#02H           ; A=R11
00432B ACBE           MUL      R11,R14          ; A=R11
00432D 59650000    R  MOV      @WR10+ssMinBuf,WR12
                                                ; SOURCE LINE # 4603
                                                ; SOURCE LINE # 4604
               ?C1448:
004331 0BE0           INC      R14,#01H
004333 BEE012         CMP      R14,#012H
004336 7882           JNE      ?C1451
                                                ; SOURCE LINE # 4606
004338 E4             CLR      A                ; A=R11
004339 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4607
00433D 6CEE           XRL      R14,R14
               ?C1464:
                                                ; SOURCE LINE # 4609
00433F 7E3002         MOV      R3,#02H
004342 AC3E           MUL      R3,R14
004344 49310000    R  MOV      WR6,@WR2+ssMinBuf
004348 7E5002         MOV      R5,#02H
00434B AC5E           MUL      R5,R14
00434D 7E2F0000    R  MOV      DR8,T_tempOut
004351 2D52           ADD      WR10,WR4
004353 0B2A20         MOV      WR4,@DR8
004356 BD23           CMP      WR4,WR6
004358 7803        R  JNE      $ + 5H
00435A 020000      R  LJMP     ?C1461
                                                ; SOURCE LINE # 4611
00435D 7A270000    E  MOV      ?printf??BYTE-2,WR4
004361 7A370000    E  MOV      ?printf??BYTE-4,WR6
004365 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
004369 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
00436D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4612
004371 7401           MOV      A,#01H           ; A=R11
004373 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4613
                                                ; SOURCE LINE # 4617
                                                ; SOURCE LINE # 4618
               ?C1461:
004377 0BE0           INC      R14,#01H
004379 BEE012         CMP      R14,#012H
00437C 78C1           JNE      ?C1464
                                                ; SOURCE LINE # 4619
00437E 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004382 7003        R  JNZ      $ + 5H
004384 020000      R  LJMP     ?C1468
                                                ; SOURCE LINE # 4621
004387 7E140000    R  MOV      WR2,#WORD0 ?SC_1259
00438B 7E040000    R  MOV      WR0,#WORD2 ?SC_1259
00438F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4622
004393 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004397 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00439B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4623
00439F 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4625
               ?C1478:
0043A1 6CFF           XRL      R15,R15
               ?C1477:
                                                ; SOURCE LINE # 4628
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 373 

0043A3 7E1048         MOV      R1,#048H
0043A6 AC1E           MUL      R1,R14
0043A8 7E3002         MOV      R3,#02H
0043AB AC3F           MUL      R3,R15
0043AD 2D10           ADD      WR2,WR0
0043AF 7E1F0000    R  MOV      DR4,T_tempbuf1
0043B3 2D31           ADD      WR6,WR2
0043B5 0B1A30         MOV      WR6,@DR4
0043B8 7A370000    E  MOV      ?printf??BYTE-2,WR6
0043BC 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0043C0 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0043C4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4629
0043C8 0BF0           INC      R15,#01H
0043CA BEF024         CMP      R15,#024H
0043CD 78D4           JNE      ?C1477
                                                ; SOURCE LINE # 4630
0043CF 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0043D3 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0043D7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4631
0043DB 0BE0           INC      R14,#01H
0043DD BEE012         CMP      R14,#012H
0043E0 78BF           JNE      ?C1478
                                                ; SOURCE LINE # 4633
0043E2 7E340064       MOV      WR6,#064H
0043E6 9A000000    E  ECALL    DelayMs?
               ?C1479:
0043EA 80FE           SJMP     ?C1479
               ?C1468:
                                                ; SOURCE LINE # 4637
0043EC 7E140000    R  MOV      WR2,#WORD0 ?SC_1230
0043F0 7E040000    R  MOV      WR0,#WORD2 ?SC_1230
0043F4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4638
                                                ; SOURCE LINE # 4640
0043F8 7E140000    R  MOV      WR2,#WORD0 ?SC_1224
0043FC 7E040000    R  MOV      WR0,#WORD2 ?SC_1224
004400 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4641
004404 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4643
               ?C1493:
004406 6CFF           XRL      R15,R15
               ?C1492:
                                                ; SOURCE LINE # 4645
004408 9A000000    E  ECALL    rand??
00440C 1A17           MOVS     WR2,R7
00440E 7E7048         MOV      R7,#048H
004411 AC7E           MUL      R7,R14
004413 7E1002         MOV      R1,#02H
004416 AC1F           MUL      R1,R15
004418 2D03           ADD      WR0,WR6
00441A 7E1F0000    R  MOV      DR4,g_pAfeAram
00441E 2D30           ADD      WR6,WR0
004420 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 4646
004423 0BF0           INC      R15,#01H
004425 BEF024         CMP      R15,#024H
004428 78DE           JNE      ?C1492
                                                ; SOURCE LINE # 4647
00442A 0BE0           INC      R14,#01H
00442C BEE012         CMP      R14,#012H
00442F 40D5           JC       ?C1493
                                                ; SOURCE LINE # 4778
004431 DA3B           POP      DR12
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 374 

004433 AA             ERET     
;       FUNCTION Test_CAL_MIN_TX? (END)

;       FUNCTION Test_CAL_MIN_RX? (BEGIN)
                                                ; SOURCE LINE # 4791
004434 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 4792
                                                ; SOURCE LINE # 4801
004436 7E140000    R  MOV      WR2,#WORD0 ?SC_1202
00443A 7E040000    R  MOV      WR0,#WORD2 ?SC_1202
00443E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4803
004442 7E140000    R  MOV      WR2,#WORD0 ?SC_1197
004446 7E040000    R  MOV      WR0,#WORD2 ?SC_1197
00444A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4804
00444E 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 4806
               ?C1503:
004450 6CFF           XRL      R15,R15
               ?C1502:
                                                ; SOURCE LINE # 4808
004452 9A000000    E  ECALL    rand??
004456 1A17           MOVS     WR2,R7
004458 7E7048         MOV      R7,#048H
00445B AC7E           MUL      R7,R14
00445D 7E1002         MOV      R1,#02H
004460 AC1F           MUL      R1,R15
004462 2D03           ADD      WR0,WR6
004464 7E1F0000    R  MOV      DR4,T_tempbuf1
004468 2D30           ADD      WR6,WR0
00446A 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 4809
00446D 0BF0           INC      R15,#01H
00446F BEF024         CMP      R15,#024H
004472 78DE           JNE      ?C1502
                                                ; SOURCE LINE # 4810
004474 0BE0           INC      R14,#01H
004476 BEE012         CMP      R14,#012H
004479 78D5           JNE      ?C1503
                                                ; SOURCE LINE # 4812
00447B 7E341000       MOV      WR6,#01000H
00447F 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4813
004483 7E341A20       MOV      WR6,#01A20H
004487 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4814
00448B 7412           MOV      A,#012H          ; A=R11
00448D 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4815
004491 7424           MOV      A,#024H          ; A=R11
004493 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4816
004497 7E340010       MOV      WR6,#010H
00449B 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4817
00449F E4             CLR      A                ; A=R11
0044A0 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4818
0044A4 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4819
0044A8 7401           MOV      A,#01H           ; A=R11
0044AA 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4821
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 375 

0044AE 7E000000    R  MOV      DR0,#WORD0 CalParam
0044B2 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 4823
0044B6 6CEE           XRL      R14,R14
               ?C1507:
                                                ; SOURCE LINE # 4825
0044B8 7E7002         MOV      R7,#02H
0044BB AC7E           MUL      R7,R14
0044BD 7E0F0000    R  MOV      DR0,T_tempbuf1
0044C1 7F20           MOV      DR8,DR0
0044C3 2D53           ADD      WR10,WR6
0044C5 0B2A40         MOV      WR8,@DR8
0044C8 7E5002         MOV      R5,#02H
0044CB AC5E           MUL      R5,R14
0044CD 59420000    R  MOV      @WR4+ssMinBuf,WR8
                                                ; SOURCE LINE # 4826
0044D1 6CFF           XRL      R15,R15
               ?C1512:
                                                ; SOURCE LINE # 4828
0044D3 7448           MOV      A,#048H          ; A=R11
0044D5 ACBF           MUL      R11,R15          ; A=R11
0044D7 2D53           ADD      WR10,WR6
0044D9 2D51           ADD      WR10,WR2
0044DB 7D40           MOV      WR8,WR0
0044DD 0B2A50         MOV      WR10,@DR8
0044E0 49420000    R  MOV      WR8,@WR4+ssMinBuf
0044E4 BD54           CMP      WR10,WR8
0044E6 4803        R  JSL      $ + 5H
0044E8 020000      R  LJMP     ?C1509
                                                ; SOURCE LINE # 4830
0044EB 59520000    R  MOV      @WR4+ssMinBuf,WR10
                                                ; SOURCE LINE # 4831
               ?C1509:
0044EF 0BF0           INC      R15,#01H
0044F1 BEF012         CMP      R15,#012H
0044F4 78DD           JNE      ?C1512
                                                ; SOURCE LINE # 4833
0044F6 0BE0           INC      R14,#01H
0044F8 BEE024         CMP      R14,#024H
0044FB 78BB           JNE      ?C1507
                                                ; SOURCE LINE # 4835
0044FD E4             CLR      A                ; A=R11
0044FE 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4836
004502 6CEE           XRL      R14,R14
               ?C1518:
                                                ; SOURCE LINE # 4838
004504 7E1002         MOV      R1,#02H
004507 AC1E           MUL      R1,R14
004509 49300000    R  MOV      WR6,@WR0+ssMinBuf
00450D 7E5002         MOV      R5,#02H
004510 AC5E           MUL      R5,R14
004512 7E2F0000    R  MOV      DR8,T_tempOut
004516 2D52           ADD      WR10,WR4
004518 0B2A20         MOV      WR4,@DR8
00451B BD23           CMP      WR4,WR6
00451D 7803        R  JNE      $ + 5H
00451F 020000      R  LJMP     ?C1515
                                                ; SOURCE LINE # 4840
004522 0A1E           MOVZ     WR2,R14
004524 7A170000    E  MOV      ?printf??BYTE-2,WR2
004528 7A270000    E  MOV      ?printf??BYTE-4,WR4
00452C 7A370000    E  MOV      ?printf??BYTE-6,WR6
004530 7E140000    R  MOV      WR2,#WORD0 ?SC_1165
004534 7E040000    R  MOV      WR0,#WORD2 ?SC_1165
004538 9A000000    E  ECALL    printf?
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 376 

                                                ; SOURCE LINE # 4841
00453C 7401           MOV      A,#01H           ; A=R11
00453E 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4842
                                                ; SOURCE LINE # 4846
                                                ; SOURCE LINE # 4847
               ?C1515:
004542 0BE0           INC      R14,#01H
004544 BEE024         CMP      R14,#024H
004547 78BB           JNE      ?C1518
                                                ; SOURCE LINE # 4848
004549 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00454D 7003        R  JNZ      $ + 5H
00454F 020000      R  LJMP     ?C1522
                                                ; SOURCE LINE # 4850
004552 7E140000    R  MOV      WR2,#WORD0 ?SC_1133
004556 7E040000    R  MOV      WR0,#WORD2 ?SC_1133
00455A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4851
00455E 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004562 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004566 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4852
00456A 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4854
               ?C1532:
00456C 6CFF           XRL      R15,R15
               ?C1531:
                                                ; SOURCE LINE # 4857
00456E 7E1048         MOV      R1,#048H
004571 AC1E           MUL      R1,R14
004573 7E3002         MOV      R3,#02H
004576 AC3F           MUL      R3,R15
004578 2D10           ADD      WR2,WR0
00457A 7E1F0000    R  MOV      DR4,T_tempbuf1
00457E 2D31           ADD      WR6,WR2
004580 0B1A30         MOV      WR6,@DR4
004583 7A370000    E  MOV      ?printf??BYTE-2,WR6
004587 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
00458B 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
00458F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4858
004593 0BF0           INC      R15,#01H
004595 BEF024         CMP      R15,#024H
004598 78D4           JNE      ?C1531
                                                ; SOURCE LINE # 4859
00459A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00459E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0045A2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4860
0045A6 0BE0           INC      R14,#01H
0045A8 BEE012         CMP      R14,#012H
0045AB 78BF           JNE      ?C1532
                                                ; SOURCE LINE # 4862
0045AD 7E340064       MOV      WR6,#064H
0045B1 9A000000    E  ECALL    DelayMs?
               ?C1533:
0045B5 80FE           SJMP     ?C1533
               ?C1522:
                                                ; SOURCE LINE # 4866
0045B7 7E140000    R  MOV      WR2,#WORD0 ?SC_1104
0045BB 7E040000    R  MOV      WR0,#WORD2 ?SC_1104
0045BF 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4867
                                                ; SOURCE LINE # 4869
0045C3 7E140000    R  MOV      WR2,#WORD0 ?SC_1082
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 377 

0045C7 7E040000    R  MOV      WR0,#WORD2 ?SC_1082
0045CB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4870
0045CF 7E341000       MOV      WR6,#01000H
0045D3 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 4871
0045D7 7E341A20       MOV      WR6,#01A20H
0045DB 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 4872
0045DF 7412           MOV      A,#012H          ; A=R11
0045E1 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 4873
0045E5 7424           MOV      A,#024H          ; A=R11
0045E7 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 4874
0045EB 7E340010       MOV      WR6,#010H
0045EF 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 4875
0045F3 E4             CLR      A                ; A=R11
0045F4 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 4876
0045F8 7401           MOV      A,#01H           ; A=R11
0045FA 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 4877
0045FE 7401           MOV      A,#01H           ; A=R11
004600 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 4879
004604 7E000000    R  MOV      DR0,#WORD0 CalParam
004608 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 4881
00460C 6CEE           XRL      R14,R14
               ?C1541:
                                                ; SOURCE LINE # 4883
00460E 7402           MOV      A,#02H           ; A=R11
004610 ACBE           MUL      R11,R14          ; A=R11
004612 7E1F0000    R  MOV      DR4,T_tempbuf1
004616 2D35           ADD      WR6,WR10
004618 0B1A30         MOV      WR6,@DR4
00461B 9A000000    E  ECALL    abs??
00461F 1A26           MOVS     WR4,R6
004621 1A24           MOVS     WR4,R4
004623 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 4884
004627 6CFF           XRL      R15,R15
               ?C1546:
                                                ; SOURCE LINE # 4886
004629 7E1048         MOV      R1,#048H
00462C AC1F           MUL      R1,R15
00462E 7E3002         MOV      R3,#02H
004631 AC3E           MUL      R3,R14
004633 2D10           ADD      WR2,WR0
004635 7E1F0000    R  MOV      DR4,T_tempbuf1
004639 2D31           ADD      WR6,WR2
00463B 0B1A30         MOV      WR6,@DR4
00463E 9A000000    E  ECALL    abs??
004642 7D13           MOV      WR2,WR6
004644 1A02           MOVS     WR0,R2
004646 1A00           MOVS     WR0,R0
004648 7E1F0000    R  MOV      DR4,slTemp
00464C BF01           CMP      DR0,DR4
00464E 4803        R  JSL      $ + 5H
004650 020000      R  LJMP     ?C1543
                                                ; SOURCE LINE # 4888
004653 7E1048         MOV      R1,#048H
004656 AC1F           MUL      R1,R15
004658 7E3002         MOV      R3,#02H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 378 

00465B AC3E           MUL      R3,R14
00465D 2D10           ADD      WR2,WR0
00465F 7E1F0000    R  MOV      DR4,T_tempbuf1
004663 2D31           ADD      WR6,WR2
004665 0B1A30         MOV      WR6,@DR4
004668 9A000000    E  ECALL    abs??
00466C 1A26           MOVS     WR4,R6
00466E 1A24           MOVS     WR4,R4
004670 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 4889
               ?C1543:
004674 0BF0           INC      R15,#01H
004676 BEF012         CMP      R15,#012H
004679 78AE           JNE      ?C1546
                                                ; SOURCE LINE # 4891
00467B 7E1F0000    R  MOV      DR4,slTemp
00467F BE187FFF       CMP      DR4,#07FFFH
004683 1803        R  JSG      $ + 5H
004685 020000      R  LJMP     ?C1549
                                                ; SOURCE LINE # 4893
004688 7E147FFF       MOV      WR2,#07FFFH
00468C 7402           MOV      A,#02H           ; A=R11
00468E ACBE           MUL      R11,R14          ; A=R11
004690 59150000    R  MOV      @WR10+ssMinBuf,WR2
                                                ; SOURCE LINE # 4894
004694 020000      R  LJMP     ?C1538
               ?C1549:
                                                ; SOURCE LINE # 4897
004697 7402           MOV      A,#02H           ; A=R11
004699 ACBE           MUL      R11,R14          ; A=R11
00469B 59350000    R  MOV      @WR10+ssMinBuf,WR6
                                                ; SOURCE LINE # 4898
                                                ; SOURCE LINE # 4899
               ?C1538:
00469F 0BE0           INC      R14,#01H
0046A1 BEE024         CMP      R14,#024H
0046A4 6803        R  JE       $ + 5H
0046A6 020000      R  LJMP     ?C1541
                                                ; SOURCE LINE # 4901
0046A9 E4             CLR      A                ; A=R11
0046AA 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4902
0046AE 6CEE           XRL      R14,R14
               ?C1554:
                                                ; SOURCE LINE # 4904
0046B0 7E1002         MOV      R1,#02H
0046B3 AC1E           MUL      R1,R14
0046B5 49300000    R  MOV      WR6,@WR0+ssMinBuf
0046B9 7E5002         MOV      R5,#02H
0046BC AC5E           MUL      R5,R14
0046BE 7E2F0000    R  MOV      DR8,T_tempOut
0046C2 2D52           ADD      WR10,WR4
0046C4 0B2A20         MOV      WR4,@DR8
0046C7 BD23           CMP      WR4,WR6
0046C9 7803        R  JNE      $ + 5H
0046CB 020000      R  LJMP     ?C1551
                                                ; SOURCE LINE # 4906
0046CE 0A1E           MOVZ     WR2,R14
0046D0 7A170000    E  MOV      ?printf??BYTE-2,WR2
0046D4 7A270000    E  MOV      ?printf??BYTE-4,WR4
0046D8 7A370000    E  MOV      ?printf??BYTE-6,WR6
0046DC 7E140000    R  MOV      WR2,#WORD0 ?SC_1165
0046E0 7E040000    R  MOV      WR0,#WORD2 ?SC_1165
0046E4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4907
0046E8 7401           MOV      A,#01H           ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 379 

0046EA 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 4908
                                                ; SOURCE LINE # 4912
                                                ; SOURCE LINE # 4913
               ?C1551:
0046EE 0BE0           INC      R14,#01H
0046F0 BEE024         CMP      R14,#024H
0046F3 78BB           JNE      ?C1554
                                                ; SOURCE LINE # 4914
0046F5 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0046F9 7003        R  JNZ      $ + 5H
0046FB 020000      R  LJMP     ?C1558
                                                ; SOURCE LINE # 4916
0046FE 7E140000    R  MOV      WR2,#WORD0 ?SC_1050
004702 7E040000    R  MOV      WR0,#WORD2 ?SC_1050
004706 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4918
00470A 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00470E 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004712 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4919
004716 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 4921
               ?C1568:
004718 6CFF           XRL      R15,R15
               ?C1567:
                                                ; SOURCE LINE # 4924
00471A 7E1048         MOV      R1,#048H
00471D AC1E           MUL      R1,R14
00471F 7E3002         MOV      R3,#02H
004722 AC3F           MUL      R3,R15
004724 2D10           ADD      WR2,WR0
004726 7E1F0000    R  MOV      DR4,T_tempbuf1
00472A 2D31           ADD      WR6,WR2
00472C 0B1A30         MOV      WR6,@DR4
00472F 7A370000    E  MOV      ?printf??BYTE-2,WR6
004733 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004737 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
00473B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4925
00473F 0BF0           INC      R15,#01H
004741 BEF024         CMP      R15,#024H
004744 78D4           JNE      ?C1567
                                                ; SOURCE LINE # 4926
004746 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00474A 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00474E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4927
004752 0BE0           INC      R14,#01H
004754 BEE012         CMP      R14,#012H
004757 78BF           JNE      ?C1568
                                                ; SOURCE LINE # 4928
004759 7E340064       MOV      WR6,#064H
00475D 9A000000    E  ECALL    DelayMs?
               ?C1569:
004761 80FE           SJMP     ?C1569
               ?C1558:
                                                ; SOURCE LINE # 4932
004763 7E140000    R  MOV      WR2,#WORD0 ?SC_1021
004767 7E040000    R  MOV      WR0,#WORD2 ?SC_1021
00476B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 4933
                                                ; SOURCE LINE # 5068
00476F DA79           POP      WR14
004771 AA             ERET     
;       FUNCTION Test_CAL_MIN_RX? (END)
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 380 


;       FUNCTION Test_CAL_MAX_TX? (BEGIN)
                                                ; SOURCE LINE # 5082
004772 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 5083
                                                ; SOURCE LINE # 5091
004774 7E140000    R  MOV      WR2,#WORD0 ?SC_0999
004778 7E040000    R  MOV      WR0,#WORD2 ?SC_0999
00477C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5093
004780 7E140000    R  MOV      WR2,#WORD0 ?SC_1402
004784 7E040000    R  MOV      WR0,#WORD2 ?SC_1402
004788 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5094
00478C 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 5096
               ?C1583:
00478E 6CFF           XRL      R15,R15
               ?C1582:
                                                ; SOURCE LINE # 5098
004790 9A000000    E  ECALL    rand??
004794 1A17           MOVS     WR2,R7
004796 7E7048         MOV      R7,#048H
004799 AC7E           MUL      R7,R14
00479B 7E1002         MOV      R1,#02H
00479E AC1F           MUL      R1,R15
0047A0 2D03           ADD      WR0,WR6
0047A2 7E1F0000    R  MOV      DR4,T_tempbuf1
0047A6 2D30           ADD      WR6,WR0
0047A8 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5099
0047AB 0BF0           INC      R15,#01H
0047AD BEF024         CMP      R15,#024H
0047B0 78DE           JNE      ?C1582
                                                ; SOURCE LINE # 5100
0047B2 0BE0           INC      R14,#01H
0047B4 BEE012         CMP      R14,#012H
0047B7 78D5           JNE      ?C1583
                                                ; SOURCE LINE # 5102
0047B9 7E341000       MOV      WR6,#01000H
0047BD 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5103
0047C1 7E341A20       MOV      WR6,#01A20H
0047C5 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 5104
0047C9 7412           MOV      A,#012H          ; A=R11
0047CB 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5105
0047CF 7424           MOV      A,#024H          ; A=R11
0047D1 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5106
0047D5 7E340020       MOV      WR6,#020H
0047D9 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5107
0047DD E4             CLR      A                ; A=R11
0047DE 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5108
0047E2 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 5109
0047E6 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5111
0047EA 7E000000    R  MOV      DR0,#WORD0 CalParam
0047EE 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 5113
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 381 

0047F2 6CEE           XRL      R14,R14
               ?C1587:
                                                ; SOURCE LINE # 5115
0047F4 7E7048         MOV      R7,#048H
0047F7 AC7E           MUL      R7,R14
0047F9 7E0F0000    R  MOV      DR0,T_tempbuf1
0047FD 7F20           MOV      DR8,DR0
0047FF 2D53           ADD      WR10,WR6
004801 0B2A40         MOV      WR8,@DR8
004804 7E5002         MOV      R5,#02H
004807 AC5E           MUL      R5,R14
004809 59420000    R  MOV      @WR4+ssMaxBuf,WR8
                                                ; SOURCE LINE # 5116
00480D 6CFF           XRL      R15,R15
               ?C1592:
                                                ; SOURCE LINE # 5118
00480F 7402           MOV      A,#02H           ; A=R11
004811 ACBF           MUL      R11,R15          ; A=R11
004813 2D53           ADD      WR10,WR6
004815 2D51           ADD      WR10,WR2
004817 7D40           MOV      WR8,WR0
004819 0B2A40         MOV      WR8,@DR8
00481C 49520000    R  MOV      WR10,@WR4+ssMaxBuf
004820 BD45           CMP      WR8,WR10
004822 1803        R  JSG      $ + 5H
004824 020000      R  LJMP     ?C1589
                                                ; SOURCE LINE # 5120
004827 7402           MOV      A,#02H           ; A=R11
004829 ACBE           MUL      R11,R14          ; A=R11
00482B 59450000    R  MOV      @WR10+ssMaxBuf,WR8
                                                ; SOURCE LINE # 5121
               ?C1589:
00482F 0BF0           INC      R15,#01H
004831 BEF024         CMP      R15,#024H
004834 78D9           JNE      ?C1592
                                                ; SOURCE LINE # 5123
004836 0BE0           INC      R14,#01H
004838 BEE012         CMP      R14,#012H
00483B 78B7           JNE      ?C1587
                                                ; SOURCE LINE # 5125
00483D E4             CLR      A                ; A=R11
00483E 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5126
004842 6CEE           XRL      R14,R14
               ?C1598:
                                                ; SOURCE LINE # 5128
004844 7E3002         MOV      R3,#02H
004847 AC3E           MUL      R3,R14
004849 49310000    R  MOV      WR6,@WR2+ssMaxBuf
00484D 7E5002         MOV      R5,#02H
004850 AC5E           MUL      R5,R14
004852 7E2F0000    R  MOV      DR8,T_tempOut
004856 2D52           ADD      WR10,WR4
004858 0B2A20         MOV      WR4,@DR8
00485B BD23           CMP      WR4,WR6
00485D 7803        R  JNE      $ + 5H
00485F 020000      R  LJMP     ?C1595
                                                ; SOURCE LINE # 5130
004862 7A270000    E  MOV      ?printf??BYTE-2,WR4
004866 7A370000    E  MOV      ?printf??BYTE-4,WR6
00486A 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
00486E 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
004872 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5131
004876 7401           MOV      A,#01H           ; A=R11
004878 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 382 

                                                ; SOURCE LINE # 5132
                                                ; SOURCE LINE # 5136
                                                ; SOURCE LINE # 5138
               ?C1595:
00487C 0BE0           INC      R14,#01H
00487E BEE012         CMP      R14,#012H
004881 78C1           JNE      ?C1598
                                                ; SOURCE LINE # 5139
004883 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004887 7003        R  JNZ      $ + 5H
004889 020000      R  LJMP     ?C1602
                                                ; SOURCE LINE # 5141
00488C 7E140000    R  MOV      WR2,#WORD0 ?SC_0967
004890 7E040000    R  MOV      WR0,#WORD2 ?SC_0967
004894 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5143
004898 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00489C 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0048A0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5144
0048A4 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5146
               ?C1612:
0048A6 6CFF           XRL      R15,R15
               ?C1611:
                                                ; SOURCE LINE # 5149
0048A8 7E1048         MOV      R1,#048H
0048AB AC1E           MUL      R1,R14
0048AD 7E3002         MOV      R3,#02H
0048B0 AC3F           MUL      R3,R15
0048B2 2D10           ADD      WR2,WR0
0048B4 7E1F0000    R  MOV      DR4,T_tempbuf1
0048B8 2D31           ADD      WR6,WR2
0048BA 0B1A30         MOV      WR6,@DR4
0048BD 7A370000    E  MOV      ?printf??BYTE-2,WR6
0048C1 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0048C5 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0048C9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5150
0048CD 0BF0           INC      R15,#01H
0048CF BEF024         CMP      R15,#024H
0048D2 78D4           JNE      ?C1611
                                                ; SOURCE LINE # 5151
0048D4 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0048D8 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0048DC 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5152
0048E0 0BE0           INC      R14,#01H
0048E2 BEE012         CMP      R14,#012H
0048E5 78BF           JNE      ?C1612
                                                ; SOURCE LINE # 5153
0048E7 7E340064       MOV      WR6,#064H
0048EB 9A000000    E  ECALL    DelayMs?
               ?C1613:
0048EF 80FE           SJMP     ?C1613
               ?C1602:
                                                ; SOURCE LINE # 5157
0048F1 7E140000    R  MOV      WR2,#WORD0 ?SC_0938
0048F5 7E040000    R  MOV      WR0,#WORD2 ?SC_0938
0048F9 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5158
                                                ; SOURCE LINE # 5160
0048FD 7E140000    R  MOV      WR2,#WORD0 ?SC_0916
004901 7E040000    R  MOV      WR0,#WORD2 ?SC_0916
004905 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5161
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 383 

004909 7E341000       MOV      WR6,#01000H
00490D 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5162
004911 7E341A20       MOV      WR6,#01A20H
004915 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 5163
004919 7412           MOV      A,#012H          ; A=R11
00491B 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5164
00491F 7424           MOV      A,#024H          ; A=R11
004921 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5165
004925 7E340020       MOV      WR6,#020H
004929 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5166
00492D E4             CLR      A                ; A=R11
00492E 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5167
004932 7401           MOV      A,#01H           ; A=R11
004934 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 5168
004938 E4             CLR      A                ; A=R11
004939 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5170
00493D 7E000000    R  MOV      DR0,#WORD0 CalParam
004941 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 5172
004945 6CEE           XRL      R14,R14
               ?C1621:
                                                ; SOURCE LINE # 5174
004947 7448           MOV      A,#048H          ; A=R11
004949 ACBE           MUL      R11,R14          ; A=R11
00494B 7E1F0000    R  MOV      DR4,T_tempbuf1
00494F 2D35           ADD      WR6,WR10
004951 0B1A30         MOV      WR6,@DR4
004954 9A000000    E  ECALL    abs??
004958 1A26           MOVS     WR4,R6
00495A 1A24           MOVS     WR4,R4
00495C 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 5175
004960 6CFF           XRL      R15,R15
               ?C1626:
                                                ; SOURCE LINE # 5177
004962 7E1048         MOV      R1,#048H
004965 AC1E           MUL      R1,R14
004967 7E3002         MOV      R3,#02H
00496A AC3F           MUL      R3,R15
00496C 2D10           ADD      WR2,WR0
00496E 7E1F0000    R  MOV      DR4,T_tempbuf1
004972 2D31           ADD      WR6,WR2
004974 0B1A30         MOV      WR6,@DR4
004977 9A000000    E  ECALL    abs??
00497B 7D13           MOV      WR2,WR6
00497D 1A02           MOVS     WR0,R2
00497F 1A00           MOVS     WR0,R0
004981 7E1F0000    R  MOV      DR4,slTemp
004985 BF01           CMP      DR0,DR4
004987 1803        R  JSG      $ + 5H
004989 020000      R  LJMP     ?C1623
                                                ; SOURCE LINE # 5179
00498C 7E1048         MOV      R1,#048H
00498F AC1E           MUL      R1,R14
004991 7E3002         MOV      R3,#02H
004994 AC3F           MUL      R3,R15
004996 2D10           ADD      WR2,WR0
004998 7E1F0000    R  MOV      DR4,T_tempbuf1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 384 

00499C 2D31           ADD      WR6,WR2
00499E 0B1A30         MOV      WR6,@DR4
0049A1 9A000000    E  ECALL    abs??
0049A5 1A26           MOVS     WR4,R6
0049A7 1A24           MOVS     WR4,R4
0049A9 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 5180
               ?C1623:
0049AD 0BF0           INC      R15,#01H
0049AF BEF024         CMP      R15,#024H
0049B2 78AE           JNE      ?C1626
                                                ; SOURCE LINE # 5182
0049B4 7E1F0000    R  MOV      DR4,slTemp
0049B8 BE187FFF       CMP      DR4,#07FFFH
0049BC 1803        R  JSG      $ + 5H
0049BE 020000      R  LJMP     ?C1629
                                                ; SOURCE LINE # 5184
0049C1 7E147FFF       MOV      WR2,#07FFFH
0049C5 7402           MOV      A,#02H           ; A=R11
0049C7 ACBE           MUL      R11,R14          ; A=R11
0049C9 59150000    R  MOV      @WR10+ssMaxBuf,WR2
                                                ; SOURCE LINE # 5185
0049CD 020000      R  LJMP     ?C1618
               ?C1629:
                                                ; SOURCE LINE # 5188
0049D0 7402           MOV      A,#02H           ; A=R11
0049D2 ACBE           MUL      R11,R14          ; A=R11
0049D4 59350000    R  MOV      @WR10+ssMaxBuf,WR6
                                                ; SOURCE LINE # 5189
                                                ; SOURCE LINE # 5190
               ?C1618:
0049D8 0BE0           INC      R14,#01H
0049DA BEE012         CMP      R14,#012H
0049DD 6803        R  JE       $ + 5H
0049DF 020000      R  LJMP     ?C1621
                                                ; SOURCE LINE # 5192
0049E2 E4             CLR      A                ; A=R11
0049E3 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5193
0049E7 6CEE           XRL      R14,R14
               ?C1634:
                                                ; SOURCE LINE # 5195
0049E9 7E3002         MOV      R3,#02H
0049EC AC3E           MUL      R3,R14
0049EE 49310000    R  MOV      WR6,@WR2+ssMaxBuf
0049F2 7E5002         MOV      R5,#02H
0049F5 AC5E           MUL      R5,R14
0049F7 7E2F0000    R  MOV      DR8,T_tempOut
0049FB 2D52           ADD      WR10,WR4
0049FD 0B2A20         MOV      WR4,@DR8
004A00 BD23           CMP      WR4,WR6
004A02 7803        R  JNE      $ + 5H
004A04 020000      R  LJMP     ?C1631
                                                ; SOURCE LINE # 5197
004A07 7A270000    E  MOV      ?printf??BYTE-2,WR4
004A0B 7A370000    E  MOV      ?printf??BYTE-4,WR6
004A0F 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
004A13 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
004A17 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5198
004A1B 7401           MOV      A,#01H           ; A=R11
004A1D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5199
                                                ; SOURCE LINE # 5203
                                                ; SOURCE LINE # 5204
               ?C1631:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 385 

004A21 0BE0           INC      R14,#01H
004A23 BEE012         CMP      R14,#012H
004A26 78C1           JNE      ?C1634
                                                ; SOURCE LINE # 5205
004A28 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004A2C 7003        R  JNZ      $ + 5H
004A2E 020000      R  LJMP     ?C1638
                                                ; SOURCE LINE # 5207
004A31 7E140000    R  MOV      WR2,#WORD0 ?SC_0884
004A35 7E040000    R  MOV      WR0,#WORD2 ?SC_0884
004A39 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5208
004A3D 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004A41 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004A45 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5209
004A49 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5211
               ?C1648:
004A4B 6CFF           XRL      R15,R15
               ?C1647:
                                                ; SOURCE LINE # 5214
004A4D 7E1048         MOV      R1,#048H
004A50 AC1E           MUL      R1,R14
004A52 7E3002         MOV      R3,#02H
004A55 AC3F           MUL      R3,R15
004A57 2D10           ADD      WR2,WR0
004A59 7E1F0000    R  MOV      DR4,T_tempbuf1
004A5D 2D31           ADD      WR6,WR2
004A5F 0B1A30         MOV      WR6,@DR4
004A62 7A370000    E  MOV      ?printf??BYTE-2,WR6
004A66 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004A6A 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
004A6E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5215
004A72 0BF0           INC      R15,#01H
004A74 BEF024         CMP      R15,#024H
004A77 78D4           JNE      ?C1647
                                                ; SOURCE LINE # 5216
004A79 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004A7D 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004A81 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5217
004A85 0BE0           INC      R14,#01H
004A87 BEE012         CMP      R14,#012H
004A8A 78BF           JNE      ?C1648
                                                ; SOURCE LINE # 5218
004A8C 7E340064       MOV      WR6,#064H
004A90 9A000000    E  ECALL    DelayMs?
               ?C1649:
004A94 80FE           SJMP     ?C1649
               ?C1638:
                                                ; SOURCE LINE # 5222
004A96 7E140000    R  MOV      WR2,#WORD0 ?SC_0855
004A9A 7E040000    R  MOV      WR0,#WORD2 ?SC_0855
004A9E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5223
                                                ; SOURCE LINE # 5225
004AA2 7E140000    R  MOV      WR2,#WORD0 ?SC_1224
004AA6 7E040000    R  MOV      WR0,#WORD2 ?SC_1224
004AAA 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5226
004AAE 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5228
               ?C1663:
004AB0 6CFF           XRL      R15,R15
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 386 

               ?C1662:
                                                ; SOURCE LINE # 5230
004AB2 9A000000    E  ECALL    rand??
004AB6 1A17           MOVS     WR2,R7
004AB8 7E7048         MOV      R7,#048H
004ABB AC7E           MUL      R7,R14
004ABD 7E1002         MOV      R1,#02H
004AC0 AC1F           MUL      R1,R15
004AC2 2D03           ADD      WR0,WR6
004AC4 7E1F0000    R  MOV      DR4,g_pAfeAram
004AC8 2D30           ADD      WR6,WR0
004ACA 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5231
004ACD 0BF0           INC      R15,#01H
004ACF BEF024         CMP      R15,#024H
004AD2 78DE           JNE      ?C1662
                                                ; SOURCE LINE # 5232
004AD4 0BE0           INC      R14,#01H
004AD6 BEE012         CMP      R14,#012H
004AD9 40D5           JC       ?C1663
                                                ; SOURCE LINE # 5357
004ADB DA79           POP      WR14
004ADD AA             ERET     
;       FUNCTION Test_CAL_MAX_TX? (END)

;       FUNCTION Test_CAL_MAX_RX? (BEGIN)
                                                ; SOURCE LINE # 5370
004ADE CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 5371
                                                ; SOURCE LINE # 5379
004AE0 7E140000    R  MOV      WR2,#WORD0 ?SC_0833
004AE4 7E040000    R  MOV      WR0,#WORD2 ?SC_0833
004AE8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5380
004AEC 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 5382
               ?C1673:
004AEE 6CFF           XRL      R15,R15
               ?C1672:
                                                ; SOURCE LINE # 5384
004AF0 9A000000    E  ECALL    rand??
004AF4 1A17           MOVS     WR2,R7
004AF6 7E7048         MOV      R7,#048H
004AF9 AC7E           MUL      R7,R14
004AFB 7E1002         MOV      R1,#02H
004AFE AC1F           MUL      R1,R15
004B00 2D03           ADD      WR0,WR6
004B02 7E1F0000    R  MOV      DR4,T_tempbuf1
004B06 2D30           ADD      WR6,WR0
004B08 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5385
004B0B 0BF0           INC      R15,#01H
004B0D BEF024         CMP      R15,#024H
004B10 78DE           JNE      ?C1672
                                                ; SOURCE LINE # 5386
004B12 0BE0           INC      R14,#01H
004B14 BEE012         CMP      R14,#012H
004B17 78D5           JNE      ?C1673
                                                ; SOURCE LINE # 5388
004B19 7E341000       MOV      WR6,#01000H
004B1D 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5389
004B21 7E341A20       MOV      WR6,#01A20H
004B25 7A370000    R  MOV      CalParam+10,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 387 

                                                ; SOURCE LINE # 5390
004B29 7412           MOV      A,#012H          ; A=R11
004B2B 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5391
004B2F 7424           MOV      A,#024H          ; A=R11
004B31 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5392
004B35 7E340020       MOV      WR6,#020H
004B39 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5393
004B3D E4             CLR      A                ; A=R11
004B3E 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5394
004B42 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 5395
004B46 7401           MOV      A,#01H           ; A=R11
004B48 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5397
004B4C 7E000000    R  MOV      DR0,#WORD0 CalParam
004B50 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 5399
004B54 6CEE           XRL      R14,R14
               ?C1677:
                                                ; SOURCE LINE # 5401
004B56 7E7002         MOV      R7,#02H
004B59 AC7E           MUL      R7,R14
004B5B 7E0F0000    R  MOV      DR0,T_tempbuf1
004B5F 7F20           MOV      DR8,DR0
004B61 2D53           ADD      WR10,WR6
004B63 0B2A40         MOV      WR8,@DR8
004B66 7E5002         MOV      R5,#02H
004B69 AC5E           MUL      R5,R14
004B6B 59420000    R  MOV      @WR4+ssMaxBuf,WR8
                                                ; SOURCE LINE # 5402
004B6F 6CFF           XRL      R15,R15
               ?C1682:
                                                ; SOURCE LINE # 5404
004B71 7448           MOV      A,#048H          ; A=R11
004B73 ACBF           MUL      R11,R15          ; A=R11
004B75 2D53           ADD      WR10,WR6
004B77 2D51           ADD      WR10,WR2
004B79 7D40           MOV      WR8,WR0
004B7B 0B2A50         MOV      WR10,@DR8
004B7E 49420000    R  MOV      WR8,@WR4+ssMaxBuf
004B82 BD54           CMP      WR10,WR8
004B84 1803        R  JSG      $ + 5H
004B86 020000      R  LJMP     ?C1679
                                                ; SOURCE LINE # 5406
004B89 59520000    R  MOV      @WR4+ssMaxBuf,WR10
                                                ; SOURCE LINE # 5407
               ?C1679:
004B8D 0BF0           INC      R15,#01H
004B8F BEF012         CMP      R15,#012H
004B92 78DD           JNE      ?C1682
                                                ; SOURCE LINE # 5409
004B94 0BE0           INC      R14,#01H
004B96 BEE024         CMP      R14,#024H
004B99 78BB           JNE      ?C1677
                                                ; SOURCE LINE # 5411
004B9B E4             CLR      A                ; A=R11
004B9C 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5412
004BA0 6CEE           XRL      R14,R14
               ?C1688:
                                                ; SOURCE LINE # 5414
004BA2 7E3002         MOV      R3,#02H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 388 

004BA5 AC3E           MUL      R3,R14
004BA7 49310000    R  MOV      WR6,@WR2+ssMaxBuf
004BAB 7E5002         MOV      R5,#02H
004BAE AC5E           MUL      R5,R14
004BB0 7E2F0000    R  MOV      DR8,T_tempOut
004BB4 2D52           ADD      WR10,WR4
004BB6 0B2A20         MOV      WR4,@DR8
004BB9 BD23           CMP      WR4,WR6
004BBB 7803        R  JNE      $ + 5H
004BBD 020000      R  LJMP     ?C1685
                                                ; SOURCE LINE # 5416
004BC0 7A270000    E  MOV      ?printf??BYTE-2,WR4
004BC4 7A370000    E  MOV      ?printf??BYTE-4,WR6
004BC8 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
004BCC 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
004BD0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5417
004BD4 7401           MOV      A,#01H           ; A=R11
004BD6 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5418
                                                ; SOURCE LINE # 5422
                                                ; SOURCE LINE # 5423
               ?C1685:
004BDA 0BE0           INC      R14,#01H
004BDC BEE024         CMP      R14,#024H
004BDF 78C1           JNE      ?C1688
                                                ; SOURCE LINE # 5424
004BE1 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004BE5 7003        R  JNZ      $ + 5H
004BE7 020000      R  LJMP     ?C1692
                                                ; SOURCE LINE # 5426
004BEA 7E140000    R  MOV      WR2,#WORD0 ?SC_0801
004BEE 7E040000    R  MOV      WR0,#WORD2 ?SC_0801
004BF2 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5427
004BF6 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004BFA 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004BFE 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5428
004C02 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5430
               ?C1702:
004C04 6CFF           XRL      R15,R15
               ?C1701:
                                                ; SOURCE LINE # 5433
004C06 7E1048         MOV      R1,#048H
004C09 AC1E           MUL      R1,R14
004C0B 7E3002         MOV      R3,#02H
004C0E AC3F           MUL      R3,R15
004C10 2D10           ADD      WR2,WR0
004C12 7E1F0000    R  MOV      DR4,T_tempbuf1
004C16 2D31           ADD      WR6,WR2
004C18 0B1A30         MOV      WR6,@DR4
004C1B 7A370000    E  MOV      ?printf??BYTE-2,WR6
004C1F 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004C23 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
004C27 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5434
004C2B 0BF0           INC      R15,#01H
004C2D BEF024         CMP      R15,#024H
004C30 78D4           JNE      ?C1701
                                                ; SOURCE LINE # 5435
004C32 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004C36 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004C3A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5436
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 389 

004C3E 0BE0           INC      R14,#01H
004C40 BEE012         CMP      R14,#012H
004C43 78BF           JNE      ?C1702
                                                ; SOURCE LINE # 5437
004C45 7E340064       MOV      WR6,#064H
004C49 9A000000    E  ECALL    DelayMs?
               ?C1703:
004C4D 80FE           SJMP     ?C1703
               ?C1692:
                                                ; SOURCE LINE # 5441
004C4F 7E140000    R  MOV      WR2,#WORD0 ?SC_0772
004C53 7E040000    R  MOV      WR0,#WORD2 ?SC_0772
004C57 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5442
                                                ; SOURCE LINE # 5444
004C5B 7E140000    R  MOV      WR2,#WORD0 ?SC_0750
004C5F 7E040000    R  MOV      WR0,#WORD2 ?SC_0750
004C63 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5445
004C67 7E341000       MOV      WR6,#01000H
004C6B 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5446
004C6F 7E341A20       MOV      WR6,#01A20H
004C73 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 5447
004C77 7412           MOV      A,#012H          ; A=R11
004C79 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5448
004C7D 7424           MOV      A,#024H          ; A=R11
004C7F 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5449
004C83 7E340020       MOV      WR6,#020H
004C87 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5450
004C8B E4             CLR      A                ; A=R11
004C8C 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5451
004C90 7401           MOV      A,#01H           ; A=R11
004C92 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 5452
004C96 7401           MOV      A,#01H           ; A=R11
004C98 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5454
004C9C 7E000000    R  MOV      DR0,#WORD0 CalParam
004CA0 9A000000    E  ECALL    DrvCal_MatrixMaxMin?
                                                ; SOURCE LINE # 5456
004CA4 6CEE           XRL      R14,R14
               ?C1711:
                                                ; SOURCE LINE # 5458
004CA6 7402           MOV      A,#02H           ; A=R11
004CA8 ACBE           MUL      R11,R14          ; A=R11
004CAA 7E1F0000    R  MOV      DR4,T_tempbuf1
004CAE 2D35           ADD      WR6,WR10
004CB0 0B1A30         MOV      WR6,@DR4
004CB3 9A000000    E  ECALL    abs??
004CB7 1A26           MOVS     WR4,R6
004CB9 1A24           MOVS     WR4,R4
004CBB 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 5459
004CBF 6CFF           XRL      R15,R15
               ?C1716:
                                                ; SOURCE LINE # 5461
004CC1 7E1048         MOV      R1,#048H
004CC4 AC1F           MUL      R1,R15
004CC6 7E3002         MOV      R3,#02H
004CC9 AC3E           MUL      R3,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 390 

004CCB 2D10           ADD      WR2,WR0
004CCD 7E1F0000    R  MOV      DR4,T_tempbuf1
004CD1 2D31           ADD      WR6,WR2
004CD3 0B1A30         MOV      WR6,@DR4
004CD6 9A000000    E  ECALL    abs??
004CDA 7D13           MOV      WR2,WR6
004CDC 1A02           MOVS     WR0,R2
004CDE 1A00           MOVS     WR0,R0
004CE0 7E1F0000    R  MOV      DR4,slTemp
004CE4 BF01           CMP      DR0,DR4
004CE6 1803        R  JSG      $ + 5H
004CE8 020000      R  LJMP     ?C1713
                                                ; SOURCE LINE # 5463
004CEB 7E1048         MOV      R1,#048H
004CEE AC1F           MUL      R1,R15
004CF0 7E3002         MOV      R3,#02H
004CF3 AC3E           MUL      R3,R14
004CF5 2D10           ADD      WR2,WR0
004CF7 7E1F0000    R  MOV      DR4,T_tempbuf1
004CFB 2D31           ADD      WR6,WR2
004CFD 0B1A30         MOV      WR6,@DR4
004D00 9A000000    E  ECALL    abs??
004D04 1A26           MOVS     WR4,R6
004D06 1A24           MOVS     WR4,R4
004D08 7A1F0000    R  MOV      slTemp,DR4
                                                ; SOURCE LINE # 5464
               ?C1713:
004D0C 0BF0           INC      R15,#01H
004D0E BEF012         CMP      R15,#012H
004D11 78AE           JNE      ?C1716
                                                ; SOURCE LINE # 5466
004D13 7E1F0000    R  MOV      DR4,slTemp
004D17 BE187FFF       CMP      DR4,#07FFFH
004D1B 1803        R  JSG      $ + 5H
004D1D 020000      R  LJMP     ?C1719
                                                ; SOURCE LINE # 5468
004D20 7E147FFF       MOV      WR2,#07FFFH
004D24 7402           MOV      A,#02H           ; A=R11
004D26 ACBE           MUL      R11,R14          ; A=R11
004D28 59150000    R  MOV      @WR10+ssMaxBuf,WR2
                                                ; SOURCE LINE # 5469
004D2C 020000      R  LJMP     ?C1708
               ?C1719:
                                                ; SOURCE LINE # 5472
004D2F 7402           MOV      A,#02H           ; A=R11
004D31 ACBE           MUL      R11,R14          ; A=R11
004D33 59350000    R  MOV      @WR10+ssMaxBuf,WR6
                                                ; SOURCE LINE # 5473
                                                ; SOURCE LINE # 5474
               ?C1708:
004D37 0BE0           INC      R14,#01H
004D39 BEE024         CMP      R14,#024H
004D3C 6803        R  JE       $ + 5H
004D3E 020000      R  LJMP     ?C1711
                                                ; SOURCE LINE # 5476
004D41 E4             CLR      A                ; A=R11
004D42 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5477
004D46 6CEE           XRL      R14,R14
               ?C1724:
                                                ; SOURCE LINE # 5479
004D48 7E3002         MOV      R3,#02H
004D4B AC3E           MUL      R3,R14
004D4D 49310000    R  MOV      WR6,@WR2+ssMaxBuf
004D51 7E5002         MOV      R5,#02H
004D54 AC5E           MUL      R5,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 391 

004D56 7E2F0000    R  MOV      DR8,T_tempOut
004D5A 2D52           ADD      WR10,WR4
004D5C 0B2A20         MOV      WR4,@DR8
004D5F BD23           CMP      WR4,WR6
004D61 7803        R  JNE      $ + 5H
004D63 020000      R  LJMP     ?C1721
                                                ; SOURCE LINE # 5481
004D66 7A270000    E  MOV      ?printf??BYTE-2,WR4
004D6A 7A370000    E  MOV      ?printf??BYTE-4,WR6
004D6E 7E140000    R  MOV      WR2,#WORD0 ?SC_0723
004D72 7E040000    R  MOV      WR0,#WORD2 ?SC_0723
004D76 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5482
004D7A 7401           MOV      A,#01H           ; A=R11
004D7C 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5483
                                                ; SOURCE LINE # 5487
                                                ; SOURCE LINE # 5488
               ?C1721:
004D80 0BE0           INC      R14,#01H
004D82 BEE024         CMP      R14,#024H
004D85 78C1           JNE      ?C1724
                                                ; SOURCE LINE # 5489
004D87 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004D8B 7003        R  JNZ      $ + 5H
004D8D 020000      R  LJMP     ?C1728
                                                ; SOURCE LINE # 5491
004D90 7E140000    R  MOV      WR2,#WORD0 ?SC_0691
004D94 7E040000    R  MOV      WR0,#WORD2 ?SC_0691
004D98 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5492
004D9C 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004DA0 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004DA4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5493
004DA8 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5495
               ?C1738:
004DAA 6CFF           XRL      R15,R15
               ?C1737:
                                                ; SOURCE LINE # 5498
004DAC 7E1048         MOV      R1,#048H
004DAF AC1E           MUL      R1,R14
004DB1 7E3002         MOV      R3,#02H
004DB4 AC3F           MUL      R3,R15
004DB6 2D10           ADD      WR2,WR0
004DB8 7E1F0000    R  MOV      DR4,T_tempbuf1
004DBC 2D31           ADD      WR6,WR2
004DBE 0B1A30         MOV      WR6,@DR4
004DC1 7A370000    E  MOV      ?printf??BYTE-2,WR6
004DC5 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004DC9 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
004DCD 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5499
004DD1 0BF0           INC      R15,#01H
004DD3 BEF024         CMP      R15,#024H
004DD6 78D4           JNE      ?C1737
                                                ; SOURCE LINE # 5500
004DD8 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004DDC 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004DE0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5501
004DE4 0BE0           INC      R14,#01H
004DE6 BEE012         CMP      R14,#012H
004DE9 78BF           JNE      ?C1738
                                                ; SOURCE LINE # 5502
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 392 

004DEB 7E340064       MOV      WR6,#064H
004DEF 9A000000    E  ECALL    DelayMs?
               ?C1739:
004DF3 80FE           SJMP     ?C1739
               ?C1728:
                                                ; SOURCE LINE # 5506
004DF5 7E140000    R  MOV      WR2,#WORD0 ?SC_0662
004DF9 7E040000    R  MOV      WR0,#WORD2 ?SC_0662
004DFD 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5507
                                                ; SOURCE LINE # 5641
004E01 DA79           POP      WR14
004E03 AA             ERET     
;       FUNCTION Test_CAL_MAX_RX? (END)

;       FUNCTION Test_CAL_Count? (BEGIN)
                                                ; SOURCE LINE # 5654
004E04 CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
                                                ; SOURCE LINE # 5655
                                                ; SOURCE LINE # 5660
004E06 6D66           XRL      WR12,WR12
004E08 7A670000    R  MOV      CalCountNum,WR12
                                                ; SOURCE LINE # 5661
;---- Variable 'SofCountNum' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 5664
004E0C 7E140000    R  MOV      WR2,#WORD0 ?SC_0645
004E10 7E040000    R  MOV      WR0,#WORD2 ?SC_0645
004E14 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5666
004E18 7E140000    R  MOV      WR2,#WORD0 ?SC_1197
004E1C 7E040000    R  MOV      WR0,#WORD2 ?SC_1197
004E20 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5667
004E24 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 5669
               ?C1753:
004E26 6CFF           XRL      R15,R15
               ?C1752:
                                                ; SOURCE LINE # 5671
004E28 9A000000    E  ECALL    rand??
004E2C 7D13           MOV      WR2,WR6
004E2E 7E7048         MOV      R7,#048H
004E31 AC7E           MUL      R7,R14
004E33 7E1002         MOV      R1,#02H
004E36 AC1F           MUL      R1,R15
004E38 2D03           ADD      WR0,WR6
004E3A 7E1F0000    R  MOV      DR4,T_tempbuf1
004E3E 2D30           ADD      WR6,WR0
004E40 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5672
004E43 0BF0           INC      R15,#01H
004E45 BEF024         CMP      R15,#024H
004E48 78DE           JNE      ?C1752
                                                ; SOURCE LINE # 5673
004E4A 0BE0           INC      R14,#01H
004E4C BEE012         CMP      R14,#012H
004E4F 78D5           JNE      ?C1753
                                                ; SOURCE LINE # 5675
004E51 7E341000       MOV      WR6,#01000H
004E55 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5676
004E59 7412           MOV      A,#012H          ; A=R11
004E5B 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5677
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 393 

004E5F 7424           MOV      A,#024H          ; A=R11
004E61 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5678
004E65 7E340040       MOV      WR6,#040H
004E69 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5680
004E6D 7E2403E8       MOV      WR4,#03E8H
004E71 7A270000    R  MOV      CountMax,WR4
                                                ; SOURCE LINE # 5681
004E75 7E34FC18       MOV      WR6,#0FC18H
004E79 7A370000    R  MOV      CountMin,WR6
                                                ; SOURCE LINE # 5683
004E7D 7E000000    R  MOV      DR0,#WORD0 CalParam
004E81 9A000000    E  ECALL    DrvCal_MatrixCount?
004E85 7A370000    R  MOV      CalCountNum,WR6
                                                ; SOURCE LINE # 5684
004E89 7A370000    E  MOV      ?printf??BYTE-2,WR6
004E8D 7E140000    R  MOV      WR2,#WORD0 ?SC_0628
004E91 7E040000    R  MOV      WR0,#WORD2 ?SC_0628
004E95 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5686
004E99 E4             CLR      A                ; A=R11
004E9A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5687
004E9E 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5689
               ?C1763:
004EA0 6CFF           XRL      R15,R15
               ?C1762:
                                                ; SOURCE LINE # 5691
004EA2 7E1048         MOV      R1,#048H
004EA5 AC1E           MUL      R1,R14
004EA7 7E3002         MOV      R3,#02H
004EAA AC3F           MUL      R3,R15
004EAC 2D10           ADD      WR2,WR0
004EAE 7E1F0000    R  MOV      DR4,T_tempbuf1
004EB2 2D31           ADD      WR6,WR2
004EB4 0B1A30         MOV      WR6,@DR4
004EB7 BE370000    R  CMP      WR6,CountMin
004EBB 5803        R  JSGE     $ + 5H
004EBD 020000      R  LJMP     ?C1759
004EC0 BE370000    R  CMP      WR6,CountMax
004EC4 0803        R  JSLE     $ + 5H
004EC6 020000      R  LJMP     ?C1759
                                                ; SOURCE LINE # 5693
004EC9 0B64           INC      WR12,#01H
                                                ; SOURCE LINE # 5694
               ?C1759:
004ECB 0BF0           INC      R15,#01H
004ECD BEF024         CMP      R15,#024H
004ED0 78D0           JNE      ?C1762
                                                ; SOURCE LINE # 5696
004ED2 0BE0           INC      R14,#01H
004ED4 BEE012         CMP      R14,#012H
004ED7 78C7           JNE      ?C1763
                                                ; SOURCE LINE # 5697
004ED9 7A670000    E  MOV      ?printf??BYTE-2,WR12
004EDD 7E140000    R  MOV      WR2,#WORD0 ?SC_0611
004EE1 7E040000    R  MOV      WR0,#WORD2 ?SC_0611
004EE5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5699
004EE9 BE670000    R  CMP      WR12,CalCountNum
004EED 7803        R  JNE      $ + 5H
004EEF 020000      R  LJMP     ?C1765
                                                ; SOURCE LINE # 5701
004EF2 7401           MOV      A,#01H           ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 394 

004EF4 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5702
               ?C1765:
                                                ; SOURCE LINE # 5704
004EF8 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
004EFC 7003        R  JNZ      $ + 5H
004EFE 020000      R  LJMP     ?C1766
                                                ; SOURCE LINE # 5706
004F01 7E140000    R  MOV      WR2,#WORD0 ?SC_0580
004F05 7E040000    R  MOV      WR0,#WORD2 ?SC_0580
004F09 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5707
004F0D 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004F11 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004F15 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5708
004F19 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5710
               ?C1776:
004F1B 6CFF           XRL      R15,R15
               ?C1775:
                                                ; SOURCE LINE # 5713
004F1D 7E1048         MOV      R1,#048H
004F20 AC1E           MUL      R1,R14
004F22 7E3002         MOV      R3,#02H
004F25 AC3F           MUL      R3,R15
004F27 2D10           ADD      WR2,WR0
004F29 7E1F0000    R  MOV      DR4,T_tempbuf1
004F2D 2D31           ADD      WR6,WR2
004F2F 0B1A30         MOV      WR6,@DR4
004F32 7A370000    E  MOV      ?printf??BYTE-2,WR6
004F36 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
004F3A 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
004F3E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5714
004F42 0BF0           INC      R15,#01H
004F44 BEF024         CMP      R15,#024H
004F47 78D4           JNE      ?C1775
                                                ; SOURCE LINE # 5715
004F49 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
004F4D 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
004F51 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5716
004F55 0BE0           INC      R14,#01H
004F57 BEE012         CMP      R14,#012H
004F5A 78BF           JNE      ?C1776
                                                ; SOURCE LINE # 5717
004F5C 7E340064       MOV      WR6,#064H
004F60 9A000000    E  ECALL    DelayMs?
               ?C1777:
004F64 80FE           SJMP     ?C1777
               ?C1766:
                                                ; SOURCE LINE # 5721
004F66 7E140000    R  MOV      WR2,#WORD0 ?SC_0552
004F6A 7E040000    R  MOV      WR0,#WORD2 ?SC_0552
004F6E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5722
                                                ; SOURCE LINE # 5784
004F72 DA3B           POP      DR12
004F74 AA             ERET     
;       FUNCTION Test_CAL_Count? (END)

;       FUNCTION Test_CAL_SubConst? (BEGIN)
                                                ; SOURCE LINE # 5797
004F75 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 395 

                                                ; SOURCE LINE # 5798
                                                ; SOURCE LINE # 5805
004F77 7E140000    R  MOV      WR2,#WORD0 ?SC_0546
004F7B 7E040000    R  MOV      WR0,#WORD2 ?SC_0546
004F7F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5807
004F83 7E140000    R  MOV      WR2,#WORD0 ?SC_0524
004F87 7E040000    R  MOV      WR0,#WORD2 ?SC_0524
004F8B 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5809
004F8F 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 5811
               ?C1791:
004F91 6CFF           XRL      R15,R15
               ?C1790:
                                                ; SOURCE LINE # 5813
004F93 9A000000    E  ECALL    rand??
004F97 0A17           MOVZ     WR2,R7
004F99 7E7048         MOV      R7,#048H
004F9C AC7E           MUL      R7,R14
004F9E 7E1002         MOV      R1,#02H
004FA1 AC1F           MUL      R1,R15
004FA3 2D03           ADD      WR0,WR6
004FA5 7E1F0000    R  MOV      DR4,T_tempbuf1
004FA9 2D30           ADD      WR6,WR0
004FAB 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5814
004FAE 0BF0           INC      R15,#01H
004FB0 BEF024         CMP      R15,#024H
004FB3 78DE           JNE      ?C1790
                                                ; SOURCE LINE # 5815
004FB5 0BE0           INC      R14,#01H
004FB7 BEE012         CMP      R14,#012H
004FBA 78D5           JNE      ?C1791
                                                ; SOURCE LINE # 5817
004FBC 6CEE           XRL      R14,R14
               ?C1795:
                                                ; SOURCE LINE # 5819
004FBE 9A000000    E  ECALL    rand??
004FC2 0A17           MOVZ     WR2,R7
004FC4 7402           MOV      A,#02H           ; A=R11
004FC6 ACBE           MUL      R11,R14          ; A=R11
004FC8 7E1F0000    R  MOV      DR4,T_tempbuf2
004FCC 2D35           ADD      WR6,WR10
004FCE 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5820
004FD1 0BE0           INC      R14,#01H
004FD3 BEE012         CMP      R14,#012H
004FD6 78E6           JNE      ?C1795
                                                ; SOURCE LINE # 5822
004FD8 7E341000       MOV      WR6,#01000H
004FDC 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5823
004FE0 7E341510       MOV      WR6,#01510H
004FE4 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 5824
004FE8 7E341A20       MOV      WR6,#01A20H
004FEC 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 5825
004FF0 7412           MOV      A,#012H          ; A=R11
004FF2 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5826
004FF6 7424           MOV      A,#024H          ; A=R11
004FF8 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5827
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 396 

004FFC 7E340030       MOV      WR6,#030H
005000 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5828
005004 E4             CLR      A                ; A=R11
005005 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5829
005009 7401           MOV      A,#01H           ; A=R11
00500B 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5830
00500F 7E000000    R  MOV      DR0,#WORD0 CalParam
005013 9A000000    E  ECALL    DrvCal_MatrixSubConst?
                                                ; SOURCE LINE # 5832
005017 E4             CLR      A                ; A=R11
005018 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5833
00501C 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5835
               ?C1806:
00501E 6CFF           XRL      R15,R15
               ?C1805:
                                                ; SOURCE LINE # 5837
005020 7E1048         MOV      R1,#048H
005023 AC1E           MUL      R1,R14
005025 7E3002         MOV      R3,#02H
005028 AC3F           MUL      R3,R15
00502A 2D10           ADD      WR2,WR0
00502C 7E1F0000    R  MOV      DR4,T_tempbuf1
005030 2D31           ADD      WR6,WR2
005032 0B1A30         MOV      WR6,@DR4
005035 1A26           MOVS     WR4,R6
005037 1A24           MOVS     WR4,R4
005039 7E1002         MOV      R1,#02H
00503C AC1E           MUL      R1,R14
00503E 7E2F0000    R  MOV      DR8,T_tempbuf2
005042 2D50           ADD      WR10,WR0
005044 0B2A50         MOV      WR10,@DR8
005047 1A4A           MOVS     WR8,R10
005049 1A48           MOVS     WR8,R8
00504B 9F12           SUB      DR4,DR8
00504D 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 5838
005051 BE187FFF       CMP      DR4,#07FFFH
005055 1803        R  JSG      $ + 5H
005057 020000      R  LJMP     ?C1807
                                                ; SOURCE LINE # 5840
00505A 7E187FFF       MOV      DR4,#07FFFH
                                                ; SOURCE LINE # 5841
00505E 020000      R  LJMP     ?C2076
               ?C1807:
                                                ; SOURCE LINE # 5842
005061 7E1F0000    R  MOV      DR4,temp
005065 BE1C8000       CMP      DR4,#0FFFF8000H
005069 4803        R  JSL      $ + 5H
00506B 020000      R  LJMP     ?C1808
                                                ; SOURCE LINE # 5844
00506E 7E1C8000       MOV      DR4,#0FFFF8000H
               ?C2076:
005072 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 5845
               ?C1808:
                                                ; SOURCE LINE # 5846
005076 7E1F0000    R  MOV      DR4,T_tempOut
00507A 2D31           ADD      WR6,WR2
00507C 0B1A10         MOV      WR2,@DR4
00507F 7E1F0000    R  MOV      DR4,temp
005083 7D03           MOV      WR0,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 397 

005085 BD10           CMP      WR2,WR0
005087 7803        R  JNE      $ + 5H
005089 020000      R  LJMP     ?C1802
                                                ; SOURCE LINE # 5848
00508C 7A170000    E  MOV      ?printf??BYTE-2,WR2
005090 7A370000    E  MOV      ?printf??BYTE-4,WR6
005094 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
005098 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
00509C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5849
0050A0 7401           MOV      A,#01H           ; A=R11
0050A2 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5850
                                                ; SOURCE LINE # 5854
                                                ; SOURCE LINE # 5855
               ?C1802:
0050A6 0BF0           INC      R15,#01H
0050A8 BEF024         CMP      R15,#024H
0050AB 6803        R  JE       $ + 5H
0050AD 020000      R  LJMP     ?C1805
                                                ; SOURCE LINE # 5856
0050B0 0BE0           INC      R14,#01H
0050B2 BEE012         CMP      R14,#012H
0050B5 6803        R  JE       $ + 5H
0050B7 020000      R  LJMP     ?C1806
                                                ; SOURCE LINE # 5858
0050BA 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0050BE 7003        R  JNZ      $ + 5H
0050C0 020000      R  LJMP     ?C1812
                                                ; SOURCE LINE # 5860
0050C3 7E140000    R  MOV      WR2,#WORD0 ?SC_0491
0050C7 7E040000    R  MOV      WR0,#WORD2 ?SC_0491
0050CB 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5862
0050CF 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0050D3 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0050D7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5863
0050DB 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5865
               ?C1822:
0050DD 6CFF           XRL      R15,R15
               ?C1821:
                                                ; SOURCE LINE # 5868
0050DF 7E1048         MOV      R1,#048H
0050E2 AC1E           MUL      R1,R14
0050E4 7E3002         MOV      R3,#02H
0050E7 AC3F           MUL      R3,R15
0050E9 2D10           ADD      WR2,WR0
0050EB 7E1F0000    R  MOV      DR4,T_tempbuf1
0050EF 2D31           ADD      WR6,WR2
0050F1 0B1A30         MOV      WR6,@DR4
0050F4 7A370000    E  MOV      ?printf??BYTE-2,WR6
0050F8 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0050FC 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
005100 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5869
005104 0BF0           INC      R15,#01H
005106 BEF024         CMP      R15,#024H
005109 78D4           JNE      ?C1821
                                                ; SOURCE LINE # 5870
00510B 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00510F 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005113 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5871
005117 0BE0           INC      R14,#01H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 398 

005119 BEE012         CMP      R14,#012H
00511C 78BF           JNE      ?C1822
                                                ; SOURCE LINE # 5872
00511E 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005122 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005126 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5873
00512A 6CEE           XRL      R14,R14
               ?C1826:
                                                ; SOURCE LINE # 5875
00512C 7402           MOV      A,#02H           ; A=R11
00512E ACBE           MUL      R11,R14          ; A=R11
005130 7E1F0000    R  MOV      DR4,T_tempbuf2
005134 2D35           ADD      WR6,WR10
005136 0B1A30         MOV      WR6,@DR4
005139 7A370000    E  MOV      ?printf??BYTE-2,WR6
00513D 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
005141 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
005145 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5876
005149 0BE0           INC      R14,#01H
00514B BEE012         CMP      R14,#012H
00514E 78DC           JNE      ?C1826
                                                ; SOURCE LINE # 5877
005150 7E340064       MOV      WR6,#064H
005154 9A000000    E  ECALL    DelayMs?
               ?C1828:
005158 80FE           SJMP     ?C1828
               ?C1812:
                                                ; SOURCE LINE # 5881
00515A 7E140000    R  MOV      WR2,#WORD0 ?SC_0461
00515E 7E040000    R  MOV      WR0,#WORD2 ?SC_0461
005162 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5882
                                                ; SOURCE LINE # 5884
005166 7E140000    R  MOV      WR2,#WORD0 ?SC_0438
00516A 7E040000    R  MOV      WR0,#WORD2 ?SC_0438
00516E 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5885
005172 6CEE           XRL      R14,R14
               ?C1836:
                                                ; SOURCE LINE # 5887
005174 9A000000    E  ECALL    rand??
005178 1A17           MOVS     WR2,R7
00517A 7402           MOV      A,#02H           ; A=R11
00517C ACBE           MUL      R11,R14          ; A=R11
00517E 7E1F0000    R  MOV      DR4,T_tempbuf2
005182 2D35           ADD      WR6,WR10
005184 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 5888
005187 0BE0           INC      R14,#01H
005189 BEE024         CMP      R14,#024H
00518C 78E6           JNE      ?C1836
                                                ; SOURCE LINE # 5889
00518E 7E341000       MOV      WR6,#01000H
005192 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 5890
005196 7E341510       MOV      WR6,#01510H
00519A 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 5891
00519E 7E341A20       MOV      WR6,#01A20H
0051A2 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 5892
0051A6 7412           MOV      A,#012H          ; A=R11
0051A8 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 5893
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 399 

0051AC 7424           MOV      A,#024H          ; A=R11
0051AE 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 5894
0051B2 7E340030       MOV      WR6,#030H
0051B6 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 5895
0051BA 7401           MOV      A,#01H           ; A=R11
0051BC 7AB30000    R  MOV      CalParam+5,R11   ; A=R11
                                                ; SOURCE LINE # 5896
0051C0 E4             CLR      A                ; A=R11
0051C1 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 5898
0051C5 7E000000    R  MOV      DR0,#WORD0 CalParam
0051C9 9A000000    E  ECALL    DrvCal_MatrixSubConst?
                                                ; SOURCE LINE # 5900
0051CD E4             CLR      A                ; A=R11
0051CE 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5901
0051D2 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5903
               ?C1847:
0051D4 6CFF           XRL      R15,R15
               ?C1846:
                                                ; SOURCE LINE # 5905
0051D6 7E3048         MOV      R3,#048H
0051D9 AC3E           MUL      R3,R14
0051DB 7E1002         MOV      R1,#02H
0051DE AC1F           MUL      R1,R15
0051E0 2D10           ADD      WR2,WR0
0051E2 7E1F0000    R  MOV      DR4,T_tempbuf1
0051E6 2D31           ADD      WR6,WR2
0051E8 0B1A30         MOV      WR6,@DR4
0051EB 1A26           MOVS     WR4,R6
0051ED 1A24           MOVS     WR4,R4
0051EF 7E2F0000    R  MOV      DR8,T_tempbuf2
0051F3 2D50           ADD      WR10,WR0
0051F5 0B2A50         MOV      WR10,@DR8
0051F8 1A4A           MOVS     WR8,R10
0051FA 1A48           MOVS     WR8,R8
0051FC 9F12           SUB      DR4,DR8
0051FE 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 5906
005202 BE187FFF       CMP      DR4,#07FFFH
005206 1803        R  JSG      $ + 5H
005208 020000      R  LJMP     ?C1848
                                                ; SOURCE LINE # 5908
00520B 7E187FFF       MOV      DR4,#07FFFH
                                                ; SOURCE LINE # 5909
00520F 020000      R  LJMP     ?C2077
               ?C1848:
                                                ; SOURCE LINE # 5910
005212 7E1F0000    R  MOV      DR4,temp
005216 BE1C8000       CMP      DR4,#0FFFF8000H
00521A 4803        R  JSL      $ + 5H
00521C 020000      R  LJMP     ?C1849
                                                ; SOURCE LINE # 5912
00521F 7E1C8000       MOV      DR4,#0FFFF8000H
               ?C2077:
005223 7A1F0000    R  MOV      temp,DR4
                                                ; SOURCE LINE # 5913
               ?C1849:
                                                ; SOURCE LINE # 5914
005227 7E1F0000    R  MOV      DR4,T_tempOut
00522B 2D31           ADD      WR6,WR2
00522D 0B1A20         MOV      WR4,@DR4
005230 7E0F0000    R  MOV      DR0,temp
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 400 

005234 7D31           MOV      WR6,WR2
005236 BD23           CMP      WR4,WR6
005238 7803        R  JNE      $ + 5H
00523A 020000      R  LJMP     ?C1843
                                                ; SOURCE LINE # 5916
00523D 7A270000    E  MOV      ?printf??BYTE-2,WR4
005241 7A370000    E  MOV      ?printf??BYTE-4,WR6
005245 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
005249 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
00524D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5917
005251 7401           MOV      A,#01H           ; A=R11
005253 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 5918
                                                ; SOURCE LINE # 5922
                                                ; SOURCE LINE # 5923
               ?C1843:
005257 0BF0           INC      R15,#01H
005259 BEF024         CMP      R15,#024H
00525C 6803        R  JE       $ + 5H
00525E 020000      R  LJMP     ?C1846
                                                ; SOURCE LINE # 5924
005261 0BE0           INC      R14,#01H
005263 BEE012         CMP      R14,#012H
005266 6803        R  JE       $ + 5H
005268 020000      R  LJMP     ?C1847
                                                ; SOURCE LINE # 5926
00526B 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00526F 7003        R  JNZ      $ + 5H
005271 020000      R  LJMP     ?C1853
                                                ; SOURCE LINE # 5928
005274 7E140000    R  MOV      WR2,#WORD0 ?SC_0405
005278 7E040000    R  MOV      WR0,#WORD2 ?SC_0405
00527C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5929
005280 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005284 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005288 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5930
00528C 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 5932
               ?C1863:
00528E 6CFF           XRL      R15,R15
               ?C1862:
                                                ; SOURCE LINE # 5935
005290 7E1048         MOV      R1,#048H
005293 AC1E           MUL      R1,R14
005295 7E3002         MOV      R3,#02H
005298 AC3F           MUL      R3,R15
00529A 2D10           ADD      WR2,WR0
00529C 7E1F0000    R  MOV      DR4,T_tempbuf1
0052A0 2D31           ADD      WR6,WR2
0052A2 0B1A30         MOV      WR6,@DR4
0052A5 7A370000    E  MOV      ?printf??BYTE-2,WR6
0052A9 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0052AD 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0052B1 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5936
0052B5 0BF0           INC      R15,#01H
0052B7 BEF024         CMP      R15,#024H
0052BA 78D4           JNE      ?C1862
                                                ; SOURCE LINE # 5937
0052BC 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0052C0 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0052C4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5938
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 401 

0052C8 0BE0           INC      R14,#01H
0052CA BEE012         CMP      R14,#012H
0052CD 78BF           JNE      ?C1863
                                                ; SOURCE LINE # 5939
0052CF 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0052D3 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0052D7 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5940
0052DB 6CEE           XRL      R14,R14
               ?C1867:
                                                ; SOURCE LINE # 5942
0052DD 7402           MOV      A,#02H           ; A=R11
0052DF ACBE           MUL      R11,R14          ; A=R11
0052E1 7E1F0000    R  MOV      DR4,T_tempbuf2
0052E5 2D35           ADD      WR6,WR10
0052E7 0B1A30         MOV      WR6,@DR4
0052EA 7A370000    E  MOV      ?printf??BYTE-2,WR6
0052EE 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0052F2 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0052F6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5943
0052FA 0BE0           INC      R14,#01H
0052FC BEE024         CMP      R14,#024H
0052FF 78DC           JNE      ?C1867
                                                ; SOURCE LINE # 5945
005301 7E340064       MOV      WR6,#064H
005305 9A000000    E  ECALL    DelayMs?
               ?C1869:
005309 80FE           SJMP     ?C1869
               ?C1853:
                                                ; SOURCE LINE # 5949
00530B 7E140000    R  MOV      WR2,#WORD0 ?SC_0375
00530F 7E040000    R  MOV      WR0,#WORD2 ?SC_0375
005313 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 5950
                                                ; SOURCE LINE # 6102
005317 DA79           POP      WR14
005319 AA             ERET     
;       FUNCTION Test_CAL_SubConst? (END)

;       FUNCTION Test_CAL_CMP? (BEGIN)
                                                ; SOURCE LINE # 6117
00531A CA3B           PUSH     DR12
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'temp' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 6118
                                                ; SOURCE LINE # 6124
00531C 7E140000    R  MOV      WR2,#WORD0 ?SC_0360
005320 7E040000    R  MOV      WR0,#WORD2 ?SC_0360
005324 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6125
005328 7E140000    R  MOV      WR2,#WORD0 ?SC_0350
00532C 7E040000    R  MOV      WR0,#WORD2 ?SC_0350
005330 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6126
005334 6CEE           XRL      R14,R14
;---- Variable 'i' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 6128
               ?C1883:
005336 6CFF           XRL      R15,R15
               ?C1882:
                                                ; SOURCE LINE # 6130
005338 9A000000    E  ECALL    rand??
00533C 7D13           MOV      WR2,WR6
00533E 0E14           SRA      WR2
005340 7E7048         MOV      R7,#048H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 402 

005343 AC7E           MUL      R7,R14
005345 7E1002         MOV      R1,#02H
005348 AC1F           MUL      R1,R15
00534A 2D03           ADD      WR0,WR6
00534C 7E1F0000    R  MOV      DR4,T_tempbuf1
005350 2D30           ADD      WR6,WR0
005352 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6131
005355 9A000000    E  ECALL    rand??
005359 7D13           MOV      WR2,WR6
00535B 0E14           SRA      WR2
00535D 7E7048         MOV      R7,#048H
005360 AC7E           MUL      R7,R14
005362 7E1002         MOV      R1,#02H
005365 AC1F           MUL      R1,R15
005367 2D03           ADD      WR0,WR6
005369 7E1F0000    R  MOV      DR4,T_tempbuf2
00536D 2D30           ADD      WR6,WR0
00536F 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6132
005372 0BF0           INC      R15,#01H
005374 BEF024         CMP      R15,#024H
005377 78BF           JNE      ?C1882
                                                ; SOURCE LINE # 6133
005379 0BE0           INC      R14,#01H
00537B BEE012         CMP      R14,#012H
00537E 78B6           JNE      ?C1883
                                                ; SOURCE LINE # 6135
005380 7E341000       MOV      WR6,#01000H
005384 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 6136
005388 7E341510       MOV      WR6,#01510H
00538C 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 6137
005390 7E341A20       MOV      WR6,#01A20H
005394 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 6138
005398 7412           MOV      A,#012H          ; A=R11
00539A 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 6139
00539E 7424           MOV      A,#024H          ; A=R11
0053A0 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 6140
0053A4 7E340070       MOV      WR6,#070H
0053A8 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 6141
0053AC 7401           MOV      A,#01H           ; A=R11
0053AE 7AB30000    R  MOV      CalParam+4,R11   ; A=R11
                                                ; SOURCE LINE # 6142
0053B2 E4             CLR      A                ; A=R11
0053B3 7AB30000    R  MOV      CalParam+3,R11   ; A=R11
                                                ; SOURCE LINE # 6144
0053B7 7E000000    R  MOV      DR0,#WORD0 CalParam
0053BB 9A000000    E  ECALL    DrvCal_MatrixCMP?
                                                ; SOURCE LINE # 6146
0053BF E4             CLR      A                ; A=R11
0053C0 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 6147
0053C4 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 6149
               ?C1893:
0053C6 6CFF           XRL      R15,R15
               ?C1892:
                                                ; SOURCE LINE # 6164
0053C8 7E1048         MOV      R1,#048H
0053CB AC1E           MUL      R1,R14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 403 

0053CD 7E3002         MOV      R3,#02H
0053D0 AC3F           MUL      R3,R15
0053D2 2D10           ADD      WR2,WR0
0053D4 7E1F0000    R  MOV      DR4,T_tempbuf2
0053D8 2D31           ADD      WR6,WR2
0053DA 0B1A00         MOV      WR0,@DR4
0053DD 7E1F0000    R  MOV      DR4,T_tempbuf1
0053E1 2D31           ADD      WR6,WR2
0053E3 0B1A30         MOV      WR6,@DR4
0053E6 BD30           CMP      WR6,WR0
0053E8 4803        R  JSL      $ + 5H
0053EA 020000      R  LJMP     ?C1894
                                                ; SOURCE LINE # 6166
0053ED 7D63           MOV      WR12,WR6
                                                ; SOURCE LINE # 6167
0053EF 020000      R  LJMP     ?C1895
               ?C1894:
                                                ; SOURCE LINE # 6170
0053F2 7D60           MOV      WR12,WR0
                                                ; SOURCE LINE # 6171
               ?C1895:
                                                ; SOURCE LINE # 6175
0053F4 7E1F0000    R  MOV      DR4,T_tempOut
0053F8 2D31           ADD      WR6,WR2
0053FA 0B1A30         MOV      WR6,@DR4
0053FD BD36           CMP      WR6,WR12
0053FF 7803        R  JNE      $ + 5H
005401 020000      R  LJMP     ?C1889
                                                ; SOURCE LINE # 6177
005404 7A370000    E  MOV      ?printf??BYTE-2,WR6
005408 7A670000    E  MOV      ?printf??BYTE-4,WR12
00540C 7E140000    R  MOV      WR2,#WORD0 ?SC_1374
005410 7E040000    R  MOV      WR0,#WORD2 ?SC_1374
005414 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6178
005418 7401           MOV      A,#01H           ; A=R11
00541A 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 6179
                                                ; SOURCE LINE # 6183
                                                ; SOURCE LINE # 6184
               ?C1889:
00541E 0BF0           INC      R15,#01H
005420 BEF024         CMP      R15,#024H
005423 78A3           JNE      ?C1892
                                                ; SOURCE LINE # 6185
005425 0BE0           INC      R14,#01H
005427 BEE012         CMP      R14,#012H
00542A 789A           JNE      ?C1893
                                                ; SOURCE LINE # 6187
00542C 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
005430 7003        R  JNZ      $ + 5H
005432 020000      R  LJMP     ?C1898
                                                ; SOURCE LINE # 6189
005435 7E140000    R  MOV      WR2,#WORD0 ?SC_0325
005439 7E040000    R  MOV      WR0,#WORD2 ?SC_0325
00543D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6192
005441 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005445 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005449 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6193
00544D 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 6195
               ?C1908:
00544F 6CFF           XRL      R15,R15
               ?C1907:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 404 

                                                ; SOURCE LINE # 6198
005451 7E1048         MOV      R1,#048H
005454 AC1E           MUL      R1,R14
005456 7E3002         MOV      R3,#02H
005459 AC3F           MUL      R3,R15
00545B 2D10           ADD      WR2,WR0
00545D 7E1F0000    R  MOV      DR4,T_tempbuf1
005461 2D31           ADD      WR6,WR2
005463 0B1A30         MOV      WR6,@DR4
005466 7A370000    E  MOV      ?printf??BYTE-2,WR6
00546A 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
00546E 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
005472 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6199
005476 0BF0           INC      R15,#01H
005478 BEF024         CMP      R15,#024H
00547B 78D4           JNE      ?C1907
                                                ; SOURCE LINE # 6200
00547D 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005481 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005485 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6201
005489 0BE0           INC      R14,#01H
00548B BEE012         CMP      R14,#012H
00548E 78BF           JNE      ?C1908
                                                ; SOURCE LINE # 6202
005490 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005494 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005498 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6203
00549C 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 6205
               ?C1918:
00549E 6CFF           XRL      R15,R15
               ?C1917:
                                                ; SOURCE LINE # 6208
0054A0 7E1048         MOV      R1,#048H
0054A3 AC1E           MUL      R1,R14
0054A5 7E3002         MOV      R3,#02H
0054A8 AC3F           MUL      R3,R15
0054AA 2D10           ADD      WR2,WR0
0054AC 7E1F0000    R  MOV      DR4,T_tempbuf2
0054B0 2D31           ADD      WR6,WR2
0054B2 0B1A30         MOV      WR6,@DR4
0054B5 7A370000    E  MOV      ?printf??BYTE-2,WR6
0054B9 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
0054BD 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
0054C1 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6209
0054C5 0BF0           INC      R15,#01H
0054C7 BEF024         CMP      R15,#024H
0054CA 78D4           JNE      ?C1917
                                                ; SOURCE LINE # 6210
0054CC 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
0054D0 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
0054D4 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6211
0054D8 0BE0           INC      R14,#01H
0054DA BEE012         CMP      R14,#012H
0054DD 78BF           JNE      ?C1918
                                                ; SOURCE LINE # 6212
0054DF 7E340064       MOV      WR6,#064H
0054E3 9A000000    E  ECALL    DelayMs?
               ?C1919:
0054E7 80FE           SJMP     ?C1919
               ?C1898:
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 405 

                                                ; SOURCE LINE # 6216
0054E9 7E140000    R  MOV      WR2,#WORD0 ?SC_0303
0054ED 7E040000    R  MOV      WR0,#WORD2 ?SC_0303
0054F1 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6217
                                                ; SOURCE LINE # 6219
0054F5 7E140000    R  MOV      WR2,#WORD0 ?SC_0293
0054F9 7E040000    R  MOV      WR0,#WORD2 ?SC_0293
0054FD 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6221
005501 6CEE           XRL      R14,R14
                                                ; SOURCE LINE # 6223
               ?C1933:
005503 6CFF           XRL      R15,R15
               ?C1932:
                                                ; SOURCE LINE # 6225
005505 9A000000    E  ECALL    rand??
005509 7D13           MOV      WR2,WR6
00550B 1E14           SRL      WR2
00550D 7E7048         MOV      R7,#048H
005510 AC7E           MUL      R7,R14
005512 7E1002         MOV      R1,#02H
005515 AC1F           MUL      R1,R15
005517 2D03           ADD      WR0,WR6
005519 7E1F0000    R  MOV      DR4,g_pAfeAram
00551D 2D30           ADD      WR6,WR0
00551F 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6226
005522 9A000000    E  ECALL    rand??
005526 7D13           MOV      WR2,WR6
005528 1E14           SRL      WR2
00552A 7E7048         MOV      R7,#048H
00552D AC7E           MUL      R7,R14
00552F 7E1002         MOV      R1,#02H
005532 AC1F           MUL      R1,R15
005534 2D03           ADD      WR0,WR6
005536 7E1F0000    R  MOV      DR4,T_tempbuf2
00553A 2D30           ADD      WR6,WR0
00553C 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6227
00553F 0BF0           INC      R15,#01H
005541 BEF024         CMP      R15,#024H
005544 78BF           JNE      ?C1932
                                                ; SOURCE LINE # 6228
005546 0BE0           INC      R14,#01H
005548 BEE012         CMP      R14,#012H
00554B 40B6           JC       ?C1933
                                                ; SOURCE LINE # 6313
00554D DA3B           POP      DR12
00554F AA             ERET     
;       FUNCTION Test_CAL_CMP? (END)

;       FUNCTION Test_CAL_MaxtixMul_PtoP3? (BEGIN)
                                                ; SOURCE LINE # 6329
005550 CAD8           PUSH     R13
005552 CA79           PUSH     WR14
;---- Variable 'j' assigned to Register 'R15' ----
;---- Variable 'ucShift' assigned to Register 'R14' ----
                                                ; SOURCE LINE # 6330
                                                ; SOURCE LINE # 6338
005554 7E140000    R  MOV      WR2,#WORD0 ?SC_0273
005558 7E040000    R  MOV      WR0,#WORD2 ?SC_0273
00555C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6339
005560 7E140000    R  MOV      WR2,#WORD0 ?SC_3600
005564 7E040000    R  MOV      WR0,#WORD2 ?SC_3600
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 406 

005568 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6341
00556C 6CDD           XRL      R13,R13
;---- Variable 'i' assigned to Register 'R13' ----
               ?C1937:
                                                ; SOURCE LINE # 6343
00556E 9A000000    E  ECALL    rand??
005572 0E70           SRA      R7
005574 1A17           MOVS     WR2,R7
005576 7402           MOV      A,#02H           ; A=R11
005578 ACBD           MUL      R11,R13          ; A=R11
00557A 7E1F0000    R  MOV      DR4,T_tempbuf1
00557E 2D35           ADD      WR6,WR10
005580 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6344
005583 0BD0           INC      R13,#01H
005585 BED012         CMP      R13,#012H
005588 78E4           JNE      ?C1937
                                                ; SOURCE LINE # 6346
00558A 6CFF           XRL      R15,R15
               ?C1942:
                                                ; SOURCE LINE # 6348
00558C 9A000000    E  ECALL    rand??
005590 0E70           SRA      R7
005592 1A17           MOVS     WR2,R7
005594 7402           MOV      A,#02H           ; A=R11
005596 ACBF           MUL      R11,R15          ; A=R11
005598 7E1F0000    R  MOV      DR4,T_tempbuf2
00559C 2D35           ADD      WR6,WR10
00559E 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6349
0055A1 0BF0           INC      R15,#01H
0055A3 BEF024         CMP      R15,#024H
0055A6 78E4           JNE      ?C1942
                                                ; SOURCE LINE # 6351
0055A8 6CDD           XRL      R13,R13
               ?C1947:
                                                ; SOURCE LINE # 6353
0055AA 9A000000    E  ECALL    rand??
0055AE 0E70           SRA      R7
0055B0 1A17           MOVS     WR2,R7
0055B2 7402           MOV      A,#02H           ; A=R11
0055B4 ACBD           MUL      R11,R13          ; A=R11
0055B6 7E1F0000    R  MOV      DR4,g_pAfeAram
0055BA 2D35           ADD      WR6,WR10
0055BC 1B1A10         MOV      @DR4,WR2
                                                ; SOURCE LINE # 6354
0055BF 0BD0           INC      R13,#01H
0055C1 BED012         CMP      R13,#012H
0055C4 78E4           JNE      ?C1947
                                                ; SOURCE LINE # 6356
0055C6 7EB30000    R  MOV      R11,counter      ; A=R11
0055CA B41002      R  CJNE     A,#010H,$ + 5H   ; A=R11
0055CD 8003        R  SJMP     $ + 5H
0055CF 020000      R  LJMP     ?C1949
                                                ; SOURCE LINE # 6357
0055D2 E4             CLR      A                ; A=R11
0055D3 7AB30000    R  MOV      counter,R11      ; A=R11
               ?C1949:
                                                ; SOURCE LINE # 6359
0055D7 7EB30000    R  MOV      R11,counter      ; A=R11
0055DB 7CEB           MOV      R14,R11          ; A=R11
                                                ; SOURCE LINE # 6360
0055DD 04             INC      A                ; A=R11
0055DE 7AB30000    R  MOV      counter,R11      ; A=R11
                                                ; SOURCE LINE # 6366
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 407 

0055E2 0A3E           MOVZ     WR6,R14
0055E4 7A370000    E  MOV      ?printf??BYTE-2,WR6
0055E8 7E140000    R  MOV      WR2,#WORD0 ?SC_0263
0055EC 7E040000    R  MOV      WR0,#WORD2 ?SC_0263
0055F0 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6367
0055F4 7E341000       MOV      WR6,#01000H
0055F8 7A370000    R  MOV      CalParam+6,WR6
                                                ; SOURCE LINE # 6368
0055FC 7E341510       MOV      WR6,#01510H
005600 7A370000    R  MOV      CalParam+8,WR6
                                                ; SOURCE LINE # 6369
005604 7E341A20       MOV      WR6,#01A20H
005608 7A370000    R  MOV      CalParam+10,WR6
                                                ; SOURCE LINE # 6370
00560C 7412           MOV      A,#012H          ; A=R11
00560E 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 6371
005612 7424           MOV      A,#024H          ; A=R11
005614 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 6372
005618 7E340080       MOV      WR6,#080H
00561C 7A370000    R  MOV      CalParam+12,WR6
                                                ; SOURCE LINE # 6373
005620 7AE30000    R  MOV      CalParam+2,R14
                                                ; SOURCE LINE # 6375
005624 7E000000    R  MOV      DR0,#WORD0 CalParam
005628 9A000000    E  ECALL    DrvCal_MatrixMul3?
                                                ; SOURCE LINE # 6377
00562C E4             CLR      A                ; A=R11
00562D 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 6379
005631 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 6381
               ?C1959:
005633 6CFF           XRL      R15,R15
               ?C1958:
                                                ; SOURCE LINE # 6383
005635 7E9002         MOV      R9,#02H
005638 AC9F           MUL      R9,R15
00563A 7E1F0000    R  MOV      DR4,T_tempbuf2
00563E 2D34           ADD      WR6,WR8
005640 0B1A10         MOV      WR2,@DR4
005643 1A02           MOVS     WR0,R2
005645 1A00           MOVS     WR0,R0
005647 7402           MOV      A,#02H           ; A=R11
005649 ACBD           MUL      R11,R13          ; A=R11
00564B 7E1F0000    R  MOV      DR4,T_tempbuf1
00564F 2D35           ADD      WR6,WR10
005651 0B1A30         MOV      WR6,@DR4
005654 1A26           MOVS     WR4,R6
005656 1A24           MOVS     WR4,R4
005658 9A000000    E  ECALL    ?C?LMUL?
00565C 7A1F0000    R  MOV      tmp,DR4
                                                ; SOURCE LINE # 6384
005660 7CBE           MOV      R11,R14          ; A=R11
005662 7003        R  JNZ      $ + 5H
005664 020000      R  LJMP     ?C2047
               ?C2046:
005667 1E34           SRL      WR6
005669 0E24           SRA      WR4
00566B 5003           JNC      ?C2048
00566D 4E6080         ORL      R6,#080H
               ?C2048:
005670 14             DEC      A                ; A=R11
005671 78F4           JNE      ?C2046
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 408 

               ?C2047:
005673 7A1F0000    R  MOV      tmp,DR4
                                                ; SOURCE LINE # 6385
005677 BE187FFF       CMP      DR4,#07FFFH
00567B 1803        R  JSG      $ + 5H
00567D 020000      R  LJMP     ?C1960
                                                ; SOURCE LINE # 6387
005680 7E087FFF       MOV      DR0,#07FFFH
005684 7A0F0000    R  MOV      tmp,DR0
                                                ; SOURCE LINE # 6388
005688 020000      R  LJMP     ?C1961
               ?C1960:
                                                ; SOURCE LINE # 6389
00568B BE1C8000       CMP      DR4,#0FFFF8000H
00568F 4803        R  JSL      $ + 5H
005691 020000      R  LJMP     ?C1961
                                                ; SOURCE LINE # 6391
005694 7E1C8000       MOV      DR4,#0FFFF8000H
005698 7A1F0000    R  MOV      tmp,DR4
                                                ; SOURCE LINE # 6392
               ?C1961:
                                                ; SOURCE LINE # 6393
00569C 7E3048         MOV      R3,#048H
00569F AC3D           MUL      R3,R13
0056A1 2D14           ADD      WR2,WR8
0056A3 7E1F0000    R  MOV      DR4,T_tempOut
0056A7 2D31           ADD      WR6,WR2
0056A9 0B1A20         MOV      WR4,@DR4
0056AC 7E0F0000    R  MOV      DR0,tmp
0056B0 7D31           MOV      WR6,WR2
0056B2 BD23           CMP      WR4,WR6
0056B4 7803        R  JNE      $ + 5H
0056B6 020000      R  LJMP     ?C1955
                                                ; SOURCE LINE # 6395
0056B9 7A270000    E  MOV      ?printf??BYTE-2,WR4
0056BD 7A370000    E  MOV      ?printf??BYTE-4,WR6
0056C1 0A3D           MOVZ     WR6,R13
0056C3 7A370000    E  MOV      ?printf??BYTE-6,WR6
0056C7 0A3F           MOVZ     WR6,R15
0056C9 7A370000    E  MOV      ?printf??BYTE-8,WR6
0056CD 7E140000    R  MOV      WR2,#WORD0 ?SC_3571
0056D1 7E040000    R  MOV      WR0,#WORD2 ?SC_3571
0056D5 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6396
0056D9 7401           MOV      A,#01H           ; A=R11
0056DB 7AB30000    R  MOV      g_ucCalFlag,R11  ; A=R11
                                                ; SOURCE LINE # 6397
                                                ; SOURCE LINE # 6401
                                                ; SOURCE LINE # 6402
               ?C1955:
0056DF 0BF0           INC      R15,#01H
0056E1 BEF024         CMP      R15,#024H
0056E4 6803        R  JE       $ + 5H
0056E6 020000      R  LJMP     ?C1958
                                                ; SOURCE LINE # 6403
0056E9 0BD0           INC      R13,#01H
0056EB BED012         CMP      R13,#012H
0056EE 6803        R  JE       $ + 5H
0056F0 020000      R  LJMP     ?C1959
                                                ; SOURCE LINE # 6405
0056F3 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
0056F7 7003        R  JNZ      $ + 5H
0056F9 020000      R  LJMP     ?C1965
                                                ; SOURCE LINE # 6407
0056FC 0A3E           MOVZ     WR6,R14
0056FE 7A370000    E  MOV      ?printf??BYTE-2,WR6
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 409 

005702 7E140000    R  MOV      WR2,#WORD0 ?SC_0232
005706 7E040000    R  MOV      WR0,#WORD2 ?SC_0232
00570A 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6408
00570E 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005712 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005716 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6409
00571A 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 6411
               ?C1975:
00571C 6CFF           XRL      R15,R15
                                                ; SOURCE LINE # 6414
00571E 7E1048         MOV      R1,#048H
005721 AC1D           MUL      R1,R13
005723 7E3002         MOV      R3,#02H
005726 AC3F           MUL      R3,R15
005728 2D10           ADD      WR2,WR0
00572A 7E1F0000    R  MOV      DR4,T_tempbuf1
00572E 2D31           ADD      WR6,WR2
005730 0B1A30         MOV      WR6,@DR4
005733 7A370000    E  MOV      ?printf??BYTE-2,WR6
005737 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
00573B 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
00573F 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6415
005743 0BF0           INC      R15,#01H
                                                ; SOURCE LINE # 6416
005745 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005749 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00574D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6417
005751 0BD0           INC      R13,#01H
005753 BED012         CMP      R13,#012H
005756 78C4           JNE      ?C1975
                                                ; SOURCE LINE # 6418
005758 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
00575C 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
005760 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6419
005764 6CDD           XRL      R13,R13
                                                ; SOURCE LINE # 6421
005766 6CFF           XRL      R15,R15
               ?C1984:
                                                ; SOURCE LINE # 6424
005768 7E1048         MOV      R1,#048H
00576B AC1D           MUL      R1,R13
00576D 7E3002         MOV      R3,#02H
005770 AC3F           MUL      R3,R15
005772 2D10           ADD      WR2,WR0
005774 7E1F0000    R  MOV      DR4,T_tempbuf2
005778 2D31           ADD      WR6,WR2
00577A 0B1A30         MOV      WR6,@DR4
00577D 7A370000    E  MOV      ?printf??BYTE-2,WR6
005781 7E140000    R  MOV      WR2,#WORD0 ?SC_2059
005785 7E040000    R  MOV      WR0,#WORD2 ?SC_2059
005789 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6425
00578D 0BF0           INC      R15,#01H
00578F BEF024         CMP      R15,#024H
005792 78D4           JNE      ?C1984
                                                ; SOURCE LINE # 6426
005794 7E140000    R  MOV      WR2,#WORD0 ?SC_4117
005798 7E040000    R  MOV      WR0,#WORD2 ?SC_4117
00579C 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6427
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 410 

                                                ; SOURCE LINE # 6428
0057A0 7E340064       MOV      WR6,#064H
0057A4 9A000000    E  ECALL    DelayMs?
               ?C1986:
0057A8 80FE           SJMP     ?C1986
               ?C1965:
                                                ; SOURCE LINE # 6432
0057AA 0A3E           MOVZ     WR6,R14
0057AC 7A370000    E  MOV      ?printf??BYTE-2,WR6
0057B0 7E140000    R  MOV      WR2,#WORD0 ?SC_0203
0057B4 7E040000    R  MOV      WR0,#WORD2 ?SC_0203
0057B8 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6433
                                                ; SOURCE LINE # 6510
0057BC 7E730000    R  MOV      R7,g_ucCalFlag
0057C0 2E70FF         ADD      R7,#0FFH
                                                ; SOURCE LINE # 6511
0057C3 DA79           POP      WR14
0057C5 DAD8           POP      R13
0057C7 AA             ERET     
;       FUNCTION Test_CAL_MaxtixMul_PtoP3? (END)

;       FUNCTION DrvClearIICState? (BEGIN)
                                                ; SOURCE LINE # 6525
                                                ; SOURCE LINE # 6528
0057C8 759100         MOV      I2CBUF,#00H
                                                ; SOURCE LINE # 6529
0057CB C290           CLR      I2CRI
                                                ; SOURCE LINE # 6530
0057CD C291           CLR      I2CTI
                                                ; SOURCE LINE # 6533
0057CF A9C093         CLR      I2CSTP
                                                ; SOURCE LINE # 6534
0057D2 C2C0           CLR      I2C_STOP_IF
                                                ; SOURCE LINE # 6537
0057D4 AA             ERET     
;       FUNCTION DrvClearIICState? (END)

;       FUNCTION CalAmovAramToMem? (BEGIN)
                                                ; SOURCE LINE # 6548
                                                ; SOURCE LINE # 6549
                                                ; SOURCE LINE # 6564
0057D5 7E34A000       MOV      WR6,#0A000H
0057D9 7A370000    R  MOV      CalParam+2,WR6
                                                ; SOURCE LINE # 6565
0057DD 7E346000       MOV      WR6,#06000H
0057E1 7A370000    R  MOV      CalParam+4,WR6
                                                ; SOURCE LINE # 6566
0057E5 7412           MOV      A,#012H          ; A=R11
0057E7 7AB30000    R  MOV      CalParam,R11     ; A=R11
                                                ; SOURCE LINE # 6567
0057EB 7424           MOV      A,#024H          ; A=R11
0057ED 7AB30000    R  MOV      CalParam+1,R11   ; A=R11
                                                ; SOURCE LINE # 6570
0057F1 7E000000    R  MOV      DR0,#WORD0 CalParam
0057F5 9A000000    E  ECALL    DrvCal_MatrixAMov?
                                                ; SOURCE LINE # 6574
0057F9 6CAA           XRL      R10,R10
;---- Variable 'i' assigned to Register 'R10' ----
                                                ; SOURCE LINE # 6576
               ?C2001:
0057FB 6C77           XRL      R7,R7
;---- Variable 'j' assigned to Register 'R7' ----
               ?C2000:
                                                ; SOURCE LINE # 6578
0057FD 7E5048         MOV      R5,#048H
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 411 

005800 AC5A           MUL      R5,R10
005802 7E9002         MOV      R9,#02H
005805 AC97           MUL      R9,R7
005807 2D42           ADD      WR8,WR4
005809 7E0F0000    R  MOV      DR0,g_pAfeAram
00580D 2D14           ADD      WR2,WR8
00580F 0B0A40         MOV      WR8,@DR0
005812 7E3002         MOV      R3,#02H
005815 AC37           MUL      R3,R7
005817 2D21           ADD      WR4,WR2
005819 49220000    R  MOV      WR4,@WR4+g_ucRawdata
00581D BD24           CMP      WR4,WR8
00581F 6802           JE       ?C1997
                                                ; SOURCE LINE # 6580
005821 D200        R  SETB     flag
                                                ; SOURCE LINE # 6582
                                                ; SOURCE LINE # 6586
                                                ; SOURCE LINE # 6587
               ?C1997:
005823 0B70           INC      R7,#01H
005825 A5BF24D4       CJNE     R7,#024H,?C2000
                                                ; SOURCE LINE # 6588
005829 0BA0           INC      R10,#01H
00582B BEA012         CMP      R10,#012H
00582E 78CB           JNE      ?C2001
                                                ; SOURCE LINE # 6590
005830 30000A         JNB      flag,?C2004
                                                ; SOURCE LINE # 6592
005833 7E140000    R  MOV      WR2,#WORD0 ?SC_0175
005837 7E040000    R  MOV      WR0,#WORD2 ?SC_0175
                                                ; SOURCE LINE # 6593
00583B 8008           SJMP     ?C2078
               ?C2004:
                                                ; SOURCE LINE # 6596
00583D 7E140000    R  MOV      WR2,#WORD0 ?SC_0150
005841 7E040000    R  MOV      WR0,#WORD2 ?SC_0150
               ?C2078:
005845 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6597
                                                ; SOURCE LINE # 6599
005849 7EB30000    R  MOV      R11,g_ucCalFlag  ; A=R11
00584D 600C           JZ       ?C2006
                                                ; SOURCE LINE # 6601
00584F 7E140000    R  MOV      WR2,#WORD0 ?SC_0139
005853 7E040000    R  MOV      WR0,#WORD2 ?SC_0139
005857 8A000000    E  EJMP     printf?
                                                ; SOURCE LINE # 6602
               ?C2006:
00585B AA             ERET     
;       FUNCTION CalAmovAramToMem? (END)

;       FUNCTION RtcInit? (BEGIN)
                                                ; SOURCE LINE # 6614
                                                ; SOURCE LINE # 6617
00585C A9D0CE         SETB     CLK_WP
                                                ; SOURCE LINE # 6618
00585F A9D5C9         SETB     EN_32K
                                                ; SOURCE LINE # 6619
005862 A9D0CA         SETB     RTC_32K_EN
                                                ; SOURCE LINE # 6622
005865 A9D0CB         SETB     RTCCKEN
                                                ; SOURCE LINE # 6625
005868 A9D09E         SETB     RTC_WP
                                                ; SOURCE LINE # 6626
00586B A9D49E         SETB     RTC_CLR
                                                ; SOURCE LINE # 6630
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 412 

00586E 759D00         MOV      RTCIVH,#00H
                                                ; SOURCE LINE # 6631
005871 759C20         MOV      RTCIVL,#020H
                                                ; SOURCE LINE # 6634
005874 A9C19E         CLR      RTC_AUTO_MODE
                                                ; SOURCE LINE # 6635
005877 75B601         MOV      RTCCON1,#01H
                                                ; SOURCE LINE # 6637
00587A A9D29E         SETB     RTC_INT_EN_CPU
                                                ; SOURCE LINE # 6639
00587D C28A           CLR      IT1
                                                ; SOURCE LINE # 6640
00587F D2AA           SETB     EX1
                                                ; SOURCE LINE # 6642
005881 AA             ERET     
;       FUNCTION RtcInit? (END)

;       FUNCTION LcdIntInit? (BEGIN)
                                                ; SOURCE LINE # 6651
                                                ; SOURCE LINE # 6653
005882 7E340002       MOV      WR6,#02H
005886 9A000000    E  ECALL    DrvAsmInterEnable1?
                                                ; SOURCE LINE # 6654
00588A D2AC           SETB     ES
                                                ; SOURCE LINE # 6655
00588C AA             ERET     
;       FUNCTION LcdIntInit? (END)

;       FUNCTION I2cInit? (BEGIN)
                                                ; SOURCE LINE # 6665
                                                ; SOURCE LINE # 6667
00588D D2CE           SETB     I2CCKEN
                                                ; SOURCE LINE # 6669
00588F 759100         MOV      I2CBUF,#00H
                                                ; SOURCE LINE # 6670
005892 C290           CLR      I2CRI
                                                ; SOURCE LINE # 6671
005894 C291           CLR      I2CTI
                                                ; SOURCE LINE # 6674
005896 759270         MOV      I2CADDR,#070H
                                                ; SOURCE LINE # 6676
005899 D2E8           SETB     I2C_STOP_EI
                                                ; SOURCE LINE # 6677
00589B C2C0           CLR      I2C_STOP_IF
                                                ; SOURCE LINE # 6679
00589D D2AD           SETB     ET2
                                                ; SOURCE LINE # 6680
00589F D2E8           SETB     I2C_STOP_EI
                                                ; SOURCE LINE # 6681
0058A1 AA             ERET     
;       FUNCTION I2cInit? (END)

;       FUNCTION DrvIntPriority? (BEGIN)
                                                ; SOURCE LINE # 6695
                                                ; SOURCE LINE # 6698
0058A2 75B700         MOV      IPH0,#00H
                                                ; SOURCE LINE # 6699
0058A5 75B800         MOV      IPL0,#00H
                                                ; SOURCE LINE # 6700
0058A8 75F700         MOV      AIPH,#00H
                                                ; SOURCE LINE # 6701
0058AB 75F800         MOV      AIPL,#00H
                                                ; SOURCE LINE # 6704
0058AE A9D0B7         SETB     IPHX0
                                                ; SOURCE LINE # 6705
0058B1 D2B8           SETB     IPLX0
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 413 

                                                ; SOURCE LINE # 6708
0058B3 A9D5B7         SETB     I2C_IPH
                                                ; SOURCE LINE # 6709
0058B6 D2BD           SETB     I2C_IPL
                                                ; SOURCE LINE # 6711
0058B8 A9D3F7         SETB     SPI0_IPH
                                                ; SOURCE LINE # 6712
0058BB D2FB           SETB     SPI0_IPL
                                                ; SOURCE LINE # 6714
0058BD A9D0F7         SETB     I2C_STOP_IPH
                                                ; SOURCE LINE # 6715
0058C0 D2F8           SETB     I2C_STOP_IPL
                                                ; SOURCE LINE # 6717
0058C2 A9D4B7         SETB     LCD_IPH
                                                ; SOURCE LINE # 6718
0058C5 D2BC           SETB     LCD_IPL
                                                ; SOURCE LINE # 6721
0058C7 A9D1F7         SETB     ASM_IPH
                                                ; SOURCE LINE # 6722
0058CA C2F9           CLR      ASM_IPL
                                                ; SOURCE LINE # 6725
0058CC A9D2B7         SETB     IPHX1
                                                ; SOURCE LINE # 6726
0058CF C2BA           CLR      IPLX1
                                                ; SOURCE LINE # 6729
0058D1 A9C1B7         CLR      IPHT0
                                                ; SOURCE LINE # 6730
0058D4 C2B9           CLR      IPLT0
                                                ; SOURCE LINE # 6733
0058D6 A9C3B7         CLR      IPHT1
                                                ; SOURCE LINE # 6734
0058D9 C2BB           CLR      IPLT1
                                                ; SOURCE LINE # 6738
0058DB A9D6B7         SETB     Uart_IPH
                                                ; SOURCE LINE # 6739
0058DE D2BE           SETB     Uart_IPL
                                                ; SOURCE LINE # 6741
0058E0 AA             ERET     
;       FUNCTION DrvIntPriority? (END)

;       FUNCTION WDT_Init? (BEGIN)
                                                ; SOURCE LINE # 6764
                                                ; SOURCE LINE # 6766
0058E1 A9D6CC         SETB     WDT_500K_EN
                                                ; SOURCE LINE # 6767
0058E4 A9D199         SETB     WDTSTARTEN
                                                ; SOURCE LINE # 6779
0058E7 759A61         MOV      WDTREL,#061H
                                                ; SOURCE LINE # 6783
0058EA 439A80         ORL      WDTREL,#080H
                                                ; SOURCE LINE # 6788
0058ED D29C           SETB     WDT
                                                ; SOURCE LINE # 6789
0058EF A9D6DF         SETB     SWDT
                                                ; SOURCE LINE # 6791
0058F2 C2C4           CLR      WDT_INT_IF
                                                ; SOURCE LINE # 6792
0058F4 D2EC           SETB     WDT_INT_EI
                                                ; SOURCE LINE # 6794
0058F6 AA             ERET     
;       FUNCTION WDT_Init? (END)

;       FUNCTION WDT_Feed? (BEGIN)
                                                ; SOURCE LINE # 6803
                                                ; SOURCE LINE # 6805
0058F7 D29C           SETB     WDT
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 414 

                                                ; SOURCE LINE # 6806
0058F9 A9D6DF         SETB     SWDT
                                                ; SOURCE LINE # 6807
0058FC AA             ERET     
;       FUNCTION WDT_Feed? (END)

;       FUNCTION Test_CAL? (BEGIN)
                                                ; SOURCE LINE # 6817
                                                ; SOURCE LINE # 6818
                                                ; SOURCE LINE # 6819
0058FD D200        R  SETB     flag
                                                ; SOURCE LINE # 6821
                                                ; SOURCE LINE # 6822
                                                ; SOURCE LINE # 6825
0058FF A9D2CA         SETB     AFEACKEN
                                                ; SOURCE LINE # 6826
005902 A9D7EA         SETB     ARAM_SEL
                                                ; SOURCE LINE # 6828
005905 7E181000       MOV      DR4,#01000H
005909 7A1F0000    R  MOV      T_tempbuf1,DR4
                                                ; SOURCE LINE # 6829
00590D 7E181510       MOV      DR4,#01510H
005911 7A1F0000    R  MOV      T_tempbuf2,DR4
                                                ; SOURCE LINE # 6830
005915 7E181A20       MOV      DR4,#01A20H
005919 7A1F0000    R  MOV      T_tempOut,DR4
                                                ; SOURCE LINE # 6832
00591D 7E181F30       MOV      DR4,#01F30H
005921 7A1F0000    R  MOV      T_tempbuf3,DR4
                                                ; SOURCE LINE # 6834
005925 7E140000    R  MOV      WR2,#WORD0 ?SC_0120
005929 7E040000    R  MOV      WR0,#WORD2 ?SC_0120
00592D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6835
005931 7E1F0000    R  MOV      DR4,T_tempbuf1
005935 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
005939 7E140000    R  MOV      WR2,#WORD0 ?SC_0105
00593D 7E040000    R  MOV      WR0,#WORD2 ?SC_0105
005941 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6836
005945 7E1F0000    R  MOV      DR4,T_tempbuf2
005949 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
00594D 7E140000    R  MOV      WR2,#WORD0 ?SC_0090
005951 7E040000    R  MOV      WR0,#WORD2 ?SC_0090
005955 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6837
005959 7E1F0000    R  MOV      DR4,T_tempOut
00595D 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
005961 7E140000    R  MOV      WR2,#WORD0 ?SC_0075
005965 7E040000    R  MOV      WR0,#WORD2 ?SC_0075
005969 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6838
00596D 7E341F30       MOV      WR6,#01F30H
005971 7A370000    E  MOV      ?printf??BYTE-2,WR6
005975 7E140000    R  MOV      WR2,#WORD0 ?SC_0060
005979 7E040000    R  MOV      WR0,#WORD2 ?SC_0060
00597D 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6839
005981 7E1F0000    R  MOV      DR4,g_pAfeAram
005985 7A1F0000    E  MOV      ?printf??BYTE-4,DR4
005989 7E140000    R  MOV      WR2,#WORD0 ?SC_0047
00598D 7E040000    R  MOV      WR0,#WORD2 ?SC_0047
005991 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 6841
005995 9A000000    R  ECALL    DrvClearIICState?
                                                ; SOURCE LINE # 6843
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 415 

005999 9A000000    R  ECALL    DrvIntPriority?
                                                ; SOURCE LINE # 6844
00599D 75A800         MOV      IEN0,#00H
                                                ; SOURCE LINE # 6845
0059A0 75E800         MOV      AIE,#00H
                                                ; SOURCE LINE # 6848
                                                ; SOURCE LINE # 6850
0059A3 9A000000    R  ECALL    RtcInit?
                                                ; SOURCE LINE # 6860
                                                ; SOURCE LINE # 6861
                                                ; SOURCE LINE # 6862
                                                ; SOURCE LINE # 6863
                                                ; SOURCE LINE # 6864
0059A7 9A000000    R  ECALL    I2cInit?
                                                ; SOURCE LINE # 6868
                                                ; SOURCE LINE # 6870
0059AB 9A000000    E  ECALL    Afe_120Hz_Run?
                                                ; SOURCE LINE # 6914
0059AF 7412           MOV      A,#012H          ; A=R11
0059B1 7E7024         MOV      R7,#024H
0059B4 7E240324       MOV      WR4,#0324H
0059B8 7E140120       MOV      WR2,#0120H
0059BC 9A000000    E  ECALL    DrvCal_Init?
                                                ; SOURCE LINE # 6916
0059C0 D2AF           SETB     EA
                                                ; SOURCE LINE # 6919
0059C2 758000         MOV      P0BUF,#00H
                                                ; SOURCE LINE # 6920
0059C5 759400         MOV      P1BUF,#00H
                                                ; SOURCE LINE # 6922
               ?C2009:
                                                ; SOURCE LINE # 6925
0059C8 A9B494         CPL      P1_4
                                                ; SOURCE LINE # 6927
0059CB 9A000000    R  ECALL    Test_CAL_MaxtixAdd?
                                                ; SOURCE LINE # 6929
0059CF 9A000000    R  ECALL    Test_CAL_MaxtixSub?
                                                ; SOURCE LINE # 6931
0059D3 9A000000    R  ECALL    Test_CAL_MaxtixAmp?
                                                ; SOURCE LINE # 6933
0059D7 9A000000    R  ECALL    Test_CAL_MaxtixDiv?
                                                ; SOURCE LINE # 6935
0059DB 9A000000    R  ECALL    Test_CAL_MaxtixMov?
                                                ; SOURCE LINE # 6937
0059DF 9A000000    R  ECALL    Test_CAL_MaxtixMov2?
                                                ; SOURCE LINE # 6939
0059E3 9A000000    R  ECALL    Test_CAL_MaxtixCom_1?
                                                ; SOURCE LINE # 6941
0059E7 9A000000    R  ECALL    Test_CAL_MaxtixCom_2?
                                                ; SOURCE LINE # 6943
0059EB 9A000000    R  ECALL    Test_CAL_MaxtixMul_PtoP1?
                                                ; SOURCE LINE # 6945
0059EF 9A000000    R  ECALL    Test_CAL_MaxtixMul_PtoP2?
                                                ; SOURCE LINE # 6947
0059F3 9A000000    R  ECALL    Test_CAL_LDS?
                                                ; SOURCE LINE # 6949
0059F7 9A000000    R  ECALL    Test_CAL_MDS?
                                                ; SOURCE LINE # 6951
0059FB 9A000000    R  ECALL    Test_CAL_CHK?
                                                ; SOURCE LINE # 6953
0059FF 9A000000    R  ECALL    Test_CAL_ID?
                                                ; SOURCE LINE # 6955
005A03 9A000000    R  ECALL    Test_CAL_MAC_1?
                                                ; SOURCE LINE # 6957
005A07 9A000000    R  ECALL    Test_CAL_MAC_2?
                                                ; SOURCE LINE # 6959
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 416 

005A0B 9A000000    R  ECALL    Test_CAL_CRC?
                                                ; SOURCE LINE # 6961
005A0F 9A000000    R  ECALL    Test_CAL_XORSUM?
                                                ; SOURCE LINE # 6963
005A13 9A000000    R  ECALL    Test_CAL_SearchPeak?
                                                ; SOURCE LINE # 6968
005A17 9A000000    R  ECALL    Test_CAL_AVG_TX?
                                                ; SOURCE LINE # 6970
005A1B 9A000000    R  ECALL    Test_CAL_AVG_RX?
                                                ; SOURCE LINE # 6972
005A1F 9A000000    R  ECALL    Test_CAL_AVG2_TX?
                                                ; SOURCE LINE # 6974
005A23 9A000000    R  ECALL    Test_CAL_AVG2_RX?
                                                ; SOURCE LINE # 6977
005A27 9A000000    R  ECALL    Test_CAL_MIN_TX?
                                                ; SOURCE LINE # 6979
005A2B 9A000000    R  ECALL    Test_CAL_MIN_RX?
                                                ; SOURCE LINE # 6981
005A2F 9A000000    R  ECALL    Test_CAL_MAX_TX?
                                                ; SOURCE LINE # 6983
005A33 9A000000    R  ECALL    Test_CAL_MAX_RX?
                                                ; SOURCE LINE # 6985
005A37 9A000000    R  ECALL    Test_CAL_Count?
                                                ; SOURCE LINE # 6987
005A3B 9A000000    R  ECALL    Test_CAL_SubConst?
                                                ; SOURCE LINE # 6989
005A3F 9A000000    R  ECALL    Test_CAL_CMP?
                                                ; SOURCE LINE # 6991
005A43 9A000000    R  ECALL    Test_CAL_MaxtixMul_PtoP3?
                                                ; SOURCE LINE # 6993
005A47 020000      R  LJMP     ?C2009
               ?C2011:
005A4A 80FE           SJMP     ?C2011
;       FUNCTION Test_CAL? (END)

;       FUNCTION Exint0_IRQHandler? (BEGIN)
                                                ; SOURCE LINE # 7011
                                                ; SOURCE LINE # 7022
005A4C 32             RETI     
;       FUNCTION Exint0_IRQHandler? (END)

;       FUNCTION Exint1_IRQHandler? (BEGIN)
                                                ; SOURCE LINE # 7032
005A4D CA7B           PUSH     DR28
005A4F CA6B           PUSH     DR24
005A51 CA5B           PUSH     DR20
005A53 CA4B           PUSH     DR16
005A55 CA2B           PUSH     DR8
005A57 CA1B           PUSH     DR4
005A59 CA0B           PUSH     DR0
005A5B C0D0           PUSH     PSW
005A5D C083           PUSH     DPH              ; WORD0(DR56)=DPTR
005A5F C082           PUSH     DPL              ; WORD0(DR56)=DPTR
                                                ; SOURCE LINE # 7035
005A61 D286           SETB     P0_6
                                                ; SOURCE LINE # 7036
               ?C2015:
005A63 A9359EFC       JNB      RTC_START_STA,?C2015
                                                ; SOURCE LINE # 7044
005A67 A9D09E         SETB     RTC_WP
                                                ; SOURCE LINE # 7045
005A6A A9D49E         SETB     RTC_CLR
                                                ; SOURCE LINE # 7051
005A6D 759D00         MOV      RTCIVH,#00H
                                                ; SOURCE LINE # 7052
005A70 9A000000    E  ECALL    rand??
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 417 

005A74 7CB7           MOV      R11,R7           ; A=R11
005A76 F59C           MOV      RTCIVL,A         ; A=R11
                                                ; SOURCE LINE # 7053
005A78 C286           CLR      P0_6
                                                ; SOURCE LINE # 7058
005A7A D082           POP      DPL              ; WORD0(DR56)=DPTR
005A7C D083           POP      DPH              ; WORD0(DR56)=DPTR
005A7E D0D0           POP      PSW
005A80 DA0B           POP      DR0
005A82 DA1B           POP      DR4
005A84 DA2B           POP      DR8
005A86 DA4B           POP      DR16
005A88 DA5B           POP      DR20
005A8A DA6B           POP      DR24
005A8C DA7B           POP      DR28
005A8E 32             RETI     
;       FUNCTION Exint1_IRQHandler? (END)

;       FUNCTION ISR_LcdRun_IRQHandler? (BEGIN)
                                                ; SOURCE LINE # 7067
005A8F CA7B           PUSH     DR28
005A91 CA6B           PUSH     DR24
005A93 CA5B           PUSH     DR20
005A95 CA4B           PUSH     DR16
005A97 CA3B           PUSH     DR12
005A99 CA2B           PUSH     DR8
005A9B CA1B           PUSH     DR4
005A9D CA0B           PUSH     DR0
005A9F C0D0           PUSH     PSW
005AA1 C083           PUSH     DPH              ; WORD0(DR56)=DPTR
005AA3 C082           PUSH     DPL              ; WORD0(DR56)=DPTR
                                                ; SOURCE LINE # 7068
                                                ; SOURCE LINE # 7072
                                                ; SOURCE LINE # 7073
005AA5 7E3F0000    E  MOV      DR12,pAsmRegs
005AA9 6923000A       MOV      WR4,@DR12+0xA
;---- Variable 'usAsmIntEn1' assigned to Register 'WR4' ----
                                                ; SOURCE LINE # 7075
                                                ; SOURCE LINE # 7076
005AAD 69330002       MOV      WR6,@DR12+0x2
;---- Variable 'usAsmIntFlag1' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 7079
005AB1 5E240004       ANL      WR4,#04H
005AB5 6855           JE       ?C2019
                                                ; SOURCE LINE # 7081
005AB7 5E340004       ANL      WR6,#04H
005ABB 684F           JE       ?C2019
                                                ; SOURCE LINE # 7084
005ABD 6933001E       MOV      WR6,@DR12+0x1E
005AC1 7D23           MOV      WR4,WR6
005AC3 5E248000       ANL      WR4,#08000H
005AC7 7F03           MOV      DR0,DR12
005AC9 6815           JE       ?C2021
                                                ; SOURCE LINE # 7086
005ACB 2E14001E       ADD      WR2,#01EH
005ACF 5E347FFF       ANL      WR6,#07FFFH
005AD3 1B0A30         MOV      @DR0,WR6
                                                ; SOURCE LINE # 7087
005AD6 7E140000    R  MOV      WR2,#WORD0 ?SC_0015
005ADA 7E040000    R  MOV      WR0,#WORD2 ?SC_0015
                                                ; SOURCE LINE # 7088
005ADE 8016           SJMP     ?C2079
               ?C2021:
                                                ; SOURCE LINE # 7091
005AE0 2E14001E       ADD      WR2,#01EH
005AE4 0B0A30         MOV      WR6,@DR0
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 418 

005AE7 4E348000       ORL      WR6,#08000H
005AEB 1B0A30         MOV      @DR0,WR6
                                                ; SOURCE LINE # 7092
005AEE 7E140000    R  MOV      WR2,#WORD0 ?SC_0000
005AF2 7E040000    R  MOV      WR0,#WORD2 ?SC_0000
               ?C2079:
005AF6 9A000000    E  ECALL    printf?
                                                ; SOURCE LINE # 7093
                                                ; SOURCE LINE # 7095
005AFA 7E0F0000    E  MOV      DR0,pAsmRegs
005AFE 2E140006       ADD      WR2,#06H
005B02 0B0A30         MOV      WR6,@DR0
005B05 4E340004       ORL      WR6,#04H
005B09 1B0A30         MOV      @DR0,WR6
                                                ; SOURCE LINE # 7097
               ?C2019:
                                                ; SOURCE LINE # 7100
005B0C D082           POP      DPL              ; WORD0(DR56)=DPTR
005B0E D083           POP      DPH              ; WORD0(DR56)=DPTR
005B10 D0D0           POP      PSW
005B12 DA0B           POP      DR0
005B14 DA1B           POP      DR4
005B16 DA2B           POP      DR8
005B18 DA3B           POP      DR12
005B1A DA4B           POP      DR16
005B1C DA5B           POP      DR20
005B1E DA6B           POP      DR24
005B20 DA7B           POP      DR28
005B22 32             RETI     
;       FUNCTION ISR_LcdRun_IRQHandler? (END)

;       FUNCTION I2C_ISR? (BEGIN)
                                                ; SOURCE LINE # 7109
005B23 CAB8           PUSH     R11              ; A=R11
005B25 CA1B           PUSH     DR4
                                                ; SOURCE LINE # 7110
                                                ; SOURCE LINE # 7111
                                                ; SOURCE LINE # 7112
005B27 D282           SETB     P0_2
                                                ; SOURCE LINE # 7113
005B29 D284           SETB     P0_4
                                                ; SOURCE LINE # 7116
005B2B 30900E         JNB      I2CRI,?C2023
                                                ; SOURCE LINE # 7129
005B2E C290           CLR      I2CRI
                                                ; SOURCE LINE # 7130
005B30 E591           MOV      A,I2CBUF         ; A=R11
                                                ; SOURCE LINE # 7131
005B32 7E1F0000    R  MOV      DR4,g_I2cCnt
005B36 0B1C           INC      DR4,#01H
005B38 7A1F0000    R  MOV      g_I2cCnt,DR4
                                                ; SOURCE LINE # 7133
               ?C2023:
                                                ; SOURCE LINE # 7134
005B3C 309102         JNB      I2CTI,?C2024
                                                ; SOURCE LINE # 7147
005B3F C291           CLR      I2CTI
                                                ; SOURCE LINE # 7149
               ?C2024:
                                                ; SOURCE LINE # 7150
005B41 C284           CLR      P0_4
                                                ; SOURCE LINE # 7151
005B43 C282           CLR      P0_2
                                                ; SOURCE LINE # 7152
005B45 DA1B           POP      DR4
005B47 DAB8           POP      R11              ; A=R11
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 419 

005B49 32             RETI     
;       FUNCTION I2C_ISR? (END)

;       FUNCTION I2C_STOP_ISR? (BEGIN)
                                                ; SOURCE LINE # 7161
                                                ; SOURCE LINE # 7163
005B4A D283           SETB     P0_3
                                                ; SOURCE LINE # 7164
005B4C D285           SETB     P0_5
                                                ; SOURCE LINE # 7177
005B4E A9C093         CLR      I2CSTP
                                                ; SOURCE LINE # 7178
005B51 C283           CLR      P0_3
                                                ; SOURCE LINE # 7179
005B53 C285           CLR      P0_5
                                                ; SOURCE LINE # 7180
005B55 32             RETI     
;       FUNCTION I2C_STOP_ISR? (END)

;       FUNCTION DrvScanCtrl_IRQHandler? (BEGIN)
                                                ; SOURCE LINE # 7189
005B56 CA7B           PUSH     DR28
005B58 CA6B           PUSH     DR24
005B5A CA5B           PUSH     DR20
005B5C CA4B           PUSH     DR16
005B5E CA3B           PUSH     DR12
005B60 CA2B           PUSH     DR8
005B62 CA1B           PUSH     DR4
005B64 CA0B           PUSH     DR0
005B66 C0D0           PUSH     PSW
005B68 C083           PUSH     DPH              ; WORD0(DR56)=DPTR
005B6A C082           PUSH     DPL              ; WORD0(DR56)=DPTR
                                                ; SOURCE LINE # 7190
                                                ; SOURCE LINE # 7194
005B6C A9D194         SETB     P1_1
                                                ; SOURCE LINE # 7195
005B6F 7E0F0000    E  MOV      DR0,pAsmRegs
005B73 69600008       MOV      WR12,@DR0+0x8
;---- Variable 'usAsmIntEn0' assigned to Register 'WR12' ----
                                                ; SOURCE LINE # 7196
                                                ; SOURCE LINE # 7198
005B77 0B0A70         MOV      WR14,@DR0
;---- Variable 'usAsmIntFlag0' assigned to Register 'WR14' ----
                                                ; SOURCE LINE # 7199
                                                ; SOURCE LINE # 7203
005B7A 7D36           MOV      WR6,WR12
005B7C 5E340100       ANL      WR6,#0100H
005B80 6828           JE       ?C2025
                                                ; SOURCE LINE # 7205
005B82 7D37           MOV      WR6,WR14
005B84 5E340100       ANL      WR6,#0100H
005B88 6820           JE       ?C2025
                                                ; SOURCE LINE # 7207
005B8A A9D394         SETB     P1_3
                                                ; SOURCE LINE # 7215
005B8D 0B16           INC      WR2,#04H
005B8F 0B0A30         MOV      WR6,@DR0
005B92 4E340100       ORL      WR6,#0100H
005B96 1B0A30         MOV      @DR0,WR6
                                                ; SOURCE LINE # 7218
005B99 A9D7EA         SETB     ARAM_SEL
                                                ; SOURCE LINE # 7220
005B9C 9A000000    R  ECALL    CalAmovAramToMem?
                                                ; SOURCE LINE # 7221
005BA0 9A000000    E  ECALL    DrvAsmAramAvail?
                                                ; SOURCE LINE # 7222
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 420 

005BA4 A9C7EA         CLR      ARAM_SEL
                                                ; SOURCE LINE # 7225
005BA7 A9C394         CLR      P1_3
                                                ; SOURCE LINE # 7226
               ?C2025:
                                                ; SOURCE LINE # 7232
005BAA 7D36           MOV      WR6,WR12
005BAC 5E340020       ANL      WR6,#020H
005BB0 6822           JE       ?C2027
                                                ; SOURCE LINE # 7234
005BB2 7D37           MOV      WR6,WR14
005BB4 5E340020       ANL      WR6,#020H
005BB8 681A           JE       ?C2027
                                                ; SOURCE LINE # 7236
005BBA A9D294         SETB     P1_2
                                                ; SOURCE LINE # 7244
005BBD 7E0F0000    E  MOV      DR0,pAsmRegs
005BC1 0B16           INC      WR2,#04H
005BC3 0B0A30         MOV      WR6,@DR0
005BC6 4E340020       ORL      WR6,#020H
005BCA 1B0A30         MOV      @DR0,WR6
                                                ; SOURCE LINE # 7246
005BCD 9A000000    E  ECALL    DrvAsmScanStart?
                                                ; SOURCE LINE # 7247
005BD1 A9C294         CLR      P1_2
                                                ; SOURCE LINE # 7248
               ?C2027:
                                                ; SOURCE LINE # 7250
005BD4 A9C194         CLR      P1_1
                                                ; SOURCE LINE # 7252
005BD7 D082           POP      DPL              ; WORD0(DR56)=DPTR
005BD9 D083           POP      DPH              ; WORD0(DR56)=DPTR
005BDB D0D0           POP      PSW
005BDD DA0B           POP      DR0
005BDF DA1B           POP      DR4
005BE1 DA2B           POP      DR8
005BE3 DA3B           POP      DR12
005BE5 DA4B           POP      DR16
005BE7 DA5B           POP      DR20
005BE9 DA6B           POP      DR24
005BEB DA7B           POP      DR28
005BED 32             RETI     
;       FUNCTION DrvScanCtrl_IRQHandler? (END)

;       FUNCTION SPI0_IRQHandler? (BEGIN)
                                                ; SOURCE LINE # 7263
005BEE CAB8           PUSH     R11              ; A=R11
                                                ; SOURCE LINE # 7264
                                                ; SOURCE LINE # 7265
                                                ; SOURCE LINE # 7269
005BF0 A931A20C       JNB      SPI0RI,?C2029
                                                ; SOURCE LINE # 7282
005BF4 A9D1A7         SETB     SPI0RI_CLR
                                                ; SOURCE LINE # 7283
005BF7 E5A4           MOV      A,SPI0BUF        ; A=R11
                                                ; SOURCE LINE # 7285
005BF9 A934A203       JNB      SPI0_START,?C2029
                                                ; SOURCE LINE # 7287
005BFD A9D4A7         SETB     SPI0_START_CLR
                                                ; SOURCE LINE # 7288
               ?C2029:
                                                ; SOURCE LINE # 7299
005C00 75A7FF         MOV      SPI0CON5,#0FFH
                                                ; SOURCE LINE # 7300
005C03 DAB8           POP      R11              ; A=R11
005C05 32             RETI     
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 421 

;       FUNCTION SPI0_IRQHandler? (END)

C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 422 

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

Addr_PRESCAN_TIME. . . . . . . . . . .  enum           int    000034H  2
Addr_DISCHARGE_TIME. . . . . . . . . .  enum           int    000035H  2
BIT_LCD_BUSY_RISE_WAKE_EN0 . . . . . .  enum           int    00000EH  2
FP32 . . . . . . . . . . . . . . . . .  type           float  000000H  4
FW_CFG_IOVOLTAGE_NE_OFFSET . . . . . .  enum           int    000003H  2
BIT_LCD_3D_MODE_RISE_CLR1. . . . . . .  enum           int    000003H  2
BIT_LCD_BUSY_RISE_FLAG0. . . . . . . .  enum           int    00000EH  2
UINT8. . . . . . . . . . . . . . . . .  type           uchar  000000H  1
ENUM_BIT_ASM_INT_CLR1. . . . . . . . .  type           int    000000H  2
LCD_OTP_XBUS_CLK_NE_ADDR . . . . . . .  enum           int    009871H  2
ST_LcdWrapRegisters. . . . . . . . . .  type           struct 000000H  10
  rdata_lo_byte. . . . . . . . . . . .  member         ushort 000000H  2
  rdata_ho_byte. . . . . . . . . . . .  member         ushort 000002H  2
  lcd_regfile_ctrl . . . . . . . . . .  member         ushort 000004H  2
  xbus_cmd . . . . . . . . . . . . . .  member         ushort 000006H  2
  xbus_rld_data. . . . . . . . . . . .  member         ushort 000008H  2
ENUM_BIT_ASM_INT_CLR0. . . . . . . . .  type           int    000000H  2
BIT_LCD_LPF_MODE_EN_FALL_EN1 . . . . .  enum           int    00000DH  2
SINT8. . . . . . . . . . . . . . . . .  type           char   000000H  1
BIT_LCD_SYNC_MISS_FALL_EN0 . . . . . .  enum           int    00000AH  2
FW_CFG_SPI_CLK_NE_OFFSET . . . . . . .  enum           int    000007H  2
ST_CalKmIdParam. . . . . . . . . . . .  type           struct 000000H  8
  ucLastPoint. . . . . . . . . . . . .  member         uchar  000000H  1
  ucCurrPoint. . . . . . . . . . . . .  member         uchar  000001H  1
  usLastIdPosAddr. . . . . . . . . . .  member         ushort 000002H  2
  usCurrIdPosAddr. . . . . . . . . . .  member         ushort 000004H  2
  usCalOut . . . . . . . . . . . . . .  member         ushort 000006H  2
LCD_OTP_MASTER_I2C_ADDR. . . . . . . .  enum           int    009866H  2
BIT_LCD_RUN_RISE_CLR0. . . . . . . . .  enum           int    000000H  2
BIT_LCD_BUSY_RISE_EN0. . . . . . . . .  enum           int    00000EH  2
ST_FrameData . . . . . . . . . . . . .  type           struct 000000H  5506
  CalBaseAddr. . . . . . . . . . . . .  member         array  000000H  1296
  CalBaseAddr1 . . . . . . . . . . . .  member         array  000510H  1296
  CalBaseAddr2 . . . . . . . . . . . .  member         array  000A20H  1296
  ScDiff . . . . . . . . . . . . . . .  member         array  000F30H  1296
  LastIdPos. . . . . . . . . . . . . .  member         array  001440H  40
  CurrIdPos. . . . . . . . . . . . . .  member         array  001468H  40
  CalOut . . . . . . . . . . . . . . .  member         array  001490H  242
BIT_LCD_VMID_STA . . . . . . . . . . .  enum           int    000007H  2
BIT_LCD_VDO_MODE_RISE_CLR1 . . . . . .  enum           int    000007H  2
Addr_AFE_SYS_CFG1. . . . . . . . . . .  enum           int    000005H  2
wchar_t. . . . . . . . . . . . . . . .  type           char   000000H  1
Addr_AFE_SYS_CFG0. . . . . . . . . . .  enum           int    000004H  2
BIT_LCD_DSTB_STA . . . . . . . . . . .  enum           int    00000DH  2
BIT_LCD_VEND_STA . . . . . . . . . . .  enum           int    000006H  2
Union_Spi0Reg. . . . . . . . . . . . .  type           union  000000H  14
  reg. . . . . . . . . . . . . . . . .  member         struct 000000H  14
  offset . . . . . . . . . . . . . . .  member         array  000000H  14
ST_AsmRegisters. . . . . . . . . . . .  type           struct 000000H  82
  usAsmIntFlag0. . . . . . . . . . . .  member         ushort 000000H  2
  usAsmIntFlag1. . . . . . . . . . . .  member         ushort 000002H  2
  usAsmIntClr0 . . . . . . . . . . . .  member         ushort 000004H  2
  usAsmIntClr1 . . . . . . . . . . . .  member         ushort 000006H  2
  usAsmIntEn0. . . . . . . . . . . . .  member         ushort 000008H  2
  usAsmIntEn1. . . . . . . . . . . . .  member         ushort 00000AH  2
  usAsmIntWakeEn0. . . . . . . . . . .  member         ushort 00000CH  2
  usAsmIntWakeEn1. . . . . . . . . . .  member         ushort 00000EH  2
  usAsmIntSta. . . . . . . . . . . . .  member         ushort 000010H  2
  usAsmScanSta0. . . . . . . . . . . .  member         ushort 000012H  2
  usAsmScanSta1. . . . . . . . . . . .  member         ushort 000014H  2
  usAsmScanSta2. . . . . . . . . . . .  member         ushort 000016H  2
  usAsmScanSta3. . . . . . . . . . . .  member         ushort 000018H  2
  usAsmScanCtrl. . . . . . . . . . . .  member         ushort 00001AH  2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 423 

  usAsmScanCfg0. . . . . . . . . . . .  member         ushort 00001CH  2
  usAsmScanCfg1. . . . . . . . . . . .  member         ushort 00001EH  2
  usAsmTpFrameCfg0 . . . . . . . . . .  member         ushort 000020H  2
  usAsmTpFrameCfg1 . . . . . . . . . .  member         ushort 000022H  2
  usAsmTpFrameCfg2 . . . . . . . . . .  member         ushort 000024H  2
  usAsmTpFrameCfg3 . . . . . . . . . .  member         ushort 000026H  2
  usAsmScanDly . . . . . . . . . . . .  member         ushort 000028H  2
  usAsmStbMaseL. . . . . . . . . . . .  member         ushort 00002AH  2
  usAsmStbMaseH. . . . . . . . . . . .  member         ushort 00002CH  2
  usAsmAramBaseL . . . . . . . . . . .  member         ushort 00002EH  2
  usAsmAramBaseR . . . . . . . . . . .  member         ushort 000030H  2
  usAsmAramBaseKey . . . . . . . . . .  member         ushort 000032H  2
  usAsmAramCBL . . . . . . . . . . . .  member         ushort 000034H  2
  usAsmAramCBR . . . . . . . . . . . .  member         ushort 000036H  2
  usAsmAramCBKey . . . . . . . . . . .  member         ushort 000038H  2
  usAsmReserve0. . . . . . . . . . . .  member         ushort 00003AH  2
  usAsmReserve1. . . . . . . . . . . .  member         ushort 00003CH  2
  usAsmReserve2. . . . . . . . . . . .  member         ushort 00003EH  2
  usAsmHwMonCrtl0. . . . . . . . . . .  member         ushort 000040H  2
  usAsmHwMonCtrl1. . . . . . . . . . .  member         ushort 000042H  2
  usAsmHwMonCfg0 . . . . . . . . . . .  member         ushort 000044H  2
  usAsmHwMonCfg1 . . . . . . . . . . .  member         ushort 000046H  2
  usAsmHwMonCfg2 . . . . . . . . . . .  member         ushort 000048H  2
  usAsmHwMonCfg3 . . . . . . . . . . .  member         ushort 00004AH  2
  usAsmHwMonCfg4 . . . . . . . . . . .  member         ushort 00004CH  2
  usAsmHwMonTimer. . . . . . . . . . .  member         ushort 00004EH  2
  usAsmVreshCfgLcdon . . . . . . . . .  member         ushort 000050H  2
Addr_AFE_ANA_ADC_CFG3. . . . . . . . .  enum           int    000024H  2
Addr_AFE_ANA_ADC_CFG2. . . . . . . . .  enum           int    000023H  2
BIT_LCD_BUSY_FALL_WAKE_EN0 . . . . . .  enum           int    00000FH  2
ENUM_BIT_ASM_WAKE_EN1. . . . . . . . .  type           int    000000H  2
LCD_OTP_MASTER_I2C_NE_ADDR . . . . . .  enum           int    009867H  2
Addr_AFE_ANA_ADC_CFG1. . . . . . . . .  enum           int    000022H  2
Addr_UNDERFLOW_THR . . . . . . . . . .  enum           int    000049H  2
BIT_LCD_3D_MODE_FALL_CLR1. . . . . . .  enum           int    000004H  2
ENUM_BIT_ASM_WAKE_EN0. . . . . . . . .  type           int    000000H  2
FW_CFG_SPI_IOMODE_OFFSET . . . . . . .  enum           int    00000CH  2
Addr_AFE_ANA_ADC_CFG0. . . . . . . . .  enum           int    000021H  2
BIT_LCD_BUSY_FALL_FLAG0. . . . . . . .  enum           int    00000FH  2
BIT_LCD_DSTB_RISE_WAKE_EN0 . . . . . .  enum           int    00000BH  2
BIT_LCD_PANEL_CONFLICT_STA . . . . . .  enum           int    00000EH  2
Addr_KEY_MONITOR_THRESHOLD . . . . . .  enum           int    00000CH  2
BIT_LCD_ODD_EVEN_RISE_CLR1 . . . . . .  enum           int    000009H  2
BIT_HW_MON_TIMEOUT_WAKE_EN1. . . . . .  enum           int    00000EH  2
LCD_OTP_REG_ADDR . . . . . . . . . . .  enum           int    009866H  2
Addr_TEST_P1_CFG2. . . . . . . . . . .  enum           int    00003FH  2
BIT_LCD_DSTB_RISE_FLAG0. . . . . . . .  enum           int    00000BH  2
BIT_LCD_IDLE_MODE_STA. . . . . . . . .  enum           int    000002H  2
Addr_TEST_P0_CFG2. . . . . . . . . . .  enum           int    00003CH  2
Addr_TEST_P1_CFG1. . . . . . . . . . .  enum           int    00003EH  2
BIT_LCD_VBLANK_WAKE_EN0. . . . . . . .  enum           int    000002H  2
BIT_LCD_FRAME_END_STA. . . . . . . . .  enum           int    00000BH  2
Addr_TEST_P0_CFG1. . . . . . . . . . .  enum           int    00003BH  2
Addr_TEST_P1_CFG0. . . . . . . . . . .  enum           int    00003DH  2
Addr_TEST_P0_CFG0. . . . . . . . . . .  enum           int    00003AH  2
BIT_LCD_VBLANK_FLAG0 . . . . . . . . .  enum           int    000002H  2
ENUM_AFE_ADDR. . . . . . . . . . . . .  type           int    000000H  2
BIT_LCD_STB_TICK_CLR1. . . . . . . . .  enum           int    00000BH  2
BIT_LCD_IDLE_MODE_RISE_WAKE_EN1. . . .  enum           int    000005H  2
BIT_LCD_RUN_FALL_CLR0. . . . . . . . .  enum           int    000001H  2
BIT_LCD_RUN_CLR1 . . . . . . . . . . .  enum           int    000002H  2
BIT_LCD_BUSY_FALL_EN0. . . . . . . . .  enum           int    00000FH  2
BIT_LCD_IDLE_MODE_RISE_FLAG1 . . . . .  enum           int    000005H  2
ST_CalMcPeakInfo . . . . . . . . . . .  type           struct 000000H  14
  ucMcPosPeakNum . . . . . . . . . . .  member         uchar  000000H  1
  ucMcNegPeakNum . . . . . . . . . . .  member         uchar  000001H  1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 424 

  ucMcPosAreaChNum . . . . . . . . . .  member         ushort 000002H  2
  ucMcNegAreaChNum . . . . . . . . . .  member         ushort 000004H  2
  usMCminValue . . . . . . . . . . . .  member         ushort 000006H  2
  usMCminPos . . . . . . . . . . . . .  member         ushort 000008H  2
  usMCmaxValue . . . . . . . . . . . .  member         ushort 00000AH  2
  usMCmaxPos . . . . . . . . . . . . .  member         ushort 00000CH  2
BIT_LCD_DSTB_RISE_EN0. . . . . . . . .  enum           int    00000BH  2
BIT_LCD_TCH_DET_STA. . . . . . . . . .  enum           int    00000AH  2
BIT_HW_MON_TIMEOUT_EN1 . . . . . . . .  enum           int    00000EH  2
P2_ECC_L . . . . . . . . . . . . . . .  enum           int    000009H  2
FW_CFG_SPI_IOMODE_NE_OFFSET. . . . . .  enum           int    00000DH  2
BIT_LCD_ARAM_RDY_CLR0. . . . . . . . .  enum           int    000008H  2
BIT_LCD_VDO_MODE_FALL_CLR1 . . . . . .  enum           int    000008H  2
P1_ECC_L . . . . . . . . . . . . . . .  enum           int    000005H  2
BIT_LCD_SYNC_MISS_RISE_CLR0. . . . . .  enum           int    000009H  2
BIT_LCD_VBLANK_EN0 . . . . . . . . . .  enum           int    000002H  2
FW_CFG_XBUS_CLK_OFFSET . . . . . . . .  enum           int    00000AH  2
ST_CalRegisters. . . . . . . . . . . .  type           struct 000000H  78
  rCmd . . . . . . . . . . . . . . . .  member         ushort 000000H  2
  rDmaLen. . . . . . . . . . . . . . .  member         ushort 000002H  2
  rS1Addr. . . . . . . . . . . . . . .  member         ushort 000004H  2
  rS2Addr. . . . . . . . . . . . . . .  member         ushort 000006H  2
  rOutAddr . . . . . . . . . . . . . .  member         ushort 000008H  2
  rPar . . . . . . . . . . . . . . . .  member         ushort 00000AH  2
  rSize. . . . . . . . . . . . . . . .  member         ushort 00000CH  2
  rPThd. . . . . . . . . . . . . . . .  member         ushort 00000EH  2
  rNThd. . . . . . . . . . . . . . . .  member         ushort 000010H  2
  rAThd. . . . . . . . . . . . . . . .  member         ushort 000012H  2
  rDmask . . . . . . . . . . . . . . .  member         ushort 000014H  2
  rPaCnt . . . . . . . . . . . . . . .  member         ushort 000016H  2
  rNaCnt . . . . . . . . . . . . . . .  member         ushort 000018H  2
  rPsCnt . . . . . . . . . . . . . . .  member         ushort 00001AH  2
  rNsCnt . . . . . . . . . . . . . . .  member         ushort 00001CH  2
  rMaxV. . . . . . . . . . . . . . . .  member         ushort 00001EH  2
  rMaxPos. . . . . . . . . . . . . . .  member         ushort 000020H  2
  rMinV. . . . . . . . . . . . . . . .  member         ushort 000022H  2
  rMinPos. . . . . . . . . . . . . . .  member         ushort 000024H  2
  rID0 . . . . . . . . . . . . . . . .  member         ushort 000026H  2
  rID1 . . . . . . . . . . . . . . . .  member         ushort 000028H  2
  rID2 . . . . . . . . . . . . . . . .  member         ushort 00002AH  2
  rCrc . . . . . . . . . . . . . . . .  member         ushort 00002CH  2
  rChk . . . . . . . . . . . . . . . .  member         ushort 00002EH  2
  rNaThd . . . . . . . . . . . . . . .  member         ushort 000030H  2
  rTxRxNum . . . . . . . . . . . . . .  member         ushort 000032H  2
  rDivShift. . . . . . . . . . . . . .  member         ushort 000034H  2
  rSubabsMax . . . . . . . . . . . . .  member         ushort 000036H  2
  rInt . . . . . . . . . . . . . . . .  member         ushort 000038H  2
  rCntNum. . . . . . . . . . . . . . .  member         ushort 00003AH  2
  rDmaskA. . . . . . . . . . . . . . .  member         ushort 00003CH  2
  rTxRxNumAm . . . . . . . . . . . . .  member         ushort 00003EH  2
  rTxRxNumAs . . . . . . . . . . . . .  member         ushort 000040H  2
  rSizeAm. . . . . . . . . . . . . . .  member         ushort 000042H  2
  rSizeAs. . . . . . . . . . . . . . .  member         ushort 000044H  2
  rS1AddrA . . . . . . . . . . . . . .  member         ushort 000046H  2
  rS2AddrA . . . . . . . . . . . . . .  member         ushort 000048H  2
  rOutAddrA. . . . . . . . . . . . . .  member         ushort 00004AH  2
  rSel . . . . . . . . . . . . . . . .  member         ushort 00004CH  2
Addr_ADC_CFG . . . . . . . . . . . . .  enum           int    000045H  2
Addr_OVERFLOW_CLR_FRAMENUM . . . . . .  enum           int    00004EH  2
P2_ECC_H . . . . . . . . . . . . . . .  enum           int    000008H  2
Addr_OVERFLOW_UPBOUND. . . . . . . . .  enum           int    00004AH  2
P1_ECC_H . . . . . . . . . . . . . . .  enum           int    000004H  2
Addr_OVER_POINT_FRAME. . . . . . . . .  enum           int    00004BH  2
BIT_LCD_IDLE_MODE_RISE_EN1 . . . . . .  enum           int    000005H  2
Addr_ALL_GATE_OFF_L_CFG. . . . . . . .  enum           int    00002EH  2
BIT_LCD_VMID_WAKE_EN0. . . . . . . . .  enum           int    000004H  2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 425 

Addr_ADC_DATA0 . . . . . . . . . . . .  enum           int    000046H  2
BIT_LCD_VMID_FLAG0 . . . . . . . . . .  enum           int    000004H  2
ST_CalMcMacParam . . . . . . . . . . .  type           struct 000000H  10
  ucRxStart. . . . . . . . . . . . . .  member         uchar  000000H  1
  ucTxStart. . . . . . . . . . . . . .  member         uchar  000001H  1
  ucRxLen. . . . . . . . . . . . . . .  member         uchar  000002H  1
  ucTxLen. . . . . . . . . . . . . . .  member         uchar  000003H  1
  ucNoise. . . . . . . . . . . . . . .  member         uchar  000004H  1
  ucMode . . . . . . . . . . . . . . .  member         uchar  000005H  1
  usDiffAddr . . . . . . . . . . . . .  member         ushort 000006H  2
  usCalOutAddr . . . . . . . . . . . .  member         ushort 000008H  2
Addr_AFE_DUMMY_SCAN_CFG. . . . . . . .  enum           int    000008H  2
BIT_LCD_ODD_EVEN_FALL_CLR1 . . . . . .  enum           int    00000AH  2
BIT_LCD_VEND_WAKE_EN0. . . . . . . . .  enum           int    000003H  2
Addr_MCAP_LPFIR_COF7 . . . . . . . . .  enum           int    000057H  2
BIT_LCD_DSTB_FLAG1 . . . . . . . . . .  enum           int    000001H  2
FW_CFG_BKUP_I2C_FLASH_ADDR . . . . . .  enum           int    001120H  2
Addr_ACC_OFFSET. . . . . . . . . . . .  enum           int    00000AH  2
Addr_MCAP_LPFIR_COF6 . . . . . . . . .  enum           int    000056H  2
BIT_LCD_VEND_FLAG0 . . . . . . . . . .  enum           int    000003H  2
BIT_LCD_DSTB_FAIL_WAKE_EN0 . . . . . .  enum           int    00000CH  2
P2_ECC_NE_L. . . . . . . . . . . . . .  enum           int    00000BH  2
Addr_MCAP_LPFIR_COF5 . . . . . . . . .  enum           int    000055H  2
BIT_LCD_VSTART_CLR0. . . . . . . . . .  enum           int    000005H  2
P1_ECC_NE_L. . . . . . . . . . . . . .  enum           int    000007H  2
Addr_MCAP_LPFIR_COF4 . . . . . . . . .  enum           int    000054H  2
BIT_LCD_DSTB_FAIL_FLAG0. . . . . . . .  enum           int    00000CH  2
FW_CFG_XBUS_CLK_NE_OFFSET. . . . . . .  enum           int    00000BH  2
Addr_KEY_SAMPLE_INTERVAL_6 . . . . . .  enum           int    000042H  2
Addr_MCAP_LPFIR_COF3 . . . . . . . . .  enum           int    000053H  2
Addr_MCAP_LPFIR_COF2 . . . . . . . . .  enum           int    000052H  2
BIT_LCD_PANEL_CONFLICT_WAKE_EN0. . . .  enum           int    00000DH  2
BIT_LCD_IDLE_MODE_FALL_WAKE_EN1. . . .  enum           int    000006H  2
P2_ECC_NE_H. . . . . . . . . . . . . .  enum           int    00000AH  2
APP_LEN_H. . . . . . . . . . . . . . .  enum           int    000012H  2
Addr_MCAP_LPFIR_COF1 . . . . . . . . .  enum           int    000051H  2
BIT_LCD_VMID_EN0 . . . . . . . . . . .  enum           int    000004H  2
P1_ECC_NE_H. . . . . . . . . . . . . .  enum           int    000006H  2
Addr_MCAP_LPFIR_COF0 . . . . . . . . .  enum           int    000050H  2
BIT_LCD_PANEL_CONFLICT_FLAG0 . . . . .  enum           int    00000DH  2
BIT_LCD_IDLE_MODE_FALL_FLAG1 . . . . .  enum           int    000006H  2
BIT_LCD_DSTB_EN1 . . . . . . . . . . .  enum           int    000001H  2
BIT_LCD_FRAME_END_WAKE_EN0 . . . . . .  enum           int    000007H  2
ENUM_FW_CFG_BKUP_FLASH_ADDR. . . . . .  type           int    000000H  2
BIT_LCD_VEND_EN0 . . . . . . . . . . .  enum           int    000003H  2
BIT_LCD_FRAME_END_FLAG0. . . . . . . .  enum           int    000007H  2
BIT_LCD_SYNC_MISS_FALL_CLR0. . . . . .  enum           int    00000AH  2
BIT_LCD_DSTB_FAIL_EN0. . . . . . . . .  enum           int    00000CH  2
LCD_OTP_SYS_CLK_ADDR . . . . . . . . .  enum           int    00986EH  2
BIT_LCD_BUSY_RISE_CLR0 . . . . . . . .  enum           int    00000EH  2
BIT_LCD_PANEL_CONFLICT_EN0 . . . . . .  enum           int    00000DH  2
BIT_LCD_IDLE_MODE_FALL_EN1 . . . . . .  enum           int    000006H  2
BIT_LCD_TCH_DET_WAKE_EN0 . . . . . . .  enum           int    000006H  2
Addr_AFE_SD_VOM_OPT_P1_P2_CFG. . . . .  enum           int    000027H  2
Addr_ALL_GATE_STOP_L_CFG . . . . . . .  enum           int    00002FH  2
Addr_NORMAL_SIGNAL_UPTHR . . . . . . .  enum           int    00004CH  2
Addr_AFE_ANA_SH_CFG6 . . . . . . . . .  enum           int    000020H  2
BIT_LCD_TCH_DET_FLAG0. . . . . . . . .  enum           int    000006H  2
APP_LEN_H_NE . . . . . . . . . . . . .  enum           int    000014H  2
Addr_AFE_ANA_SH_CFG5 . . . . . . . . .  enum           int    00001FH  2
Addr_ANA_STATIC_CFG3 . . . . . . . . .  enum           int    000039H  2
BIT_LCD_FRAME_END_EN0. . . . . . . . .  enum           int    000007H  2
Addr_AFE_ANA_SH_CFG4 . . . . . . . . .  enum           int    00001EH  2
Addr_ANA_STATIC_CFG2 . . . . . . . . .  enum           int    000038H  2
ENUM_LCD_OTP_ADDR. . . . . . . . . . .  type           int    000000H  2
ST_XSIRegisters. . . . . . . . . . . .  type           struct 000000H  10
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 426 

  Wdata. . . . . . . . . . . . . . . .  member         ushort 000000H  2
  Rdata. . . . . . . . . . . . . . . .  member         ushort 000002H  2
  Clksel . . . . . . . . . . . . . . .  member         ushort 000004H  2
  Stop . . . . . . . . . . . . . . . .  member         ushort 000006H  2
  Tx_int . . . . . . . . . . . . . . .  member         ushort 000008H  2
Addr_AFE_ANA_SH_CFG3 . . . . . . . . .  enum           int    00001DH  2
Addr_ANA_STATIC_CFG1 . . . . . . . . .  enum           int    000037H  2
BIT_LCD_3D_MODE_STA. . . . . . . . . .  enum           int    000001H  2
FW_CFG_I2C_FLASH_ADDR. . . . . . . . .  enum           int    000F80H  2
Addr_AFE_ANA_SH_CFG2 . . . . . . . . .  enum           int    00001CH  2
Addr_ANA_STATIC_CFG0 . . . . . . . . .  enum           int    000036H  2
Addr_RAWDATA_OFFSET_L. . . . . . . . .  enum           int    000044H  2
ST_Spi1DmaRegisters. . . . . . . . . .  type           struct 000000H  14
  dma_ctrl . . . . . . . . . . . . . .  member         ushort 000000H  2
  timeout_ctrl . . . . . . . . . . . .  member         ushort 000002H  2
  addr_h . . . . . . . . . . . . . . .  member         ushort 000004H  2
  start_addr_l . . . . . . . . . . . .  member         ushort 000006H  2
  end_addr_l . . . . . . . . . . . . .  member         ushort 000008H  2
  dma_crc. . . . . . . . . . . . . . .  member         ushort 00000AH  2
  dma_srcr . . . . . . . . . . . . . .  member         ushort 00000CH  2
Addr_PANEL_MODE_CFG2 . . . . . . . . .  enum           int    000003H  2
Addr_AFE_ANA_SH_CFG1 . . . . . . . . .  enum           int    00001BH  2
ST_Spi0DmaRegisters. . . . . . . . . .  type           struct 000000H  14
  dma_ctrl . . . . . . . . . . . . . .  member         ushort 000000H  2
  timeout_ctrl . . . . . . . . . . . .  member         ushort 000002H  2
  addr_h . . . . . . . . . . . . . . .  member         ushort 000004H  2
  start_addr_l . . . . . . . . . . . .  member         ushort 000006H  2
  end_addr_l . . . . . . . . . . . . .  member         ushort 000008H  2
  dma_crc. . . . . . . . . . . . . . .  member         ushort 00000AH  2
  dma_srcr . . . . . . . . . . . . . .  member         ushort 00000CH  2
Addr_PANEL_MODE_CFG1 . . . . . . . . .  enum           int    000002H  2
Addr_AFE_ANA_SH_CFG0 . . . . . . . . .  enum           int    00001AH  2
ST_CalMcMatrixParam. . . . . . . . . .  type           struct 000000H  14
  ucTxLen. . . . . . . . . . . . . . .  member         uchar  000000H  1
  ucRxLen. . . . . . . . . . . . . . .  member         uchar  000001H  1
  ucShift. . . . . . . . . . . . . . .  member         uchar  000002H  1
  ucCfg. . . . . . . . . . . . . . . .  member         uchar  000003H  1
  ucDataType . . . . . . . . . . . . .  member         uchar  000004H  1
  ucLineCfg. . . . . . . . . . . . . .  member         uchar  000005H  1
  usSrc1Addr . . . . . . . . . . . . .  member         ushort 000006H  2
  usSrc2Addr . . . . . . . . . . . . .  member         ushort 000008H  2
  usDstAddr. . . . . . . . . . . . . .  member         ushort 00000AH  2
  usCalCmd . . . . . . . . . . . . . .  member         ushort 00000CH  2
Addr_PANEL_MODE_CFG0 . . . . . . . . .  enum           int    000001H  2
Addr_MCAP_SCAN_CFG . . . . . . . . . .  enum           int    000040H  2
BIT_LCD_TCH_DET_EN0. . . . . . . . . .  enum           int    000006H  2
BIT_LCD_3D_MODE_RISE_WAKE_EN1. . . . .  enum           int    000003H  2
Addr_NORMAL_SIGNAL_DWTHR . . . . . . .  enum           int    00004DH  2
LCD_OTP_SYS_CLK_NE_ADDR. . . . . . . .  enum           int    00986FH  2
BIT_LCD_3D_MODE_RISE_FLAG1 . . . . . .  enum           int    000003H  2
BIT_LCD_STB_TICK_STA . . . . . . . . .  enum           int    000009H  2
BIT_LCD_RUN_STA. . . . . . . . . . . .  enum           int    000000H  2
ENUM_FW_CFG_FLASH_ADDR . . . . . . . .  type           int    000000H  2
ENUM_BIT_ASM_INT_FLAG1 . . . . . . . .  type           int    000000H  2
ENUM_BIT_ASM_INT_FLAG0 . . . . . . . .  type           int    000000H  2
Addr_AFE_BASE_TRACK_CFG. . . . . . . .  enum           int    000009H  2
Union_AsmReg . . . . . . . . . . . . .  type           union  000000H  82
  reg. . . . . . . . . . . . . . . . .  member         struct 000000H  82
  offset . . . . . . . . . . . . . . .  member         array  000000H  82
BIT_LCD_VDO_MODE_STA . . . . . . . . .  enum           int    000003H  2
LCD_OTP_SPI_CLK_ADDR . . . . . . . . .  enum           int    00986CH  2
Addr_AFE_GIPL_P1_P2_CFG. . . . . . . .  enum           int    000026H  2
BIT_LCD_RUN_RISE_WAKE_EN0. . . . . . .  enum           int    000000H  2
Addr_MCAP_SCANSR . . . . . . . . . . .  enum           int    000041H  2
BIT_LCD_BUSY_FALL_CLR0 . . . . . . . .  enum           int    00000FH  2
BIT_LCD_3D_MODE_RISE_EN1 . . . . . . .  enum           int    000003H  2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 427 

Addr_AFE_SX_P1_P2_CFG. . . . . . . . .  enum           int    000028H  2
BIT_LCD_RUN_RISE_FLAG0 . . . . . . . .  enum           int    000000H  2
BIT_LCD_DSTB_RISE_CLR0 . . . . . . . .  enum           int    00000BH  2
ENUM_BIT_ASM_INT_EN1 . . . . . . . . .  type           int    000000H  2
FW_CFG_VENDOR_OFFSET . . . . . . . . .  enum           int    000004H  2
Addr_AFE_GIPH_P1_P2_CFG. . . . . . . .  enum           int    000025H  2
BIT_HW_MON_TIMEOUT_CLR1. . . . . . . .  enum           int    00000EH  2
ENUM_BIT_ASM_INT_EN0 . . . . . . . . .  type           int    000000H  2
BIT_LCD_VDO_MODE_RISE_WAKE_EN1 . . . .  enum           int    000007H  2
UINT16 . . . . . . . . . . . . . . . .  type           ushort 000000H  2
BIT_LCD_VDO_MODE_RISE_FLAG1. . . . . .  enum           int    000007H  2
BIT_LCD_VBLANK_CLR0. . . . . . . . . .  enum           int    000002H  2
SINT16 . . . . . . . . . . . . . . . .  type           short  000000H  2
UINT32 . . . . . . . . . . . . . . . .  type           ulong  000000H  4
Addr_MCAP_INIT_SAMPL_CFG . . . . . . .  enum           int    000047H  2
BIT_LPF_MODE_EN_RISE_CLR1. . . . . . .  enum           int    00000CH  2
BIT_LCD_ODD_EVEN_STA . . . . . . . . .  enum           int    000004H  2
SINT32 . . . . . . . . . . . . . . . .  type           long   000000H  4
Addr_OVERFLOW_THR. . . . . . . . . . .  enum           int    000048H  2
BIT_LCD_VSTART_STA . . . . . . . . . .  enum           int    000008H  2
Addr_AFE_ANA_CA_CFG2 . . . . . . . . .  enum           int    000011H  2
BIT_LCD_IDLE_MODE_RISE_CLR1. . . . . .  enum           int    000005H  2
BIT_LCD_RUN_RISE_EN0 . . . . . . . . .  enum           int    000000H  2
Addr_AFE_ANA_CA_CFG1 . . . . . . . . .  enum           int    000010H  2
BIT_LCD_3D_MODE_FALL_WAKE_EN1. . . . .  enum           int    000004H  2
APP_LEN. . . . . . . . . . . . . . . .  enum           int    000000H  2
LCD_OTP_SPI_CLK_NE_ADDR. . . . . . . .  enum           int    00986DH  2
Addr_AFE_ANA_CA_CFG0 . . . . . . . . .  enum           int    00000FH  2
Addr_TEST_MODE_FLAG. . . . . . . . . .  enum           int    000033H  2
FW_CFG_BKUP_START_FLASH_ADDR . . . . .  enum           int    001120H  2
Union_LcdReg . . . . . . . . . . . . .  type           union  000000H  10
  reg. . . . . . . . . . . . . . . . .  member         struct 000000H  10
  offset . . . . . . . . . . . . . . .  member         array  000000H  10
BIT_LCD_3D_MODE_FALL_FLAG1 . . . . . .  enum           int    000004H  2
BIT_LCD_ODD_EVEN_RISE_WAKE_EN1 . . . .  enum           int    000009H  2
ST_CalMcPeakDetectParam. . . . . . . .  type           struct 000000H  18
  ucRxLen. . . . . . . . . . . . . . .  member         uchar  000000H  1
  ucTxLen. . . . . . . . . . . . . . .  member         uchar  000001H  1
  ucMaxPeakNum . . . . . . . . . . . .  member         uchar  000002H  1
  ucSearchMod. . . . . . . . . . . . .  member         uchar  000003H  1
  usDiffAddr . . . . . . . . . . . . .  member         ushort 000004H  2
  usCalOutAddr . . . . . . . . . . . .  member         ushort 000006H  2
  usNegOutAddr . . . . . . . . . . . .  member         ushort 000008H  2
  usPosThd . . . . . . . . . . . . . .  member         short  00000AH  2
  usNegThd . . . . . . . . . . . . . .  member         short  00000CH  2
  usAreaThd. . . . . . . . . . . . . .  member         ushort 00000EH  2
  usNegAreaThd . . . . . . . . . . . .  member         short  000010H  2
Addr_TP_MONITOR_THRESHOLD. . . . . . .  enum           int    00000BH  2
BIT_LCD_VDO_MODE_RISE_EN1. . . . . . .  enum           int    000007H  2
Addr_CB_ADJUST_THLD. . . . . . . . . .  enum           int    000032H  2
BIT_LCD_ODD_EVEN_RISE_FLAG1. . . . . .  enum           int    000009H  2
FW_CFG_VENDOR_NE_OFFSET. . . . . . . .  enum           int    000005H  2
Union_CalReg . . . . . . . . . . . . .  type           union  000000H  78
  reg. . . . . . . . . . . . . . . . .  member         struct 000000H  78
  offset . . . . . . . . . . . . . . .  member         array  000000H  78
Addr_AFE_ANA_K2_CFG1 . . . . . . . . .  enum           int    00000EH  2
Addr_AFE_P1_P2_DLY_CFG1. . . . . . . .  enum           int    000019H  2
Addr_AFE_P1_P2_DLY_CFG0. . . . . . . .  enum           int    000018H  2
BIT_LCD_STB_TICK_WAKE_EN1. . . . . . .  enum           int    00000BH  2
BIT_LCD_SYNC_MISS_STA. . . . . . . . .  enum           int    00000CH  2
Addr_AFE_ANA_K1_CFG0 . . . . . . . . .  enum           int    00000DH  2
BIT_LCD_RUN_FALL_WAKE_EN0. . . . . . .  enum           int    000001H  2
BIT_LCD_STB_TICK_FLAG1 . . . . . . . .  enum           int    00000BH  2
BIT_LCD_VMID_CLR0. . . . . . . . . . .  enum           int    000004H  2
BIT_LCD_3D_MODE_FALL_EN1 . . . . . . .  enum           int    000004H  2
FW_CFG_I2C_OFFSET. . . . . . . . . . .  enum           int    000000H  2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 428 

BIT_LCD_RUN_FALL_FLAG0 . . . . . . . .  enum           int    000001H  2
BIT_LCD_RUN_FLAG1. . . . . . . . . . .  enum           int    000002H  2
BIT_LCD_DSTB_CLR1. . . . . . . . . . .  enum           int    000001H  2
BIT_LCD_ODD_EVEN_RISE_EN1. . . . . . .  enum           int    000009H  2
BIT_LCD_LPF_MODE_EN_RISE_WAKE_EN1. . .  enum           int    00000CH  2
APP_NE_LEN . . . . . . . . . . . . . .  enum           int    000002H  2
Addr_ALL_GATE_ON_L_CFG . . . . . . . .  enum           int    00002DH  2
BIT_LCD_VEND_CLR0. . . . . . . . . . .  enum           int    000003H  2
BIT_LCD_ARAM_RDY_WAKE_EN0. . . . . . .  enum           int    000008H  2
BIT_LCD_VDO_MODE_FALL_WAKE_EN1 . . . .  enum           int    000008H  2
FW_CFG_SYS_CLK_OFFSET. . . . . . . . .  enum           int    000008H  2
Addr_RAWSHIFTCAF . . . . . . . . . . .  enum           int    000043H  2
BIT_LCD_SYNC_MISS_RISE_WAKE_EN0. . . .  enum           int    000009H  2
Addr_AFE_SCAN_CFG1 . . . . . . . . . .  enum           int    000007H  2
Addr_ALL_GATE_H_CFG. . . . . . . . . .  enum           int    000030H  2
BIT_LCD_ARAM_RDY_FLAG0 . . . . . . . .  enum           int    000008H  2
BIT_LCD_VDO_MODE_FALL_FLAG1. . . . . .  enum           int    000008H  2
BIT_LCD_DSTB_FAIL_CLR0 . . . . . . . .  enum           int    00000CH  2
LCD_OTP_SPI_IOMODE_ADDR. . . . . . . .  enum           int    009872H  2
Addr_AFE_SCAN_CFG0 . . . . . . . . . .  enum           int    000006H  2
BIT_LCD_SYNC_MISS_RISE_FLAG0 . . . . .  enum           int    000009H  2
BIT_LPF_MODE_EN_FALL_CLR1. . . . . . .  enum           int    00000DH  2
size_t . . . . . . . . . . . . . . . .  type           uint   000000H  2
Addr_AFE_MOUT_GIPL_CFG . . . . . . . .  enum           int    00002AH  2
Addr_MCAP_LPFIR_CFG. . . . . . . . . .  enum           int    00004FH  2
BIT_LCD_STB_TICK_EN1 . . . . . . . . .  enum           int    00000BH  2
ENUM_FW_CFG_OFFSET . . . . . . . . . .  type           int    000000H  2
BIT_LCD_PANEL_CONFLICT_CLR0. . . . . .  enum           int    00000DH  2
BIT_LCD_IDLE_MODE_FALL_CLR1. . . . . .  enum           int    000006H  2
BIT_LCD_RUN_FALL_EN0 . . . . . . . . .  enum           int    000001H  2
BIT_LCD_RUN_EN1. . . . . . . . . . . .  enum           int    000002H  2
Addr_RPT_RAWDATA_NUM . . . . . . . . .  enum           int    000031H  2
FW_CFG_START_FLASH_ADDR. . . . . . . .  enum           int    000F80H  2
Addr_AFE_MOUT_GIPH_CFG . . . . . . . .  enum           int    000029H  2
BIT_LCD_FRAME_END_CLR0 . . . . . . . .  enum           int    000007H  2
BIT_LCD_LPF_MODE_EN_RISE_EN1 . . . . .  enum           int    00000CH  2
BIT_LCD_ODD_EVEN_FALL_WAKE_EN1 . . . .  enum           int    00000AH  2
FW_CFG_I2C_NE_OFFSET . . . . . . . . .  enum           int    000001H  2
BIT_LCD_ARAM_RDY_EN0 . . . . . . . . .  enum           int    000008H  2
BIT_LCD_VDO_MODE_FALL_EN1. . . . . . .  enum           int    000008H  2
Addr_AFE_GOUT_GIPL_CFG . . . . . . . .  enum           int    00002CH  2
BIT_LCD_ODD_EVEN_FALL_FLAG1. . . . . .  enum           int    00000AH  2
BIT_LCD_SYNC_MISS_RISE_EN0 . . . . . .  enum           int    000009H  2
BIT_LCD_VSTART_WAKE_EN0. . . . . . . .  enum           int    000005H  2
FW_CFG_SYS_CLK_NE_OFFSET . . . . . . .  enum           int    000009H  2
ST_CalMatrixAMov . . . . . . . . . . .  type           struct 000000H  8
  ucS1TxLen. . . . . . . . . . . . . .  member         uchar  000000H  1
  ucS1RxLen. . . . . . . . . . . . . .  member         uchar  000001H  1
  usSrc1Addr . . . . . . . . . . . . .  member         ushort 000002H  2
  usDstAddr. . . . . . . . . . . . . .  member         ushort 000004H  2
  usDmaMask. . . . . . . . . . . . . .  member         ushort 000006H  2
FW_CFG_IOVOLTAGE_OFFSET. . . . . . . .  enum           int    000002H  2
BIT_LCD_VSTART_FLAG0 . . . . . . . . .  enum           int    000005H  2
ST_PeakData. . . . . . . . . . . . . .  type           struct 000000H  132
  aucMcPosPeak . . . . . . . . . . . .  member         array  000000H  60
  aucMcNegPeak . . . . . . . . . . . .  member         array  00003CH  60
  aucMcPeakValid . . . . . . . . . . .  member         array  000078H  4
  ucMcPosPeakNum . . . . . . . . . . .  member         uchar  00007CH  1
  ucMcNegPeakNum . . . . . . . . . . .  member         uchar  00007DH  1
  ucCurrPeakNum. . . . . . . . . . . .  member         uchar  00007EH  1
  ucLastPeakNum. . . . . . . . . . . .  member         uchar  00007FH  1
  ucMcPosAreaChNum . . . . . . . . . .  member         ushort 000080H  2
  ucMcNegAreaChNum . . . . . . . . . .  member         ushort 000082H  2
ENUM_APP_INFO. . . . . . . . . . . . .  type           int    000000H  2
LCD_OTP_SPI_IOMODE_NE_ADDR . . . . . .  enum           int    009873H  2
Addr_AFE_ANA_P1_P2_CFG5. . . . . . . .  enum           int    000017H  2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 429 

Addr_AFE_GOUT_GIPH_CFG . . . . . . . .  enum           int    00002BH  2
Addr_AFE_ANA_P1_P2_CFG4. . . . . . . .  enum           int    000016H  2
BIT_LCD_TCH_DET_CLR0 . . . . . . . . .  enum           int    000006H  2
LCD_OTP_XBUS_CLK_ADDR. . . . . . . . .  enum           int    009870H  2
Addr_AFE_ANA_P1_P2_CFG3. . . . . . . .  enum           int    000015H  2
Addr_AFE_ANA_P1_P2_CFG2. . . . . . . .  enum           int    000014H  2
BOOLEAN. . . . . . . . . . . . . . . .  type     bit   bit    000000H  1
Addr_AFE_ANA_P1_P2_CFG1. . . . . . . .  enum           int    000013H  2
BIT_LCD_ODD_EVEN_FALL_EN1. . . . . . .  enum           int    00000AH  2
BIT_LCD_LPF_MODE_EN_FALL_WAKE_EN1. . .  enum           int    00000DH  2
BIT_LCD_BUSY_STA . . . . . . . . . . .  enum           int    00000FH  2
FW_CFG_SPI_CLK_OFFSET. . . . . . . . .  enum           int    000006H  2
Union_XSIReg . . . . . . . . . . . . .  type           union  000000H  10
  reg. . . . . . . . . . . . . . . . .  member         struct 000000H  10
  offset . . . . . . . . . . . . . . .  member         array  000000H  10
Addr_AFE_ANA_P1_P2_CFG0. . . . . . . .  enum           int    000012H  2
FP64 . . . . . . . . . . . . . . . . .  type           float  000000H  4
BIT_LCD_SYNC_MISS_FALL_WAKE_EN0. . . .  enum           int    00000AH  2
BIT_LCD_VSTART_EN0 . . . . . . . . . .  enum           int    000005H  2
ENUM_BIT_ASM_INT_STA0. . . . . . . . .  type           int    000000H  2
BIT_LCD_SYNC_MISS_FALL_FLAG0 . . . . .  enum           int    00000AH  2
BIT_LCD_VBLANK_STA . . . . . . . . . .  enum           int    000005H  2
RTCCON1. . . . . . . . . . . . . . . .  sfr      data  uchar  0B6H     1
SPI0BUF. . . . . . . . . . . . . . . .  sfr      data  uchar  0A4H     1
SPI0RI_CLR . . . . . . . . . . . . . .  absbit   data  bit    0A7H.1   1
CGUCON8. . . . . . . . . . . . . . . .  sfr      data  uchar  0BFH     1
CGUCON6. . . . . . . . . . . . . . . .  sfr      data  uchar  0CEH     1
CGUCON5. . . . . . . . . . . . . . . .  sfr      data  uchar  0CDH     1
CGUCON4. . . . . . . . . . . . . . . .  sfr      data  uchar  0CCH     1
CGUCON3. . . . . . . . . . . . . . . .  sfr      data  uchar  0CBH     1
CGUCON2. . . . . . . . . . . . . . . .  sfr      data  uchar  0CAH     1
RTC_INT_EN_CPU . . . . . . . . . . . .  absbit   data  bit    09EH.2   1
CGUCON1. . . . . . . . . . . . . . . .  sfr      data  uchar  0C8H     1
CGUCON0. . . . . . . . . . . . . . . .  sfr      data  uchar  0C9H     1
RTC_WP . . . . . . . . . . . . . . . .  absbit   data  bit    09EH.0   1
MEMBIST_ERRMAP2. . . . . . . . . . . .  sfr      data  uchar  0D9H     1
MEMBIST_ERRMAP1. . . . . . . . . . . .  sfr      data  uchar  0D8H     1
WDT. . . . . . . . . . . . . . . . . .  absbit   data  bit    098H.4   1
IPLX1. . . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.2   1
RTC_32K_EN . . . . . . . . . . . . . .  absbit   data  bit    0CAH.0   1
IPLX0. . . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.0   1
ANACON9. . . . . . . . . . . . . . . .  sfr      data  uchar  0B0H     1
IPHX1. . . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.2   1
IPLT1. . . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.3   1
ANACON8. . . . . . . . . . . . . . . .  sfr      data  uchar  0A0H     1
MEMBIST_FINISH2. . . . . . . . . . . .  sfr      data  uchar  0D5H     1
IPHX0. . . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.0   1
IPLT0. . . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.1   1
ANACON7. . . . . . . . . . . . . . . .  sfr      data  uchar  0C7H     1
MEMBIST_FINISH1. . . . . . . . . . . .  sfr      data  uchar  0D4H     1
SFTRST . . . . . . . . . . . . . . . .  sfr      data  uchar  0E9H     1
ARAM_SEL . . . . . . . . . . . . . . .  absbit   data  bit    0EAH.7   1
IPHT1. . . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.3   1
P1SEL. . . . . . . . . . . . . . . . .  sfr      data  uchar  0EEH     1
IPHT0. . . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.1   1
ANACON3. . . . . . . . . . . . . . . .  sfr      data  uchar  0C3H     1
P0SEL. . . . . . . . . . . . . . . . .  sfr      data  uchar  0ECH     1
ANACON2. . . . . . . . . . . . . . . .  sfr      data  uchar  0C2H     1
Uart_IPL . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.6   1
ANACON1. . . . . . . . . . . . . . . .  sfr      data  uchar  0C1H     1
SPI0_IPL . . . . . . . . . . . . . . .  absbit   data  bit    0F8H.3   1
P1MOD. . . . . . . . . . . . . . . . .  sfr      data  uchar  0EDH     1
CLK_WP . . . . . . . . . . . . . . . .  absbit   data  bit    0CEH.0   1
SYSCON . . . . . . . . . . . . . . . .  sfr      data  uchar  098H     1
P1DIR. . . . . . . . . . . . . . . . .  sfr      data  uchar  0ADH     1
P0MOD. . . . . . . . . . . . . . . . .  sfr      data  uchar  0EBH     1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 430 

I2CCKEN. . . . . . . . . . . . . . . .  absbit   data  bit    0C8H.6   1
P0DIR. . . . . . . . . . . . . . . . .  sfr      data  uchar  0ACH     1
Uart_IPH . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.6   1
P1BUF. . . . . . . . . . . . . . . . .  sfr      data  uchar  094H     1
SPI0_IPH . . . . . . . . . . . . . . .  absbit   data  bit    0F7H.3   1
P0BUF. . . . . . . . . . . . . . . . .  sfr      data  uchar  080H     1
I2CTI. . . . . . . . . . . . . . . . .  absbit   data  bit    090H.1   1
I2CADDR. . . . . . . . . . . . . . . .  sfr      data  uchar  092H     1
I2CRI. . . . . . . . . . . . . . . . .  absbit   data  bit    090H.0   1
RTCIVL . . . . . . . . . . . . . . . .  sfr      data  uchar  09CH     1
TESTCON3 . . . . . . . . . . . . . . .  sfr      data  uchar  0E4H     1
I2C_STOP_IF. . . . . . . . . . . . . .  absbit   data  bit    0C0H.0   1
TESTCON2 . . . . . . . . . . . . . . .  sfr      data  uchar  0E3H     1
IWKSTA . . . . . . . . . . . . . . . .  sfr      data  uchar  0E5H     1
I2C_STOP_EI. . . . . . . . . . . . . .  absbit   data  bit    0E8H.0   1
WDTREL . . . . . . . . . . . . . . . .  sfr      data  uchar  09AH     1
TESTCON1 . . . . . . . . . . . . . . .  sfr      data  uchar  0E2H     1
TESTCON0 . . . . . . . . . . . . . . .  sfr      data  uchar  0E1H     1
RTCIVH . . . . . . . . . . . . . . . .  sfr      data  uchar  09DH     1
WDTCON . . . . . . . . . . . . . . . .  sfr      data  uchar  099H     1
AIF. . . . . . . . . . . . . . . . . .  sfr      data  uchar  0C0H     1
SPI0_START_CLR . . . . . . . . . . . .  absbit   data  bit    0A7H.4   1
AIE. . . . . . . . . . . . . . . . . .  sfr      data  uchar  0E8H     1
IT1. . . . . . . . . . . . . . . . . .  absbit   data  bit    088H.2   1
EX1. . . . . . . . . . . . . . . . . .  absbit   data  bit    0A8H.2   1
FT_EN_REG. . . . . . . . . . . . . . .  sfr      data  uchar  0BDH     1
RTCCON . . . . . . . . . . . . . . . .  sfr      data  uchar  09EH     1
ET2. . . . . . . . . . . . . . . . . .  absbit   data  bit    0A8H.5   1
LED_EN . . . . . . . . . . . . . . . .  sfr      data  uchar  0FEH     1
CNTCON . . . . . . . . . . . . . . . .  sfr      data  uchar  0B9H     1
MEMBIST_FAIL2. . . . . . . . . . . . .  sfr      data  uchar  0D7H     1
MEMBIST_FAIL1. . . . . . . . . . . . .  sfr      data  uchar  0D6H     1
SWDT . . . . . . . . . . . . . . . . .  absbit   data  bit    0DFH.6   1
MEMBIST_EN2. . . . . . . . . . . . . .  sfr      data  uchar  0D3H     1
MEMBIST_EN1. . . . . . . . . . . . . .  sfr      data  uchar  0D2H     1
SPI0RI . . . . . . . . . . . . . . . .  absbit   data  bit    0A2H.1   1
TDIV . . . . . . . . . . . . . . . . .  sfr      data  uchar  09BH     1
I2CSTP . . . . . . . . . . . . . . . .  absbit   data  bit    093H.0   1
XDP_STA. . . . . . . . . . . . . . . .  sfr      data  uchar  0EFH     1
TCON . . . . . . . . . . . . . . . . .  sfr      data  uchar  088H     1
TMOD . . . . . . . . . . . . . . . . .  sfr      data  uchar  089H     1
SPI0CON5 . . . . . . . . . . . . . . .  sfr      data  uchar  0A7H     1
SPI1CON4 . . . . . . . . . . . . . . .  sfr      data  uchar  0B2H     1
SPI1CON3 . . . . . . . . . . . . . . .  sfr      data  uchar  0B1H     1
SPI0CON3 . . . . . . . . . . . . . . .  sfr      data  uchar  0A5H     1
SPI1CON2 . . . . . . . . . . . . . . .  sfr      data  uchar  0B4H     1
ANACON . . . . . . . . . . . . . . . .  sfr      data  uchar  0EAH     1
PCON . . . . . . . . . . . . . . . . .  sfr      data  uchar  087H     1
SPI0CON2 . . . . . . . . . . . . . . .  sfr      data  uchar  0A3H     1
AFEACKEN . . . . . . . . . . . . . . .  absbit   data  bit    0CAH.2   1
DSV_CON. . . . . . . . . . . . . . . .  sfr      data  uchar  0DAH     1
I2C_STOP_IPL . . . . . . . . . . . . .  absbit   data  bit    0F8H.0   1
RTC_CLR. . . . . . . . . . . . . . . .  absbit   data  bit    09EH.4   1
WDT_INT_IF . . . . . . . . . . . . . .  absbit   data  bit    0C0H.4   1
WDT_INT_EI . . . . . . . . . . . . . .  absbit   data  bit    0E8H.4   1
I2C_STOP_IPH . . . . . . . . . . . . .  absbit   data  bit    0F7H.0   1
ASM_IPL. . . . . . . . . . . . . . . .  absbit   data  bit    0F8H.1   1
AIPL . . . . . . . . . . . . . . . . .  sfr      data  uchar  0F8H     1
WDT_500K_EN. . . . . . . . . . . . . .  absbit   data  bit    0CCH.6   1
I2CSEL . . . . . . . . . . . . . . . .  sfr      data  uchar  095H     1
RTC_START_STA. . . . . . . . . . . . .  absbit   data  bit    09EH.5   1
EN_32K . . . . . . . . . . . . . . . .  absbit   data  bit    0C9H.5   1
ASM_IPH. . . . . . . . . . . . . . . .  absbit   data  bit    0F7H.1   1
SSCG_CON0. . . . . . . . . . . . . . .  sfr      data  uchar  0F5H     1
AIPH . . . . . . . . . . . . . . . . .  sfr      data  uchar  0F7H     1
I2C_STATE. . . . . . . . . . . . . . .  sfr      data  uchar  0FDH     1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 431 

I2CCON . . . . . . . . . . . . . . . .  sfr      data  uchar  090H     1
UARTCON. . . . . . . . . . . . . . . .  sfr      data  uchar  0A9H     1
I2CBUF . . . . . . . . . . . . . . . .  sfr      data  uchar  091H     1
LCD_IPL. . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.4   1
ES . . . . . . . . . . . . . . . . . .  absbit   data  bit    0A8H.4   1
IPL0 . . . . . . . . . . . . . . . . .  sfr      data  uchar  0B8H     1
LCD_IPH. . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.4   1
P0_6 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.6   1
WDTSTARTEN . . . . . . . . . . . . . .  absbit   data  bit    099H.1   1
P0_5 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.5   1
P1_4 . . . . . . . . . . . . . . . . .  absbit   data  bit    094H.4   1
P0_4 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.4   1
P1_3 . . . . . . . . . . . . . . . . .  absbit   data  bit    094H.3   1
P0_3 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.3   1
P1_2 . . . . . . . . . . . . . . . . .  absbit   data  bit    094H.2   1
IPH0 . . . . . . . . . . . . . . . . .  sfr      data  uchar  0B7H     1
P0_2 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.2   1
P1_1 . . . . . . . . . . . . . . . . .  absbit   data  bit    094H.1   1
IEN1 . . . . . . . . . . . . . . . . .  sfr      data  uchar  0DFH     1
SPI0_START . . . . . . . . . . . . . .  absbit   data  bit    0A2H.4   1
IEN0 . . . . . . . . . . . . . . . . .  sfr      data  uchar  0A8H     1
RTCCKEN. . . . . . . . . . . . . . . .  absbit   data  bit    0CBH.0   1
RTC_AUTO_MODE. . . . . . . . . . . . .  absbit   data  bit    09EH.1   1
I2CSTOP. . . . . . . . . . . . . . . .  sfr      data  uchar  093H     1
EA . . . . . . . . . . . . . . . . . .  absbit   data  bit    0A8H.7   1
I2C_IPL. . . . . . . . . . . . . . . .  absbit   data  bit    0B8H.5   1
I2C_IPH. . . . . . . . . . . . . . . .  absbit   data  bit    0B7H.5   1
SPI1CON. . . . . . . . . . . . . . . .  sfr      data  uchar  0B3H     1
SPI0CON. . . . . . . . . . . . . . . .  sfr      data  uchar  0A2H     1
DrvCal_LDS?. . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MDS?. . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixAMov? . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixCompensation? . . . . . .  extern   ecode funct  000000H  
printf?. . . . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_Noise?. . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixCount?. . . . . . . . . .  extern   ecode funct  000000H  
pAsmRegs . . . . . . . . . . . . . . .  extern   edata ptr    000000H  4
rand?? . . . . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixProc? . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_Mac?. . . . . . . . . . . . . .  extern   ecode funct  000000H  
DelayMs? . . . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_Init? . . . . . . . . . . . . .  extern   ecode funct  000000H  
abs??. . . . . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixAvg?. . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixAmp?. . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixDiv?. . . . . . . . . . .  extern   ecode funct  000000H  
DrvAsmAramAvail? . . . . . . . . . . .  extern   ecode funct  000000H  
sqrt?? . . . . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixSubConst? . . . . . . . .  extern   ecode funct  000000H  
DrvAsmInterEnable1?. . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_McPeak? . . . . . . . . . . . .  extern   ecode funct  000000H  
Afe_120Hz_Run? . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_CRC16?. . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_KmID? . . . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixMaxMin? . . . . . . . . .  extern   ecode funct  000000H  
DrvAsmScanStart? . . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixCMP?. . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixMul2? . . . . . . . . . .  extern   ecode funct  000000H  
DrvCal_MatrixMul3? . . . . . . . . . .  extern   ecode funct  000000H  
Test_CAL_CHK?. . . . . . . . . . . . .  public   ecode funct  001DA4H  352
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  check. . . . . . . . . . . . . . . .  *reg*          ushort WR6      2
  max. . . . . . . . . . . . . . . . .  *reg*          ushort WR4      2
  min. . . . . . . . . . . . . . . . .  *reg*          ushort WR6      2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 432 

  max_all. . . . . . . . . . . . . . .  *reg*          ushort WR12     2
  RxMax. . . . . . . . . . . . . . . .  static   edata array  000000H  72
Test_CAL_CRC?. . . . . . . . . . . . .  public   ecode funct  001F6FH  270
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
  ResultCal. . . . . . . . . . . . . .  *reg*          ushort WR12     2
  ResultSoft . . . . . . . . . . . . .  *reg*          ushort WR14     2
I2C_ISR? . . . . . . . . . . . . . . .  public   ecode funct  005B23H  39
CalAmovAramToMem?. . . . . . . . . . .  public   ecode funct  0057D5H  135
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R10      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R7       1
  flag . . . . . . . . . . . . . . . .  static   bit   bit    000000H  1
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000000H  8
Test_CAL_SearchPeak? . . . . . . . . .  public   ecode funct  002A31H  826
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  ucPeakValidGroup . . . . . . . . . .  *reg*          uchar  R10      1
  ucPeakValidPos . . . . . . . . . . .  *reg*          uchar  R7       1
  ausNegPeaks. . . . . . . . . . . . .  static   edata array  000000H  62
  pNegPeakBuf. . . . . . . . . . . . .  auto     edata ptr    00003EH  4
  stMcPDP. . . . . . . . . . . . . . .  static   edata struct 000042H  18
  stMcPI . . . . . . . . . . . . . . .  static   edata struct 000054H  14
  g_stPeakData . . . . . . . . . . . .  static   edata struct 000062H  132
GetXorSum? . . . . . . . . . . . . . .  public   ecode funct  00207DH  79
  addr . . . . . . . . . . . . . . . .  *reg*          ulong  DR28     4
  length . . . . . . . . . . . . . . .  *reg*          ushort WR2      2
  bPram. . . . . . . . . . . . . . . .  *reg*          uchar  R11      1
  cFcs . . . . . . . . . . . . . . . .  *reg*          ushort WR6      2
  i. . . . . . . . . . . . . . . . . .  *reg*          ulong  DR24     4
Test_CAL_CMP?. . . . . . . . . . . . .  public   ecode funct  00531AH  566
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  temp . . . . . . . . . . . . . . . .  *reg*          short  WR12     2
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000000H  14
Test_CAL_MAC_1?. . . . . . . . . . . .  public   ecode funct  002284H  572
  i. . . . . . . . . . . . . . . . . .  auto     edata uchar  000000H  1
  j. . . . . . . . . . . . . . . . . .  auto     edata uchar  000001H  1
  ulSum_c. . . . . . . . . . . . . . .  auto     edata long   000002H  4
  ulSum_tx . . . . . . . . . . . . . .  auto     edata long   000006H  4
  ulSum_rx . . . . . . . . . . . . . .  *reg*          long   DR12     4
  CalParam . . . . . . . . . . . . . .  static   edata struct 00000AH  10
Test_CAL_MAC_2?. . . . . . . . . . . .  public   ecode funct  0024C0H  661
  i. . . . . . . . . . . . . . . . . .  auto     edata uchar  000000H  1
  j. . . . . . . . . . . . . . . . . .  auto     edata uchar  000001H  1
  ulSum_c. . . . . . . . . . . . . . .  auto     edata long   000002H  4
  ulSum_tx . . . . . . . . . . . . . .  auto     edata long   000006H  4
  ulSum_rx . . . . . . . . . . . . . .  *reg*          long   DR12     4
  CalParam . . . . . . . . . . . . . .  static   edata struct 00000AH  10
Test_CAL_LDS?. . . . . . . . . . . . .  public   ecode funct  0019D5H  610
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  x0 . . . . . . . . . . . . . . . . .  auto     edata ushort 000000H  2
  x1 . . . . . . . . . . . . . . . . .  auto     edata ushort 000002H  2
  y0 . . . . . . . . . . . . . . . . .  auto     edata ushort 000004H  2
  y1 . . . . . . . . . . . . . . . . .  *reg*          ushort WR12     2
  DisSoft. . . . . . . . . . . . . . .  auto     edata ushort 000006H  2
  DisCal . . . . . . . . . . . . . . .  auto     edata ushort 000008H  2
  CalParam . . . . . . . . . . . . . .  static   edata struct 00000AH  14
Test_CAL_MDS?. . . . . . . . . . . . .  public   ecode funct  001C37H  365
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  x0 . . . . . . . . . . . . . . . . .  auto     edata ushort 000000H  2
  x1 . . . . . . . . . . . . . . . . .  auto     edata ushort 000002H  2
  y0 . . . . . . . . . . . . . . . . .  auto     edata ushort 000004H  2
  y1 . . . . . . . . . . . . . . . . .  auto     edata ushort 000006H  2
  DisSoft. . . . . . . . . . . . . . .  auto     edata ushort 000008H  2
  DisCal . . . . . . . . . . . . . . .  *reg*          ushort WR12     2
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 433 

  CalParam . . . . . . . . . . . . . .  static   edata struct 00000AH  14
Test_CAL_MaxtixMov2? . . . . . . . . .  public   ecode funct  0009CCH  322
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
  CalParam . . . . . . . . . . . . . .  static   edata struct 000000H  14
Test_CAL_AVG_RX? . . . . . . . . . . .  public   ecode funct  003242H  1236
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slSumDiff. . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssAvgBuf . . . . . . . . . . . . . .  auto     edata array  000004H  72
  CalParam . . . . . . . . . . . . . .  auto     edata struct 00004CH  14
Test_CAL_AVG_TX? . . . . . . . . . . .  public   ecode funct  002D6BH  1239
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slSumDiff. . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssAvgBuf . . . . . . . . . . . . . .  auto     edata array  000004H  36
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000028H  14
GetCrc16?. . . . . . . . . . . . . . .  public   ecode funct  001F04H  107
  addr . . . . . . . . . . . . . . . .  *reg*          ulong  DR28     4
  length . . . . . . . . . . . . . . .  *reg*          ushort WR2      2
  bPram. . . . . . . . . . . . . . . .  *reg*          uchar  R11      1
  cFcs . . . . . . . . . . . . . . . .  *reg*          ushort WR6      2
  i. . . . . . . . . . . . . . . . . .  *reg*          ulong  DR24     4
  j. . . . . . . . . . . . . . . . . .  *reg*          ulong  DR20     4
Test_CAL_MIN_RX? . . . . . . . . . . .  public   ecode funct  004434H  830
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slTemp . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssMinBuf . . . . . . . . . . . . . .  auto     edata array  000004H  72
  CalParam . . . . . . . . . . . . . .  auto     edata struct 00004CH  14
Test_CAL_XORSUM? . . . . . . . . . . .  public   ecode funct  0020CCH  440
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
  ResultCal. . . . . . . . . . . . . .  *reg*          ushort WR12     2
  ResultSoft . . . . . . . . . . . . .  *reg*          ushort WR14     2
Test_CAL_MAX_RX? . . . . . . . . . . .  public   ecode funct  004ADEH  806
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slTemp . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssMaxBuf . . . . . . . . . . . . . .  auto     edata array  000004H  72
  CalParam . . . . . . . . . . . . . .  auto     edata struct 00004CH  14
Test_CAL_MIN_TX? . . . . . . . . . . .  public   ecode funct  0040E5H  847
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slTemp . . . . . . . . . . . . . . .  *reg*          short  WR12     2
  ssMinBuf . . . . . . . . . . . . . .  auto     edata array  000000H  36
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000024H  14
Test_CAL_MAX_TX? . . . . . . . . . . .  public   ecode funct  004772H  876
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  slTemp . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssMaxBuf . . . . . . . . . . . . . .  auto     edata array  000004H  36
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000028H  14
ISR_LcdRun_IRQHandler? . . . . . . . .  public   ecode funct  005A8FH  148
  usAsmIntEn1. . . . . . . . . . . . .  *reg*          ushort WR4      2
  usAsmIntFlag1. . . . . . . . . . . .  *reg*          ushort WR6      2
SPI0_IRQHandler? . . . . . . . . . . .  public   ecode funct  005BEEH  24
I2C_STOP_ISR?. . . . . . . . . . . . .  public   ecode funct  005B4AH  12
Test_CAL_MaxtixAdd?. . . . . . . . . .  public   ecode funct  000000H  603
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  shift. . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  temp . . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  CalParam . . . . . . . . . . . . . .  static   edata struct 000004H  14
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 434 

  counter. . . . . . . . . . . . . . .  static   edata uchar  00001DH  1
Test_CAL_Count?. . . . . . . . . . . .  public   ecode funct  004E04H  369
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  CountMax . . . . . . . . . . . . . .  auto     edata short  000000H  2
  CountMin . . . . . . . . . . . . . .  auto     edata short  000002H  2
  CalCountNum. . . . . . . . . . . . .  auto     edata ushort 000004H  2
  SofCountNum. . . . . . . . . . . . .  *reg*          ushort WR12     2
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000006H  14
RtcInit? . . . . . . . . . . . . . . .  public   ecode funct  00585CH  38
Test_CAL_ID? . . . . . . . . . . . . .  public   ecode funct  002755H  732
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  ucLastNum. . . . . . . . . . . . . .  *reg*          uchar  R12      1
  ucCurrNum. . . . . . . . . . . . . .  *reg*          uchar  R13      1
  ucMaxNum . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  stKmIDp. . . . . . . . . . . . . . .  static   edata struct 000000H  8
  id . . . . . . . . . . . . . . . . .  auto     edata uchar  000008H  1
  id . . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
DrvIntPriority?. . . . . . . . . . . .  public   ecode funct  0058A2H  63
WDT_Feed?. . . . . . . . . . . . . . .  public   ecode funct  0058F7H  6
Exint0_IRQHandler? . . . . . . . . . .  public   ecode funct  005A4CH  1
Exint1_IRQHandler? . . . . . . . . . .  public   ecode funct  005A4DH  66
Test_CAL_AVG2_RX?. . . . . . . . . . .  public   ecode funct  003C0AH  1243
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  removalData. . . . . . . . . . . . .  *reg*          uchar  R14      1
  slSumDiff. . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssAvgBuf . . . . . . . . . . . . . .  auto     edata array  000004H  72
  CalParam . . . . . . . . . . . . . .  auto     edata struct 00004CH  14
Test_CAL_AVG2_TX?. . . . . . . . . . .  public   ecode funct  003716H  1268
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  removalData. . . . . . . . . . . . .  *reg*          uchar  R14      1
  slSumDiff. . . . . . . . . . . . . .  auto     edata long   000000H  4
  ssAvgBuf . . . . . . . . . . . . . .  auto     edata array  000004H  36
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000028H  14
Test_CAL_MaxtixAmp?. . . . . . . . . .  public   ecode funct  00052BH  561
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  shift. . . . . . . . . . . . . . . .  auto     edata uchar  000000H  1
  mul. . . . . . . . . . . . . . . . .  *reg*          short  WR12     2
  temp . . . . . . . . . . . . . . . .  auto     edata long   000001H  4
  CalParam . . . . . . . . . . . . . .  static   edata struct 000005H  14
  counter. . . . . . . . . . . . . . .  static   edata uchar  00001FH  1
Test_CAL?. . . . . . . . . . . . . . .  public   ecode funct  0058FDH  335
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
LcdIntInit?. . . . . . . . . . . . . .  public   ecode funct  005882H  11
Test_CAL_MaxtixDiv?. . . . . . . . . .  public   ecode funct  00075CH  363
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  Div. . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  CalParam . . . . . . . . . . . . . .  static   edata struct 000000H  14
DrvScanCtrl_IRQHandler?. . . . . . . .  public   ecode funct  005B56H  152
  usAsmIntEn0. . . . . . . . . . . . .  *reg*          ushort WR12     2
  usAsmIntFlag0. . . . . . . . . . . .  *reg*          ushort WR14     2
Test_CAL_MaxtixSub?. . . . . . . . . .  public   ecode funct  00025BH  720
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  shift. . . . . . . . . . . . . . . .  auto     edata uchar  000000H  1
  usSubMax . . . . . . . . . . . . . .  *reg*          ushort WR12     2
  temp . . . . . . . . . . . . . . . .  auto     edata short  000001H  2
  CalParam . . . . . . . . . . . . . .  static   edata struct 000003H  14
  counter. . . . . . . . . . . . . . .  static   edata uchar  00001EH  1
Test_CAL_MaxtixCom_1?. . . . . . . . .  public   ecode funct  00119AH  632
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 435 

  step . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  Threshlod. . . . . . . . . . . . . .  *reg*          uchar  R12      1
  CalParam . . . . . . . . . . . . . .  static   edata struct 000000H  14
WDT_Init?. . . . . . . . . . . . . . .  public   ecode funct  0058E1H  22
Test_CAL_MaxtixCom_2?. . . . . . . . .  public   ecode funct  001412H  1475
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  Threshlod. . . . . . . . . . . . . .  *reg*          uchar  R13      1
  CalParam . . . . . . . . . . . . . .  static   edata struct 000000H  14
Test_CAL_MaxtixMov?. . . . . . . . . .  public   ecode funct  0008C7H  261
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  flag . . . . . . . . . . . . . . . .  auto     bit   bit    000000H  1
  CalParam . . . . . . . . . . . . . .  static   edata struct 000000H  14
Test_CAL_SubConst? . . . . . . . . . .  public   ecode funct  004F75H  933
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  temp . . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  CalParam . . . . . . . . . . . . . .  auto     edata struct 000004H  14
DrvClearIICState?. . . . . . . . . . .  public   ecode funct  0057C8H  13
I2cInit? . . . . . . . . . . . . . . .  public   ecode funct  00588DH  21
Test_CAL_MaxtixMul_PtoP1?. . . . . . .  public   ecode funct  000B0EH  1081
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  ucShift. . . . . . . . . . . . . . .  auto     edata uchar  000000H  1
  tmp. . . . . . . . . . . . . . . . .  *reg*          short  WR12     2
  CalParam . . . . . . . . . . . . . .  static   edata struct 000001H  14
  counter. . . . . . . . . . . . . . .  static   edata uchar  000020H  1
Test_CAL_MaxtixMul_PtoP2?. . . . . . .  public   ecode funct  000F47H  595
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  ucShift. . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  tmp. . . . . . . . . . . . . . . . .  auto     edata short  000000H  2
  CalParam . . . . . . . . . . . . . .  static   edata struct 000002H  14
  counter. . . . . . . . . . . . . . .  static   edata uchar  000021H  1
Test_CAL_MaxtixMul_PtoP3?. . . . . . .  public   ecode funct  005550H  632
  i. . . . . . . . . . . . . . . . . .  *reg*          uchar  R13      1
  j. . . . . . . . . . . . . . . . . .  *reg*          uchar  R15      1
  ucShift. . . . . . . . . . . . . . .  *reg*          uchar  R14      1
  tmp. . . . . . . . . . . . . . . . .  auto     edata long   000000H  4
  CalParam . . . . . . . . . . . . . .  static   edata struct 000004H  14
  counter. . . . . . . . . . . . . . .  static   edata uchar  000022H  1
g_stFrmData. . . . . . . . . . . . . .  public   edata struct 000000H  5506
g_ucRawdata. . . . . . . . . . . . . .  public   edata array  000000H  1296
T_tempOut. . . . . . . . . . . . . . .  public   edata ptr    000000H  4
g_ucCalFlag. . . . . . . . . . . . . .  public   edata uchar  000004H  1
g_pAfeAram . . . . . . . . . . . . . .  public   edata ptr    000005H  4
g_I2cCnt . . . . . . . . . . . . . . .  public   edata ulong  000009H  4
pSpi0_DmaRegs. . . . . . . . . . . . .  public   edata ptr    00000DH  4
T_tempbuf1 . . . . . . . . . . . . . .  public   edata ptr    000011H  4
T_tempbuf2 . . . . . . . . . . . . . .  public   edata ptr    000015H  4
T_tempbuf3 . . . . . . . . . . . . . .  public   edata ptr    000019H  4


Module Information          Static   Overlayable
------------------------------------------------
  code size            =        30     ------
  ecode size           =     23558     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =      6837       1204
  bit size             =         1          6
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V5.4.0.1,  Test_CAL                                                          23/05/17  14:19:41  PAGE 436 

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =      4263     ------
End of Module Information.


C251 COMPILATION COMPLETE.  28 WARNING(S),  0 ERROR(S)
