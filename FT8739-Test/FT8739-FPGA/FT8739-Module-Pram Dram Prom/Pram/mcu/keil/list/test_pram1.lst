C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 1   


C251 COMPILER V5.54.0.0, COMPILATION OF MODULE test_pram1
OBJECT MODULE PLACED IN .\obj\test_pram1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C251\BIN\C251.EXE ..\..\src\test_pram1.c XSMALL ROM(HUGE) OPTIMIZE(3,SP
                    -EED) BROWSE INCDIR(..\..\src) STRING(FAR) DEBUG CODE LISTINCLUDE SYMBOLS PRINT(.\list\test_pram1.lst) TABS(2) PREPRINT(.
                    -\list\test_pram1.i) OBJECT(.\obj\test_pram1.obj) 

stmt  level    source

    1          /*******************************************************************************
    2          * Copyright (C) 2012-2013, FocalTech Systems (R)，All Rights Reserved.
    3          *
    4          * File Name: test_pram1.c
    5          *
    6          *    Author: xinkunpeng
    7          *
    8          *   Created: 2017-01-23
    9          *
   10          *  Abstract:
   11          *
   12          * Reference:
   13          *
   14          * Version: 0.2: Transplant from FT5412 by linjianjun
   15          *******************************************************************************/
   16          
   17          /*******************************************************************************
   18          * 1.Included header files
   19          *******************************************************************************/
   20          #include "global.h"
    1       =1 /*******************************************************************************
    2       =1 * Copyright (C) 2012-2014, FocalTech Systems (R),All Rights Reserved.
    3       =1 *
    4       =1 * File Name: Test_Afe.h
    5       =1 *
    6       =1 *    Author: xinkunpeng
    7       =1 *
    8       =1 *   Created: 2014-05-15
    9       =1 *
   10       =1 *  Abstract:
   11       =1 *
   12       =1 * Reference:
   13       =1 *
   14       =1 *   Version:
   15       =1 *******************************************************************************/
   16       =1 #ifndef __GLOBAL_H__
   17       =1 #define __GLOBAL_H___
   18       =1 
   19       =1 /*******************************************************************************
   20       =1 * 1.Included files
   21       =1 *******************************************************************************/
   22       =1 #include <intrins.h>
    1       =2 /*--------------------------------------------------------------------------
    2       =2 INTRINS.H
    3       =2 
    4       =2 Intrinsic functions for C251 Version 3.
    5       =2 Copyright (c) 1995-2001 Keil Elektronik GmbH and Keil Software, Inc.
    6       =2 All rights reserved.
    7       =2 --------------------------------------------------------------------------*/
    8       =2 
    9       =2 #pragma SAVE
   10       =2 #pragma PARM251
   11       =2 
   12       =2 #if __C251__ >= 200
   13       =2 #pragma FUNCTIONS(STATIC)
   14       =2 /* intrinsic functions are reentrant, but need static attribute */
   15       =2 #endif
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 2   

   16       =2 
   17       =2 extern void          _nop_     (void);
   18       =2 extern bit           _testbit_ (bit);
   19       =2 extern unsigned char _cror_    (unsigned char, unsigned char);
   20       =2 extern unsigned int  _iror_    (unsigned int,  unsigned char);
   21       =2 extern unsigned long _lror_    (unsigned long, unsigned char);
   22       =2 extern unsigned char _crol_    (unsigned char, unsigned char);
   23       =2 extern unsigned int  _irol_    (unsigned int,  unsigned char);
   24       =2 extern unsigned long _lrol_    (unsigned long, unsigned char);
   25       =2 extern unsigned char _chkfloat_  (float x)  reentrant;
   26       =2 extern unsigned char _chkdouble_ (double x) reentrant;
   27       =2 
   28       =2 #pragma RESTORE
   23       =1 
   24       =1 /*******************************************************************************
   25       =1 * 2.Private constant and macro definitions using #define
   26       =1 *******************************************************************************/
   27       =1 sfr CGUCON4 = 0xCC;
   28       =1 sfr P0BUF   = 0x80;
   29       =1 sfr P0DIR   = 0xAC;
   30       =1 sfr P0MOD   = 0xEB;
   31       =1 sfr P0SEL   = 0xEC;
   32       =1 sfr P1BUF   = 0x94;   /*P1Buf*/
   33       =1 sfr P1DIR   = 0xAD;   /*P1口方向配置，1:输出, 0:输入*/
   34       =1 sfr P1MOD   = 0xED;   /*0:P1 use as gpio;1:p1 use as function define*/
   35       =1 sfr P1SEL   = 0xEE;   /*0:P1 as OD port; 1:P1 as PUSH-PULL port*/
   36       =1 
   37       =1 
   38       =1 sbit P0_0 = P0BUF^0;
   39       =1 sbit P0_1 = P0BUF^1;
   40       =1 sbit P0_2 = P0BUF^2;
   41       =1 sbit P0_3 = P0BUF^3;
   42       =1 sbit P0_4 = P0BUF^4;
   43       =1 sbit P0_5 = P0BUF^5;
   44       =1 sbit P0_6 = P0BUF^6;
   45       =1 sbit P0_7 = P0BUF^7;
   46       =1 
   47       =1 sbit P1_0 = P1BUF^0;
   48       =1 sbit P1_1 = P1BUF^1;
   49       =1 sbit P1_2 = P1BUF^2;
   50       =1 sbit P1_3 = P1BUF^3;
   51       =1 sbit P1_4 = P1BUF^4;
   52       =1 sbit P1_5 = P1BUF^5;
   53       =1 sbit P1_6 = P1BUF^6;
   54       =1 sbit P1_7 = P1BUF^7;
   55       =1 
   56       =1 
   57       =1 #define DRAM  data     // data can be mapped directly to the 251 data space
   58       =1 #define XRAM  near     // xdata uses MOVX or MOV @DR56, use 251 near instead
   59       =1 #define PRAM  near     // pdata uses MOVX Ri, use 251 near instead
   60       =1 #define CROM  code     // code uses MOVC A, use 251 const instead
   61       =1 #define ECODE ecode
   62       =1 
   63       =1 /*APP info*/
   64       =1 #define APP_VERIF_ADDR         0xFEE900  // Verification Info
   65       =1 #define APP_VERIF_LEN          0x20
   66       =1 #define FW_CFG_TOTAL_SIZE      0x80
   67       =1 
   68       =1 /* test pram setting */
   69       =1 #define PRAM1_START_ADDR       (UINT32)0xFEE800
   70       =1 #define PRAM2_START_ADDR       (UINT32)0xFF0000
   71       =1 
   72       =1 #define PRAM1_CODE_LEN         0x300    //PRAM1中要搬运代码的长度
   73       =1 #define PRAM2_CODE_LEN         0x200    //PRAM2中要搬运代码的长度
   74       =1 
   75       =1 #define PRAM1_COPY_ADDR        (UINT32)0xFF2000  //PRAM1中的代码放到PRAM2中的指定起始位置
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 3   

   76       =1 #define PRAM2_COPY_ADDR        (UINT32)0xFEF000  //PRAM2中的代码放到PRAM1中的指定位置
   77       =1 
   78       =1 #define PRAM1_TEST_LEN         (PRAM2_START_ADDR - PRAM1_START_ADDR)
   79       =1 #define PRAM2_TEST_LEN         (0xFFFFFF - PRAM2_START_ADDR)
   80       =1 
   81       =1 #define PRAM_ADDR8(n)          (*((UINT8 far *)((UINT32)0xFEE800 + n)))
   82       =1 #define PRAM_ADDR16(n)         (*((UINT16 far *)((UINT32)0xFEE800 + n)))
   83       =1 
   84       =1 #define TEST_PATTERN1          0x55
   85       =1 #define TEST_PATTERN2          0xAA
   86       =1 /*******************************************************************************
   87       =1 * 3.Private enumerations, structures and unions using typedef
   88       =1 *******************************************************************************/
   89       =1 typedef unsigned char  UINT8;
   90       =1 typedef unsigned short UINT16;
   91       =1 typedef unsigned long  UINT32;
   92       =1 
   93       =1 /*******************************************************************************
   94       =1 * 4.Global variable extern declarations
   95       =1 *******************************************************************************/
   96       =1 
   97       =1 /*******************************************************************************
   98       =1 * 5.Global function prototypes
   99       =1 *******************************************************************************/
  100       =1 void test_pram1(void);
  101       =1 void test_pram2(void);
  102       =1 #endif
   21          /*******************************************************************************
   22          * 2.Private constant and macro definitions using #define
   23          *******************************************************************************/
   24          
   25          /*******************************************************************************
   26          * 3.Private enumerations, structures and unions using typedef
   27          *******************************************************************************/
   28          
   29          /*******************************************************************************
   30          * 4.Static variables
   31          *******************************************************************************/
   32          
   33          
   34          /*******************************************************************************
   35          * 5.Global variable or extern global variabls/functions
   36          *******************************************************************************/
   37          
   38          
   39          /*******************************************************************************
   40          * Name: test_pram1
   41          * Brief:
   42          * Input:
   43          * Output:
   44          * Return:
   45          *******************************************************************************/
   46          void test_pram1(void)
   47          {
   48   1          UINT16 i = 0;
   49   1          UINT32 src_addr;
   50   1          UINT32 dest_addr;
   51   1      
   52   1          src_addr = PRAM1_START_ADDR - 0xFEE800;
   53   1          dest_addr = PRAM1_COPY_ADDR - 0xFEE800;
   54   1      
   55   1          P0_6 = 0;
   56   1          P0_7 = 0;
   57   1          /*先把pram1中的代码段搬运到pram2中*/
   58   1          for(i = 0; i < PRAM1_CODE_LEN ; i++)
   59   1          {
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 4   

   60   2              PRAM_ADDR8(dest_addr + i) = PRAM_ADDR8(src_addr + i);
   61   2          }
   62   1      
   63   1          /* pram1 test*/
   64   1          for(i = 0; i < PRAM1_TEST_LEN; i++)
   65   1          {
   66   2              PRAM_ADDR8(src_addr + i) = TEST_PATTERN1;
   67   2          }
   68   1      
   69   1          for(i = 0; i < PRAM1_CODE_LEN; i++)
   70   1          {
   71   2              if(PRAM_ADDR8(src_addr + i) != TEST_PATTERN1)
   72   2              {
   73   3                  P0_0 = 0;
   74   3                  P0_1 = 1;
   75   3                  while(1);
   76   3              }
   77   2              else
   78   2              {
   79   3                  P0_0 = ~ P0_0;
   80   3              }
   81   2          }
   82   1      
   83   1      
   84   1      
   85   1          for(i = 0; i < PRAM1_TEST_LEN; i++)
   86   1          {
   87   2              PRAM_ADDR8(src_addr + i) = TEST_PATTERN2;
   88   2          }
   89   1      
   90   1          for(i = 0; i < PRAM1_CODE_LEN; i++)
   91   1          {
   92   2              if(PRAM_ADDR8(src_addr + i) != TEST_PATTERN2)
   93   2              {
   94   3                  P0_0 = 1;
   95   3                  P0_1 = 0;
   96   3                  while(1);
   97   3              }
   98   2              else
   99   2              {
  100   3                  P0_0 = ~ P0_0;
  101   3              }        
  102   2          }
  103   1        
  104   1          /* 把原来pram1的代码段搬回来 */
  105   1          for(i = 0; i < PRAM1_CODE_LEN ; i++)
  106   1          {
  107   2              PRAM_ADDR8(src_addr + i) = PRAM_ADDR8(dest_addr + i);
  108   2          }
  109   1         
  110   1      }
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


;       FUNCTION test_pram1? (BEGIN)
                                                ; SOURCE LINE # 46
                                                ; SOURCE LINE # 47
                                                ; SOURCE LINE # 48
000000 6D33           XRL      WR6,WR6
;---- Variable 'i' assigned to Register 'WR6' ----
                                                ; SOURCE LINE # 52
000002 9F00           SUB      DR0,DR0
;---- Variable 'src_addr' assigned to Register 'DR0' ----
                                                ; SOURCE LINE # 53
000004 7E783800       MOV      DR28,#03800H
;---- Variable 'dest_addr' assigned to Register 'DR28' ----
                                                ; SOURCE LINE # 55
000008 C286           CLR      P0_6
                                                ; SOURCE LINE # 56
00000A C287           CLR      P0_7
                                                ; SOURCE LINE # 58
00000C 6D33           XRL      WR6,WR6
00000E 8028           SJMP     ?C0003
               ?C0004:
                                                ; SOURCE LINE # 60
000010 7F60           MOV      DR24,DR0
000012 2EC400FE       ADD      WR24,#0FEH
000016 2E68E800       ADD      DR24,#0E800H
00001A 7D53           MOV      WR10,WR6
00001C 6D44           XRL      WR8,WR8
00001E 2F26           ADD      DR8,DR24
000020 7E2B50         MOV      R5,@DR8
000023 7F67           MOV      DR24,DR28
000025 2EC400FE       ADD      WR24,#0FEH
000029 2E68E800       ADD      DR24,#0E800H
00002D 7D53           MOV      WR10,WR6
00002F 6D44           XRL      WR8,WR8
000031 2F26           ADD      DR8,DR24
000033 7A2B50         MOV      @DR8,R5
                                                ; SOURCE LINE # 61
000036 0B34           INC      WR6,#01H
               ?C0003:
000038 BE340300       CMP      WR6,#0300H
00003C 40D2           JC       ?C0004
                                                ; SOURCE LINE # 64
00003E 6D33           XRL      WR6,WR6
000040 8018           SJMP     ?C0008
               ?C0009:
                                                ; SOURCE LINE # 66
000042 7E5055         MOV      R5,#055H
000045 7F60           MOV      DR24,DR0
000047 2EC400FE       ADD      WR24,#0FEH
00004B 2E68E800       ADD      DR24,#0E800H
00004F 7D53           MOV      WR10,WR6
000051 6D44           XRL      WR8,WR8
000053 2F26           ADD      DR8,DR24
000055 7A2B50         MOV      @DR8,R5
                                                ; SOURCE LINE # 67
000058 0B34           INC      WR6,#01H
               ?C0008:
00005A BE341800       CMP      WR6,#01800H
00005E 40E2           JC       ?C0009
                                                ; SOURCE LINE # 69
000060 6D33           XRL      WR6,WR6
000062 8022           SJMP     ?C0013
               ?C0014:
                                                ; SOURCE LINE # 71
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 6   

000064 7F60           MOV      DR24,DR0
000066 2EC400FE       ADD      WR24,#0FEH
00006A 2E68E800       ADD      DR24,#0E800H
00006E 7D53           MOV      WR10,WR6
000070 6D44           XRL      WR8,WR8
000072 2F26           ADD      DR8,DR24
000074 7E2BB0         MOV      R11,@DR8         ; A=R11
000077 BEB055         CMP      R11,#055H        ; A=R11
00007A 6806           JE       ?C0016
                                                ; SOURCE LINE # 73
00007C C280           CLR      P0_0
                                                ; SOURCE LINE # 74
00007E D281           SETB     P0_1
                                                ; SOURCE LINE # 75
               ?C0017:
000080 80FE           SJMP     ?C0017
               ?C0016:
                                                ; SOURCE LINE # 79
000082 B280           CPL      P0_0
                                                ; SOURCE LINE # 80
                                                ; SOURCE LINE # 81
000084 0B34           INC      WR6,#01H
               ?C0013:
000086 BE340300       CMP      WR6,#0300H
00008A 40D8           JC       ?C0014
                                                ; SOURCE LINE # 85
00008C 6D33           XRL      WR6,WR6
00008E 8018           SJMP     ?C0024
               ?C0025:
                                                ; SOURCE LINE # 87
000090 7E50AA         MOV      R5,#0AAH
000093 7F60           MOV      DR24,DR0
000095 2EC400FE       ADD      WR24,#0FEH
000099 2E68E800       ADD      DR24,#0E800H
00009D 7D53           MOV      WR10,WR6
00009F 6D44           XRL      WR8,WR8
0000A1 2F26           ADD      DR8,DR24
0000A3 7A2B50         MOV      @DR8,R5
                                                ; SOURCE LINE # 88
0000A6 0B34           INC      WR6,#01H
               ?C0024:
0000A8 BE341800       CMP      WR6,#01800H
0000AC 40E2           JC       ?C0025
                                                ; SOURCE LINE # 90
0000AE 6D33           XRL      WR6,WR6
0000B0 8022           SJMP     ?C0029
               ?C0030:
                                                ; SOURCE LINE # 92
0000B2 7F60           MOV      DR24,DR0
0000B4 2EC400FE       ADD      WR24,#0FEH
0000B8 2E68E800       ADD      DR24,#0E800H
0000BC 7D53           MOV      WR10,WR6
0000BE 6D44           XRL      WR8,WR8
0000C0 2F26           ADD      DR8,DR24
0000C2 7E2BB0         MOV      R11,@DR8         ; A=R11
0000C5 BEB0AA         CMP      R11,#0AAH        ; A=R11
0000C8 6806           JE       ?C0032
                                                ; SOURCE LINE # 94
0000CA D280           SETB     P0_0
                                                ; SOURCE LINE # 95
0000CC C281           CLR      P0_1
                                                ; SOURCE LINE # 96
               ?C0033:
0000CE 80FE           SJMP     ?C0033
               ?C0032:
                                                ; SOURCE LINE # 100
C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 7   

0000D0 B280           CPL      P0_0
                                                ; SOURCE LINE # 101
                                                ; SOURCE LINE # 102
0000D2 0B34           INC      WR6,#01H
               ?C0029:
0000D4 BE340300       CMP      WR6,#0300H
0000D8 40D8           JC       ?C0030
                                                ; SOURCE LINE # 105
0000DA 6D33           XRL      WR6,WR6
0000DC 8028           SJMP     ?C0040
               ?C0041:
                                                ; SOURCE LINE # 107
0000DE 7F67           MOV      DR24,DR28
0000E0 2EC400FE       ADD      WR24,#0FEH
0000E4 2E68E800       ADD      DR24,#0E800H
0000E8 7D53           MOV      WR10,WR6
0000EA 6D44           XRL      WR8,WR8
0000EC 2F26           ADD      DR8,DR24
0000EE 7E2B50         MOV      R5,@DR8
0000F1 7F60           MOV      DR24,DR0
0000F3 2EC400FE       ADD      WR24,#0FEH
0000F7 2E68E800       ADD      DR24,#0E800H
0000FB 7D53           MOV      WR10,WR6
0000FD 6D44           XRL      WR8,WR8
0000FF 2F26           ADD      DR8,DR24
000101 7A2B50         MOV      @DR8,R5
                                                ; SOURCE LINE # 108
000104 0B34           INC      WR6,#01H
               ?C0040:
000106 BE340300       CMP      WR6,#0300H
00010A 40D2           JC       ?C0041
                                                ; SOURCE LINE # 110
00010C AA             ERET     
;       FUNCTION test_pram1? (END)

C251 COMPILER V5.54.0.0,  test_pram1                                                       03/02/17  16:43:29  PAGE 8   

Name                                    Class    Space Type   Offset   Size
---------------------------------------------------------------------------

UINT8. . . . . . . . . . . . . . . . .  type           uchar  000000H  1
UINT16 . . . . . . . . . . . . . . . .  type           ushort 000000H  2
UINT32 . . . . . . . . . . . . . . . .  type           ulong  000000H  4
P1BUF. . . . . . . . . . . . . . . . .  sfr      data  uchar  094H     1
P0BUF. . . . . . . . . . . . . . . . .  sfr      data  uchar  080H     1
P0_7 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.7   1
P0_6 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.6   1
P0_1 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.1   1
P0_0 . . . . . . . . . . . . . . . . .  absbit   data  bit    080H.0   1
test_pram1?. . . . . . . . . . . . . .  public   ecode funct  000000H  269
  i. . . . . . . . . . . . . . . . . .  *reg*          ushort WR6      2
  src_addr . . . . . . . . . . . . . .  *reg*          ulong  DR0      4
  dest_addr. . . . . . . . . . . . . .  *reg*          ulong  DR28     4


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       269     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
